var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    var desc = Object.getOwnPropertyDescriptor(m, k);
    if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
      desc = { enumerable: true, get: function() { return m[k]; } };
    }
    Object.defineProperty(o, k2, desc);
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __exportStar = (this && this.__exportStar) || function(m, exports) {
    for (var p in m) if (p !== "default" && !Object.prototype.hasOwnProperty.call(exports, p)) __createBinding(exports, m, p);
};
var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};
define("@scom/scom-swap/contracts/oswap-openswap-contract/contracts/OpenSwap.json.ts", ["require", "exports"], function (require, exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    ///<amd-module name='@scom/scom-swap/contracts/oswap-openswap-contract/contracts/OpenSwap.json.ts'/> 
    exports.default = {
        "abi": [
            { "inputs": [{ "internalType": "address", "name": "_minter", "type": "address" }, { "internalType": "address", "name": "initSupplyTo", "type": "address" }, { "internalType": "uint256", "name": "initSupply", "type": "uint256" }, { "internalType": "uint256", "name": "totalSupply", "type": "uint256" }], "stateMutability": "nonpayable", "type": "constructor" },
            { "anonymous": false, "inputs": [{ "indexed": true, "internalType": "address", "name": "owner", "type": "address" }, { "indexed": true, "internalType": "address", "name": "spender", "type": "address" }, { "indexed": false, "internalType": "uint256", "name": "value", "type": "uint256" }], "name": "Approval", "type": "event" },
            { "anonymous": false, "inputs": [{ "indexed": true, "internalType": "address", "name": "from", "type": "address" }, { "indexed": true, "internalType": "address", "name": "to", "type": "address" }, { "indexed": false, "internalType": "uint256", "name": "value", "type": "uint256" }], "name": "Transfer", "type": "event" },
            { "inputs": [{ "internalType": "address", "name": "owner", "type": "address" }, { "internalType": "address", "name": "spender", "type": "address" }], "name": "allowance", "outputs": [{ "internalType": "uint256", "name": "", "type": "uint256" }], "stateMutability": "view", "type": "function" },
            { "inputs": [{ "internalType": "address", "name": "spender", "type": "address" }, { "internalType": "uint256", "name": "amount", "type": "uint256" }], "name": "approve", "outputs": [{ "internalType": "bool", "name": "", "type": "bool" }], "stateMutability": "nonpayable", "type": "function" },
            { "inputs": [{ "internalType": "address", "name": "account", "type": "address" }], "name": "balanceOf", "outputs": [{ "internalType": "uint256", "name": "", "type": "uint256" }], "stateMutability": "view", "type": "function" },
            { "inputs": [], "name": "cap", "outputs": [{ "internalType": "uint256", "name": "", "type": "uint256" }], "stateMutability": "view", "type": "function" },
            { "inputs": [], "name": "decimals", "outputs": [{ "internalType": "uint8", "name": "", "type": "uint8" }], "stateMutability": "view", "type": "function" },
            { "inputs": [{ "internalType": "address", "name": "spender", "type": "address" }, { "internalType": "uint256", "name": "subtractedValue", "type": "uint256" }], "name": "decreaseAllowance", "outputs": [{ "internalType": "bool", "name": "", "type": "bool" }], "stateMutability": "nonpayable", "type": "function" },
            { "inputs": [{ "internalType": "address", "name": "spender", "type": "address" }, { "internalType": "uint256", "name": "addedValue", "type": "uint256" }], "name": "increaseAllowance", "outputs": [{ "internalType": "bool", "name": "", "type": "bool" }], "stateMutability": "nonpayable", "type": "function" },
            { "inputs": [{ "internalType": "address", "name": "account", "type": "address" }, { "internalType": "uint256", "name": "amount", "type": "uint256" }], "name": "mint", "outputs": [], "stateMutability": "nonpayable", "type": "function" },
            { "inputs": [], "name": "minter", "outputs": [{ "internalType": "address", "name": "", "type": "address" }], "stateMutability": "view", "type": "function" },
            { "inputs": [], "name": "name", "outputs": [{ "internalType": "string", "name": "", "type": "string" }], "stateMutability": "view", "type": "function" },
            { "inputs": [], "name": "symbol", "outputs": [{ "internalType": "string", "name": "", "type": "string" }], "stateMutability": "view", "type": "function" },
            { "inputs": [], "name": "totalSupply", "outputs": [{ "internalType": "uint256", "name": "", "type": "uint256" }], "stateMutability": "view", "type": "function" },
            { "inputs": [{ "internalType": "address", "name": "recipient", "type": "address" }, { "internalType": "uint256", "name": "amount", "type": "uint256" }], "name": "transfer", "outputs": [{ "internalType": "bool", "name": "", "type": "bool" }], "stateMutability": "nonpayable", "type": "function" },
            { "inputs": [{ "internalType": "address", "name": "sender", "type": "address" }, { "internalType": "address", "name": "recipient", "type": "address" }, { "internalType": "uint256", "name": "amount", "type": "uint256" }], "name": "transferFrom", "outputs": [{ "internalType": "bool", "name": "", "type": "bool" }], "stateMutability": "nonpayable", "type": "function" }
        ],
        "bytecode": "60a06040523480156200001157600080fd5b50604051620013d4380380620013d4833981810160405260808110156200003757600080fd5b50805160208083015160408085015160609095015181518083018352600881526704f70656e537761760c41b8186019081528351808501909452600584526404f535741560dc1b958401959095528051959693959394919384939192620000a2916003919062000395565b508051620000b890600490602084019062000395565b50506005805460ff1916601217905550806200011b576040805162461bcd60e51b815260206004820152601560248201527f45524332304361707065643a2063617020697320300000000000000000000000604482015290519081900360640190fd5b6006556001600160601b0319606085901b166080526200014583836001600160e01b036200014f16565b5050505062000437565b6001600160a01b038216620001ab576040805162461bcd60e51b815260206004820152601f60248201527f45524332303a206d696e7420746f20746865207a65726f206164647265737300604482015290519081900360640190fd5b620001c2600083836001600160e01b036200026716565b620001de816002546200032660201b620007fb1790919060201c565b6002556001600160a01b0382166000908152602081815260409091205462000211918390620007fb62000326821b17901c565b6001600160a01b0383166000818152602081815260408083209490945583518581529351929391927fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef9281900390910190a35050565b6200027f8383836200032160201b620008761760201c565b6001600160a01b0383166200032157620002a16001600160e01b036200038816565b620002cd82620002b96001600160e01b036200038f16565b6200032660201b620007fb1790919060201c565b111562000321576040805162461bcd60e51b815260206004820152601960248201527f45524332304361707065643a2063617020657863656564656400000000000000604482015290519081900360640190fd5b505050565b60008282018381101562000381576040805162461bcd60e51b815260206004820152601b60248201527f536166654d6174683a206164646974696f6e206f766572666c6f770000000000604482015290519081900360640190fd5b9392505050565b6006545b90565b60025490565b828054600181600116156101000203166002900490600052602060002090601f016020900481019282601f10620003d857805160ff191683800117855562000408565b8280016001018555821562000408579182015b8281111562000408578251825591602001919060010190620003eb565b50620004169291506200041a565b5090565b6200038c91905b8082111562000416576000815560010162000421565b60805160601c610f7a6200045a6000398061047f52806105f35250610f7a6000f3fe608060405234801561001057600080fd5b50600436106100ea5760003560e01c8063395093511161008c57806395d89b411161006657806395d89b4114610314578063a457c2d71461031c578063a9059cbb14610355578063dd62ed3e1461038e576100ea565b8063395093511461026d57806340c10f19146102a657806370a08231146102e1576100ea565b806318160ddd116100c857806318160ddd146101ea57806323b872dd14610204578063313ce56714610247578063355274ea14610265576100ea565b806306fdde03146100ef578063075461721461016c578063095ea7b31461019d575b600080fd5b6100f76103c9565b6040805160208082528351818301528351919283929083019185019080838360005b83811015610131578181015183820152602001610119565b50505050905090810190601f16801561015e5780820380516001836020036101000a031916815260200191505b509250505060405180910390f35b61017461047d565b6040805173ffffffffffffffffffffffffffffffffffffffff9092168252519081900360200190f35b6101d6600480360360408110156101b357600080fd5b5073ffffffffffffffffffffffffffffffffffffffff81351690602001356104a1565b604080519115158252519081900360200190f35b6101f26104be565b60408051918252519081900360200190f35b6101d66004803603606081101561021a57600080fd5b5073ffffffffffffffffffffffffffffffffffffffff8135811691602081013590911690604001356104c4565b61024f61056b565b6040805160ff9092168252519081900360200190f35b6101f2610574565b6101d66004803603604081101561028357600080fd5b5073ffffffffffffffffffffffffffffffffffffffff813516906020013561057a565b6102df600480360360408110156102bc57600080fd5b5073ffffffffffffffffffffffffffffffffffffffff81351690602001356105db565b005b6101f2600480360360208110156102f757600080fd5b503573ffffffffffffffffffffffffffffffffffffffff1661068d565b6100f76106b5565b6101d66004803603604081101561033257600080fd5b5073ffffffffffffffffffffffffffffffffffffffff8135169060200135610734565b6101d66004803603604081101561036b57600080fd5b5073ffffffffffffffffffffffffffffffffffffffff81351690602001356107af565b6101f2600480360360408110156103a457600080fd5b5073ffffffffffffffffffffffffffffffffffffffff813581169160200135166107c3565b60038054604080516020601f60027fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff6101006001881615020190951694909404938401819004810282018101909252828152606093909290918301828280156104735780601f1061044857610100808354040283529160200191610473565b820191906000526020600020905b81548152906001019060200180831161045657829003601f168201915b5050505050905090565b7f000000000000000000000000000000000000000000000000000000000000000081565b60006104b56104ae61087b565b848461087f565b50600192915050565b60025490565b60006104d18484846109c6565b610561846104dd61087b565b61055c85604051806060016040528060288152602001610eaf6028913973ffffffffffffffffffffffffffffffffffffffff8a1660009081526001602052604081209061052861087b565b73ffffffffffffffffffffffffffffffffffffffff168152602081019190915260400160002054919063ffffffff610ba216565b61087f565b5060019392505050565b60055460ff1690565b60065490565b60006104b561058761087b565b8461055c856001600061059861087b565b73ffffffffffffffffffffffffffffffffffffffff908116825260208083019390935260409182016000908120918c16815292529020549063ffffffff6107fb16565b3373ffffffffffffffffffffffffffffffffffffffff7f0000000000000000000000000000000000000000000000000000000000000000161461067f57604080517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152600f60248201527f4e6f742066726f6d206d696e7465720000000000000000000000000000000000604482015290519081900360640190fd5b6106898282610c53565b5050565b73ffffffffffffffffffffffffffffffffffffffff1660009081526020819052604090205490565b60048054604080516020601f60027fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff6101006001881615020190951694909404938401819004810282018101909252828152606093909290918301828280156104735780601f1061044857610100808354040283529160200191610473565b60006104b561074161087b565b8461055c85604051806060016040528060258152602001610f20602591396001600061076b61087b565b73ffffffffffffffffffffffffffffffffffffffff908116825260208083019390935260409182016000908120918d1681529252902054919063ffffffff610ba216565b60006104b56107bc61087b565b84846109c6565b73ffffffffffffffffffffffffffffffffffffffff918216600090815260016020908152604080832093909416825291909152205490565b60008282018381101561086f57604080517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601b60248201527f536166654d6174683a206164646974696f6e206f766572666c6f770000000000604482015290519081900360640190fd5b9392505050565b505050565b3390565b73ffffffffffffffffffffffffffffffffffffffff83166108eb576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401808060200182810382526024815260200180610efc6024913960400191505060405180910390fd5b73ffffffffffffffffffffffffffffffffffffffff8216610957576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401808060200182810382526022815260200180610e676022913960400191505060405180910390fd5b73ffffffffffffffffffffffffffffffffffffffff808416600081815260016020908152604080832094871680845294825291829020859055815185815291517f8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b9259281900390910190a3505050565b73ffffffffffffffffffffffffffffffffffffffff8316610a32576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401808060200182810382526025815260200180610ed76025913960400191505060405180910390fd5b73ffffffffffffffffffffffffffffffffffffffff8216610a9e576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401808060200182810382526023815260200180610e446023913960400191505060405180910390fd5b610aa9838383610d90565b610af981604051806060016040528060268152602001610e896026913973ffffffffffffffffffffffffffffffffffffffff8616600090815260208190526040902054919063ffffffff610ba216565b73ffffffffffffffffffffffffffffffffffffffff8085166000908152602081905260408082209390935590841681522054610b3b908263ffffffff6107fb16565b73ffffffffffffffffffffffffffffffffffffffff8084166000818152602081815260409182902094909455805185815290519193928716927fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef92918290030190a3505050565b60008184841115610c4b576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004018080602001828103825283818151815260200191508051906020019080838360005b83811015610c10578181015183820152602001610bf8565b50505050905090810190601f168015610c3d5780820380516001836020036101000a031916815260200191505b509250505060405180910390fd5b505050900390565b73ffffffffffffffffffffffffffffffffffffffff8216610cd557604080517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601f60248201527f45524332303a206d696e7420746f20746865207a65726f206164647265737300604482015290519081900360640190fd5b610ce160008383610d90565b600254610cf4908263ffffffff6107fb16565b60025573ffffffffffffffffffffffffffffffffffffffff8216600090815260208190526040902054610d2d908263ffffffff6107fb16565b73ffffffffffffffffffffffffffffffffffffffff83166000818152602081815260408083209490945583518581529351929391927fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef9281900390910190a35050565b610d9b838383610876565b73ffffffffffffffffffffffffffffffffffffffff831661087657610dbe610574565b610dd682610dca6104be565b9063ffffffff6107fb16565b111561087657604080517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601960248201527f45524332304361707065643a2063617020657863656564656400000000000000604482015290519081900360640190fdfe45524332303a207472616e7366657220746f20746865207a65726f206164647265737345524332303a20617070726f766520746f20746865207a65726f206164647265737345524332303a207472616e7366657220616d6f756e7420657863656564732062616c616e636545524332303a207472616e7366657220616d6f756e74206578636565647320616c6c6f77616e636545524332303a207472616e736665722066726f6d20746865207a65726f206164647265737345524332303a20617070726f76652066726f6d20746865207a65726f206164647265737345524332303a2064656372656173656420616c6c6f77616e63652062656c6f77207a65726fa26469706673582212200e670732a2ae18340eac324a65fcf5aaa21db2258a5ca51d23e85bdc33e7832f64736f6c634300060b0033"
    };
});
define("@scom/scom-swap/contracts/oswap-openswap-contract/contracts/OpenSwap.ts", ["require", "exports", "@ijstech/eth-contract", "@scom/scom-swap/contracts/oswap-openswap-contract/contracts/OpenSwap.json.ts"], function (require, exports, eth_contract_1, OpenSwap_json_1) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.OpenSwap = void 0;
    class OpenSwap extends eth_contract_1.Contract {
        constructor(wallet, address) {
            super(wallet, address, OpenSwap_json_1.default.abi, OpenSwap_json_1.default.bytecode);
            this.assign();
        }
        deploy(params, options) {
            return this.__deploy([params.minter, params.initSupplyTo, this.wallet.utils.toString(params.initSupply), this.wallet.utils.toString(params.totalSupply)], options);
        }
        parseApprovalEvent(receipt) {
            return this.parseEvents(receipt, "Approval").map(e => this.decodeApprovalEvent(e));
        }
        decodeApprovalEvent(event) {
            let result = event.data;
            return {
                owner: result.owner,
                spender: result.spender,
                value: new eth_contract_1.BigNumber(result.value),
                _event: event
            };
        }
        parseTransferEvent(receipt) {
            return this.parseEvents(receipt, "Transfer").map(e => this.decodeTransferEvent(e));
        }
        decodeTransferEvent(event) {
            let result = event.data;
            return {
                from: result.from,
                to: result.to,
                value: new eth_contract_1.BigNumber(result.value),
                _event: event
            };
        }
        assign() {
            let allowanceParams = (params) => [params.owner, params.spender];
            let allowance_call = async (params, options) => {
                let result = await this.call('allowance', allowanceParams(params), options);
                return new eth_contract_1.BigNumber(result);
            };
            this.allowance = allowance_call;
            let balanceOf_call = async (account, options) => {
                let result = await this.call('balanceOf', [account], options);
                return new eth_contract_1.BigNumber(result);
            };
            this.balanceOf = balanceOf_call;
            let cap_call = async (options) => {
                let result = await this.call('cap', [], options);
                return new eth_contract_1.BigNumber(result);
            };
            this.cap = cap_call;
            let decimals_call = async (options) => {
                let result = await this.call('decimals', [], options);
                return new eth_contract_1.BigNumber(result);
            };
            this.decimals = decimals_call;
            let minter_call = async (options) => {
                let result = await this.call('minter', [], options);
                return result;
            };
            this.minter = minter_call;
            let name_call = async (options) => {
                let result = await this.call('name', [], options);
                return result;
            };
            this.name = name_call;
            let symbol_call = async (options) => {
                let result = await this.call('symbol', [], options);
                return result;
            };
            this.symbol = symbol_call;
            let totalSupply_call = async (options) => {
                let result = await this.call('totalSupply', [], options);
                return new eth_contract_1.BigNumber(result);
            };
            this.totalSupply = totalSupply_call;
            let approveParams = (params) => [params.spender, this.wallet.utils.toString(params.amount)];
            let approve_send = async (params, options) => {
                let result = await this.send('approve', approveParams(params), options);
                return result;
            };
            let approve_call = async (params, options) => {
                let result = await this.call('approve', approveParams(params), options);
                return result;
            };
            let approve_txData = async (params, options) => {
                let result = await this.txData('approve', approveParams(params), options);
                return result;
            };
            this.approve = Object.assign(approve_send, {
                call: approve_call,
                txData: approve_txData
            });
            let decreaseAllowanceParams = (params) => [params.spender, this.wallet.utils.toString(params.subtractedValue)];
            let decreaseAllowance_send = async (params, options) => {
                let result = await this.send('decreaseAllowance', decreaseAllowanceParams(params), options);
                return result;
            };
            let decreaseAllowance_call = async (params, options) => {
                let result = await this.call('decreaseAllowance', decreaseAllowanceParams(params), options);
                return result;
            };
            let decreaseAllowance_txData = async (params, options) => {
                let result = await this.txData('decreaseAllowance', decreaseAllowanceParams(params), options);
                return result;
            };
            this.decreaseAllowance = Object.assign(decreaseAllowance_send, {
                call: decreaseAllowance_call,
                txData: decreaseAllowance_txData
            });
            let increaseAllowanceParams = (params) => [params.spender, this.wallet.utils.toString(params.addedValue)];
            let increaseAllowance_send = async (params, options) => {
                let result = await this.send('increaseAllowance', increaseAllowanceParams(params), options);
                return result;
            };
            let increaseAllowance_call = async (params, options) => {
                let result = await this.call('increaseAllowance', increaseAllowanceParams(params), options);
                return result;
            };
            let increaseAllowance_txData = async (params, options) => {
                let result = await this.txData('increaseAllowance', increaseAllowanceParams(params), options);
                return result;
            };
            this.increaseAllowance = Object.assign(increaseAllowance_send, {
                call: increaseAllowance_call,
                txData: increaseAllowance_txData
            });
            let mintParams = (params) => [params.account, this.wallet.utils.toString(params.amount)];
            let mint_send = async (params, options) => {
                let result = await this.send('mint', mintParams(params), options);
                return result;
            };
            let mint_call = async (params, options) => {
                let result = await this.call('mint', mintParams(params), options);
                return;
            };
            let mint_txData = async (params, options) => {
                let result = await this.txData('mint', mintParams(params), options);
                return result;
            };
            this.mint = Object.assign(mint_send, {
                call: mint_call,
                txData: mint_txData
            });
            let transferParams = (params) => [params.recipient, this.wallet.utils.toString(params.amount)];
            let transfer_send = async (params, options) => {
                let result = await this.send('transfer', transferParams(params), options);
                return result;
            };
            let transfer_call = async (params, options) => {
                let result = await this.call('transfer', transferParams(params), options);
                return result;
            };
            let transfer_txData = async (params, options) => {
                let result = await this.txData('transfer', transferParams(params), options);
                return result;
            };
            this.transfer = Object.assign(transfer_send, {
                call: transfer_call,
                txData: transfer_txData
            });
            let transferFromParams = (params) => [params.sender, params.recipient, this.wallet.utils.toString(params.amount)];
            let transferFrom_send = async (params, options) => {
                let result = await this.send('transferFrom', transferFromParams(params), options);
                return result;
            };
            let transferFrom_call = async (params, options) => {
                let result = await this.call('transferFrom', transferFromParams(params), options);
                return result;
            };
            let transferFrom_txData = async (params, options) => {
                let result = await this.txData('transferFrom', transferFromParams(params), options);
                return result;
            };
            this.transferFrom = Object.assign(transferFrom_send, {
                call: transferFrom_call,
                txData: transferFrom_txData
            });
        }
    }
    OpenSwap._abi = OpenSwap_json_1.default.abi;
    exports.OpenSwap = OpenSwap;
});
define("@scom/scom-swap/contracts/oswap-openswap-contract/contracts/amm/OSWAP_ERC20.json.ts", ["require", "exports"], function (require, exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    ///<amd-module name='@scom/scom-swap/contracts/oswap-openswap-contract/contracts/amm/OSWAP_ERC20.json.ts'/> 
    exports.default = {
        "abi": [
            { "anonymous": false, "inputs": [{ "indexed": true, "internalType": "address", "name": "owner", "type": "address" }, { "indexed": true, "internalType": "address", "name": "spender", "type": "address" }, { "indexed": false, "internalType": "uint256", "name": "value", "type": "uint256" }], "name": "Approval", "type": "event" },
            { "anonymous": false, "inputs": [{ "indexed": true, "internalType": "address", "name": "from", "type": "address" }, { "indexed": true, "internalType": "address", "name": "to", "type": "address" }, { "indexed": false, "internalType": "uint256", "name": "value", "type": "uint256" }], "name": "Transfer", "type": "event" },
            { "inputs": [], "name": "EIP712_TYPEHASH", "outputs": [{ "internalType": "bytes32", "name": "", "type": "bytes32" }], "stateMutability": "view", "type": "function" },
            { "inputs": [], "name": "NAME_HASH", "outputs": [{ "internalType": "bytes32", "name": "", "type": "bytes32" }], "stateMutability": "view", "type": "function" },
            { "inputs": [], "name": "PERMIT_TYPEHASH", "outputs": [{ "internalType": "bytes32", "name": "", "type": "bytes32" }], "stateMutability": "view", "type": "function" },
            { "inputs": [], "name": "VERSION_HASH", "outputs": [{ "internalType": "bytes32", "name": "", "type": "bytes32" }], "stateMutability": "view", "type": "function" },
            { "inputs": [{ "internalType": "address", "name": "", "type": "address" }, { "internalType": "address", "name": "", "type": "address" }], "name": "allowance", "outputs": [{ "internalType": "uint256", "name": "", "type": "uint256" }], "stateMutability": "view", "type": "function" },
            { "inputs": [{ "internalType": "address", "name": "spender", "type": "address" }, { "internalType": "uint256", "name": "value", "type": "uint256" }], "name": "approve", "outputs": [{ "internalType": "bool", "name": "", "type": "bool" }], "stateMutability": "nonpayable", "type": "function" },
            { "inputs": [{ "internalType": "address", "name": "", "type": "address" }], "name": "balanceOf", "outputs": [{ "internalType": "uint256", "name": "", "type": "uint256" }], "stateMutability": "view", "type": "function" },
            { "inputs": [], "name": "decimals", "outputs": [{ "internalType": "uint8", "name": "", "type": "uint8" }], "stateMutability": "view", "type": "function" },
            { "inputs": [], "name": "name", "outputs": [{ "internalType": "string", "name": "", "type": "string" }], "stateMutability": "view", "type": "function" },
            { "inputs": [{ "internalType": "address", "name": "", "type": "address" }], "name": "nonces", "outputs": [{ "internalType": "uint256", "name": "", "type": "uint256" }], "stateMutability": "view", "type": "function" },
            { "inputs": [{ "internalType": "address", "name": "owner", "type": "address" }, { "internalType": "address", "name": "spender", "type": "address" }, { "internalType": "uint256", "name": "value", "type": "uint256" }, { "internalType": "uint256", "name": "deadline", "type": "uint256" }, { "internalType": "uint8", "name": "v", "type": "uint8" }, { "internalType": "bytes32", "name": "r", "type": "bytes32" }, { "internalType": "bytes32", "name": "s", "type": "bytes32" }], "name": "permit", "outputs": [], "stateMutability": "nonpayable", "type": "function" },
            { "inputs": [], "name": "symbol", "outputs": [{ "internalType": "string", "name": "", "type": "string" }], "stateMutability": "view", "type": "function" },
            { "inputs": [], "name": "totalSupply", "outputs": [{ "internalType": "uint256", "name": "", "type": "uint256" }], "stateMutability": "view", "type": "function" },
            { "inputs": [{ "internalType": "address", "name": "to", "type": "address" }, { "internalType": "uint256", "name": "value", "type": "uint256" }], "name": "transfer", "outputs": [{ "internalType": "bool", "name": "", "type": "bool" }], "stateMutability": "nonpayable", "type": "function" },
            { "inputs": [{ "internalType": "address", "name": "from", "type": "address" }, { "internalType": "address", "name": "to", "type": "address" }, { "internalType": "uint256", "name": "value", "type": "uint256" }], "name": "transferFrom", "outputs": [{ "internalType": "bool", "name": "", "type": "bool" }], "stateMutability": "nonpayable", "type": "function" }
        ],
        "bytecode": "608060405234801561001057600080fd5b50610c55806100206000396000f3fe608060405234801561001057600080fd5b50600436106100f55760003560e01c8063313ce567116100975780639e4e7318116100665780639e4e7318146102c5578063a9059cbb146102cd578063d505accf14610306578063dd62ed3e14610366576100f5565b8063313ce5671461023957806370a08231146102575780637ecebe001461028a57806395d89b41146102bd576100f5565b806318160ddd116100d357806318160ddd146101de57806323b872dd146101e6578063253d2c7d1461022957806330adf81f14610231576100f5565b806304622c2e146100fa57806306fdde0314610114578063095ea7b314610191575b600080fd5b6101026103a1565b60408051918252519081900360200190f35b61011c6103c5565b6040805160208082528351818301528351919283929083019185019080838360005b8381101561015657818101518382015260200161013e565b50505050905090810190601f1680156101835780820380516001836020036101000a031916815260200191505b509250505060405180910390f35b6101ca600480360360408110156101a757600080fd5b5073ffffffffffffffffffffffffffffffffffffffff81351690602001356103fe565b604080519115158252519081900360200190f35b610102610414565b6101ca600480360360608110156101fc57600080fd5b5073ffffffffffffffffffffffffffffffffffffffff81358116916020810135909116906040013561041a565b6101026104f9565b61010261051d565b610241610541565b6040805160ff9092168252519081900360200190f35b6101026004803603602081101561026d57600080fd5b503573ffffffffffffffffffffffffffffffffffffffff16610546565b610102600480360360208110156102a057600080fd5b503573ffffffffffffffffffffffffffffffffffffffff16610558565b61011c61056a565b6101026105a3565b6101ca600480360360408110156102e357600080fd5b5073ffffffffffffffffffffffffffffffffffffffff81351690602001356105c7565b610364600480360360e081101561031c57600080fd5b5073ffffffffffffffffffffffffffffffffffffffff813581169160208101359091169060408101359060608101359060ff6080820135169060a08101359060c001356105d4565b005b6101026004803603604081101561037c57600080fd5b5073ffffffffffffffffffffffffffffffffffffffff81358116916020013516610944565b7fccf0ed8d136d82190c405c1be2cf07fff31d482a66996af4f69b3259174a23ba81565b6040518060400160405280600c81526020017f4f70656e53776170204c5073000000000000000000000000000000000000000081525081565b600061040b338484610961565b50600192915050565b60005481565b73ffffffffffffffffffffffffffffffffffffffff831660009081526002602090815260408083203384529091528120547fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff146104e45773ffffffffffffffffffffffffffffffffffffffff841660009081526002602090815260408083203384529091529020546104b2908363ffffffff6109d016565b73ffffffffffffffffffffffffffffffffffffffff851660009081526002602090815260408083203384529091529020555b6104ef848484610a19565b5060019392505050565b7f8b73c3c69bb8fe3d512ecc4cf759cc79239f7b179b0ffacaa9a75d522b39400f81565b7f6e71edae12b1b97f4d1f60370fef10105fa2faae0126114a169c64845d6126c981565b601281565b60016020526000908152604090205481565b60036020526000908152604090205481565b6040518060400160405280600881526020017f4f535741502d4c5000000000000000000000000000000000000000000000000081525081565b7fc89efdaa54c0f20c7adf612882df0950f5a951637e0307cdcb4c672f298b8bc681565b600061040b338484610a19565b4284101561064357604080517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152600760248201527f4558504952454400000000000000000000000000000000000000000000000000604482015290519081900360640190fd5b604080517f8b73c3c69bb8fe3d512ecc4cf759cc79239f7b179b0ffacaa9a75d522b39400f6020808301919091527fccf0ed8d136d82190c405c1be2cf07fff31d482a66996af4f69b3259174a23ba828401527fc89efdaa54c0f20c7adf612882df0950f5a951637e0307cdcb4c672f298b8bc660608301524660808301523060a0808401919091528351808403909101815260c08301845280519082012073ffffffffffffffffffffffffffffffffffffffff8b8116600081815260038552868120805460018082019092557f6e71edae12b1b97f4d1f60370fef10105fa2faae0126114a169c64845d6126c960e0890152610100880193909352928d1661012087015261014086018c90526101608601919091526101808086018b9052865180870390910181526101a0860187528051908501207f19010000000000000000000000000000000000000000000000000000000000006101c08701526101c286018490526101e28087019190915286518087039091018152610202860180885281519186019190912090829052610222860180885281905260ff8a16610242870152610262860189905261028286018890529551929594909391926102a280830193927fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe08301929081900390910190855afa158015610847573d6000803e3d6000fd5b50506040517fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe0015191505073ffffffffffffffffffffffffffffffffffffffff8116158015906108c257508973ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff16145b61092d57604080517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601160248201527f494e56414c49445f5349474e4154555245000000000000000000000000000000604482015290519081900360640190fd5b6109388a8a8a610961565b50505050505050505050565b600260209081526000928352604080842090915290825290205481565b73ffffffffffffffffffffffffffffffffffffffff808416600081815260026020908152604080832094871680845294825291829020859055815185815291517f8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b9259281900390910190a3505050565b6000610a1283836040518060400160405280601e81526020017f536166654d6174683a207375627472616374696f6e206f766572666c6f770000815250610afa565b9392505050565b73ffffffffffffffffffffffffffffffffffffffff8316600090815260016020526040902054610a4f908263ffffffff6109d016565b73ffffffffffffffffffffffffffffffffffffffff8085166000908152600160205260408082209390935590841681522054610a91908263ffffffff610bab16565b73ffffffffffffffffffffffffffffffffffffffff80841660008181526001602090815260409182902094909455805185815290519193928716927fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef92918290030190a3505050565b60008184841115610ba3576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004018080602001828103825283818151815260200191508051906020019080838360005b83811015610b68578181015183820152602001610b50565b50505050905090810190601f168015610b955780820380516001836020036101000a031916815260200191505b509250505060405180910390fd5b505050900390565b600082820183811015610a1257604080517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601b60248201527f536166654d6174683a206164646974696f6e206f766572666c6f770000000000604482015290519081900360640190fdfea264697066735822122096db91cc4abeafe9715515fe37e334f2a0e94e86a23f845259aae562ffd5183e64736f6c634300060b0033"
    };
});
define("@scom/scom-swap/contracts/oswap-openswap-contract/contracts/amm/OSWAP_ERC20.ts", ["require", "exports", "@ijstech/eth-contract", "@scom/scom-swap/contracts/oswap-openswap-contract/contracts/amm/OSWAP_ERC20.json.ts"], function (require, exports, eth_contract_2, OSWAP_ERC20_json_1) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.OSWAP_ERC20 = void 0;
    class OSWAP_ERC20 extends eth_contract_2.Contract {
        constructor(wallet, address) {
            super(wallet, address, OSWAP_ERC20_json_1.default.abi, OSWAP_ERC20_json_1.default.bytecode);
            this.assign();
        }
        deploy(options) {
            return this.__deploy([], options);
        }
        parseApprovalEvent(receipt) {
            return this.parseEvents(receipt, "Approval").map(e => this.decodeApprovalEvent(e));
        }
        decodeApprovalEvent(event) {
            let result = event.data;
            return {
                owner: result.owner,
                spender: result.spender,
                value: new eth_contract_2.BigNumber(result.value),
                _event: event
            };
        }
        parseTransferEvent(receipt) {
            return this.parseEvents(receipt, "Transfer").map(e => this.decodeTransferEvent(e));
        }
        decodeTransferEvent(event) {
            let result = event.data;
            return {
                from: result.from,
                to: result.to,
                value: new eth_contract_2.BigNumber(result.value),
                _event: event
            };
        }
        assign() {
            let EIP712_TYPEHASH_call = async (options) => {
                let result = await this.call('EIP712_TYPEHASH', [], options);
                return result;
            };
            this.EIP712_TYPEHASH = EIP712_TYPEHASH_call;
            let NAME_HASH_call = async (options) => {
                let result = await this.call('NAME_HASH', [], options);
                return result;
            };
            this.NAME_HASH = NAME_HASH_call;
            let PERMIT_TYPEHASH_call = async (options) => {
                let result = await this.call('PERMIT_TYPEHASH', [], options);
                return result;
            };
            this.PERMIT_TYPEHASH = PERMIT_TYPEHASH_call;
            let VERSION_HASH_call = async (options) => {
                let result = await this.call('VERSION_HASH', [], options);
                return result;
            };
            this.VERSION_HASH = VERSION_HASH_call;
            let allowanceParams = (params) => [params.param1, params.param2];
            let allowance_call = async (params, options) => {
                let result = await this.call('allowance', allowanceParams(params), options);
                return new eth_contract_2.BigNumber(result);
            };
            this.allowance = allowance_call;
            let balanceOf_call = async (param1, options) => {
                let result = await this.call('balanceOf', [param1], options);
                return new eth_contract_2.BigNumber(result);
            };
            this.balanceOf = balanceOf_call;
            let decimals_call = async (options) => {
                let result = await this.call('decimals', [], options);
                return new eth_contract_2.BigNumber(result);
            };
            this.decimals = decimals_call;
            let name_call = async (options) => {
                let result = await this.call('name', [], options);
                return result;
            };
            this.name = name_call;
            let nonces_call = async (param1, options) => {
                let result = await this.call('nonces', [param1], options);
                return new eth_contract_2.BigNumber(result);
            };
            this.nonces = nonces_call;
            let symbol_call = async (options) => {
                let result = await this.call('symbol', [], options);
                return result;
            };
            this.symbol = symbol_call;
            let totalSupply_call = async (options) => {
                let result = await this.call('totalSupply', [], options);
                return new eth_contract_2.BigNumber(result);
            };
            this.totalSupply = totalSupply_call;
            let approveParams = (params) => [params.spender, this.wallet.utils.toString(params.value)];
            let approve_send = async (params, options) => {
                let result = await this.send('approve', approveParams(params), options);
                return result;
            };
            let approve_call = async (params, options) => {
                let result = await this.call('approve', approveParams(params), options);
                return result;
            };
            let approve_txData = async (params, options) => {
                let result = await this.txData('approve', approveParams(params), options);
                return result;
            };
            this.approve = Object.assign(approve_send, {
                call: approve_call,
                txData: approve_txData
            });
            let permitParams = (params) => [params.owner, params.spender, this.wallet.utils.toString(params.value), this.wallet.utils.toString(params.deadline), this.wallet.utils.toString(params.v), this.wallet.utils.stringToBytes32(params.r), this.wallet.utils.stringToBytes32(params.s)];
            let permit_send = async (params, options) => {
                let result = await this.send('permit', permitParams(params), options);
                return result;
            };
            let permit_call = async (params, options) => {
                let result = await this.call('permit', permitParams(params), options);
                return;
            };
            let permit_txData = async (params, options) => {
                let result = await this.txData('permit', permitParams(params), options);
                return result;
            };
            this.permit = Object.assign(permit_send, {
                call: permit_call,
                txData: permit_txData
            });
            let transferParams = (params) => [params.to, this.wallet.utils.toString(params.value)];
            let transfer_send = async (params, options) => {
                let result = await this.send('transfer', transferParams(params), options);
                return result;
            };
            let transfer_call = async (params, options) => {
                let result = await this.call('transfer', transferParams(params), options);
                return result;
            };
            let transfer_txData = async (params, options) => {
                let result = await this.txData('transfer', transferParams(params), options);
                return result;
            };
            this.transfer = Object.assign(transfer_send, {
                call: transfer_call,
                txData: transfer_txData
            });
            let transferFromParams = (params) => [params.from, params.to, this.wallet.utils.toString(params.value)];
            let transferFrom_send = async (params, options) => {
                let result = await this.send('transferFrom', transferFromParams(params), options);
                return result;
            };
            let transferFrom_call = async (params, options) => {
                let result = await this.call('transferFrom', transferFromParams(params), options);
                return result;
            };
            let transferFrom_txData = async (params, options) => {
                let result = await this.txData('transferFrom', transferFromParams(params), options);
                return result;
            };
            this.transferFrom = Object.assign(transferFrom_send, {
                call: transferFrom_call,
                txData: transferFrom_txData
            });
        }
    }
    OSWAP_ERC20._abi = OSWAP_ERC20_json_1.default.abi;
    exports.OSWAP_ERC20 = OSWAP_ERC20;
});
define("@scom/scom-swap/contracts/oswap-openswap-contract/contracts/amm/OSWAP_Factory.json.ts", ["require", "exports"], function (require, exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    ///<amd-module name='@scom/scom-swap/contracts/oswap-openswap-contract/contracts/amm/OSWAP_Factory.json.ts'/> 
    exports.default = {
        "abi": [
            { "inputs": [{ "internalType": "address", "name": "_governance", "type": "address" }, { "internalType": "address", "name": "_pairCreator", "type": "address" }, { "internalType": "uint256", "name": "_tradeFee", "type": "uint256" }, { "internalType": "uint256", "name": "_protocolFee", "type": "uint256" }, { "internalType": "address", "name": "_protocolFeeTo", "type": "address" }], "stateMutability": "nonpayable", "type": "constructor" },
            { "anonymous": false, "inputs": [{ "indexed": true, "internalType": "address", "name": "token0", "type": "address" }, { "indexed": true, "internalType": "address", "name": "token1", "type": "address" }, { "indexed": false, "internalType": "address", "name": "pair", "type": "address" }, { "indexed": false, "internalType": "uint256", "name": "newSize", "type": "uint256" }], "name": "PairCreated", "type": "event" },
            { "anonymous": false, "inputs": [{ "indexed": true, "internalType": "address", "name": "pair", "type": "address" }], "name": "PairRestarted", "type": "event" },
            { "anonymous": false, "inputs": [{ "indexed": true, "internalType": "address", "name": "pair", "type": "address" }], "name": "PairShutdowned", "type": "event" },
            { "anonymous": false, "inputs": [{ "indexed": false, "internalType": "bytes32", "name": "name", "type": "bytes32" }, { "indexed": false, "internalType": "bytes32", "name": "value", "type": "bytes32" }], "name": "ParamSet", "type": "event" },
            { "anonymous": false, "inputs": [{ "indexed": false, "internalType": "bytes32", "name": "name", "type": "bytes32" }, { "indexed": false, "internalType": "bytes32", "name": "value1", "type": "bytes32" }, { "indexed": false, "internalType": "bytes32", "name": "value2", "type": "bytes32" }], "name": "ParamSet2", "type": "event" },
            { "anonymous": false, "inputs": [], "name": "Restarted", "type": "event" },
            { "anonymous": false, "inputs": [], "name": "Shutdowned", "type": "event" },
            { "inputs": [{ "internalType": "uint256", "name": "", "type": "uint256" }], "name": "allPairs", "outputs": [{ "internalType": "address", "name": "", "type": "address" }], "stateMutability": "view", "type": "function" },
            { "inputs": [], "name": "allPairsLength", "outputs": [{ "internalType": "uint256", "name": "", "type": "uint256" }], "stateMutability": "view", "type": "function" },
            { "inputs": [{ "internalType": "address", "name": "tokenA", "type": "address" }, { "internalType": "address", "name": "tokenB", "type": "address" }], "name": "createPair", "outputs": [{ "internalType": "address", "name": "pair", "type": "address" }], "stateMutability": "nonpayable", "type": "function" },
            { "inputs": [{ "internalType": "address", "name": "", "type": "address" }, { "internalType": "address", "name": "", "type": "address" }], "name": "getPair", "outputs": [{ "internalType": "address", "name": "", "type": "address" }], "stateMutability": "view", "type": "function" },
            { "inputs": [], "name": "governance", "outputs": [{ "internalType": "address", "name": "", "type": "address" }], "stateMutability": "view", "type": "function" },
            { "inputs": [], "name": "isLive", "outputs": [{ "internalType": "bool", "name": "", "type": "bool" }], "stateMutability": "view", "type": "function" },
            { "inputs": [], "name": "pairCreator", "outputs": [{ "internalType": "address", "name": "", "type": "address" }], "stateMutability": "view", "type": "function" },
            { "inputs": [], "name": "protocolFee", "outputs": [{ "internalType": "uint256", "name": "", "type": "uint256" }], "stateMutability": "view", "type": "function" },
            { "inputs": [], "name": "protocolFeeParams", "outputs": [{ "internalType": "uint256", "name": "_protocolFee", "type": "uint256" }, { "internalType": "address", "name": "_protocolFeeTo", "type": "address" }], "stateMutability": "view", "type": "function" },
            { "inputs": [], "name": "protocolFeeTo", "outputs": [{ "internalType": "address", "name": "", "type": "address" }], "stateMutability": "view", "type": "function" },
            { "inputs": [{ "internalType": "bool", "name": "_isLive", "type": "bool" }], "name": "setLive", "outputs": [], "stateMutability": "nonpayable", "type": "function" },
            { "inputs": [{ "internalType": "address", "name": "pair", "type": "address" }, { "internalType": "bool", "name": "live", "type": "bool" }], "name": "setLiveForPair", "outputs": [], "stateMutability": "nonpayable", "type": "function" },
            { "inputs": [{ "internalType": "uint256", "name": "_protocolFee", "type": "uint256" }], "name": "setProtocolFee", "outputs": [], "stateMutability": "nonpayable", "type": "function" },
            { "inputs": [{ "internalType": "address", "name": "_protocolFeeTo", "type": "address" }], "name": "setProtocolFeeTo", "outputs": [], "stateMutability": "nonpayable", "type": "function" },
            { "inputs": [{ "internalType": "uint256", "name": "_tradeFee", "type": "uint256" }], "name": "setTradeFee", "outputs": [], "stateMutability": "nonpayable", "type": "function" },
            { "inputs": [], "name": "tradeFee", "outputs": [{ "internalType": "uint256", "name": "", "type": "uint256" }], "stateMutability": "view", "type": "function" }
        ],
        "bytecode": "60a060405234801561001057600080fd5b506040516117b73803806117b7833981810160405260a081101561003357600080fd5b508051602082015160408301516060808501516080958601519185901b6001600160601b03191690955260008054600160ff1990911617610100600160a81b0319166101006001600160a01b0386160217905592939192909190620186a08311156100d9576040805162461bcd60e51b8152602060048201526011602482015270494e56414c49445f54524144455f46454560781b604482015290519081900360640190fd5b620186a0821115610131576040805162461bcd60e51b815260206004820152601460248201527f494e56414c49445f50524f544f434f4c5f464545000000000000000000000000604482015290519081900360640190fd5b60038390556004829055600580546001600160a01b0319166001600160a01b0383161790556040805167747261646546656560c01b8152602081018590528151600080516020611797833981519152929181900390910190a1600454604080516a70726f746f636f6c46656560a81b8152602081019290925280516000805160206117978339815191529281900390910190a1600554604080516c70726f746f636f6c466565546f60981b815260609290921b6001600160601b031916602083015280516000805160206117978339815191529281900390910190a1505050505060805160601c6115456102526000398061036452806105585280610593528061068652806108ad528061109852806112a2528061139552506115456000f3fe608060405234801561001057600080fd5b50600436106101005760003560e01c8063b0e21e8a11610097578063e0e6799f11610066578063e0e6799f14610289578063e6a43905146102bc578063ef369252146102f7578063f5ee3348146102ff57610100565b8063b0e21e8a14610222578063b8f7a6651461022a578063c538b5d614610246578063c9c653961461024e57610100565b80635aa6e675116100d35780635aa6e6751461018c5780636883618a14610194578063787dce3d146101cf5780639931e80b146101ec57610100565b806310603023146101055780631e3dd18b1461012457806324bcdfbd1461016a578063574f2ba314610184575b600080fd5b6101226004803603602081101561011b57600080fd5b503561031e565b005b6101416004803603602081101561013a57600080fd5b5035610516565b6040805173ffffffffffffffffffffffffffffffffffffffff9092168252519081900360200190f35b61017261054a565b60408051918252519081900360200190f35b610172610550565b610141610556565b610122600480360360408110156101aa57600080fd5b5073ffffffffffffffffffffffffffffffffffffffff8135169060200135151561057a565b610122600480360360208110156101e557600080fd5b5035610867565b6101f4610a5f565b6040805192835273ffffffffffffffffffffffffffffffffffffffff90911660208301528051918290030190f35b610172610a7f565b610232610a85565b604080519115158252519081900360200190f35b610141610a8e565b6101416004803603604081101561026457600080fd5b5073ffffffffffffffffffffffffffffffffffffffff81358116916020013516610aaf565b6101226004803603602081101561029f57600080fd5b503573ffffffffffffffffffffffffffffffffffffffff16611052565b610141600480360360408110156102d257600080fd5b5073ffffffffffffffffffffffffffffffffffffffff8135811691602001351661123a565b61014161126d565b6101226004803603602081101561031557600080fd5b50351515611289565b604080517fa3818b3b000000000000000000000000000000000000000000000000000000008152336004820152905173ffffffffffffffffffffffffffffffffffffffff7f0000000000000000000000000000000000000000000000000000000000000000169163a3818b3b916024808301926020929190829003018186803b1580156103aa57600080fd5b505afa1580156103be573d6000803e3d6000fd5b505050506040513d60208110156103d457600080fd5b505161044157604080517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152600f60248201527f4e6f742066726f6d20766f74696e670000000000000000000000000000000000604482015290519081900360640190fd5b620186a08111156104b357604080517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601160248201527f494e56414c49445f54524144455f464545000000000000000000000000000000604482015290519081900360640190fd5b6003819055604080517f747261646546656500000000000000000000000000000000000000000000000081526020810183905281517f22ea5a9dcc7fb5bc447fcb472061adc51caa147724a67a6695d49a9dff162509929181900390910190a150565b6002818154811061052357fe5b60009182526020909120015473ffffffffffffffffffffffffffffffffffffffff16905081565b60035481565b60025490565b7f000000000000000000000000000000000000000000000000000000000000000081565b3373ffffffffffffffffffffffffffffffffffffffff167f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff1663f851a4406040518163ffffffff1660e01b815260040160206040518083038186803b1580156105f757600080fd5b505afa15801561060b573d6000803e3d6000fd5b505050506040513d602081101561062157600080fd5b505173ffffffffffffffffffffffffffffffffffffffff1614806106f95750604080517fa3818b3b000000000000000000000000000000000000000000000000000000008152336004820152905173ffffffffffffffffffffffffffffffffffffffff7f0000000000000000000000000000000000000000000000000000000000000000169163a3818b3b916024808301926020929190829003018186803b1580156106cc57600080fd5b505afa1580156106e0573d6000803e3d6000fd5b505050506040513d60208110156106f657600080fd5b50515b61074e576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004018080602001828103825260218152602001806114ef6021913960400191505060405180910390fd5b604080517ff5ee33480000000000000000000000000000000000000000000000000000000081528215156004820152905173ffffffffffffffffffffffffffffffffffffffff84169163f5ee334891602480830192600092919082900301818387803b1580156107bd57600080fd5b505af11580156107d1573d6000803e3d6000fd5b5050505080156108215760405173ffffffffffffffffffffffffffffffffffffffff8316907fc96ebf6dcdf5c5e56ad8961009b9d49aa6f2d53d5ffe374048f1d603e3b2908a90600090a2610863565b60405173ffffffffffffffffffffffffffffffffffffffff8316907f7dc5983a5f99179c76b5bbff56fcf9e8373f1a7078dcef4537a5176b333c2bfe90600090a25b5050565b604080517fa3818b3b000000000000000000000000000000000000000000000000000000008152336004820152905173ffffffffffffffffffffffffffffffffffffffff7f0000000000000000000000000000000000000000000000000000000000000000169163a3818b3b916024808301926020929190829003018186803b1580156108f357600080fd5b505afa158015610907573d6000803e3d6000fd5b505050506040513d602081101561091d57600080fd5b505161098a57604080517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152600f60248201527f4e6f742066726f6d20766f74696e670000000000000000000000000000000000604482015290519081900360640190fd5b620186a08111156109fc57604080517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601460248201527f494e56414c49445f50524f544f434f4c5f464545000000000000000000000000604482015290519081900360640190fd5b6004819055604080517f70726f746f636f6c46656500000000000000000000000000000000000000000081526020810183905281517f22ea5a9dcc7fb5bc447fcb472061adc51caa147724a67a6695d49a9dff162509929181900390910190a150565b60045460055473ffffffffffffffffffffffffffffffffffffffff169091565b60045481565b60005460ff1681565b600054610100900473ffffffffffffffffffffffffffffffffffffffff1681565b60008173ffffffffffffffffffffffffffffffffffffffff168373ffffffffffffffffffffffffffffffffffffffff161415610b4c57604080517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601360248201527f4944454e544943414c5f41444452455353455300000000000000000000000000604482015290519081900360640190fd5b6000808373ffffffffffffffffffffffffffffffffffffffff168573ffffffffffffffffffffffffffffffffffffffff1610610b89578385610b8c565b84845b909250905073ffffffffffffffffffffffffffffffffffffffff8216610c1357604080517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152600c60248201527f5a45524f5f414444524553530000000000000000000000000000000000000000604482015290519081900360640190fd5b73ffffffffffffffffffffffffffffffffffffffff828116600090815260016020908152604080832085851684529091529020541615610cb457604080517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152600b60248201527f504149525f455849535453000000000000000000000000000000000000000000604482015290519081900360640190fd5b604080517fffffffffffffffffffffffffffffffffffffffff000000000000000000000000606085811b821660208085019190915285821b90921660348401528351602881850301815260488401855280519083012060008054606c80870184905287518088039091018152608c909601875293850180517bffffffffffffffffffffffffffffffffffffffffffffffffffffffff167fed25a5a20000000000000000000000000000000000000000000000000000000017815295518551929691959394610100900473ffffffffffffffffffffffffffffffffffffffff169392909182918083835b60208310610dda57805182527fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe09092019160209182019101610d9d565b6001836020036101000a038019825116818451168082178552505050505050905001915050600060405180830381855af49150503d8060008114610e3a576040519150601f19603f3d011682016040523d82523d6000602084013e610e3f565b606091505b509150915081610eb057604080517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601560248201527f4661696c656420746f2063726561746520706169720000000000000000000000604482015290519081900360640190fd5b808060200190516020811015610ec557600080fd5b5051604080517f485cc95500000000000000000000000000000000000000000000000000000000815273ffffffffffffffffffffffffffffffffffffffff8881166004830152878116602483015291519298509088169163485cc9559160448082019260009290919082900301818387803b158015610f4357600080fd5b505af1158015610f57573d6000803e3d6000fd5b5050505073ffffffffffffffffffffffffffffffffffffffff85811660008181526001602081815260408084208a87168086529083528185208054978e167fffffffffffffffffffffffff0000000000000000000000000000000000000000988916811790915584845282862087875284528286208054891682179055600280549586018155958690527f405787fa12a823e0f2b7631cc41b3ba8828b3321ca811111fa75cd3aa3bb5ace90940180549097168417909655925483519283529082015281517f0d3648bd0f6ba80134a33ba9275ac585d9d315f0ad8355cddefde31afa28d0e9929181900390910190a3505050505092915050565b604080517fa3818b3b000000000000000000000000000000000000000000000000000000008152336004820152905173ffffffffffffffffffffffffffffffffffffffff7f0000000000000000000000000000000000000000000000000000000000000000169163a3818b3b916024808301926020929190829003018186803b1580156110de57600080fd5b505afa1580156110f2573d6000803e3d6000fd5b505050506040513d602081101561110857600080fd5b505161117557604080517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152600f60248201527f4e6f742066726f6d20766f74696e670000000000000000000000000000000000604482015290519081900360640190fd5b600580547fffffffffffffffffffffffff00000000000000000000000000000000000000001673ffffffffffffffffffffffffffffffffffffffff83161790819055604080517f70726f746f636f6c466565546f00000000000000000000000000000000000000815260609290921b7fffffffffffffffffffffffffffffffffffffffff00000000000000000000000016602083015280517f22ea5a9dcc7fb5bc447fcb472061adc51caa147724a67a6695d49a9dff1625099281900390910190a150565b600160209081526000928352604080842090915290825290205473ffffffffffffffffffffffffffffffffffffffff1681565b60055473ffffffffffffffffffffffffffffffffffffffff1681565b3373ffffffffffffffffffffffffffffffffffffffff167f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff1663f851a4406040518163ffffffff1660e01b815260040160206040518083038186803b15801561130657600080fd5b505afa15801561131a573d6000803e3d6000fd5b505050506040513d602081101561133057600080fd5b505173ffffffffffffffffffffffffffffffffffffffff1614806114085750604080517fa3818b3b000000000000000000000000000000000000000000000000000000008152336004820152905173ffffffffffffffffffffffffffffffffffffffff7f0000000000000000000000000000000000000000000000000000000000000000169163a3818b3b916024808301926020929190829003018186803b1580156113db57600080fd5b505afa1580156113ef573d6000803e3d6000fd5b505050506040513d602081101561140557600080fd5b50515b61145d576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004018080602001828103825260218152602001806114ef6021913960400191505060405180910390fd5b600080547fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff0016821515179081905560ff16156114c1576040517f71d46a587e8ae446d9442949c41f57019d17b5b4f3610941960517c9c230304790600090a16114eb565b6040517fb821dc27f036017c075c6746b9e8608a15f78f90a8c03acbce13e9438ca76e1b90600090a15b5056fe4e6f742066726f6d2073687574646f776e2061646d696e206f7220766f74696e67a2646970667358221220ca28cdc7f24324693a51f0adfdd811d1f6dc54da65e40b0e2b890b98be1273e864736f6c634300060b003322ea5a9dcc7fb5bc447fcb472061adc51caa147724a67a6695d49a9dff162509"
    };
});
define("@scom/scom-swap/contracts/oswap-openswap-contract/contracts/amm/OSWAP_Factory.ts", ["require", "exports", "@ijstech/eth-contract", "@scom/scom-swap/contracts/oswap-openswap-contract/contracts/amm/OSWAP_Factory.json.ts"], function (require, exports, eth_contract_3, OSWAP_Factory_json_1) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.OSWAP_Factory = void 0;
    class OSWAP_Factory extends eth_contract_3.Contract {
        constructor(wallet, address) {
            super(wallet, address, OSWAP_Factory_json_1.default.abi, OSWAP_Factory_json_1.default.bytecode);
            this.assign();
        }
        deploy(params, options) {
            return this.__deploy([params.governance, params.pairCreator, this.wallet.utils.toString(params.tradeFee), this.wallet.utils.toString(params.protocolFee), params.protocolFeeTo], options);
        }
        parsePairCreatedEvent(receipt) {
            return this.parseEvents(receipt, "PairCreated").map(e => this.decodePairCreatedEvent(e));
        }
        decodePairCreatedEvent(event) {
            let result = event.data;
            return {
                token0: result.token0,
                token1: result.token1,
                pair: result.pair,
                newSize: new eth_contract_3.BigNumber(result.newSize),
                _event: event
            };
        }
        parsePairRestartedEvent(receipt) {
            return this.parseEvents(receipt, "PairRestarted").map(e => this.decodePairRestartedEvent(e));
        }
        decodePairRestartedEvent(event) {
            let result = event.data;
            return {
                pair: result.pair,
                _event: event
            };
        }
        parsePairShutdownedEvent(receipt) {
            return this.parseEvents(receipt, "PairShutdowned").map(e => this.decodePairShutdownedEvent(e));
        }
        decodePairShutdownedEvent(event) {
            let result = event.data;
            return {
                pair: result.pair,
                _event: event
            };
        }
        parseParamSetEvent(receipt) {
            return this.parseEvents(receipt, "ParamSet").map(e => this.decodeParamSetEvent(e));
        }
        decodeParamSetEvent(event) {
            let result = event.data;
            return {
                name: result.name,
                value: result.value,
                _event: event
            };
        }
        parseParamSet2Event(receipt) {
            return this.parseEvents(receipt, "ParamSet2").map(e => this.decodeParamSet2Event(e));
        }
        decodeParamSet2Event(event) {
            let result = event.data;
            return {
                name: result.name,
                value1: result.value1,
                value2: result.value2,
                _event: event
            };
        }
        parseRestartedEvent(receipt) {
            return this.parseEvents(receipt, "Restarted").map(e => this.decodeRestartedEvent(e));
        }
        decodeRestartedEvent(event) {
            let result = event.data;
            return {
                _event: event
            };
        }
        parseShutdownedEvent(receipt) {
            return this.parseEvents(receipt, "Shutdowned").map(e => this.decodeShutdownedEvent(e));
        }
        decodeShutdownedEvent(event) {
            let result = event.data;
            return {
                _event: event
            };
        }
        assign() {
            let allPairs_call = async (param1, options) => {
                let result = await this.call('allPairs', [this.wallet.utils.toString(param1)], options);
                return result;
            };
            this.allPairs = allPairs_call;
            let allPairsLength_call = async (options) => {
                let result = await this.call('allPairsLength', [], options);
                return new eth_contract_3.BigNumber(result);
            };
            this.allPairsLength = allPairsLength_call;
            let getPairParams = (params) => [params.param1, params.param2];
            let getPair_call = async (params, options) => {
                let result = await this.call('getPair', getPairParams(params), options);
                return result;
            };
            this.getPair = getPair_call;
            let governance_call = async (options) => {
                let result = await this.call('governance', [], options);
                return result;
            };
            this.governance = governance_call;
            let isLive_call = async (options) => {
                let result = await this.call('isLive', [], options);
                return result;
            };
            this.isLive = isLive_call;
            let pairCreator_call = async (options) => {
                let result = await this.call('pairCreator', [], options);
                return result;
            };
            this.pairCreator = pairCreator_call;
            let protocolFee_call = async (options) => {
                let result = await this.call('protocolFee', [], options);
                return new eth_contract_3.BigNumber(result);
            };
            this.protocolFee = protocolFee_call;
            let protocolFeeParams_call = async (options) => {
                let result = await this.call('protocolFeeParams', [], options);
                return {
                    _protocolFee: new eth_contract_3.BigNumber(result._protocolFee),
                    _protocolFeeTo: result._protocolFeeTo
                };
            };
            this.protocolFeeParams = protocolFeeParams_call;
            let protocolFeeTo_call = async (options) => {
                let result = await this.call('protocolFeeTo', [], options);
                return result;
            };
            this.protocolFeeTo = protocolFeeTo_call;
            let tradeFee_call = async (options) => {
                let result = await this.call('tradeFee', [], options);
                return new eth_contract_3.BigNumber(result);
            };
            this.tradeFee = tradeFee_call;
            let createPairParams = (params) => [params.tokenA, params.tokenB];
            let createPair_send = async (params, options) => {
                let result = await this.send('createPair', createPairParams(params), options);
                return result;
            };
            let createPair_call = async (params, options) => {
                let result = await this.call('createPair', createPairParams(params), options);
                return result;
            };
            let createPair_txData = async (params, options) => {
                let result = await this.txData('createPair', createPairParams(params), options);
                return result;
            };
            this.createPair = Object.assign(createPair_send, {
                call: createPair_call,
                txData: createPair_txData
            });
            let setLive_send = async (isLive, options) => {
                let result = await this.send('setLive', [isLive], options);
                return result;
            };
            let setLive_call = async (isLive, options) => {
                let result = await this.call('setLive', [isLive], options);
                return;
            };
            let setLive_txData = async (isLive, options) => {
                let result = await this.txData('setLive', [isLive], options);
                return result;
            };
            this.setLive = Object.assign(setLive_send, {
                call: setLive_call,
                txData: setLive_txData
            });
            let setLiveForPairParams = (params) => [params.pair, params.live];
            let setLiveForPair_send = async (params, options) => {
                let result = await this.send('setLiveForPair', setLiveForPairParams(params), options);
                return result;
            };
            let setLiveForPair_call = async (params, options) => {
                let result = await this.call('setLiveForPair', setLiveForPairParams(params), options);
                return;
            };
            let setLiveForPair_txData = async (params, options) => {
                let result = await this.txData('setLiveForPair', setLiveForPairParams(params), options);
                return result;
            };
            this.setLiveForPair = Object.assign(setLiveForPair_send, {
                call: setLiveForPair_call,
                txData: setLiveForPair_txData
            });
            let setProtocolFee_send = async (protocolFee, options) => {
                let result = await this.send('setProtocolFee', [this.wallet.utils.toString(protocolFee)], options);
                return result;
            };
            let setProtocolFee_call = async (protocolFee, options) => {
                let result = await this.call('setProtocolFee', [this.wallet.utils.toString(protocolFee)], options);
                return;
            };
            let setProtocolFee_txData = async (protocolFee, options) => {
                let result = await this.txData('setProtocolFee', [this.wallet.utils.toString(protocolFee)], options);
                return result;
            };
            this.setProtocolFee = Object.assign(setProtocolFee_send, {
                call: setProtocolFee_call,
                txData: setProtocolFee_txData
            });
            let setProtocolFeeTo_send = async (protocolFeeTo, options) => {
                let result = await this.send('setProtocolFeeTo', [protocolFeeTo], options);
                return result;
            };
            let setProtocolFeeTo_call = async (protocolFeeTo, options) => {
                let result = await this.call('setProtocolFeeTo', [protocolFeeTo], options);
                return;
            };
            let setProtocolFeeTo_txData = async (protocolFeeTo, options) => {
                let result = await this.txData('setProtocolFeeTo', [protocolFeeTo], options);
                return result;
            };
            this.setProtocolFeeTo = Object.assign(setProtocolFeeTo_send, {
                call: setProtocolFeeTo_call,
                txData: setProtocolFeeTo_txData
            });
            let setTradeFee_send = async (tradeFee, options) => {
                let result = await this.send('setTradeFee', [this.wallet.utils.toString(tradeFee)], options);
                return result;
            };
            let setTradeFee_call = async (tradeFee, options) => {
                let result = await this.call('setTradeFee', [this.wallet.utils.toString(tradeFee)], options);
                return;
            };
            let setTradeFee_txData = async (tradeFee, options) => {
                let result = await this.txData('setTradeFee', [this.wallet.utils.toString(tradeFee)], options);
                return result;
            };
            this.setTradeFee = Object.assign(setTradeFee_send, {
                call: setTradeFee_call,
                txData: setTradeFee_txData
            });
        }
    }
    OSWAP_Factory._abi = OSWAP_Factory_json_1.default.abi;
    exports.OSWAP_Factory = OSWAP_Factory;
});
define("@scom/scom-swap/contracts/oswap-openswap-contract/contracts/amm/OSWAP_Pair.json.ts", ["require", "exports"], function (require, exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    ///<amd-module name='@scom/scom-swap/contracts/oswap-openswap-contract/contracts/amm/OSWAP_Pair.json.ts'/> 
    exports.default = {
        "abi": [
            { "inputs": [], "stateMutability": "nonpayable", "type": "constructor" },
            { "anonymous": false, "inputs": [{ "indexed": true, "internalType": "address", "name": "owner", "type": "address" }, { "indexed": true, "internalType": "address", "name": "spender", "type": "address" }, { "indexed": false, "internalType": "uint256", "name": "value", "type": "uint256" }], "name": "Approval", "type": "event" },
            { "anonymous": false, "inputs": [{ "indexed": true, "internalType": "address", "name": "sender", "type": "address" }, { "indexed": false, "internalType": "uint256", "name": "amount0", "type": "uint256" }, { "indexed": false, "internalType": "uint256", "name": "amount1", "type": "uint256" }, { "indexed": true, "internalType": "address", "name": "to", "type": "address" }], "name": "Burn", "type": "event" },
            { "anonymous": false, "inputs": [{ "indexed": true, "internalType": "address", "name": "sender", "type": "address" }, { "indexed": false, "internalType": "uint256", "name": "amount0", "type": "uint256" }, { "indexed": false, "internalType": "uint256", "name": "amount1", "type": "uint256" }], "name": "Mint", "type": "event" },
            { "anonymous": false, "inputs": [{ "indexed": false, "internalType": "uint256", "name": "protocolFee", "type": "uint256" }], "name": "ProtocolFeeSet", "type": "event" },
            { "anonymous": false, "inputs": [{ "indexed": true, "internalType": "address", "name": "sender", "type": "address" }, { "indexed": false, "internalType": "uint256", "name": "amount0In", "type": "uint256" }, { "indexed": false, "internalType": "uint256", "name": "amount1In", "type": "uint256" }, { "indexed": false, "internalType": "uint256", "name": "amount0Out", "type": "uint256" }, { "indexed": false, "internalType": "uint256", "name": "amount1Out", "type": "uint256" }, { "indexed": true, "internalType": "address", "name": "to", "type": "address" }], "name": "Swap", "type": "event" },
            { "anonymous": false, "inputs": [{ "indexed": false, "internalType": "uint112", "name": "reserve0", "type": "uint112" }, { "indexed": false, "internalType": "uint112", "name": "reserve1", "type": "uint112" }], "name": "Sync", "type": "event" },
            { "anonymous": false, "inputs": [{ "indexed": false, "internalType": "uint256", "name": "tradeFee", "type": "uint256" }], "name": "TradeFeeSet", "type": "event" },
            { "anonymous": false, "inputs": [{ "indexed": true, "internalType": "address", "name": "from", "type": "address" }, { "indexed": true, "internalType": "address", "name": "to", "type": "address" }, { "indexed": false, "internalType": "uint256", "name": "value", "type": "uint256" }], "name": "Transfer", "type": "event" },
            { "inputs": [], "name": "EIP712_TYPEHASH", "outputs": [{ "internalType": "bytes32", "name": "", "type": "bytes32" }], "stateMutability": "view", "type": "function" },
            { "inputs": [], "name": "MINIMUM_LIQUIDITY", "outputs": [{ "internalType": "uint256", "name": "", "type": "uint256" }], "stateMutability": "view", "type": "function" },
            { "inputs": [], "name": "NAME_HASH", "outputs": [{ "internalType": "bytes32", "name": "", "type": "bytes32" }], "stateMutability": "view", "type": "function" },
            { "inputs": [], "name": "PERMIT_TYPEHASH", "outputs": [{ "internalType": "bytes32", "name": "", "type": "bytes32" }], "stateMutability": "view", "type": "function" },
            { "inputs": [], "name": "VERSION_HASH", "outputs": [{ "internalType": "bytes32", "name": "", "type": "bytes32" }], "stateMutability": "view", "type": "function" },
            { "inputs": [{ "internalType": "address", "name": "", "type": "address" }, { "internalType": "address", "name": "", "type": "address" }], "name": "allowance", "outputs": [{ "internalType": "uint256", "name": "", "type": "uint256" }], "stateMutability": "view", "type": "function" },
            { "inputs": [{ "internalType": "address", "name": "spender", "type": "address" }, { "internalType": "uint256", "name": "value", "type": "uint256" }], "name": "approve", "outputs": [{ "internalType": "bool", "name": "", "type": "bool" }], "stateMutability": "nonpayable", "type": "function" },
            { "inputs": [{ "internalType": "address", "name": "", "type": "address" }], "name": "balanceOf", "outputs": [{ "internalType": "uint256", "name": "", "type": "uint256" }], "stateMutability": "view", "type": "function" },
            { "inputs": [{ "internalType": "address", "name": "to", "type": "address" }], "name": "burn", "outputs": [{ "internalType": "uint256", "name": "amount0", "type": "uint256" }, { "internalType": "uint256", "name": "amount1", "type": "uint256" }], "stateMutability": "nonpayable", "type": "function" },
            { "inputs": [], "name": "decimals", "outputs": [{ "internalType": "uint8", "name": "", "type": "uint8" }], "stateMutability": "view", "type": "function" },
            { "inputs": [], "name": "factory", "outputs": [{ "internalType": "address", "name": "", "type": "address" }], "stateMutability": "view", "type": "function" },
            { "inputs": [{ "internalType": "address", "name": "tokenOut", "type": "address" }, { "internalType": "uint256", "name": "amountOut", "type": "uint256" }], "name": "getAmountIn", "outputs": [{ "internalType": "uint256", "name": "amountIn", "type": "uint256" }], "stateMutability": "view", "type": "function" },
            { "inputs": [{ "internalType": "address", "name": "tokenIn", "type": "address" }, { "internalType": "uint256", "name": "amountIn", "type": "uint256" }], "name": "getAmountOut", "outputs": [{ "internalType": "uint256", "name": "amountOut", "type": "uint256" }], "stateMutability": "view", "type": "function" },
            { "inputs": [], "name": "getReserves", "outputs": [{ "internalType": "uint112", "name": "_reserve0", "type": "uint112" }, { "internalType": "uint112", "name": "_reserve1", "type": "uint112" }, { "internalType": "uint32", "name": "_blockTimestampLast", "type": "uint32" }], "stateMutability": "view", "type": "function" },
            { "inputs": [{ "internalType": "address", "name": "_token0", "type": "address" }, { "internalType": "address", "name": "_token1", "type": "address" }], "name": "initialize", "outputs": [], "stateMutability": "nonpayable", "type": "function" },
            { "inputs": [], "name": "isLive", "outputs": [{ "internalType": "bool", "name": "", "type": "bool" }], "stateMutability": "view", "type": "function" },
            { "inputs": [], "name": "kLast", "outputs": [{ "internalType": "uint256", "name": "", "type": "uint256" }], "stateMutability": "view", "type": "function" },
            { "inputs": [{ "internalType": "address", "name": "to", "type": "address" }], "name": "mint", "outputs": [{ "internalType": "uint256", "name": "liquidity", "type": "uint256" }], "stateMutability": "nonpayable", "type": "function" },
            { "inputs": [], "name": "name", "outputs": [{ "internalType": "string", "name": "", "type": "string" }], "stateMutability": "view", "type": "function" },
            { "inputs": [{ "internalType": "address", "name": "", "type": "address" }], "name": "nonces", "outputs": [{ "internalType": "uint256", "name": "", "type": "uint256" }], "stateMutability": "view", "type": "function" },
            { "inputs": [{ "internalType": "address", "name": "owner", "type": "address" }, { "internalType": "address", "name": "spender", "type": "address" }, { "internalType": "uint256", "name": "value", "type": "uint256" }, { "internalType": "uint256", "name": "deadline", "type": "uint256" }, { "internalType": "uint8", "name": "v", "type": "uint8" }, { "internalType": "bytes32", "name": "r", "type": "bytes32" }, { "internalType": "bytes32", "name": "s", "type": "bytes32" }], "name": "permit", "outputs": [], "stateMutability": "nonpayable", "type": "function" },
            { "inputs": [], "name": "price0CumulativeLast", "outputs": [{ "internalType": "uint256", "name": "", "type": "uint256" }], "stateMutability": "view", "type": "function" },
            { "inputs": [], "name": "price1CumulativeLast", "outputs": [{ "internalType": "uint256", "name": "", "type": "uint256" }], "stateMutability": "view", "type": "function" },
            { "inputs": [], "name": "protocolFee", "outputs": [{ "internalType": "uint256", "name": "", "type": "uint256" }], "stateMutability": "view", "type": "function" },
            { "inputs": [{ "internalType": "bool", "name": "_isLive", "type": "bool" }], "name": "setLive", "outputs": [], "stateMutability": "nonpayable", "type": "function" },
            { "inputs": [{ "internalType": "address", "name": "to", "type": "address" }], "name": "skim", "outputs": [], "stateMutability": "nonpayable", "type": "function" },
            { "inputs": [{ "internalType": "uint256", "name": "amount0Out", "type": "uint256" }, { "internalType": "uint256", "name": "amount1Out", "type": "uint256" }, { "internalType": "address", "name": "to", "type": "address" }, { "internalType": "bytes", "name": "data", "type": "bytes" }], "name": "swap", "outputs": [], "stateMutability": "nonpayable", "type": "function" },
            { "inputs": [], "name": "symbol", "outputs": [{ "internalType": "string", "name": "", "type": "string" }], "stateMutability": "view", "type": "function" },
            { "inputs": [], "name": "sync", "outputs": [], "stateMutability": "nonpayable", "type": "function" },
            { "inputs": [], "name": "token0", "outputs": [{ "internalType": "address", "name": "", "type": "address" }], "stateMutability": "view", "type": "function" },
            { "inputs": [], "name": "token1", "outputs": [{ "internalType": "address", "name": "", "type": "address" }], "stateMutability": "view", "type": "function" },
            { "inputs": [], "name": "totalSupply", "outputs": [{ "internalType": "uint256", "name": "", "type": "uint256" }], "stateMutability": "view", "type": "function" },
            { "inputs": [], "name": "tradeFee", "outputs": [{ "internalType": "uint256", "name": "", "type": "uint256" }], "stateMutability": "view", "type": "function" },
            { "inputs": [{ "internalType": "address", "name": "to", "type": "address" }, { "internalType": "uint256", "name": "value", "type": "uint256" }], "name": "transfer", "outputs": [{ "internalType": "bool", "name": "", "type": "bool" }], "stateMutability": "nonpayable", "type": "function" },
            { "inputs": [{ "internalType": "address", "name": "from", "type": "address" }, { "internalType": "address", "name": "to", "type": "address" }, { "internalType": "uint256", "name": "value", "type": "uint256" }], "name": "transferFrom", "outputs": [{ "internalType": "bool", "name": "", "type": "bool" }], "stateMutability": "nonpayable", "type": "function" },
            { "inputs": [], "name": "updateFee", "outputs": [], "stateMutability": "nonpayable", "type": "function" },
            { "inputs": [], "name": "updateProtocolFee", "outputs": [], "stateMutability": "nonpayable", "type": "function" }
        ],
        "bytecode": "60a06040526001600c553480156200001657600080fd5b5033606081901b6080526004805460ff19166001178155604080516324bcdfbd60e01b8152905183926324bcdfbd92808201926020929091829003018186803b1580156200006357600080fd5b505afa15801562000078573d6000803e3d6000fd5b505050506040513d60208110156200008f57600080fd5b5051600a55604080516358710f4560e11b815290516001600160a01b0383169163b0e21e8a916004808301926020929190829003018186803b158015620000d557600080fd5b505afa158015620000ea573d6000803e3d6000fd5b505050506040513d60208110156200010157600080fd5b5051600b55600a5460408051918252517f1ce638f7798b6e448ecff4c806c7c01d3fedb23354b03f03994f5161b12bad629181900360200190a1600b5460408051918252517fdb5aafdb29539329e37d4e3ee869bc4031941fd55a5dfc92824fbe34b204e30d9181900360200190a15060805160601c613b55620001b2600039806108855280611389528061147252806118055280611d8a52806125a45280612b96528061351d5250613b556000f3fe608060405234801561001057600080fd5b50600436106102775760003560e01c806370a0823111610160578063b8f7a665116100d8578063d21220a71161008c578063dd62ed3e11610071578063dd62ed3e146107a8578063f5ee3348146107e3578063fff6cae91461080257610277565b8063d21220a714610742578063d505accf1461074a57610277565b8063bc25cf77116100bd578063bc25cf77146106ce578063c45a015514610701578063ca706bcf1461070957610277565b8063b8f7a665146106be578063ba9a7a56146106c657610277565b806389afcb441161012f5780639e4e7318116101145780639e4e731814610675578063a9059cbb1461067d578063b0e21e8a146106b657610277565b806389afcb441461062157806395d89b411461066d57610277565b806370a08231146105ab5780637464fc3d146105de578063758cdcf0146105e65780637ecebe00146105ee57610277565b8063253d2c7d116101f3578063485cc955116101c25780635a3d5493116101a75780635a3d549314610537578063632db21c1461053f5780636a6278421461057857610277565b8063485cc955146104f45780635909c0d51461052f57610277565b8063253d2c7d146104be57806330adf81f146104c6578063313ce567146104ce578063481bdf0d146104ec57610277565b8063095ea7b31161024a57806318160ddd1161022f57806318160ddd1461046b57806323b872dd1461047357806324bcdfbd146104b657610277565b8063095ea7b3146103ed5780630dfe16811461043a57610277565b8063022c0d9f1461027c57806304622c2e1461031757806306fdde03146103315780630902f1ac146103ae575b600080fd5b6103156004803603608081101561029257600080fd5b81359160208101359173ffffffffffffffffffffffffffffffffffffffff60408301351691908101906080810160608201356401000000008111156102d657600080fd5b8201836020820111156102e857600080fd5b8035906020019184600183028401116401000000008311171561030a57600080fd5b50909250905061080a565b005b61031f6110a4565b60408051918252519081900360200190f35b6103396110c8565b6040805160208082528351818301528351919283929083019185019080838360005b8381101561037357818101518382015260200161035b565b50505050905090810190601f1680156103a05780820380516001836020036101000a031916815260200191505b509250505060405180910390f35b6103b6611101565b604080516dffffffffffffffffffffffffffff948516815292909316602083015263ffffffff168183015290519081900360600190f35b6104266004803603604081101561040357600080fd5b5073ffffffffffffffffffffffffffffffffffffffff8135169060200135611156565b604080519115158252519081900360200190f35b61044261116d565b6040805173ffffffffffffffffffffffffffffffffffffffff9092168252519081900360200190f35b61031f61118e565b6104266004803603606081101561048957600080fd5b5073ffffffffffffffffffffffffffffffffffffffff813581169160208101359091169060400135611194565b61031f611273565b61031f611279565b61031f61129d565b6104d66112c1565b6040805160ff9092168252519081900360200190f35b6103156112c6565b6103156004803603604081101561050a57600080fd5b5073ffffffffffffffffffffffffffffffffffffffff8135811691602001351661145a565b61031f611572565b61031f611578565b61031f6004803603604081101561055557600080fd5b5073ffffffffffffffffffffffffffffffffffffffff813516906020013561157e565b61031f6004803603602081101561058e57600080fd5b503573ffffffffffffffffffffffffffffffffffffffff16611788565b61031f600480360360208110156105c157600080fd5b503573ffffffffffffffffffffffffffffffffffffffff16611cf7565b61031f611d09565b610315611d0f565b61031f6004803603602081101561060457600080fd5b503573ffffffffffffffffffffffffffffffffffffffff16611e58565b6106546004803603602081101561063757600080fd5b503573ffffffffffffffffffffffffffffffffffffffff16611e6a565b6040805192835260208301919091528051918290030190f35b610339612324565b61031f61235d565b6104266004803603604081101561069357600080fd5b5073ffffffffffffffffffffffffffffffffffffffff8135169060200135612381565b61031f61238e565b610426612394565b61031f61239d565b610315600480360360208110156106e457600080fd5b503573ffffffffffffffffffffffffffffffffffffffff166123a3565b6104426125a2565b61031f6004803603604081101561071f57600080fd5b5073ffffffffffffffffffffffffffffffffffffffff81351690602001356125c6565b6104426127d5565b610315600480360360e081101561076057600080fd5b5073ffffffffffffffffffffffffffffffffffffffff813581169160208101359091169060408101359060608101359060ff6080820135169060a08101359060c001356127f1565b61031f600480360360408110156107be57600080fd5b5073ffffffffffffffffffffffffffffffffffffffff81358116916020013516612b61565b610315600480360360208110156107f957600080fd5b50351515612b7e565b610315612c53565b600c5460011461087b57604080517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152600660248201527f4c4f434b45440000000000000000000000000000000000000000000000000000604482015290519081900360640190fd5b6000600c819055507f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff1663b8f7a6656040518163ffffffff1660e01b8152600401602060405180830381600087803b1580156108eb57600080fd5b505af11580156108ff573d6000803e3d6000fd5b505050506040513d602081101561091557600080fd5b505161098257604080517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152600f60248201527f474c4f42414c4c59205041555345440000000000000000000000000000000000604482015290519081900360640190fd5b60045460ff166109f357604080517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152600b60248201527f5041495220504155534544000000000000000000000000000000000000000000604482015290519081900360640190fd5b6000851180610a025750600084115b610a6d57604080517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601a60248201527f494e53554646494349454e545f4f55545055545f414d4f554e54000000000000604482015290519081900360640190fd5b600080610a78611101565b5091509150816dffffffffffffffffffffffffffff1687108015610aab5750806dffffffffffffffffffffffffffff1686105b610b1657604080517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601660248201527f494e53554646494349454e545f4c495155494449545900000000000000000000604482015290519081900360640190fd5b600454600554600091829173ffffffffffffffffffffffffffffffffffffffff6101009092048216919081169089168214801590610b8057508073ffffffffffffffffffffffffffffffffffffffff168973ffffffffffffffffffffffffffffffffffffffff1614155b610beb57604080517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152600a60248201527f494e56414c49445f544f00000000000000000000000000000000000000000000604482015290519081900360640190fd5b8a15610bfc57610bfc828a8d612e41565b8915610c0d57610c0d818a8c612e41565b8615610cef578873ffffffffffffffffffffffffffffffffffffffff16638a62aac4338d8d8c8c6040518663ffffffff1660e01b8152600401808673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001858152602001848152602001806020018281038252848482818152602001925080828437600081840152601f19601f8201169050808301925050509650505050505050600060405180830381600087803b158015610cd657600080fd5b505af1158015610cea573d6000803e3d6000fd5b505050505b604080517f70a08231000000000000000000000000000000000000000000000000000000008152306004820152905173ffffffffffffffffffffffffffffffffffffffff8416916370a08231916024808301926020929190829003018186803b158015610d5b57600080fd5b505afa158015610d6f573d6000803e3d6000fd5b505050506040513d6020811015610d8557600080fd5b5051604080517f70a08231000000000000000000000000000000000000000000000000000000008152306004820152905191955073ffffffffffffffffffffffffffffffffffffffff8316916370a0823191602480820192602092909190829003018186803b158015610df757600080fd5b505afa158015610e0b573d6000803e3d6000fd5b505050506040513d6020811015610e2157600080fd5b5051925060009150506dffffffffffffffffffffffffffff85168a90038311610e4b576000610e61565b89856dffffffffffffffffffffffffffff160383035b9050600089856dffffffffffffffffffffffffffff16038311610e85576000610e9b565b89856dffffffffffffffffffffffffffff160383035b90506000821180610eac5750600081115b610f1757604080517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601960248201527f494e53554646494349454e545f494e5055545f414d4f554e5400000000000000604482015290519081900360640190fd5b6000610f50610f31600a548561304e90919063ffffffff16565b610f4487620186a063ffffffff61304e16565b9063ffffffff6130c816565b90506000610f6c610f31600a548561304e90919063ffffffff16565b9050610fa66402540be400610f9a6dffffffffffffffffffffffffffff8b8116908b1663ffffffff61304e16565b9063ffffffff61304e16565b610fb6838363ffffffff61304e16565b101561102357604080517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152600160248201527f4b00000000000000000000000000000000000000000000000000000000000000604482015290519081900360640190fd5b50506110318484888861310a565b60408051838152602081018390528082018d9052606081018c9052905173ffffffffffffffffffffffffffffffffffffffff8b169133917fd78ad95fa46c994b6551d0da85fc275fe613ce37657fb8d5e3d130840159d8229181900360800190a350506001600c55505050505050505050565b7fccf0ed8d136d82190c405c1be2cf07fff31d482a66996af4f69b3259174a23ba81565b6040518060400160405280600c81526020017f4f70656e53776170204c5073000000000000000000000000000000000000000081525081565b6006546dffffffffffffffffffffffffffff808216926e0100000000000000000000000000008304909116917c0100000000000000000000000000000000000000000000000000000000900463ffffffff1690565b60006111633384846133c6565b5060015b92915050565b600454610100900473ffffffffffffffffffffffffffffffffffffffff1681565b60005481565b73ffffffffffffffffffffffffffffffffffffffff831660009081526002602090815260408083203384529091528120547fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff1461125e5773ffffffffffffffffffffffffffffffffffffffff8416600090815260026020908152604080832033845290915290205461122c908363ffffffff6130c816565b73ffffffffffffffffffffffffffffffffffffffff851660009081526002602090815260408083203384529091529020555b611269848484613435565b5060019392505050565b600a5481565b7f8b73c3c69bb8fe3d512ecc4cf759cc79239f7b179b0ffacaa9a75d522b39400f81565b7f6e71edae12b1b97f4d1f60370fef10105fa2faae0126114a169c64845d6126c981565b601281565b600c5460011461133757604080517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152600660248201527f4c4f434b45440000000000000000000000000000000000000000000000000000604482015290519081900360640190fd5b6000600c81905580611347611101565b509150915060006113588383613516565b90508015611387576113836dffffffffffffffffffffffffffff84811690841663ffffffff61304e16565b6009555b7f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff1663b0e21e8a6040518163ffffffff1660e01b815260040160206040518083038186803b1580156113ed57600080fd5b505afa158015611401573d6000803e3d6000fd5b505050506040513d602081101561141757600080fd5b5051600b81905560408051918252517fdb5aafdb29539329e37d4e3ee869bc4031941fd55a5dfc92824fbe34b204e30d9181900360200190a150506001600c5550565b3373ffffffffffffffffffffffffffffffffffffffff7f000000000000000000000000000000000000000000000000000000000000000016146114fe57604080517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152600960248201527f464f5242494444454e0000000000000000000000000000000000000000000000604482015290519081900360640190fd5b600480547fffffffffffffffffffffff0000000000000000000000000000000000000000ff1661010073ffffffffffffffffffffffffffffffffffffffff94851602179055600580547fffffffffffffffffffffffff00000000000000000000000000000000000000001691909216179055565b60075481565b60085481565b600080611599600a54620186a06130c890919063ffffffff16565b600554909150600090819073ffffffffffffffffffffffffffffffffffffffff8781169116146115f0576006546dffffffffffffffffffffffffffff6e01000000000000000000000000000082048116911661161a565b6006546dffffffffffffffffffffffffffff808216916e0100000000000000000000000000009004165b6dffffffffffffffffffffffffffff1691506dffffffffffffffffffffffffffff169150600085116116ad57604080517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601a60248201527f494e53554646494349454e545f4f55545055545f414d4f554e54000000000000604482015290519081900360640190fd5b6000821180156116bd5750600081115b61172857604080517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601660248201527f494e53554646494349454e545f4c495155494449545900000000000000000000604482015290519081900360640190fd5b6000611741620186a0610f9a858963ffffffff61304e16565b9050600061175985610f9a858a63ffffffff6130c816565b905061177c6001611770848463ffffffff6136d616565b9063ffffffff61371816565b98975050505050505050565b6000600c546001146117fb57604080517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152600660248201527f4c4f434b45440000000000000000000000000000000000000000000000000000604482015290519081900360640190fd5b6000600c819055507f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff1663b8f7a6656040518163ffffffff1660e01b8152600401602060405180830381600087803b15801561186b57600080fd5b505af115801561187f573d6000803e3d6000fd5b505050506040513d602081101561189557600080fd5b505161190257604080517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152600f60248201527f474c4f42414c4c59205041555345440000000000000000000000000000000000604482015290519081900360640190fd5b60045460ff1661197357604080517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152600b60248201527f5041495220504155534544000000000000000000000000000000000000000000604482015290519081900360640190fd5b60008061197e611101565b50915091506000600460019054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff166370a08231306040518263ffffffff1660e01b8152600401808273ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200191505060206040518083038186803b158015611a2457600080fd5b505afa158015611a38573d6000803e3d6000fd5b505050506040513d6020811015611a4e57600080fd5b5051600554604080517f70a08231000000000000000000000000000000000000000000000000000000008152306004820152905192935060009273ffffffffffffffffffffffffffffffffffffffff909216916370a0823191602480820192602092909190829003018186803b158015611ac757600080fd5b505afa158015611adb573d6000803e3d6000fd5b505050506040513d6020811015611af157600080fd5b505190506000611b17836dffffffffffffffffffffffffffff871663ffffffff6130c816565b90506000611b3b836dffffffffffffffffffffffffffff871663ffffffff6130c816565b90506000611b498787613516565b60005490915080611b8657611b726103e8610f44611b6d878763ffffffff61304e16565b61378c565b9850611b8160006103e86137de565b611be3565b611be06dffffffffffffffffffffffffffff8916611baa868463ffffffff61304e16565b81611bb157fe5b046dffffffffffffffffffffffffffff8916611bd3868563ffffffff61304e16565b81611bda57fe5b0461388e565b98505b60008911611c5257604080517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601d60248201527f494e53554646494349454e545f4c49515549444954595f4d494e544544000000604482015290519081900360640190fd5b611c5c8a8a6137de565b611c6886868a8a61310a565b8115611caa57600654611ca6906dffffffffffffffffffffffffffff808216916e01000000000000000000000000000090041663ffffffff61304e16565b6009555b6040805185815260208101859052815133927f4c209b5fc8ad50758f13e2e1088ba56a560dff690a1c6fef26394f4c03821c4f928290030190a250506001600c5550949695505050505050565b60016020526000908152604090205481565b60095481565b600c54600114611d8057604080517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152600660248201527f4c4f434b45440000000000000000000000000000000000000000000000000000604482015290519081900360640190fd5b6000600c819055507f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff166324bcdfbd6040518163ffffffff1660e01b815260040160206040518083038186803b158015611dee57600080fd5b505afa158015611e02573d6000803e3d6000fd5b505050506040513d6020811015611e1857600080fd5b5051600a81905560408051918252517f1ce638f7798b6e448ecff4c806c7c01d3fedb23354b03f03994f5161b12bad629181900360200190a16001600c55565b60036020526000908152604090205481565b600080600c54600114611ede57604080517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152600660248201527f4c4f434b45440000000000000000000000000000000000000000000000000000604482015290519081900360640190fd5b6000600c81905580611eee611101565b5030600090815260016020526040812054929450909250611f0f8484613516565b60048054600554604080517f70a0823100000000000000000000000000000000000000000000000000000000815230948101949094525193945073ffffffffffffffffffffffffffffffffffffffff61010090920482169391169160009184916370a08231916024808301926020929190829003018186803b158015611f9457600080fd5b505afa158015611fa8573d6000803e3d6000fd5b505050506040513d6020811015611fbe57600080fd5b5051604080517f70a08231000000000000000000000000000000000000000000000000000000008152306004820152905191925060009173ffffffffffffffffffffffffffffffffffffffff8516916370a08231916024808301926020929190829003018186803b15801561203257600080fd5b505afa158015612046573d6000803e3d6000fd5b505050506040513d602081101561205c57600080fd5b505160005490915080612075888563ffffffff61304e16565b8161207c57fe5b049a5080612090888463ffffffff61304e16565b8161209757fe5b04995060008b1180156120aa575060008a115b61211557604080517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601d60248201527f494e53554646494349454e545f4c49515549444954595f4255524e4544000000604482015290519081900360640190fd5b61211f30886138a4565b61212a858d8d612e41565b612135848d8c612e41565b604080517f70a08231000000000000000000000000000000000000000000000000000000008152306004820152905173ffffffffffffffffffffffffffffffffffffffff8716916370a08231916024808301926020929190829003018186803b1580156121a157600080fd5b505afa1580156121b5573d6000803e3d6000fd5b505050506040513d60208110156121cb57600080fd5b5051604080517f70a08231000000000000000000000000000000000000000000000000000000008152306004820152905191945073ffffffffffffffffffffffffffffffffffffffff8616916370a0823191602480820192602092909190829003018186803b15801561223d57600080fd5b505afa158015612251573d6000803e3d6000fd5b505050506040513d602081101561226757600080fd5b5051915061227783838b8b61310a565b85156122b9576006546122b5906dffffffffffffffffffffffffffff808216916e01000000000000000000000000000090041663ffffffff61304e16565b6009555b604080518c8152602081018c9052815173ffffffffffffffffffffffffffffffffffffffff8f169233927fdccd412f0b1252819cb1fd330b93224ca42612892bb3f4f789976e6d81936496929081900390910190a35050505050505050506001600c81905550915091565b6040518060400160405280600881526020017f4f535741502d4c5000000000000000000000000000000000000000000000000081525081565b7fc89efdaa54c0f20c7adf612882df0950f5a951637e0307cdcb4c672f298b8bc681565b6000611163338484613435565b600b5481565b60045460ff1681565b6103e881565b600c5460011461241457604080517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152600660248201527f4c4f434b45440000000000000000000000000000000000000000000000000000604482015290519081900360640190fd5b6000600c5560048054600554600654604080517f70a0823100000000000000000000000000000000000000000000000000000000815230958101959095525161010090930473ffffffffffffffffffffffffffffffffffffffff908116949216926124f992859287926124f4926dffffffffffffffffffffffffffff9092169185916370a0823191602480820192602092909190829003018186803b1580156124bc57600080fd5b505afa1580156124d0573d6000803e3d6000fd5b505050506040513d60208110156124e657600080fd5b50519063ffffffff6130c816565b612e41565b600654604080517f70a08231000000000000000000000000000000000000000000000000000000008152306004820152905161259892849287926124f4926e01000000000000000000000000000090046dffffffffffffffffffffffffffff169173ffffffffffffffffffffffffffffffffffffffff8616916370a0823191602480820192602092909190829003018186803b1580156124bc57600080fd5b50506001600c5550565b7f000000000000000000000000000000000000000000000000000000000000000081565b6000806125e1600a54620186a06130c890919063ffffffff16565b600454909150600090819073ffffffffffffffffffffffffffffffffffffffff878116610100909204161461263d576006546dffffffffffffffffffffffffffff6e010000000000000000000000000000820481169116612667565b6006546dffffffffffffffffffffffffffff808216916e0100000000000000000000000000009004165b6dffffffffffffffffffffffffffff1691506dffffffffffffffffffffffffffff169150600085116126fa57604080517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601960248201527f494e53554646494349454e545f494e5055545f414d4f554e5400000000000000604482015290519081900360640190fd5b60008211801561270a5750600081115b61277557604080517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601660248201527f494e53554646494349454e545f4c495155494449545900000000000000000000604482015290519081900360640190fd5b6000612787868563ffffffff61304e16565b9050600061279b828463ffffffff61304e16565b905060006127b68361177087620186a063ffffffff61304e16565b90506127c8828263ffffffff6136d616565b9998505050505050505050565b60055473ffffffffffffffffffffffffffffffffffffffff1681565b4284101561286057604080517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152600760248201527f4558504952454400000000000000000000000000000000000000000000000000604482015290519081900360640190fd5b604080517f8b73c3c69bb8fe3d512ecc4cf759cc79239f7b179b0ffacaa9a75d522b39400f6020808301919091527fccf0ed8d136d82190c405c1be2cf07fff31d482a66996af4f69b3259174a23ba828401527fc89efdaa54c0f20c7adf612882df0950f5a951637e0307cdcb4c672f298b8bc660608301524660808301523060a0808401919091528351808403909101815260c08301845280519082012073ffffffffffffffffffffffffffffffffffffffff8b8116600081815260038552868120805460018082019092557f6e71edae12b1b97f4d1f60370fef10105fa2faae0126114a169c64845d6126c960e0890152610100880193909352928d1661012087015261014086018c90526101608601919091526101808086018b9052865180870390910181526101a0860187528051908501207f19010000000000000000000000000000000000000000000000000000000000006101c08701526101c286018490526101e28087019190915286518087039091018152610202860180885281519186019190912090829052610222860180885281905260ff8a16610242870152610262860189905261028286018890529551929594909391926102a280830193927fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe08301929081900390910190855afa158015612a64573d6000803e3d6000fd5b50506040517fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe0015191505073ffffffffffffffffffffffffffffffffffffffff811615801590612adf57508973ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff16145b612b4a57604080517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601160248201527f494e56414c49445f5349474e4154555245000000000000000000000000000000604482015290519081900360640190fd5b612b558a8a8a6133c6565b50505050505050505050565b600260209081526000928352604080842090915290825290205481565b3373ffffffffffffffffffffffffffffffffffffffff7f00000000000000000000000000000000000000000000000000000000000000001614612c2257604080517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152600960248201527f464f5242494444454e0000000000000000000000000000000000000000000000604482015290519081900360640190fd5b600480547fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff0016911515919091179055565b600c54600114612cc457604080517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152600660248201527f4c4f434b45440000000000000000000000000000000000000000000000000000604482015290519081900360640190fd5b6000600c5560048054604080517f70a08231000000000000000000000000000000000000000000000000000000008152309381019390935251612e3a9261010090920473ffffffffffffffffffffffffffffffffffffffff16916370a08231916024808301926020929190829003018186803b158015612d4357600080fd5b505afa158015612d57573d6000803e3d6000fd5b505050506040513d6020811015612d6d57600080fd5b5051600554604080517f70a08231000000000000000000000000000000000000000000000000000000008152306004820152905173ffffffffffffffffffffffffffffffffffffffff909216916370a0823191602480820192602092909190829003018186803b158015612de057600080fd5b505afa158015612df4573d6000803e3d6000fd5b505050506040513d6020811015612e0a57600080fd5b50516006546dffffffffffffffffffffffffffff808216916e01000000000000000000000000000090041661310a565b6001600c55565b604080518082018252601981527f7472616e7366657228616464726573732c75696e743235362900000000000000602091820152815173ffffffffffffffffffffffffffffffffffffffff85811660248301526044808301869052845180840390910181526064909201845291810180517bffffffffffffffffffffffffffffffffffffffffffffffffffffffff167fa9059cbb000000000000000000000000000000000000000000000000000000001781529251815160009460609489169392918291908083835b60208310612f4757805182527fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe09092019160209182019101612f0a565b6001836020036101000a0380198251168184511680821785525050505050509050019150506000604051808303816000865af19150503d8060008114612fa9576040519150601f19603f3d011682016040523d82523d6000602084013e612fae565b606091505b5091509150818015612fdc575080511580612fdc5750808060200190516020811015612fd957600080fd5b50515b61304757604080517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152600f60248201527f5452414e534645525f4641494c45440000000000000000000000000000000000604482015290519081900360640190fd5b5050505050565b60008261305d57506000611167565b8282028284828161306a57fe5b04146130c1576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401808060200182810382526021815260200180613aff6021913960400191505060405180910390fd5b9392505050565b60006130c183836040518060400160405280601e81526020017f536166654d6174683a207375627472616374696f6e206f766572666c6f770000815250613969565b6dffffffffffffffffffffffffffff841180159061313657506dffffffffffffffffffffffffffff8311155b6131a157604080517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152600860248201527f4f564552464c4f57000000000000000000000000000000000000000000000000604482015290519081900360640190fd5b60065463ffffffff428116917c0100000000000000000000000000000000000000000000000000000000900481168203908116158015906131f157506dffffffffffffffffffffffffffff841615155b801561320c57506dffffffffffffffffffffffffffff831615155b156132bc578063ffffffff1661324f8561322586613a1a565b7bffffffffffffffffffffffffffffffffffffffffffffffffffffffff169063ffffffff613a3e16565b600780547bffffffffffffffffffffffffffffffffffffffffffffffffffffffff929092169290920201905563ffffffff811661328f8461322587613a1a565b600880547bffffffffffffffffffffffffffffffffffffffffffffffffffffffff92909216929092020190555b600680547fffffffffffffffffffffffffffffffffffff0000000000000000000000000000166dffffffffffffffffffffffffffff888116919091177fffffffff0000000000000000000000000000ffffffffffffffffffffffffffff166e0100000000000000000000000000008883168102919091177bffffffffffffffffffffffffffffffffffffffffffffffffffffffff167c010000000000000000000000000000000000000000000000000000000063ffffffff871602179283905560408051848416815291909304909116602082015281517f1c411e9a96e071241c2f21f7726b17ae89e3cab4c78be50e062b03a9fffbbad1929181900390910190a1505050505050565b73ffffffffffffffffffffffffffffffffffffffff808416600081815260026020908152604080832094871680845294825291829020859055815185815291517f8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b9259281900390910190a3505050565b73ffffffffffffffffffffffffffffffffffffffff831660009081526001602052604090205461346b908263ffffffff6130c816565b73ffffffffffffffffffffffffffffffffffffffff80851660009081526001602052604080822093909355908416815220546134ad908263ffffffff61371816565b73ffffffffffffffffffffffffffffffffffffffff80841660008181526001602090815260409182902094909455805185815290519193928716927fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef92918290030190a3505050565b60008060007f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff16639931e80b6040518163ffffffff1660e01b8152600401604080518083038186803b15801561358057600080fd5b505afa158015613594573d6000803e3d6000fd5b505050506040513d60408110156135aa57600080fd5b508051602090910151600b5460095473ffffffffffffffffffffffffffffffffffffffff83161580159750939550919350916136b35780156136ae57600061360e611b6d6dffffffffffffffffffffffffffff8a8116908a1663ffffffff61304e16565b9050600061361b8361378c565b9050808211156136ab57600061364d85610f9a61363e868663ffffffff6130c816565b6000549063ffffffff61304e16565b90506000613687613664848863ffffffff61304e16565b61177061367a620186a08a63ffffffff6130c816565b879063ffffffff61304e16565b9050600081838161369457fe5b04905080156136a7576136a788826137de565b5050505b50505b6136bf565b80156136bf5760006009555b8382146136cc57600b8490555b5050505092915050565b60006130c183836040518060400160405280601a81526020017f536166654d6174683a206469766973696f6e206279207a65726f000000000000815250613a7f565b6000828201838110156130c157604080517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601b60248201527f536166654d6174683a206164646974696f6e206f766572666c6f770000000000604482015290519081900360640190fd5b600060038211156137cf575080600160028204015b818110156137c9578091506002818285816137b857fe5b0401816137c157fe5b0490506137a1565b506137d9565b81156137d9575060015b919050565b6000546137f1908263ffffffff61371816565b600090815573ffffffffffffffffffffffffffffffffffffffff8316815260016020526040902054613829908263ffffffff61371816565b73ffffffffffffffffffffffffffffffffffffffff831660008181526001602090815260408083209490945583518581529351929391927fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef9281900390910190a35050565b600081831061389d57816130c1565b5090919050565b73ffffffffffffffffffffffffffffffffffffffff82166000908152600160205260409020546138da908263ffffffff6130c816565b73ffffffffffffffffffffffffffffffffffffffff831660009081526001602052604081209190915554613914908263ffffffff6130c816565b600090815560408051838152905173ffffffffffffffffffffffffffffffffffffffff8516917fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef919081900360200190a35050565b60008184841115613a12576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004018080602001828103825283818151815260200191508051906020019080838360005b838110156139d75781810151838201526020016139bf565b50505050905090810190601f168015613a045780820380516001836020036101000a031916815260200191505b509250505060405180910390fd5b505050900390565b6dffffffffffffffffffffffffffff166e0100000000000000000000000000000290565b60006dffffffffffffffffffffffffffff82167bffffffffffffffffffffffffffffffffffffffffffffffffffffffff841681613a7757fe5b049392505050565b60008183613ae8576040517f08c379a00000000000000000000000000000000000000000000000000000000081526020600482018181528351602484015283519092839260449091019190850190808383600083156139d75781810151838201526020016139bf565b506000838581613af457fe5b049594505050505056fe536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f77a264697066735822122027a8d76894289a79faa3322bb1179c0d57c06b8e157fef9c3f081474c0dc79d364736f6c634300060b0033"
    };
});
define("@scom/scom-swap/contracts/oswap-openswap-contract/contracts/amm/OSWAP_Pair.ts", ["require", "exports", "@ijstech/eth-contract", "@scom/scom-swap/contracts/oswap-openswap-contract/contracts/amm/OSWAP_Pair.json.ts"], function (require, exports, eth_contract_4, OSWAP_Pair_json_1) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.OSWAP_Pair = void 0;
    class OSWAP_Pair extends eth_contract_4.Contract {
        constructor(wallet, address) {
            super(wallet, address, OSWAP_Pair_json_1.default.abi, OSWAP_Pair_json_1.default.bytecode);
            this.assign();
        }
        deploy(options) {
            return this.__deploy([], options);
        }
        parseApprovalEvent(receipt) {
            return this.parseEvents(receipt, "Approval").map(e => this.decodeApprovalEvent(e));
        }
        decodeApprovalEvent(event) {
            let result = event.data;
            return {
                owner: result.owner,
                spender: result.spender,
                value: new eth_contract_4.BigNumber(result.value),
                _event: event
            };
        }
        parseBurnEvent(receipt) {
            return this.parseEvents(receipt, "Burn").map(e => this.decodeBurnEvent(e));
        }
        decodeBurnEvent(event) {
            let result = event.data;
            return {
                sender: result.sender,
                amount0: new eth_contract_4.BigNumber(result.amount0),
                amount1: new eth_contract_4.BigNumber(result.amount1),
                to: result.to,
                _event: event
            };
        }
        parseMintEvent(receipt) {
            return this.parseEvents(receipt, "Mint").map(e => this.decodeMintEvent(e));
        }
        decodeMintEvent(event) {
            let result = event.data;
            return {
                sender: result.sender,
                amount0: new eth_contract_4.BigNumber(result.amount0),
                amount1: new eth_contract_4.BigNumber(result.amount1),
                _event: event
            };
        }
        parseProtocolFeeSetEvent(receipt) {
            return this.parseEvents(receipt, "ProtocolFeeSet").map(e => this.decodeProtocolFeeSetEvent(e));
        }
        decodeProtocolFeeSetEvent(event) {
            let result = event.data;
            return {
                protocolFee: new eth_contract_4.BigNumber(result.protocolFee),
                _event: event
            };
        }
        parseSwapEvent(receipt) {
            return this.parseEvents(receipt, "Swap").map(e => this.decodeSwapEvent(e));
        }
        decodeSwapEvent(event) {
            let result = event.data;
            return {
                sender: result.sender,
                amount0In: new eth_contract_4.BigNumber(result.amount0In),
                amount1In: new eth_contract_4.BigNumber(result.amount1In),
                amount0Out: new eth_contract_4.BigNumber(result.amount0Out),
                amount1Out: new eth_contract_4.BigNumber(result.amount1Out),
                to: result.to,
                _event: event
            };
        }
        parseSyncEvent(receipt) {
            return this.parseEvents(receipt, "Sync").map(e => this.decodeSyncEvent(e));
        }
        decodeSyncEvent(event) {
            let result = event.data;
            return {
                reserve0: new eth_contract_4.BigNumber(result.reserve0),
                reserve1: new eth_contract_4.BigNumber(result.reserve1),
                _event: event
            };
        }
        parseTradeFeeSetEvent(receipt) {
            return this.parseEvents(receipt, "TradeFeeSet").map(e => this.decodeTradeFeeSetEvent(e));
        }
        decodeTradeFeeSetEvent(event) {
            let result = event.data;
            return {
                tradeFee: new eth_contract_4.BigNumber(result.tradeFee),
                _event: event
            };
        }
        parseTransferEvent(receipt) {
            return this.parseEvents(receipt, "Transfer").map(e => this.decodeTransferEvent(e));
        }
        decodeTransferEvent(event) {
            let result = event.data;
            return {
                from: result.from,
                to: result.to,
                value: new eth_contract_4.BigNumber(result.value),
                _event: event
            };
        }
        assign() {
            let EIP712_TYPEHASH_call = async (options) => {
                let result = await this.call('EIP712_TYPEHASH', [], options);
                return result;
            };
            this.EIP712_TYPEHASH = EIP712_TYPEHASH_call;
            let MINIMUM_LIQUIDITY_call = async (options) => {
                let result = await this.call('MINIMUM_LIQUIDITY', [], options);
                return new eth_contract_4.BigNumber(result);
            };
            this.MINIMUM_LIQUIDITY = MINIMUM_LIQUIDITY_call;
            let NAME_HASH_call = async (options) => {
                let result = await this.call('NAME_HASH', [], options);
                return result;
            };
            this.NAME_HASH = NAME_HASH_call;
            let PERMIT_TYPEHASH_call = async (options) => {
                let result = await this.call('PERMIT_TYPEHASH', [], options);
                return result;
            };
            this.PERMIT_TYPEHASH = PERMIT_TYPEHASH_call;
            let VERSION_HASH_call = async (options) => {
                let result = await this.call('VERSION_HASH', [], options);
                return result;
            };
            this.VERSION_HASH = VERSION_HASH_call;
            let allowanceParams = (params) => [params.param1, params.param2];
            let allowance_call = async (params, options) => {
                let result = await this.call('allowance', allowanceParams(params), options);
                return new eth_contract_4.BigNumber(result);
            };
            this.allowance = allowance_call;
            let balanceOf_call = async (param1, options) => {
                let result = await this.call('balanceOf', [param1], options);
                return new eth_contract_4.BigNumber(result);
            };
            this.balanceOf = balanceOf_call;
            let decimals_call = async (options) => {
                let result = await this.call('decimals', [], options);
                return new eth_contract_4.BigNumber(result);
            };
            this.decimals = decimals_call;
            let factory_call = async (options) => {
                let result = await this.call('factory', [], options);
                return result;
            };
            this.factory = factory_call;
            let getAmountInParams = (params) => [params.tokenOut, this.wallet.utils.toString(params.amountOut)];
            let getAmountIn_call = async (params, options) => {
                let result = await this.call('getAmountIn', getAmountInParams(params), options);
                return new eth_contract_4.BigNumber(result);
            };
            this.getAmountIn = getAmountIn_call;
            let getAmountOutParams = (params) => [params.tokenIn, this.wallet.utils.toString(params.amountIn)];
            let getAmountOut_call = async (params, options) => {
                let result = await this.call('getAmountOut', getAmountOutParams(params), options);
                return new eth_contract_4.BigNumber(result);
            };
            this.getAmountOut = getAmountOut_call;
            let getReserves_call = async (options) => {
                let result = await this.call('getReserves', [], options);
                return {
                    _reserve0: new eth_contract_4.BigNumber(result._reserve0),
                    _reserve1: new eth_contract_4.BigNumber(result._reserve1),
                    _blockTimestampLast: new eth_contract_4.BigNumber(result._blockTimestampLast)
                };
            };
            this.getReserves = getReserves_call;
            let isLive_call = async (options) => {
                let result = await this.call('isLive', [], options);
                return result;
            };
            this.isLive = isLive_call;
            let kLast_call = async (options) => {
                let result = await this.call('kLast', [], options);
                return new eth_contract_4.BigNumber(result);
            };
            this.kLast = kLast_call;
            let name_call = async (options) => {
                let result = await this.call('name', [], options);
                return result;
            };
            this.name = name_call;
            let nonces_call = async (param1, options) => {
                let result = await this.call('nonces', [param1], options);
                return new eth_contract_4.BigNumber(result);
            };
            this.nonces = nonces_call;
            let price0CumulativeLast_call = async (options) => {
                let result = await this.call('price0CumulativeLast', [], options);
                return new eth_contract_4.BigNumber(result);
            };
            this.price0CumulativeLast = price0CumulativeLast_call;
            let price1CumulativeLast_call = async (options) => {
                let result = await this.call('price1CumulativeLast', [], options);
                return new eth_contract_4.BigNumber(result);
            };
            this.price1CumulativeLast = price1CumulativeLast_call;
            let protocolFee_call = async (options) => {
                let result = await this.call('protocolFee', [], options);
                return new eth_contract_4.BigNumber(result);
            };
            this.protocolFee = protocolFee_call;
            let symbol_call = async (options) => {
                let result = await this.call('symbol', [], options);
                return result;
            };
            this.symbol = symbol_call;
            let token0_call = async (options) => {
                let result = await this.call('token0', [], options);
                return result;
            };
            this.token0 = token0_call;
            let token1_call = async (options) => {
                let result = await this.call('token1', [], options);
                return result;
            };
            this.token1 = token1_call;
            let totalSupply_call = async (options) => {
                let result = await this.call('totalSupply', [], options);
                return new eth_contract_4.BigNumber(result);
            };
            this.totalSupply = totalSupply_call;
            let tradeFee_call = async (options) => {
                let result = await this.call('tradeFee', [], options);
                return new eth_contract_4.BigNumber(result);
            };
            this.tradeFee = tradeFee_call;
            let approveParams = (params) => [params.spender, this.wallet.utils.toString(params.value)];
            let approve_send = async (params, options) => {
                let result = await this.send('approve', approveParams(params), options);
                return result;
            };
            let approve_call = async (params, options) => {
                let result = await this.call('approve', approveParams(params), options);
                return result;
            };
            let approve_txData = async (params, options) => {
                let result = await this.txData('approve', approveParams(params), options);
                return result;
            };
            this.approve = Object.assign(approve_send, {
                call: approve_call,
                txData: approve_txData
            });
            let burn_send = async (to, options) => {
                let result = await this.send('burn', [to], options);
                return result;
            };
            let burn_call = async (to, options) => {
                let result = await this.call('burn', [to], options);
                return {
                    amount0: new eth_contract_4.BigNumber(result.amount0),
                    amount1: new eth_contract_4.BigNumber(result.amount1)
                };
            };
            let burn_txData = async (to, options) => {
                let result = await this.txData('burn', [to], options);
                return result;
            };
            this.burn = Object.assign(burn_send, {
                call: burn_call,
                txData: burn_txData
            });
            let initializeParams = (params) => [params.token0, params.token1];
            let initialize_send = async (params, options) => {
                let result = await this.send('initialize', initializeParams(params), options);
                return result;
            };
            let initialize_call = async (params, options) => {
                let result = await this.call('initialize', initializeParams(params), options);
                return;
            };
            let initialize_txData = async (params, options) => {
                let result = await this.txData('initialize', initializeParams(params), options);
                return result;
            };
            this.initialize = Object.assign(initialize_send, {
                call: initialize_call,
                txData: initialize_txData
            });
            let mint_send = async (to, options) => {
                let result = await this.send('mint', [to], options);
                return result;
            };
            let mint_call = async (to, options) => {
                let result = await this.call('mint', [to], options);
                return new eth_contract_4.BigNumber(result);
            };
            let mint_txData = async (to, options) => {
                let result = await this.txData('mint', [to], options);
                return result;
            };
            this.mint = Object.assign(mint_send, {
                call: mint_call,
                txData: mint_txData
            });
            let permitParams = (params) => [params.owner, params.spender, this.wallet.utils.toString(params.value), this.wallet.utils.toString(params.deadline), this.wallet.utils.toString(params.v), this.wallet.utils.stringToBytes32(params.r), this.wallet.utils.stringToBytes32(params.s)];
            let permit_send = async (params, options) => {
                let result = await this.send('permit', permitParams(params), options);
                return result;
            };
            let permit_call = async (params, options) => {
                let result = await this.call('permit', permitParams(params), options);
                return;
            };
            let permit_txData = async (params, options) => {
                let result = await this.txData('permit', permitParams(params), options);
                return result;
            };
            this.permit = Object.assign(permit_send, {
                call: permit_call,
                txData: permit_txData
            });
            let setLive_send = async (isLive, options) => {
                let result = await this.send('setLive', [isLive], options);
                return result;
            };
            let setLive_call = async (isLive, options) => {
                let result = await this.call('setLive', [isLive], options);
                return;
            };
            let setLive_txData = async (isLive, options) => {
                let result = await this.txData('setLive', [isLive], options);
                return result;
            };
            this.setLive = Object.assign(setLive_send, {
                call: setLive_call,
                txData: setLive_txData
            });
            let skim_send = async (to, options) => {
                let result = await this.send('skim', [to], options);
                return result;
            };
            let skim_call = async (to, options) => {
                let result = await this.call('skim', [to], options);
                return;
            };
            let skim_txData = async (to, options) => {
                let result = await this.txData('skim', [to], options);
                return result;
            };
            this.skim = Object.assign(skim_send, {
                call: skim_call,
                txData: skim_txData
            });
            let swapParams = (params) => [this.wallet.utils.toString(params.amount0Out), this.wallet.utils.toString(params.amount1Out), params.to, this.wallet.utils.stringToBytes(params.data)];
            let swap_send = async (params, options) => {
                let result = await this.send('swap', swapParams(params), options);
                return result;
            };
            let swap_call = async (params, options) => {
                let result = await this.call('swap', swapParams(params), options);
                return;
            };
            let swap_txData = async (params, options) => {
                let result = await this.txData('swap', swapParams(params), options);
                return result;
            };
            this.swap = Object.assign(swap_send, {
                call: swap_call,
                txData: swap_txData
            });
            let sync_send = async (options) => {
                let result = await this.send('sync', [], options);
                return result;
            };
            let sync_call = async (options) => {
                let result = await this.call('sync', [], options);
                return;
            };
            let sync_txData = async (options) => {
                let result = await this.txData('sync', [], options);
                return result;
            };
            this.sync = Object.assign(sync_send, {
                call: sync_call,
                txData: sync_txData
            });
            let transferParams = (params) => [params.to, this.wallet.utils.toString(params.value)];
            let transfer_send = async (params, options) => {
                let result = await this.send('transfer', transferParams(params), options);
                return result;
            };
            let transfer_call = async (params, options) => {
                let result = await this.call('transfer', transferParams(params), options);
                return result;
            };
            let transfer_txData = async (params, options) => {
                let result = await this.txData('transfer', transferParams(params), options);
                return result;
            };
            this.transfer = Object.assign(transfer_send, {
                call: transfer_call,
                txData: transfer_txData
            });
            let transferFromParams = (params) => [params.from, params.to, this.wallet.utils.toString(params.value)];
            let transferFrom_send = async (params, options) => {
                let result = await this.send('transferFrom', transferFromParams(params), options);
                return result;
            };
            let transferFrom_call = async (params, options) => {
                let result = await this.call('transferFrom', transferFromParams(params), options);
                return result;
            };
            let transferFrom_txData = async (params, options) => {
                let result = await this.txData('transferFrom', transferFromParams(params), options);
                return result;
            };
            this.transferFrom = Object.assign(transferFrom_send, {
                call: transferFrom_call,
                txData: transferFrom_txData
            });
            let updateFee_send = async (options) => {
                let result = await this.send('updateFee', [], options);
                return result;
            };
            let updateFee_call = async (options) => {
                let result = await this.call('updateFee', [], options);
                return;
            };
            let updateFee_txData = async (options) => {
                let result = await this.txData('updateFee', [], options);
                return result;
            };
            this.updateFee = Object.assign(updateFee_send, {
                call: updateFee_call,
                txData: updateFee_txData
            });
            let updateProtocolFee_send = async (options) => {
                let result = await this.send('updateProtocolFee', [], options);
                return result;
            };
            let updateProtocolFee_call = async (options) => {
                let result = await this.call('updateProtocolFee', [], options);
                return;
            };
            let updateProtocolFee_txData = async (options) => {
                let result = await this.txData('updateProtocolFee', [], options);
                return result;
            };
            this.updateProtocolFee = Object.assign(updateProtocolFee_send, {
                call: updateProtocolFee_call,
                txData: updateProtocolFee_txData
            });
        }
    }
    OSWAP_Pair._abi = OSWAP_Pair_json_1.default.abi;
    exports.OSWAP_Pair = OSWAP_Pair;
});
define("@scom/scom-swap/contracts/oswap-openswap-contract/contracts/amm/OSWAP_PairCreator.json.ts", ["require", "exports"], function (require, exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    ///<amd-module name='@scom/scom-swap/contracts/oswap-openswap-contract/contracts/amm/OSWAP_PairCreator.json.ts'/> 
    exports.default = {
        "abi": [
            { "inputs": [{ "internalType": "bytes32", "name": "salt", "type": "bytes32" }], "name": "createPair", "outputs": [{ "internalType": "address", "name": "pair", "type": "address" }], "stateMutability": "nonpayable", "type": "function" }
        ],
        "bytecode": "608060405234801561001057600080fd5b50613dfb806100206000396000f3fe608060405234801561001057600080fd5b506004361061002b5760003560e01c8063ed25a5a214610030575b600080fd5b61004d6004803603602081101561004657600080fd5b5035610076565b6040805173ffffffffffffffffffffffffffffffffffffffff9092168252519081900360200190f35b600060606040518060200161008a906100b1565b6020820181038252601f19601f820116604052509050828151602083016000f59392505050565b613d07806100bf8339019056fe60a06040526001600c553480156200001657600080fd5b5033606081901b6080526004805460ff19166001178155604080516324bcdfbd60e01b8152905183926324bcdfbd92808201926020929091829003018186803b1580156200006357600080fd5b505afa15801562000078573d6000803e3d6000fd5b505050506040513d60208110156200008f57600080fd5b5051600a55604080516358710f4560e11b815290516001600160a01b0383169163b0e21e8a916004808301926020929190829003018186803b158015620000d557600080fd5b505afa158015620000ea573d6000803e3d6000fd5b505050506040513d60208110156200010157600080fd5b5051600b55600a5460408051918252517f1ce638f7798b6e448ecff4c806c7c01d3fedb23354b03f03994f5161b12bad629181900360200190a1600b5460408051918252517fdb5aafdb29539329e37d4e3ee869bc4031941fd55a5dfc92824fbe34b204e30d9181900360200190a15060805160601c613b55620001b2600039806108855280611389528061147252806118055280611d8a52806125a45280612b96528061351d5250613b556000f3fe608060405234801561001057600080fd5b50600436106102775760003560e01c806370a0823111610160578063b8f7a665116100d8578063d21220a71161008c578063dd62ed3e11610071578063dd62ed3e146107a8578063f5ee3348146107e3578063fff6cae91461080257610277565b8063d21220a714610742578063d505accf1461074a57610277565b8063bc25cf77116100bd578063bc25cf77146106ce578063c45a015514610701578063ca706bcf1461070957610277565b8063b8f7a665146106be578063ba9a7a56146106c657610277565b806389afcb441161012f5780639e4e7318116101145780639e4e731814610675578063a9059cbb1461067d578063b0e21e8a146106b657610277565b806389afcb441461062157806395d89b411461066d57610277565b806370a08231146105ab5780637464fc3d146105de578063758cdcf0146105e65780637ecebe00146105ee57610277565b8063253d2c7d116101f3578063485cc955116101c25780635a3d5493116101a75780635a3d549314610537578063632db21c1461053f5780636a6278421461057857610277565b8063485cc955146104f45780635909c0d51461052f57610277565b8063253d2c7d146104be57806330adf81f146104c6578063313ce567146104ce578063481bdf0d146104ec57610277565b8063095ea7b31161024a57806318160ddd1161022f57806318160ddd1461046b57806323b872dd1461047357806324bcdfbd146104b657610277565b8063095ea7b3146103ed5780630dfe16811461043a57610277565b8063022c0d9f1461027c57806304622c2e1461031757806306fdde03146103315780630902f1ac146103ae575b600080fd5b6103156004803603608081101561029257600080fd5b81359160208101359173ffffffffffffffffffffffffffffffffffffffff60408301351691908101906080810160608201356401000000008111156102d657600080fd5b8201836020820111156102e857600080fd5b8035906020019184600183028401116401000000008311171561030a57600080fd5b50909250905061080a565b005b61031f6110a4565b60408051918252519081900360200190f35b6103396110c8565b6040805160208082528351818301528351919283929083019185019080838360005b8381101561037357818101518382015260200161035b565b50505050905090810190601f1680156103a05780820380516001836020036101000a031916815260200191505b509250505060405180910390f35b6103b6611101565b604080516dffffffffffffffffffffffffffff948516815292909316602083015263ffffffff168183015290519081900360600190f35b6104266004803603604081101561040357600080fd5b5073ffffffffffffffffffffffffffffffffffffffff8135169060200135611156565b604080519115158252519081900360200190f35b61044261116d565b6040805173ffffffffffffffffffffffffffffffffffffffff9092168252519081900360200190f35b61031f61118e565b6104266004803603606081101561048957600080fd5b5073ffffffffffffffffffffffffffffffffffffffff813581169160208101359091169060400135611194565b61031f611273565b61031f611279565b61031f61129d565b6104d66112c1565b6040805160ff9092168252519081900360200190f35b6103156112c6565b6103156004803603604081101561050a57600080fd5b5073ffffffffffffffffffffffffffffffffffffffff8135811691602001351661145a565b61031f611572565b61031f611578565b61031f6004803603604081101561055557600080fd5b5073ffffffffffffffffffffffffffffffffffffffff813516906020013561157e565b61031f6004803603602081101561058e57600080fd5b503573ffffffffffffffffffffffffffffffffffffffff16611788565b61031f600480360360208110156105c157600080fd5b503573ffffffffffffffffffffffffffffffffffffffff16611cf7565b61031f611d09565b610315611d0f565b61031f6004803603602081101561060457600080fd5b503573ffffffffffffffffffffffffffffffffffffffff16611e58565b6106546004803603602081101561063757600080fd5b503573ffffffffffffffffffffffffffffffffffffffff16611e6a565b6040805192835260208301919091528051918290030190f35b610339612324565b61031f61235d565b6104266004803603604081101561069357600080fd5b5073ffffffffffffffffffffffffffffffffffffffff8135169060200135612381565b61031f61238e565b610426612394565b61031f61239d565b610315600480360360208110156106e457600080fd5b503573ffffffffffffffffffffffffffffffffffffffff166123a3565b6104426125a2565b61031f6004803603604081101561071f57600080fd5b5073ffffffffffffffffffffffffffffffffffffffff81351690602001356125c6565b6104426127d5565b610315600480360360e081101561076057600080fd5b5073ffffffffffffffffffffffffffffffffffffffff813581169160208101359091169060408101359060608101359060ff6080820135169060a08101359060c001356127f1565b61031f600480360360408110156107be57600080fd5b5073ffffffffffffffffffffffffffffffffffffffff81358116916020013516612b61565b610315600480360360208110156107f957600080fd5b50351515612b7e565b610315612c53565b600c5460011461087b57604080517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152600660248201527f4c4f434b45440000000000000000000000000000000000000000000000000000604482015290519081900360640190fd5b6000600c819055507f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff1663b8f7a6656040518163ffffffff1660e01b8152600401602060405180830381600087803b1580156108eb57600080fd5b505af11580156108ff573d6000803e3d6000fd5b505050506040513d602081101561091557600080fd5b505161098257604080517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152600f60248201527f474c4f42414c4c59205041555345440000000000000000000000000000000000604482015290519081900360640190fd5b60045460ff166109f357604080517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152600b60248201527f5041495220504155534544000000000000000000000000000000000000000000604482015290519081900360640190fd5b6000851180610a025750600084115b610a6d57604080517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601a60248201527f494e53554646494349454e545f4f55545055545f414d4f554e54000000000000604482015290519081900360640190fd5b600080610a78611101565b5091509150816dffffffffffffffffffffffffffff1687108015610aab5750806dffffffffffffffffffffffffffff1686105b610b1657604080517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601660248201527f494e53554646494349454e545f4c495155494449545900000000000000000000604482015290519081900360640190fd5b600454600554600091829173ffffffffffffffffffffffffffffffffffffffff6101009092048216919081169089168214801590610b8057508073ffffffffffffffffffffffffffffffffffffffff168973ffffffffffffffffffffffffffffffffffffffff1614155b610beb57604080517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152600a60248201527f494e56414c49445f544f00000000000000000000000000000000000000000000604482015290519081900360640190fd5b8a15610bfc57610bfc828a8d612e41565b8915610c0d57610c0d818a8c612e41565b8615610cef578873ffffffffffffffffffffffffffffffffffffffff16638a62aac4338d8d8c8c6040518663ffffffff1660e01b8152600401808673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001858152602001848152602001806020018281038252848482818152602001925080828437600081840152601f19601f8201169050808301925050509650505050505050600060405180830381600087803b158015610cd657600080fd5b505af1158015610cea573d6000803e3d6000fd5b505050505b604080517f70a08231000000000000000000000000000000000000000000000000000000008152306004820152905173ffffffffffffffffffffffffffffffffffffffff8416916370a08231916024808301926020929190829003018186803b158015610d5b57600080fd5b505afa158015610d6f573d6000803e3d6000fd5b505050506040513d6020811015610d8557600080fd5b5051604080517f70a08231000000000000000000000000000000000000000000000000000000008152306004820152905191955073ffffffffffffffffffffffffffffffffffffffff8316916370a0823191602480820192602092909190829003018186803b158015610df757600080fd5b505afa158015610e0b573d6000803e3d6000fd5b505050506040513d6020811015610e2157600080fd5b5051925060009150506dffffffffffffffffffffffffffff85168a90038311610e4b576000610e61565b89856dffffffffffffffffffffffffffff160383035b9050600089856dffffffffffffffffffffffffffff16038311610e85576000610e9b565b89856dffffffffffffffffffffffffffff160383035b90506000821180610eac5750600081115b610f1757604080517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601960248201527f494e53554646494349454e545f494e5055545f414d4f554e5400000000000000604482015290519081900360640190fd5b6000610f50610f31600a548561304e90919063ffffffff16565b610f4487620186a063ffffffff61304e16565b9063ffffffff6130c816565b90506000610f6c610f31600a548561304e90919063ffffffff16565b9050610fa66402540be400610f9a6dffffffffffffffffffffffffffff8b8116908b1663ffffffff61304e16565b9063ffffffff61304e16565b610fb6838363ffffffff61304e16565b101561102357604080517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152600160248201527f4b00000000000000000000000000000000000000000000000000000000000000604482015290519081900360640190fd5b50506110318484888861310a565b60408051838152602081018390528082018d9052606081018c9052905173ffffffffffffffffffffffffffffffffffffffff8b169133917fd78ad95fa46c994b6551d0da85fc275fe613ce37657fb8d5e3d130840159d8229181900360800190a350506001600c55505050505050505050565b7fccf0ed8d136d82190c405c1be2cf07fff31d482a66996af4f69b3259174a23ba81565b6040518060400160405280600c81526020017f4f70656e53776170204c5073000000000000000000000000000000000000000081525081565b6006546dffffffffffffffffffffffffffff808216926e0100000000000000000000000000008304909116917c0100000000000000000000000000000000000000000000000000000000900463ffffffff1690565b60006111633384846133c6565b5060015b92915050565b600454610100900473ffffffffffffffffffffffffffffffffffffffff1681565b60005481565b73ffffffffffffffffffffffffffffffffffffffff831660009081526002602090815260408083203384529091528120547fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff1461125e5773ffffffffffffffffffffffffffffffffffffffff8416600090815260026020908152604080832033845290915290205461122c908363ffffffff6130c816565b73ffffffffffffffffffffffffffffffffffffffff851660009081526002602090815260408083203384529091529020555b611269848484613435565b5060019392505050565b600a5481565b7f8b73c3c69bb8fe3d512ecc4cf759cc79239f7b179b0ffacaa9a75d522b39400f81565b7f6e71edae12b1b97f4d1f60370fef10105fa2faae0126114a169c64845d6126c981565b601281565b600c5460011461133757604080517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152600660248201527f4c4f434b45440000000000000000000000000000000000000000000000000000604482015290519081900360640190fd5b6000600c81905580611347611101565b509150915060006113588383613516565b90508015611387576113836dffffffffffffffffffffffffffff84811690841663ffffffff61304e16565b6009555b7f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff1663b0e21e8a6040518163ffffffff1660e01b815260040160206040518083038186803b1580156113ed57600080fd5b505afa158015611401573d6000803e3d6000fd5b505050506040513d602081101561141757600080fd5b5051600b81905560408051918252517fdb5aafdb29539329e37d4e3ee869bc4031941fd55a5dfc92824fbe34b204e30d9181900360200190a150506001600c5550565b3373ffffffffffffffffffffffffffffffffffffffff7f000000000000000000000000000000000000000000000000000000000000000016146114fe57604080517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152600960248201527f464f5242494444454e0000000000000000000000000000000000000000000000604482015290519081900360640190fd5b600480547fffffffffffffffffffffff0000000000000000000000000000000000000000ff1661010073ffffffffffffffffffffffffffffffffffffffff94851602179055600580547fffffffffffffffffffffffff00000000000000000000000000000000000000001691909216179055565b60075481565b60085481565b600080611599600a54620186a06130c890919063ffffffff16565b600554909150600090819073ffffffffffffffffffffffffffffffffffffffff8781169116146115f0576006546dffffffffffffffffffffffffffff6e01000000000000000000000000000082048116911661161a565b6006546dffffffffffffffffffffffffffff808216916e0100000000000000000000000000009004165b6dffffffffffffffffffffffffffff1691506dffffffffffffffffffffffffffff169150600085116116ad57604080517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601a60248201527f494e53554646494349454e545f4f55545055545f414d4f554e54000000000000604482015290519081900360640190fd5b6000821180156116bd5750600081115b61172857604080517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601660248201527f494e53554646494349454e545f4c495155494449545900000000000000000000604482015290519081900360640190fd5b6000611741620186a0610f9a858963ffffffff61304e16565b9050600061175985610f9a858a63ffffffff6130c816565b905061177c6001611770848463ffffffff6136d616565b9063ffffffff61371816565b98975050505050505050565b6000600c546001146117fb57604080517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152600660248201527f4c4f434b45440000000000000000000000000000000000000000000000000000604482015290519081900360640190fd5b6000600c819055507f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff1663b8f7a6656040518163ffffffff1660e01b8152600401602060405180830381600087803b15801561186b57600080fd5b505af115801561187f573d6000803e3d6000fd5b505050506040513d602081101561189557600080fd5b505161190257604080517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152600f60248201527f474c4f42414c4c59205041555345440000000000000000000000000000000000604482015290519081900360640190fd5b60045460ff1661197357604080517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152600b60248201527f5041495220504155534544000000000000000000000000000000000000000000604482015290519081900360640190fd5b60008061197e611101565b50915091506000600460019054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff166370a08231306040518263ffffffff1660e01b8152600401808273ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200191505060206040518083038186803b158015611a2457600080fd5b505afa158015611a38573d6000803e3d6000fd5b505050506040513d6020811015611a4e57600080fd5b5051600554604080517f70a08231000000000000000000000000000000000000000000000000000000008152306004820152905192935060009273ffffffffffffffffffffffffffffffffffffffff909216916370a0823191602480820192602092909190829003018186803b158015611ac757600080fd5b505afa158015611adb573d6000803e3d6000fd5b505050506040513d6020811015611af157600080fd5b505190506000611b17836dffffffffffffffffffffffffffff871663ffffffff6130c816565b90506000611b3b836dffffffffffffffffffffffffffff871663ffffffff6130c816565b90506000611b498787613516565b60005490915080611b8657611b726103e8610f44611b6d878763ffffffff61304e16565b61378c565b9850611b8160006103e86137de565b611be3565b611be06dffffffffffffffffffffffffffff8916611baa868463ffffffff61304e16565b81611bb157fe5b046dffffffffffffffffffffffffffff8916611bd3868563ffffffff61304e16565b81611bda57fe5b0461388e565b98505b60008911611c5257604080517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601d60248201527f494e53554646494349454e545f4c49515549444954595f4d494e544544000000604482015290519081900360640190fd5b611c5c8a8a6137de565b611c6886868a8a61310a565b8115611caa57600654611ca6906dffffffffffffffffffffffffffff808216916e01000000000000000000000000000090041663ffffffff61304e16565b6009555b6040805185815260208101859052815133927f4c209b5fc8ad50758f13e2e1088ba56a560dff690a1c6fef26394f4c03821c4f928290030190a250506001600c5550949695505050505050565b60016020526000908152604090205481565b60095481565b600c54600114611d8057604080517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152600660248201527f4c4f434b45440000000000000000000000000000000000000000000000000000604482015290519081900360640190fd5b6000600c819055507f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff166324bcdfbd6040518163ffffffff1660e01b815260040160206040518083038186803b158015611dee57600080fd5b505afa158015611e02573d6000803e3d6000fd5b505050506040513d6020811015611e1857600080fd5b5051600a81905560408051918252517f1ce638f7798b6e448ecff4c806c7c01d3fedb23354b03f03994f5161b12bad629181900360200190a16001600c55565b60036020526000908152604090205481565b600080600c54600114611ede57604080517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152600660248201527f4c4f434b45440000000000000000000000000000000000000000000000000000604482015290519081900360640190fd5b6000600c81905580611eee611101565b5030600090815260016020526040812054929450909250611f0f8484613516565b60048054600554604080517f70a0823100000000000000000000000000000000000000000000000000000000815230948101949094525193945073ffffffffffffffffffffffffffffffffffffffff61010090920482169391169160009184916370a08231916024808301926020929190829003018186803b158015611f9457600080fd5b505afa158015611fa8573d6000803e3d6000fd5b505050506040513d6020811015611fbe57600080fd5b5051604080517f70a08231000000000000000000000000000000000000000000000000000000008152306004820152905191925060009173ffffffffffffffffffffffffffffffffffffffff8516916370a08231916024808301926020929190829003018186803b15801561203257600080fd5b505afa158015612046573d6000803e3d6000fd5b505050506040513d602081101561205c57600080fd5b505160005490915080612075888563ffffffff61304e16565b8161207c57fe5b049a5080612090888463ffffffff61304e16565b8161209757fe5b04995060008b1180156120aa575060008a115b61211557604080517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601d60248201527f494e53554646494349454e545f4c49515549444954595f4255524e4544000000604482015290519081900360640190fd5b61211f30886138a4565b61212a858d8d612e41565b612135848d8c612e41565b604080517f70a08231000000000000000000000000000000000000000000000000000000008152306004820152905173ffffffffffffffffffffffffffffffffffffffff8716916370a08231916024808301926020929190829003018186803b1580156121a157600080fd5b505afa1580156121b5573d6000803e3d6000fd5b505050506040513d60208110156121cb57600080fd5b5051604080517f70a08231000000000000000000000000000000000000000000000000000000008152306004820152905191945073ffffffffffffffffffffffffffffffffffffffff8616916370a0823191602480820192602092909190829003018186803b15801561223d57600080fd5b505afa158015612251573d6000803e3d6000fd5b505050506040513d602081101561226757600080fd5b5051915061227783838b8b61310a565b85156122b9576006546122b5906dffffffffffffffffffffffffffff808216916e01000000000000000000000000000090041663ffffffff61304e16565b6009555b604080518c8152602081018c9052815173ffffffffffffffffffffffffffffffffffffffff8f169233927fdccd412f0b1252819cb1fd330b93224ca42612892bb3f4f789976e6d81936496929081900390910190a35050505050505050506001600c81905550915091565b6040518060400160405280600881526020017f4f535741502d4c5000000000000000000000000000000000000000000000000081525081565b7fc89efdaa54c0f20c7adf612882df0950f5a951637e0307cdcb4c672f298b8bc681565b6000611163338484613435565b600b5481565b60045460ff1681565b6103e881565b600c5460011461241457604080517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152600660248201527f4c4f434b45440000000000000000000000000000000000000000000000000000604482015290519081900360640190fd5b6000600c5560048054600554600654604080517f70a0823100000000000000000000000000000000000000000000000000000000815230958101959095525161010090930473ffffffffffffffffffffffffffffffffffffffff908116949216926124f992859287926124f4926dffffffffffffffffffffffffffff9092169185916370a0823191602480820192602092909190829003018186803b1580156124bc57600080fd5b505afa1580156124d0573d6000803e3d6000fd5b505050506040513d60208110156124e657600080fd5b50519063ffffffff6130c816565b612e41565b600654604080517f70a08231000000000000000000000000000000000000000000000000000000008152306004820152905161259892849287926124f4926e01000000000000000000000000000090046dffffffffffffffffffffffffffff169173ffffffffffffffffffffffffffffffffffffffff8616916370a0823191602480820192602092909190829003018186803b1580156124bc57600080fd5b50506001600c5550565b7f000000000000000000000000000000000000000000000000000000000000000081565b6000806125e1600a54620186a06130c890919063ffffffff16565b600454909150600090819073ffffffffffffffffffffffffffffffffffffffff878116610100909204161461263d576006546dffffffffffffffffffffffffffff6e010000000000000000000000000000820481169116612667565b6006546dffffffffffffffffffffffffffff808216916e0100000000000000000000000000009004165b6dffffffffffffffffffffffffffff1691506dffffffffffffffffffffffffffff169150600085116126fa57604080517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601960248201527f494e53554646494349454e545f494e5055545f414d4f554e5400000000000000604482015290519081900360640190fd5b60008211801561270a5750600081115b61277557604080517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601660248201527f494e53554646494349454e545f4c495155494449545900000000000000000000604482015290519081900360640190fd5b6000612787868563ffffffff61304e16565b9050600061279b828463ffffffff61304e16565b905060006127b68361177087620186a063ffffffff61304e16565b90506127c8828263ffffffff6136d616565b9998505050505050505050565b60055473ffffffffffffffffffffffffffffffffffffffff1681565b4284101561286057604080517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152600760248201527f4558504952454400000000000000000000000000000000000000000000000000604482015290519081900360640190fd5b604080517f8b73c3c69bb8fe3d512ecc4cf759cc79239f7b179b0ffacaa9a75d522b39400f6020808301919091527fccf0ed8d136d82190c405c1be2cf07fff31d482a66996af4f69b3259174a23ba828401527fc89efdaa54c0f20c7adf612882df0950f5a951637e0307cdcb4c672f298b8bc660608301524660808301523060a0808401919091528351808403909101815260c08301845280519082012073ffffffffffffffffffffffffffffffffffffffff8b8116600081815260038552868120805460018082019092557f6e71edae12b1b97f4d1f60370fef10105fa2faae0126114a169c64845d6126c960e0890152610100880193909352928d1661012087015261014086018c90526101608601919091526101808086018b9052865180870390910181526101a0860187528051908501207f19010000000000000000000000000000000000000000000000000000000000006101c08701526101c286018490526101e28087019190915286518087039091018152610202860180885281519186019190912090829052610222860180885281905260ff8a16610242870152610262860189905261028286018890529551929594909391926102a280830193927fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe08301929081900390910190855afa158015612a64573d6000803e3d6000fd5b50506040517fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe0015191505073ffffffffffffffffffffffffffffffffffffffff811615801590612adf57508973ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff16145b612b4a57604080517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601160248201527f494e56414c49445f5349474e4154555245000000000000000000000000000000604482015290519081900360640190fd5b612b558a8a8a6133c6565b50505050505050505050565b600260209081526000928352604080842090915290825290205481565b3373ffffffffffffffffffffffffffffffffffffffff7f00000000000000000000000000000000000000000000000000000000000000001614612c2257604080517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152600960248201527f464f5242494444454e0000000000000000000000000000000000000000000000604482015290519081900360640190fd5b600480547fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff0016911515919091179055565b600c54600114612cc457604080517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152600660248201527f4c4f434b45440000000000000000000000000000000000000000000000000000604482015290519081900360640190fd5b6000600c5560048054604080517f70a08231000000000000000000000000000000000000000000000000000000008152309381019390935251612e3a9261010090920473ffffffffffffffffffffffffffffffffffffffff16916370a08231916024808301926020929190829003018186803b158015612d4357600080fd5b505afa158015612d57573d6000803e3d6000fd5b505050506040513d6020811015612d6d57600080fd5b5051600554604080517f70a08231000000000000000000000000000000000000000000000000000000008152306004820152905173ffffffffffffffffffffffffffffffffffffffff909216916370a0823191602480820192602092909190829003018186803b158015612de057600080fd5b505afa158015612df4573d6000803e3d6000fd5b505050506040513d6020811015612e0a57600080fd5b50516006546dffffffffffffffffffffffffffff808216916e01000000000000000000000000000090041661310a565b6001600c55565b604080518082018252601981527f7472616e7366657228616464726573732c75696e743235362900000000000000602091820152815173ffffffffffffffffffffffffffffffffffffffff85811660248301526044808301869052845180840390910181526064909201845291810180517bffffffffffffffffffffffffffffffffffffffffffffffffffffffff167fa9059cbb000000000000000000000000000000000000000000000000000000001781529251815160009460609489169392918291908083835b60208310612f4757805182527fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe09092019160209182019101612f0a565b6001836020036101000a0380198251168184511680821785525050505050509050019150506000604051808303816000865af19150503d8060008114612fa9576040519150601f19603f3d011682016040523d82523d6000602084013e612fae565b606091505b5091509150818015612fdc575080511580612fdc5750808060200190516020811015612fd957600080fd5b50515b61304757604080517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152600f60248201527f5452414e534645525f4641494c45440000000000000000000000000000000000604482015290519081900360640190fd5b5050505050565b60008261305d57506000611167565b8282028284828161306a57fe5b04146130c1576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401808060200182810382526021815260200180613aff6021913960400191505060405180910390fd5b9392505050565b60006130c183836040518060400160405280601e81526020017f536166654d6174683a207375627472616374696f6e206f766572666c6f770000815250613969565b6dffffffffffffffffffffffffffff841180159061313657506dffffffffffffffffffffffffffff8311155b6131a157604080517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152600860248201527f4f564552464c4f57000000000000000000000000000000000000000000000000604482015290519081900360640190fd5b60065463ffffffff428116917c0100000000000000000000000000000000000000000000000000000000900481168203908116158015906131f157506dffffffffffffffffffffffffffff841615155b801561320c57506dffffffffffffffffffffffffffff831615155b156132bc578063ffffffff1661324f8561322586613a1a565b7bffffffffffffffffffffffffffffffffffffffffffffffffffffffff169063ffffffff613a3e16565b600780547bffffffffffffffffffffffffffffffffffffffffffffffffffffffff929092169290920201905563ffffffff811661328f8461322587613a1a565b600880547bffffffffffffffffffffffffffffffffffffffffffffffffffffffff92909216929092020190555b600680547fffffffffffffffffffffffffffffffffffff0000000000000000000000000000166dffffffffffffffffffffffffffff888116919091177fffffffff0000000000000000000000000000ffffffffffffffffffffffffffff166e0100000000000000000000000000008883168102919091177bffffffffffffffffffffffffffffffffffffffffffffffffffffffff167c010000000000000000000000000000000000000000000000000000000063ffffffff871602179283905560408051848416815291909304909116602082015281517f1c411e9a96e071241c2f21f7726b17ae89e3cab4c78be50e062b03a9fffbbad1929181900390910190a1505050505050565b73ffffffffffffffffffffffffffffffffffffffff808416600081815260026020908152604080832094871680845294825291829020859055815185815291517f8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b9259281900390910190a3505050565b73ffffffffffffffffffffffffffffffffffffffff831660009081526001602052604090205461346b908263ffffffff6130c816565b73ffffffffffffffffffffffffffffffffffffffff80851660009081526001602052604080822093909355908416815220546134ad908263ffffffff61371816565b73ffffffffffffffffffffffffffffffffffffffff80841660008181526001602090815260409182902094909455805185815290519193928716927fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef92918290030190a3505050565b60008060007f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff16639931e80b6040518163ffffffff1660e01b8152600401604080518083038186803b15801561358057600080fd5b505afa158015613594573d6000803e3d6000fd5b505050506040513d60408110156135aa57600080fd5b508051602090910151600b5460095473ffffffffffffffffffffffffffffffffffffffff83161580159750939550919350916136b35780156136ae57600061360e611b6d6dffffffffffffffffffffffffffff8a8116908a1663ffffffff61304e16565b9050600061361b8361378c565b9050808211156136ab57600061364d85610f9a61363e868663ffffffff6130c816565b6000549063ffffffff61304e16565b90506000613687613664848863ffffffff61304e16565b61177061367a620186a08a63ffffffff6130c816565b879063ffffffff61304e16565b9050600081838161369457fe5b04905080156136a7576136a788826137de565b5050505b50505b6136bf565b80156136bf5760006009555b8382146136cc57600b8490555b5050505092915050565b60006130c183836040518060400160405280601a81526020017f536166654d6174683a206469766973696f6e206279207a65726f000000000000815250613a7f565b6000828201838110156130c157604080517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601b60248201527f536166654d6174683a206164646974696f6e206f766572666c6f770000000000604482015290519081900360640190fd5b600060038211156137cf575080600160028204015b818110156137c9578091506002818285816137b857fe5b0401816137c157fe5b0490506137a1565b506137d9565b81156137d9575060015b919050565b6000546137f1908263ffffffff61371816565b600090815573ffffffffffffffffffffffffffffffffffffffff8316815260016020526040902054613829908263ffffffff61371816565b73ffffffffffffffffffffffffffffffffffffffff831660008181526001602090815260408083209490945583518581529351929391927fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef9281900390910190a35050565b600081831061389d57816130c1565b5090919050565b73ffffffffffffffffffffffffffffffffffffffff82166000908152600160205260409020546138da908263ffffffff6130c816565b73ffffffffffffffffffffffffffffffffffffffff831660009081526001602052604081209190915554613914908263ffffffff6130c816565b600090815560408051838152905173ffffffffffffffffffffffffffffffffffffffff8516917fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef919081900360200190a35050565b60008184841115613a12576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004018080602001828103825283818151815260200191508051906020019080838360005b838110156139d75781810151838201526020016139bf565b50505050905090810190601f168015613a045780820380516001836020036101000a031916815260200191505b509250505060405180910390fd5b505050900390565b6dffffffffffffffffffffffffffff166e0100000000000000000000000000000290565b60006dffffffffffffffffffffffffffff82167bffffffffffffffffffffffffffffffffffffffffffffffffffffffff841681613a7757fe5b049392505050565b60008183613ae8576040517f08c379a00000000000000000000000000000000000000000000000000000000081526020600482018181528351602484015283519092839260449091019190850190808383600083156139d75781810151838201526020016139bf565b506000838581613af457fe5b049594505050505056fe536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f77a264697066735822122027a8d76894289a79faa3322bb1179c0d57c06b8e157fef9c3f081474c0dc79d364736f6c634300060b0033a264697066735822122072e4e3bbd05cda32fc75230c73b3bd4a2178549cf030922002c42e276842ed9264736f6c634300060b0033"
    };
});
define("@scom/scom-swap/contracts/oswap-openswap-contract/contracts/amm/OSWAP_PairCreator.ts", ["require", "exports", "@ijstech/eth-contract", "@scom/scom-swap/contracts/oswap-openswap-contract/contracts/amm/OSWAP_PairCreator.json.ts"], function (require, exports, eth_contract_5, OSWAP_PairCreator_json_1) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.OSWAP_PairCreator = void 0;
    class OSWAP_PairCreator extends eth_contract_5.Contract {
        constructor(wallet, address) {
            super(wallet, address, OSWAP_PairCreator_json_1.default.abi, OSWAP_PairCreator_json_1.default.bytecode);
            this.assign();
        }
        deploy(options) {
            return this.__deploy([], options);
        }
        assign() {
            let createPair_send = async (salt, options) => {
                let result = await this.send('createPair', [this.wallet.utils.stringToBytes32(salt)], options);
                return result;
            };
            let createPair_call = async (salt, options) => {
                let result = await this.call('createPair', [this.wallet.utils.stringToBytes32(salt)], options);
                return result;
            };
            let createPair_txData = async (salt, options) => {
                let result = await this.txData('createPair', [this.wallet.utils.stringToBytes32(salt)], options);
                return result;
            };
            this.createPair = Object.assign(createPair_send, {
                call: createPair_call,
                txData: createPair_txData
            });
        }
    }
    OSWAP_PairCreator._abi = OSWAP_PairCreator_json_1.default.abi;
    exports.OSWAP_PairCreator = OSWAP_PairCreator;
});
define("@scom/scom-swap/contracts/oswap-openswap-contract/contracts/amm/OSWAP_Router.json.ts", ["require", "exports"], function (require, exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    ///<amd-module name='@scom/scom-swap/contracts/oswap-openswap-contract/contracts/amm/OSWAP_Router.json.ts'/> 
    exports.default = {
        "abi": [
            { "inputs": [{ "internalType": "address", "name": "_factory", "type": "address" }, { "internalType": "address", "name": "_WETH", "type": "address" }], "stateMutability": "nonpayable", "type": "constructor" },
            { "inputs": [], "name": "WETH", "outputs": [{ "internalType": "address", "name": "", "type": "address" }], "stateMutability": "view", "type": "function" },
            { "inputs": [{ "internalType": "address", "name": "tokenA", "type": "address" }, { "internalType": "address", "name": "tokenB", "type": "address" }, { "internalType": "uint256", "name": "amountADesired", "type": "uint256" }, { "internalType": "uint256", "name": "amountBDesired", "type": "uint256" }, { "internalType": "uint256", "name": "amountAMin", "type": "uint256" }, { "internalType": "uint256", "name": "amountBMin", "type": "uint256" }, { "internalType": "address", "name": "to", "type": "address" }, { "internalType": "uint256", "name": "deadline", "type": "uint256" }], "name": "addLiquidity", "outputs": [{ "internalType": "uint256", "name": "amountA", "type": "uint256" }, { "internalType": "uint256", "name": "amountB", "type": "uint256" }, { "internalType": "uint256", "name": "liquidity", "type": "uint256" }], "stateMutability": "nonpayable", "type": "function" },
            { "inputs": [{ "internalType": "address", "name": "token", "type": "address" }, { "internalType": "uint256", "name": "amountTokenDesired", "type": "uint256" }, { "internalType": "uint256", "name": "amountTokenMin", "type": "uint256" }, { "internalType": "uint256", "name": "amountETHMin", "type": "uint256" }, { "internalType": "address", "name": "to", "type": "address" }, { "internalType": "uint256", "name": "deadline", "type": "uint256" }], "name": "addLiquidityETH", "outputs": [{ "internalType": "uint256", "name": "amountToken", "type": "uint256" }, { "internalType": "uint256", "name": "amountETH", "type": "uint256" }, { "internalType": "uint256", "name": "liquidity", "type": "uint256" }], "stateMutability": "payable", "type": "function" },
            { "inputs": [], "name": "factory", "outputs": [{ "internalType": "address", "name": "", "type": "address" }], "stateMutability": "view", "type": "function" },
            { "inputs": [{ "internalType": "uint256", "name": "amountOut", "type": "uint256" }, { "internalType": "address", "name": "tokenIn", "type": "address" }, { "internalType": "address", "name": "tokenOut", "type": "address" }], "name": "getAmountIn", "outputs": [{ "internalType": "uint256", "name": "amountIn", "type": "uint256" }], "stateMutability": "view", "type": "function" },
            { "inputs": [{ "internalType": "uint256", "name": "amountIn", "type": "uint256" }, { "internalType": "address", "name": "tokenIn", "type": "address" }, { "internalType": "address", "name": "tokenOut", "type": "address" }], "name": "getAmountOut", "outputs": [{ "internalType": "uint256", "name": "amountOut", "type": "uint256" }], "stateMutability": "view", "type": "function" },
            { "inputs": [{ "internalType": "uint256", "name": "amountOut", "type": "uint256" }, { "internalType": "address[]", "name": "path", "type": "address[]" }], "name": "getAmountsIn", "outputs": [{ "internalType": "uint256[]", "name": "amounts", "type": "uint256[]" }], "stateMutability": "view", "type": "function" },
            { "inputs": [{ "internalType": "uint256", "name": "amountIn", "type": "uint256" }, { "internalType": "address[]", "name": "path", "type": "address[]" }], "name": "getAmountsOut", "outputs": [{ "internalType": "uint256[]", "name": "amounts", "type": "uint256[]" }], "stateMutability": "view", "type": "function" },
            { "inputs": [{ "internalType": "address", "name": "tokenA", "type": "address" }, { "internalType": "address", "name": "tokenB", "type": "address" }], "name": "getReserves", "outputs": [{ "internalType": "uint256", "name": "reserveA", "type": "uint256" }, { "internalType": "uint256", "name": "reserveB", "type": "uint256" }], "stateMutability": "view", "type": "function" },
            { "inputs": [{ "internalType": "uint256", "name": "amountA", "type": "uint256" }, { "internalType": "uint256", "name": "reserveA", "type": "uint256" }, { "internalType": "uint256", "name": "reserveB", "type": "uint256" }], "name": "quote", "outputs": [{ "internalType": "uint256", "name": "amountB", "type": "uint256" }], "stateMutability": "pure", "type": "function" },
            { "inputs": [{ "internalType": "address", "name": "tokenA", "type": "address" }, { "internalType": "address", "name": "tokenB", "type": "address" }, { "internalType": "uint256", "name": "liquidity", "type": "uint256" }, { "internalType": "uint256", "name": "amountAMin", "type": "uint256" }, { "internalType": "uint256", "name": "amountBMin", "type": "uint256" }, { "internalType": "address", "name": "to", "type": "address" }, { "internalType": "uint256", "name": "deadline", "type": "uint256" }], "name": "removeLiquidity", "outputs": [{ "internalType": "uint256", "name": "amountA", "type": "uint256" }, { "internalType": "uint256", "name": "amountB", "type": "uint256" }], "stateMutability": "nonpayable", "type": "function" },
            { "inputs": [{ "internalType": "address", "name": "token", "type": "address" }, { "internalType": "uint256", "name": "liquidity", "type": "uint256" }, { "internalType": "uint256", "name": "amountTokenMin", "type": "uint256" }, { "internalType": "uint256", "name": "amountETHMin", "type": "uint256" }, { "internalType": "address", "name": "to", "type": "address" }, { "internalType": "uint256", "name": "deadline", "type": "uint256" }], "name": "removeLiquidityETH", "outputs": [{ "internalType": "uint256", "name": "amountToken", "type": "uint256" }, { "internalType": "uint256", "name": "amountETH", "type": "uint256" }], "stateMutability": "nonpayable", "type": "function" },
            { "inputs": [{ "internalType": "address", "name": "token", "type": "address" }, { "internalType": "uint256", "name": "liquidity", "type": "uint256" }, { "internalType": "uint256", "name": "amountTokenMin", "type": "uint256" }, { "internalType": "uint256", "name": "amountETHMin", "type": "uint256" }, { "internalType": "address", "name": "to", "type": "address" }, { "internalType": "uint256", "name": "deadline", "type": "uint256" }], "name": "removeLiquidityETHSupportingFeeOnTransferTokens", "outputs": [{ "internalType": "uint256", "name": "amountETH", "type": "uint256" }], "stateMutability": "nonpayable", "type": "function" },
            { "inputs": [{ "internalType": "address", "name": "token", "type": "address" }, { "internalType": "uint256", "name": "liquidity", "type": "uint256" }, { "internalType": "uint256", "name": "amountTokenMin", "type": "uint256" }, { "internalType": "uint256", "name": "amountETHMin", "type": "uint256" }, { "internalType": "address", "name": "to", "type": "address" }, { "internalType": "uint256", "name": "deadline", "type": "uint256" }, { "internalType": "bool", "name": "approveMax", "type": "bool" }, { "internalType": "uint8", "name": "v", "type": "uint8" }, { "internalType": "bytes32", "name": "r", "type": "bytes32" }, { "internalType": "bytes32", "name": "s", "type": "bytes32" }], "name": "removeLiquidityETHWithPermit", "outputs": [{ "internalType": "uint256", "name": "amountToken", "type": "uint256" }, { "internalType": "uint256", "name": "amountETH", "type": "uint256" }], "stateMutability": "nonpayable", "type": "function" },
            { "inputs": [{ "internalType": "address", "name": "token", "type": "address" }, { "internalType": "uint256", "name": "liquidity", "type": "uint256" }, { "internalType": "uint256", "name": "amountTokenMin", "type": "uint256" }, { "internalType": "uint256", "name": "amountETHMin", "type": "uint256" }, { "internalType": "address", "name": "to", "type": "address" }, { "internalType": "uint256", "name": "deadline", "type": "uint256" }, { "internalType": "bool", "name": "approveMax", "type": "bool" }, { "internalType": "uint8", "name": "v", "type": "uint8" }, { "internalType": "bytes32", "name": "r", "type": "bytes32" }, { "internalType": "bytes32", "name": "s", "type": "bytes32" }], "name": "removeLiquidityETHWithPermitSupportingFeeOnTransferTokens", "outputs": [{ "internalType": "uint256", "name": "amountETH", "type": "uint256" }], "stateMutability": "nonpayable", "type": "function" },
            { "inputs": [{ "internalType": "address", "name": "tokenA", "type": "address" }, { "internalType": "address", "name": "tokenB", "type": "address" }, { "internalType": "uint256", "name": "liquidity", "type": "uint256" }, { "internalType": "uint256", "name": "amountAMin", "type": "uint256" }, { "internalType": "uint256", "name": "amountBMin", "type": "uint256" }, { "internalType": "address", "name": "to", "type": "address" }, { "internalType": "uint256", "name": "deadline", "type": "uint256" }, { "internalType": "bool", "name": "approveMax", "type": "bool" }, { "internalType": "uint8", "name": "v", "type": "uint8" }, { "internalType": "bytes32", "name": "r", "type": "bytes32" }, { "internalType": "bytes32", "name": "s", "type": "bytes32" }], "name": "removeLiquidityWithPermit", "outputs": [{ "internalType": "uint256", "name": "amountA", "type": "uint256" }, { "internalType": "uint256", "name": "amountB", "type": "uint256" }], "stateMutability": "nonpayable", "type": "function" },
            { "inputs": [{ "internalType": "uint256", "name": "amountOut", "type": "uint256" }, { "internalType": "address[]", "name": "path", "type": "address[]" }, { "internalType": "address", "name": "to", "type": "address" }, { "internalType": "uint256", "name": "deadline", "type": "uint256" }], "name": "swapETHForExactTokens", "outputs": [{ "internalType": "uint256[]", "name": "amounts", "type": "uint256[]" }], "stateMutability": "payable", "type": "function" },
            { "inputs": [{ "internalType": "uint256", "name": "amountOutMin", "type": "uint256" }, { "internalType": "address[]", "name": "path", "type": "address[]" }, { "internalType": "address", "name": "to", "type": "address" }, { "internalType": "uint256", "name": "deadline", "type": "uint256" }], "name": "swapExactETHForTokens", "outputs": [{ "internalType": "uint256[]", "name": "amounts", "type": "uint256[]" }], "stateMutability": "payable", "type": "function" },
            { "inputs": [{ "internalType": "uint256", "name": "amountOutMin", "type": "uint256" }, { "internalType": "address[]", "name": "path", "type": "address[]" }, { "internalType": "address", "name": "to", "type": "address" }, { "internalType": "uint256", "name": "deadline", "type": "uint256" }], "name": "swapExactETHForTokensSupportingFeeOnTransferTokens", "outputs": [], "stateMutability": "payable", "type": "function" },
            { "inputs": [{ "internalType": "uint256", "name": "amountIn", "type": "uint256" }, { "internalType": "uint256", "name": "amountOutMin", "type": "uint256" }, { "internalType": "address[]", "name": "path", "type": "address[]" }, { "internalType": "address", "name": "to", "type": "address" }, { "internalType": "uint256", "name": "deadline", "type": "uint256" }], "name": "swapExactTokensForETH", "outputs": [{ "internalType": "uint256[]", "name": "amounts", "type": "uint256[]" }], "stateMutability": "nonpayable", "type": "function" },
            { "inputs": [{ "internalType": "uint256", "name": "amountIn", "type": "uint256" }, { "internalType": "uint256", "name": "amountOutMin", "type": "uint256" }, { "internalType": "address[]", "name": "path", "type": "address[]" }, { "internalType": "address", "name": "to", "type": "address" }, { "internalType": "uint256", "name": "deadline", "type": "uint256" }], "name": "swapExactTokensForETHSupportingFeeOnTransferTokens", "outputs": [], "stateMutability": "nonpayable", "type": "function" },
            { "inputs": [{ "internalType": "uint256", "name": "amountIn", "type": "uint256" }, { "internalType": "uint256", "name": "amountOutMin", "type": "uint256" }, { "internalType": "address[]", "name": "path", "type": "address[]" }, { "internalType": "address", "name": "to", "type": "address" }, { "internalType": "uint256", "name": "deadline", "type": "uint256" }], "name": "swapExactTokensForTokens", "outputs": [{ "internalType": "uint256[]", "name": "amounts", "type": "uint256[]" }], "stateMutability": "nonpayable", "type": "function" },
            { "inputs": [{ "internalType": "uint256", "name": "amountIn", "type": "uint256" }, { "internalType": "uint256", "name": "amountOutMin", "type": "uint256" }, { "internalType": "address[]", "name": "path", "type": "address[]" }, { "internalType": "address", "name": "to", "type": "address" }, { "internalType": "uint256", "name": "deadline", "type": "uint256" }], "name": "swapExactTokensForTokensSupportingFeeOnTransferTokens", "outputs": [], "stateMutability": "nonpayable", "type": "function" },
            { "inputs": [{ "internalType": "uint256", "name": "amountOut", "type": "uint256" }, { "internalType": "uint256", "name": "amountInMax", "type": "uint256" }, { "internalType": "address[]", "name": "path", "type": "address[]" }, { "internalType": "address", "name": "to", "type": "address" }, { "internalType": "uint256", "name": "deadline", "type": "uint256" }], "name": "swapTokensForExactETH", "outputs": [{ "internalType": "uint256[]", "name": "amounts", "type": "uint256[]" }], "stateMutability": "nonpayable", "type": "function" },
            { "inputs": [{ "internalType": "uint256", "name": "amountOut", "type": "uint256" }, { "internalType": "uint256", "name": "amountInMax", "type": "uint256" }, { "internalType": "address[]", "name": "path", "type": "address[]" }, { "internalType": "address", "name": "to", "type": "address" }, { "internalType": "uint256", "name": "deadline", "type": "uint256" }], "name": "swapTokensForExactTokens", "outputs": [{ "internalType": "uint256[]", "name": "amounts", "type": "uint256[]" }], "stateMutability": "nonpayable", "type": "function" },
            { "stateMutability": "payable", "type": "receive" }
        ],
        "bytecode": "60c060405234801561001057600080fd5b5060405162005387380380620053878339818101604052604081101561003557600080fd5b5080516020909101516001600160601b0319606092831b8116608052911b1660a05260805160601c60a05160601c61527562000112600039806101b75280610ee05280610f1b5280611107528061139e52806119245280611adc52806120a9528061222d5280612313528061241a52806125c2528061265752806128d05280612a765280612b4b5280612c505280612d385280612db952806136145280613929528061395e52806139925280613a135280613c2d5280613dd25280613e675250806133b752806143825280614e715280614f5252506152756000f3fe60806040526004361061019a5760003560e01c80638803dbee116100e1578063c45a01551161008a578063ded9382a11610064578063ded9382a14610c74578063e8e3370014610cf4578063f305d71914610d81578063fb3bdb4114610dd4576101e0565b8063c45a015514610b60578063d06ca61f14610b75578063d52bb6f414610c2c576101e0565b8063af2979eb116100bb578063af2979eb14610a03578063b6f9de9514610a63578063baa2abde14610af6576101e0565b80638803dbee146108ea578063ad5c46481461098f578063ad615dec146109cd576101e0565b80634a25d94a116101435780635e1e63251161011d5780635e1e632514610764578063791ac947146107b25780637ff36ab514610857576101e0565b80634a25d94a1461059a5780635b0d59841461063f5780635c11d795146106bf576101e0565b80631f00ca74116101745780631f00ca74146103b35780632195995c1461046a57806338ed1739146104f5576101e0565b806302751cec146101e55780630a9a2b721461025e57806318cbafe5146102be576101e0565b366101e0573373ffffffffffffffffffffffffffffffffffffffff7f000000000000000000000000000000000000000000000000000000000000000016146101de57fe5b005b600080fd5b3480156101f157600080fd5b50610245600480360360c081101561020857600080fd5b5073ffffffffffffffffffffffffffffffffffffffff81358116916020810135916040820135916060810135916080820135169060a00135610e67565b6040805192835260208301919091528051918290030190f35b34801561026a57600080fd5b506102ac6004803603606081101561028157600080fd5b5080359073ffffffffffffffffffffffffffffffffffffffff60208201358116916040013516610fba565b60408051918252519081900360200190f35b3480156102ca57600080fd5b50610363600480360360a08110156102e157600080fd5b81359160208101359181019060608101604082013564010000000081111561030857600080fd5b82018360208201111561031a57600080fd5b8035906020019184602083028401116401000000008311171561033c57600080fd5b919350915073ffffffffffffffffffffffffffffffffffffffff813516906020013561107e565b60408051602080825283518183015283519192839290830191858101910280838360005b8381101561039f578181015183820152602001610387565b505050509050019250505060405180910390f35b3480156103bf57600080fd5b50610363600480360360408110156103d657600080fd5b813591908101906040810160208201356401000000008111156103f857600080fd5b82018360208201111561040a57600080fd5b8035906020019184602083028401116401000000008311171561042c57600080fd5b91908080602002602001604051908101604052809392919081815260200183836020028082843760009201919091525092955061146a945050505050565b34801561047657600080fd5b50610245600480360361016081101561048e57600080fd5b5073ffffffffffffffffffffffffffffffffffffffff8135811691602081013582169160408201359160608101359160808201359160a08101359091169060c08101359060e081013515159060ff61010082013516906101208101359061014001356115f8565b34801561050157600080fd5b50610363600480360360a081101561051857600080fd5b81359160208101359181019060608101604082013564010000000081111561053f57600080fd5b82018360208201111561055157600080fd5b8035906020019184602083028401116401000000008311171561057357600080fd5b919350915073ffffffffffffffffffffffffffffffffffffffff8135169060200135611715565b3480156105a657600080fd5b50610363600480360360a08110156105bd57600080fd5b8135916020810135918101906060810160408201356401000000008111156105e457600080fd5b8201836020820111156105f657600080fd5b8035906020019184602083028401116401000000008311171561061857600080fd5b919350915073ffffffffffffffffffffffffffffffffffffffff813516906020013561189b565b34801561064b57600080fd5b506102ac600480360361014081101561066357600080fd5b5073ffffffffffffffffffffffffffffffffffffffff81358116916020810135916040820135916060810135916080820135169060a08101359060c081013515159060ff60e08201351690610100810135906101200135611ad3565b3480156106cb57600080fd5b506101de600480360360a08110156106e257600080fd5b81359160208101359181019060608101604082013564010000000081111561070957600080fd5b82018360208201111561071b57600080fd5b8035906020019184602083028401116401000000008311171561073d57600080fd5b919350915073ffffffffffffffffffffffffffffffffffffffff8135169060200135611c04565b34801561077057600080fd5b506102ac6004803603606081101561078757600080fd5b5080359073ffffffffffffffffffffffffffffffffffffffff60208201358116916040013516611f92565b3480156107be57600080fd5b506101de600480360360a08110156107d557600080fd5b8135916020810135918101906060810160408201356401000000008111156107fc57600080fd5b82018360208201111561080e57600080fd5b8035906020019184602083028401116401000000008311171561083057600080fd5b919350915073ffffffffffffffffffffffffffffffffffffffff8135169060200135612022565b6103636004803603608081101561086d57600080fd5b8135919081019060408101602082013564010000000081111561088f57600080fd5b8201836020820111156108a157600080fd5b803590602001918460208302840111640100000000831117156108c357600080fd5b919350915073ffffffffffffffffffffffffffffffffffffffff81351690602001356123a6565b3480156108f657600080fd5b50610363600480360360a081101561090d57600080fd5b81359160208101359181019060608101604082013564010000000081111561093457600080fd5b82018360208201111561094657600080fd5b8035906020019184602083028401116401000000008311171561096857600080fd5b919350915073ffffffffffffffffffffffffffffffffffffffff813516906020013561279a565b34801561099b57600080fd5b506109a46128ce565b6040805173ffffffffffffffffffffffffffffffffffffffff9092168252519081900360200190f35b3480156109d957600080fd5b506102ac600480360360608110156109f057600080fd5b50803590602081013590604001356128f2565b348015610a0f57600080fd5b506102ac600480360360c0811015610a2657600080fd5b5073ffffffffffffffffffffffffffffffffffffffff81358116916020810135916040820135916060810135916080820135169060a001356129fe565b6101de60048036036080811015610a7957600080fd5b81359190810190604081016020820135640100000000811115610a9b57600080fd5b820183602082011115610aad57600080fd5b80359060200191846020830284011164010000000083111715610acf57600080fd5b919350915073ffffffffffffffffffffffffffffffffffffffff8135169060200135612bde565b348015610b0257600080fd5b50610245600480360360e0811015610b1957600080fd5b5073ffffffffffffffffffffffffffffffffffffffff8135811691602081013582169160408201359160608101359160808201359160a08101359091169060c001356130a0565b348015610b6c57600080fd5b506109a46133b5565b348015610b8157600080fd5b5061036360048036036040811015610b9857600080fd5b81359190810190604081016020820135640100000000811115610bba57600080fd5b820183602082011115610bcc57600080fd5b80359060200191846020830284011164010000000083111715610bee57600080fd5b9190808060200260200160405190810160405280939291908181526020018383602002808284376000920191909152509295506133d9945050505050565b348015610c3857600080fd5b5061024560048036036040811015610c4f57600080fd5b5073ffffffffffffffffffffffffffffffffffffffff81358116916020013516613523565b348015610c8057600080fd5b506102456004803603610140811015610c9857600080fd5b5073ffffffffffffffffffffffffffffffffffffffff81358116916020810135916040820135916060810135916080820135169060a08101359060c081013515159060ff60e08201351690610100810135906101200135613609565b348015610d0057600080fd5b50610d636004803603610100811015610d1857600080fd5b5073ffffffffffffffffffffffffffffffffffffffff8135811691602081013582169160408201359160608101359160808201359160a08101359160c0820135169060e00135613740565b60408051938452602084019290925282820152519081900360600190f35b610d63600480360360c0811015610d9757600080fd5b5073ffffffffffffffffffffffffffffffffffffffff81358116916020810135916040820135916060810135916080820135169060a001356138ae565b61036360048036036080811015610dea57600080fd5b81359190810190604081016020820135640100000000811115610e0c57600080fd5b820183602082011115610e1e57600080fd5b80359060200191846020830284011164010000000083111715610e4057600080fd5b919350915073ffffffffffffffffffffffffffffffffffffffff8135169060200135613bb9565b6000808242811015610eda57604080517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152600760248201527f4558504952454400000000000000000000000000000000000000000000000000604482015290519081900360640190fd5b610f09897f00000000000000000000000000000000000000000000000000000000000000008a8a8a308a6130a0565b9093509150610f19898685613fdc565b7f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff16632e1a7d4d836040518263ffffffff1660e01b815260040180828152602001915050600060405180830381600087803b158015610f8c57600080fd5b505af1158015610fa0573d6000803e3d6000fd5b50505050610fae85836141b9565b50965096945050505050565b6000610fc683836142f6565b73ffffffffffffffffffffffffffffffffffffffff1663632db21c83866040518363ffffffff1660e01b8152600401808373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020018281526020019250505060206040518083038186803b15801561104a57600080fd5b505afa15801561105e573d6000803e3d6000fd5b505050506040513d602081101561107457600080fd5b5051949350505050565b606081428110156110f057604080517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152600760248201527f4558504952454400000000000000000000000000000000000000000000000000604482015290519081900360640190fd5b73ffffffffffffffffffffffffffffffffffffffff7f00000000000000000000000000000000000000000000000000000000000000001686867fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff810181811061115557fe5b9050602002013573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16146111f457604080517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152600c60248201527f494e56414c49445f504154480000000000000000000000000000000000000000604482015290519081900360640190fd5b611231888787808060200260200160405190810160405280939291908181526020018383602002808284376000920191909152506133d992505050565b9150868260018451038151811061124457fe5b602002602001015110156112b957604080517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601a60248201527f494e53554646494349454e545f4f55545055545f414d4f554e54000000000000604482015290519081900360640190fd5b61135d868660008181106112c957fe5b9050602002013573ffffffffffffffffffffffffffffffffffffffff1633611343898960008181106112f757fe5b9050602002013573ffffffffffffffffffffffffffffffffffffffff168a8a600181811061132157fe5b9050602002013573ffffffffffffffffffffffffffffffffffffffff166142f6565b8560008151811061135057fe5b60200260200101516143fb565b61139c828787808060200260200160405190810160405280939291908181526020018383602002808284376000920191909152503092506145cb915050565b7f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff16632e1a7d4d836001855103815181106113e857fe5b60200260200101516040518263ffffffff1660e01b815260040180828152602001915050600060405180830381600087803b15801561142657600080fd5b505af115801561143a573d6000803e3d6000fd5b5050505061145f848360018551038151811061145257fe5b60200260200101516141b9565b509695505050505050565b60606002825110156114dd57604080517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152600c60248201527f494e56414c49445f504154480000000000000000000000000000000000000000604482015290519081900360640190fd5b815167ffffffffffffffff811180156114f557600080fd5b5060405190808252806020026020018201604052801561151f578160200160208202803683370190505b509050828160018351038151811061153357fe5b602090810291909101015281517fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff015b80156115f1576115b082828151811061157857fe5b602002602001015184600184038151811061158f57fe5b60200260200101518584815181106115a357fe5b6020026020010151610fba565b8260018303815181106115bf57fe5b60209081029190910101527fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff01611563565b5092915050565b60008060006116078e8e6142f6565b9050600087611616578c611638565b7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff5b604080517fd505accf00000000000000000000000000000000000000000000000000000000815233600482015230602482015260448101839052606481018c905260ff8a16608482015260a4810189905260c48101889052905191925073ffffffffffffffffffffffffffffffffffffffff84169163d505accf9160e48082019260009290919082900301818387803b1580156116d457600080fd5b505af11580156116e8573d6000803e3d6000fd5b505050506116fb8f8f8f8f8f8f8f6130a0565b809450819550505050509b509b9950505050505050505050565b6060814281101561178757604080517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152600760248201527f4558504952454400000000000000000000000000000000000000000000000000604482015290519081900360640190fd5b6117c4888787808060200260200160405190810160405280939291908181526020018383602002808284376000920191909152506133d992505050565b915086826001845103815181106117d757fe5b6020026020010151101561184c57604080517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601a60248201527f494e53554646494349454e545f4f55545055545f414d4f554e54000000000000604482015290519081900360640190fd5b61185c868660008181106112c957fe5b61145f828787808060200260200160405190810160405280939291908181526020018383602002808284376000920191909152508992506145cb915050565b6060814281101561190d57604080517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152600760248201527f4558504952454400000000000000000000000000000000000000000000000000604482015290519081900360640190fd5b73ffffffffffffffffffffffffffffffffffffffff7f00000000000000000000000000000000000000000000000000000000000000001686867fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff810181811061197257fe5b9050602002013573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1614611a1157604080517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152600c60248201527f494e56414c49445f504154480000000000000000000000000000000000000000604482015290519081900360640190fd5b611a4e8887878080602002602001604051908101604052809392919081815260200183836020028082843760009201919091525061146a92505050565b91508682600081518110611a5e57fe5b602002602001015111156112b957604080517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601660248201527f4558434553534956455f494e5055545f414d4f554e5400000000000000000000604482015290519081900360640190fd5b600080611b008c7f00000000000000000000000000000000000000000000000000000000000000006142f6565b9050600086611b0f578b611b31565b7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff5b604080517fd505accf00000000000000000000000000000000000000000000000000000000815233600482015230602482015260448101839052606481018b905260ff8916608482015260a4810188905260c48101879052905191925073ffffffffffffffffffffffffffffffffffffffff84169163d505accf9160e48082019260009290919082900301818387803b158015611bcd57600080fd5b505af1158015611be1573d6000803e3d6000fd5b50505050611bf38d8d8d8d8d8d6129fe565b9d9c50505050505050505050505050565b8042811015611c7457604080517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152600760248201527f4558504952454400000000000000000000000000000000000000000000000000604482015290519081900360640190fd5b611ce285856000818110611c8457fe5b9050602002013573ffffffffffffffffffffffffffffffffffffffff1633611cdc88886000818110611cb257fe5b9050602002013573ffffffffffffffffffffffffffffffffffffffff168989600181811061132157fe5b8a6143fb565b600085857fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff8101818110611d1257fe5b9050602002013573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff166370a08231856040518263ffffffff1660e01b8152600401808273ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200191505060206040518083038186803b158015611dab57600080fd5b505afa158015611dbf573d6000803e3d6000fd5b505050506040513d6020811015611dd557600080fd5b50516040805160208881028281018201909352888252929350611e17929091899189918291850190849080828437600092019190915250889250614810915050565b86611f1b8288887fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff8101818110611e4a57fe5b9050602002013573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff166370a08231886040518263ffffffff1660e01b8152600401808273ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200191505060206040518083038186803b158015611ee357600080fd5b505afa158015611ef7573d6000803e3d6000fd5b505050506040513d6020811015611f0d57600080fd5b50519063ffffffff614bf316565b1015611f8857604080517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601a60248201527f494e53554646494349454e545f4f55545055545f414d4f554e54000000000000604482015290519081900360640190fd5b5050505050505050565b6000611f9e83836142f6565b73ffffffffffffffffffffffffffffffffffffffff1663ca706bcf84866040518363ffffffff1660e01b8152600401808373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020018281526020019250505060206040518083038186803b15801561104a57600080fd5b804281101561209257604080517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152600760248201527f4558504952454400000000000000000000000000000000000000000000000000604482015290519081900360640190fd5b73ffffffffffffffffffffffffffffffffffffffff7f00000000000000000000000000000000000000000000000000000000000000001685857fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff81018181106120f757fe5b9050602002013573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff161461219657604080517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152600c60248201527f494e56414c49445f504154480000000000000000000000000000000000000000604482015290519081900360640190fd5b6121a685856000818110611c8457fe5b6121e4858580806020026020016040519081016040528093929190818152602001838360200280828437600092019190915250309250614810915050565b604080517f70a08231000000000000000000000000000000000000000000000000000000008152306004820152905160009173ffffffffffffffffffffffffffffffffffffffff7f000000000000000000000000000000000000000000000000000000000000000016916370a0823191602480820192602092909190829003018186803b15801561227457600080fd5b505afa158015612288573d6000803e3d6000fd5b505050506040513d602081101561229e57600080fd5b505190508681101561231157604080517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601a60248201527f494e53554646494349454e545f4f55545055545f414d4f554e54000000000000604482015290519081900360640190fd5b7f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff16632e1a7d4d826040518263ffffffff1660e01b815260040180828152602001915050600060405180830381600087803b15801561238457600080fd5b505af1158015612398573d6000803e3d6000fd5b50505050611f8884826141b9565b6060814281101561241857604080517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152600760248201527f4558504952454400000000000000000000000000000000000000000000000000604482015290519081900360640190fd5b7f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff168686600081811061245c57fe5b9050602002013573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16146124fb57604080517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152600c60248201527f494e56414c49445f504154480000000000000000000000000000000000000000604482015290519081900360640190fd5b612538348787808060200260200160405190810160405280939291908181526020018383602002808284376000920191909152506133d992505050565b9150868260018451038151811061254b57fe5b602002602001015110156125c057604080517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601a60248201527f494e53554646494349454e545f4f55545055545f414d4f554e54000000000000604482015290519081900360640190fd5b7f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff1663d0e30db08360008151811061260957fe5b60200260200101516040518263ffffffff1660e01b81526004016000604051808303818588803b15801561263c57600080fd5b505af1158015612650573d6000803e3d6000fd5b50505050507f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff1663a9059cbb6126a188886000818110611cb257fe5b846000815181106126ae57fe5b60200260200101516040518363ffffffff1660e01b8152600401808373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200182815260200192505050602060405180830381600087803b15801561271f57600080fd5b505af1158015612733573d6000803e3d6000fd5b505050506040513d602081101561274957600080fd5b505161275157fe5b612790828787808060200260200160405190810160405280939291908181526020018383602002808284376000920191909152508992506145cb915050565b5095945050505050565b6060814281101561280c57604080517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152600760248201527f4558504952454400000000000000000000000000000000000000000000000000604482015290519081900360640190fd5b6128498887878080602002602001604051908101604052809392919081815260200183836020028082843760009201919091525061146a92505050565b9150868260008151811061285957fe5b6020026020010151111561184c57604080517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601660248201527f4558434553534956455f494e5055545f414d4f554e5400000000000000000000604482015290519081900360640190fd5b7f000000000000000000000000000000000000000000000000000000000000000081565b600080841161296257604080517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601360248201527f494e53554646494349454e545f414d4f554e5400000000000000000000000000604482015290519081900360640190fd5b6000831180156129725750600082115b6129dd57604080517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601660248201527f494e53554646494349454e545f4c495155494449545900000000000000000000604482015290519081900360640190fd5b826129ee858463ffffffff614c3e16565b816129f557fe5b04949350505050565b60008142811015612a7057604080517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152600760248201527f4558504952454400000000000000000000000000000000000000000000000000604482015290519081900360640190fd5b612a9f887f000000000000000000000000000000000000000000000000000000000000000089898930896130a0565b604080517f70a082310000000000000000000000000000000000000000000000000000000081523060048201529051919450612b4992508a91879173ffffffffffffffffffffffffffffffffffffffff8416916370a0823191602480820192602092909190829003018186803b158015612b1857600080fd5b505afa158015612b2c573d6000803e3d6000fd5b505050506040513d6020811015612b4257600080fd5b5051613fdc565b7f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff16632e1a7d4d836040518263ffffffff1660e01b815260040180828152602001915050600060405180830381600087803b158015612bbc57600080fd5b505af1158015612bd0573d6000803e3d6000fd5b5050505061145f84836141b9565b8042811015612c4e57604080517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152600760248201527f4558504952454400000000000000000000000000000000000000000000000000604482015290519081900360640190fd5b7f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff1685856000818110612c9257fe5b9050602002013573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1614612d3157604080517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152600c60248201527f494e56414c49445f504154480000000000000000000000000000000000000000604482015290519081900360640190fd5b60003490507f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff1663d0e30db0826040518263ffffffff1660e01b81526004016000604051808303818588803b158015612d9e57600080fd5b505af1158015612db2573d6000803e3d6000fd5b50505050507f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff1663a9059cbb612e0388886000818110611cb257fe5b836040518363ffffffff1660e01b8152600401808373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200182815260200192505050602060405180830381600087803b158015612e6d57600080fd5b505af1158015612e81573d6000803e3d6000fd5b505050506040513d6020811015612e9757600080fd5b5051612e9f57fe5b600086867fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff8101818110612ecf57fe5b9050602002013573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff166370a08231866040518263ffffffff1660e01b8152600401808273ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200191505060206040518083038186803b158015612f6857600080fd5b505afa158015612f7c573d6000803e3d6000fd5b505050506040513d6020811015612f9257600080fd5b50516040805160208981028281018201909352898252929350612fd49290918a918a918291850190849080828437600092019190915250899250614810915050565b87611f1b8289897fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff810181811061300757fe5b9050602002013573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff166370a08231896040518263ffffffff1660e01b8152600401808273ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200191505060206040518083038186803b158015611ee357600080fd5b600080824281101561311357604080517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152600760248201527f4558504952454400000000000000000000000000000000000000000000000000604482015290519081900360640190fd5b600061311f8b8b6142f6565b604080517f23b872dd00000000000000000000000000000000000000000000000000000000815233600482015273ffffffffffffffffffffffffffffffffffffffff831660248201819052604482018d9052915192935090916323b872dd916064808201926020929091908290030181600087803b1580156131a057600080fd5b505af11580156131b4573d6000803e3d6000fd5b505050506040513d60208110156131ca57600080fd5b5050604080517f89afcb4400000000000000000000000000000000000000000000000000000000815273ffffffffffffffffffffffffffffffffffffffff888116600483015282516000938493928616926389afcb44926024808301939282900301818787803b15801561323d57600080fd5b505af1158015613251573d6000803e3d6000fd5b505050506040513d604081101561326757600080fd5b508051602090910151909250905060006132818e8e614cb1565b5090508073ffffffffffffffffffffffffffffffffffffffff168e73ffffffffffffffffffffffffffffffffffffffff16146132be5781836132c1565b82825b90975095508a87101561333557604080517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601560248201527f494e53554646494349454e545f415f414d4f554e540000000000000000000000604482015290519081900360640190fd5b898610156133a457604080517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601560248201527f494e53554646494349454e545f425f414d4f554e540000000000000000000000604482015290519081900360640190fd5b505050505097509795505050505050565b7f000000000000000000000000000000000000000000000000000000000000000081565b606060028251101561344c57604080517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152600c60248201527f494e56414c49445f504154480000000000000000000000000000000000000000604482015290519081900360640190fd5b815167ffffffffffffffff8111801561346457600080fd5b5060405190808252806020026020018201604052801561348e578160200160208202803683370190505b509050828160008151811061349f57fe5b60200260200101818152505060005b60018351038110156115f1576135018282815181106134c957fe5b60200260200101518483815181106134dd57fe5b60200260200101518584600101815181106134f457fe5b6020026020010151611f92565b82826001018151811061351057fe5b60209081029190910101526001016134ae565b60008060006135328585614cb1565b50905060008061354287876142f6565b73ffffffffffffffffffffffffffffffffffffffff16630902f1ac6040518163ffffffff1660e01b815260040160606040518083038186803b15801561358757600080fd5b505afa15801561359b573d6000803e3d6000fd5b505050506040513d60608110156135b157600080fd5b5080516020909101516dffffffffffffffffffffffffffff918216935016905073ffffffffffffffffffffffffffffffffffffffff878116908416146135f85780826135fb565b81815b909890975095505050505050565b60008060006136388d7f00000000000000000000000000000000000000000000000000000000000000006142f6565b9050600087613647578c613669565b7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff5b604080517fd505accf00000000000000000000000000000000000000000000000000000000815233600482015230602482015260448101839052606481018c905260ff8a16608482015260a4810189905260c48101889052905191925073ffffffffffffffffffffffffffffffffffffffff84169163d505accf9160e48082019260009290919082900301818387803b15801561370557600080fd5b505af1158015613719573d6000803e3d6000fd5b5050505061372b8e8e8e8e8e8e610e67565b909f909e509c50505050505050505050505050565b600080600083428110156137b557604080517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152600760248201527f4558504952454400000000000000000000000000000000000000000000000000604482015290519081900360640190fd5b6137c38c8c8c8c8c8c614e1a565b909450925060006137d48d8d6142f6565b90506137e28d3383886143fb565b6137ee8c3383876143fb565b8073ffffffffffffffffffffffffffffffffffffffff16636a627842886040518263ffffffff1660e01b8152600401808273ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001915050602060405180830381600087803b15801561386d57600080fd5b505af1158015613881573d6000803e3d6000fd5b505050506040513d602081101561389757600080fd5b5051949d939c50939a509198505050505050505050565b6000806000834281101561392357604080517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152600760248201527f4558504952454400000000000000000000000000000000000000000000000000604482015290519081900360640190fd5b6139518a7f00000000000000000000000000000000000000000000000000000000000000008b348c8c614e1a565b909450925060006139828b7f00000000000000000000000000000000000000000000000000000000000000006142f6565b90506139908b3383886143fb565b7f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff1663d0e30db0856040518263ffffffff1660e01b81526004016000604051808303818588803b1580156139f857600080fd5b505af1158015613a0c573d6000803e3d6000fd5b50505050507f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff1663a9059cbb82866040518363ffffffff1660e01b8152600401808373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200182815260200192505050602060405180830381600087803b158015613ab857600080fd5b505af1158015613acc573d6000803e3d6000fd5b505050506040513d6020811015613ae257600080fd5b5051613aea57fe5b8073ffffffffffffffffffffffffffffffffffffffff16636a627842886040518263ffffffff1660e01b8152600401808273ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001915050602060405180830381600087803b158015613b6957600080fd5b505af1158015613b7d573d6000803e3d6000fd5b505050506040513d6020811015613b9357600080fd5b5051925034841015613bab57613bab338534036141b9565b505096509650969350505050565b60608142811015613c2b57604080517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152600760248201527f4558504952454400000000000000000000000000000000000000000000000000604482015290519081900360640190fd5b7f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff1686866000818110613c6f57fe5b9050602002013573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1614613d0e57604080517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152600c60248201527f494e56414c49445f504154480000000000000000000000000000000000000000604482015290519081900360640190fd5b613d4b8787878080602002602001604051908101604052809392919081815260200183836020028082843760009201919091525061146a92505050565b91503482600081518110613d5b57fe5b60200260200101511115613dd057604080517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601660248201527f4558434553534956455f494e5055545f414d4f554e5400000000000000000000604482015290519081900360640190fd5b7f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff1663d0e30db083600081518110613e1957fe5b60200260200101516040518263ffffffff1660e01b81526004016000604051808303818588803b158015613e4c57600080fd5b505af1158015613e60573d6000803e3d6000fd5b50505050507f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff1663a9059cbb613eb188886000818110611cb257fe5b84600081518110613ebe57fe5b60200260200101516040518363ffffffff1660e01b8152600401808373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200182815260200192505050602060405180830381600087803b158015613f2f57600080fd5b505af1158015613f43573d6000803e3d6000fd5b505050506040513d6020811015613f5957600080fd5b5051613f6157fe5b613fa0828787808060200260200160405190810160405280939291908181526020018383602002808284376000920191909152508992506145cb915050565b81600081518110613fad57fe5b6020026020010151341115612790576127903383600081518110613fcd57fe5b602002602001015134036141b9565b6040805173ffffffffffffffffffffffffffffffffffffffff8481166024830152604480830185905283518084039091018152606490920183526020820180517bffffffffffffffffffffffffffffffffffffffffffffffffffffffff167fa9059cbb00000000000000000000000000000000000000000000000000000000178152925182516000946060949389169392918291908083835b602083106140b257805182527fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe09092019160209182019101614075565b6001836020036101000a0380198251168184511680821785525050505050509050019150506000604051808303816000865af19150503d8060008114614114576040519150601f19603f3d011682016040523d82523d6000602084013e614119565b606091505b5091509150818015614147575080511580614147575080806020019051602081101561414457600080fd5b50515b6141b257604080517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601f60248201527f5472616e7366657248656c7065723a205452414e534645525f4641494c454400604482015290519081900360640190fd5b5050505050565b6040805160008082526020820190925273ffffffffffffffffffffffffffffffffffffffff84169083906040518082805190602001908083835b6020831061423057805182527fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe090920191602091820191016141f3565b6001836020036101000a03801982511681845116808217855250505050505090500191505060006040518083038185875af1925050503d8060008114614292576040519150601f19603f3d011682016040523d82523d6000602084013e614297565b606091505b50509050806142f1576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004018080602001828103825260238152602001806151f96023913960400191505060405180910390fd5b505050565b60008060006143058585614cb1565b604080517fffffffffffffffffffffffffffffffffffffffff000000000000000000000000606094851b811660208084019190915293851b81166034830152825160288184030181526048830184528051908501207fff0000000000000000000000000000000000000000000000000000000000000060688401527f000000000000000000000000000000000000000000000000000000000000000090951b166069820152607d8101939093527f5c193265bc1f16117085a454b86f04b786de5c40d54a45dc24869043eb75f155609d808501919091528151808503909101815260bd9093019052815191012095945050505050565b6040805173ffffffffffffffffffffffffffffffffffffffff85811660248301528481166044830152606480830185905283518084039091018152608490920183526020820180517bffffffffffffffffffffffffffffffffffffffffffffffffffffffff167f23b872dd0000000000000000000000000000000000000000000000000000000017815292518251600094606094938a169392918291908083835b602083106144d957805182527fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe0909201916020918201910161449c565b6001836020036101000a0380198251168184511680821785525050505050509050019150506000604051808303816000865af19150503d806000811461453b576040519150601f19603f3d011682016040523d82523d6000602084013e614540565b606091505b509150915081801561456e57508051158061456e575080806020019051602081101561456b57600080fd5b50515b6145c3576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040180806020018281038252602481526020018061521c6024913960400191505060405180910390fd5b505050505050565b60005b600183510381101561480a576000808483815181106145e957fe5b602002602001015185846001018151811061460057fe5b60200260200101519150915060006146188383614cb1565b509050600087856001018151811061462c57fe5b602002602001015190506000808373ffffffffffffffffffffffffffffffffffffffff168673ffffffffffffffffffffffffffffffffffffffff161461467457826000614678565b6000835b91509150600060028a5103881061468f57886146af565b6146af868b8a600201815181106146a257fe5b60200260200101516142f6565b90506146bb87876142f6565b73ffffffffffffffffffffffffffffffffffffffff1663022c0d9f84848460006040519080825280601f01601f191660200182016040528015614705576020820181803683370190505b506040518563ffffffff1660e01b8152600401808581526020018481526020018373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200180602001828103825283818151815260200191508051906020019080838360005b83811015614790578181015183820152602001614778565b50505050905090810190601f1680156147bd5780820380516001836020036101000a031916815260200191505b5095505050505050600060405180830381600087803b1580156147df57600080fd5b505af11580156147f3573d6000803e3d6000fd5b5050600190990198506145ce975050505050505050565b50505050565b60005b60018351038110156142f15760008084838151811061482e57fe5b602002602001015185846001018151811061484557fe5b602002602001015191509150600061485d8383614cb1565b509050600061486c84846142f6565b90506000806000808473ffffffffffffffffffffffffffffffffffffffff16630902f1ac6040518163ffffffff1660e01b815260040160606040518083038186803b1580156148ba57600080fd5b505afa1580156148ce573d6000803e3d6000fd5b505050506040513d60608110156148e457600080fd5b5080516020909101516dffffffffffffffffffffffffffff9182169350169050600073ffffffffffffffffffffffffffffffffffffffff8981169088161461492d578183614930565b82825b5090506149b4818a73ffffffffffffffffffffffffffffffffffffffff166370a08231896040518263ffffffff1660e01b8152600401808273ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200191505060206040518083038186803b158015611ee357600080fd5b94508573ffffffffffffffffffffffffffffffffffffffff1663ca706bcf8a876040518363ffffffff1660e01b8152600401808373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020018281526020019250505060206040518083038186803b158015614a3b57600080fd5b505afa158015614a4f573d6000803e3d6000fd5b505050506040513d6020811015614a6557600080fd5b50519350600092508291505073ffffffffffffffffffffffffffffffffffffffff88811690871614614a9957826000614a9d565b6000835b91509150600060028c51038a10614ab4578a614ac7565b614ac7888d8c600201815181106146a257fe5b60408051600080825260208201928390527f022c0d9f000000000000000000000000000000000000000000000000000000008352602482018781526044830187905273ffffffffffffffffffffffffffffffffffffffff8086166064850152608060848501908152845160a48601819052969750908c169563022c0d9f958a958a958a9591949193919260c486019290918190849084905b83811015614b77578181015183820152602001614b5f565b50505050905090810190601f168015614ba45780820380516001836020036101000a031916815260200191505b5095505050505050600060405180830381600087803b158015614bc657600080fd5b505af1158015614bda573d6000803e3d6000fd5b50506001909b019a506148139950505050505050505050565b6000614c3583836040518060400160405280601e81526020017f536166654d6174683a207375627472616374696f6e206f766572666c6f770000815250615126565b90505b92915050565b600082614c4d57506000614c38565b82820282848281614c5a57fe5b0414614c35576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004018080602001828103825260218152602001806151d86021913960400191505060405180910390fd5b6000808273ffffffffffffffffffffffffffffffffffffffff168473ffffffffffffffffffffffffffffffffffffffff161415614d4f57604080517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601360248201527f4944454e544943414c5f41444452455353455300000000000000000000000000604482015290519081900360640190fd5b8273ffffffffffffffffffffffffffffffffffffffff168473ffffffffffffffffffffffffffffffffffffffff1610614d89578284614d8c565b83835b909250905073ffffffffffffffffffffffffffffffffffffffff8216614e1357604080517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152600c60248201527f5a45524f5f414444524553530000000000000000000000000000000000000000604482015290519081900360640190fd5b9250929050565b604080517fe6a4390500000000000000000000000000000000000000000000000000000000815273ffffffffffffffffffffffffffffffffffffffff888116600483015287811660248301529151600092839283927f00000000000000000000000000000000000000000000000000000000000000009092169163e6a4390591604480820192602092909190829003018186803b158015614eba57600080fd5b505afa158015614ece573d6000803e3d6000fd5b505050506040513d6020811015614ee457600080fd5b505173ffffffffffffffffffffffffffffffffffffffff161415614fca57604080517fc9c6539600000000000000000000000000000000000000000000000000000000815273ffffffffffffffffffffffffffffffffffffffff8a81166004830152898116602483015291517f00000000000000000000000000000000000000000000000000000000000000009092169163c9c65396916044808201926020929091908290030181600087803b158015614f9d57600080fd5b505af1158015614fb1573d6000803e3d6000fd5b505050506040513d6020811015614fc757600080fd5b50505b600080614fd78a8a613523565b91509150816000148015614fe9575080155b15614ff957879350869250615119565b60006150068984846128f2565b9050878111615089578581101561507e57604080517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601560248201527f494e53554646494349454e545f425f414d4f554e540000000000000000000000604482015290519081900360640190fd5b889450925082615117565b60006150968984866128f2565b9050898111156150a257fe5b8781101561511157604080517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601560248201527f494e53554646494349454e545f415f414d4f554e540000000000000000000000604482015290519081900360640190fd5b94508793505b505b5050965096945050505050565b600081848411156151cf576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004018080602001828103825283818151815260200191508051906020019080838360005b8381101561519457818101518382015260200161517c565b50505050905090810190601f1680156151c15780820380516001836020036101000a031916815260200191505b509250505060405180910390fd5b50505090039056fe536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f775472616e7366657248656c7065723a204554485f5452414e534645525f4641494c45445472616e7366657248656c7065723a205452414e534645525f46524f4d5f4641494c4544a2646970667358221220bd000b0f82c67d79a8d655a8d9d95b48b382cadd539a4bf65d66b7f1a3043a5364736f6c634300060b0033"
    };
});
define("@scom/scom-swap/contracts/oswap-openswap-contract/contracts/amm/OSWAP_Router.ts", ["require", "exports", "@ijstech/eth-contract", "@scom/scom-swap/contracts/oswap-openswap-contract/contracts/amm/OSWAP_Router.json.ts"], function (require, exports, eth_contract_6, OSWAP_Router_json_1) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.OSWAP_Router = void 0;
    class OSWAP_Router extends eth_contract_6.Contract {
        constructor(wallet, address) {
            super(wallet, address, OSWAP_Router_json_1.default.abi, OSWAP_Router_json_1.default.bytecode);
            this.assign();
        }
        deploy(params, options) {
            return this.__deploy([params.factory, params.WETH], options);
        }
        assign() {
            let WETH_call = async (options) => {
                let result = await this.call('WETH', [], options);
                return result;
            };
            this.WETH = WETH_call;
            let factory_call = async (options) => {
                let result = await this.call('factory', [], options);
                return result;
            };
            this.factory = factory_call;
            let getAmountInParams = (params) => [this.wallet.utils.toString(params.amountOut), params.tokenIn, params.tokenOut];
            let getAmountIn_call = async (params, options) => {
                let result = await this.call('getAmountIn', getAmountInParams(params), options);
                return new eth_contract_6.BigNumber(result);
            };
            this.getAmountIn = getAmountIn_call;
            let getAmountOutParams = (params) => [this.wallet.utils.toString(params.amountIn), params.tokenIn, params.tokenOut];
            let getAmountOut_call = async (params, options) => {
                let result = await this.call('getAmountOut', getAmountOutParams(params), options);
                return new eth_contract_6.BigNumber(result);
            };
            this.getAmountOut = getAmountOut_call;
            let getAmountsInParams = (params) => [this.wallet.utils.toString(params.amountOut), params.path];
            let getAmountsIn_call = async (params, options) => {
                let result = await this.call('getAmountsIn', getAmountsInParams(params), options);
                return result.map(e => new eth_contract_6.BigNumber(e));
            };
            this.getAmountsIn = getAmountsIn_call;
            let getAmountsOutParams = (params) => [this.wallet.utils.toString(params.amountIn), params.path];
            let getAmountsOut_call = async (params, options) => {
                let result = await this.call('getAmountsOut', getAmountsOutParams(params), options);
                return result.map(e => new eth_contract_6.BigNumber(e));
            };
            this.getAmountsOut = getAmountsOut_call;
            let getReservesParams = (params) => [params.tokenA, params.tokenB];
            let getReserves_call = async (params, options) => {
                let result = await this.call('getReserves', getReservesParams(params), options);
                return {
                    reserveA: new eth_contract_6.BigNumber(result.reserveA),
                    reserveB: new eth_contract_6.BigNumber(result.reserveB)
                };
            };
            this.getReserves = getReserves_call;
            let quoteParams = (params) => [this.wallet.utils.toString(params.amountA), this.wallet.utils.toString(params.reserveA), this.wallet.utils.toString(params.reserveB)];
            let quote_call = async (params, options) => {
                let result = await this.call('quote', quoteParams(params), options);
                return new eth_contract_6.BigNumber(result);
            };
            this.quote = quote_call;
            let addLiquidityParams = (params) => [params.tokenA, params.tokenB, this.wallet.utils.toString(params.amountADesired), this.wallet.utils.toString(params.amountBDesired), this.wallet.utils.toString(params.amountAMin), this.wallet.utils.toString(params.amountBMin), params.to, this.wallet.utils.toString(params.deadline)];
            let addLiquidity_send = async (params, options) => {
                let result = await this.send('addLiquidity', addLiquidityParams(params), options);
                return result;
            };
            let addLiquidity_call = async (params, options) => {
                let result = await this.call('addLiquidity', addLiquidityParams(params), options);
                return {
                    amountA: new eth_contract_6.BigNumber(result.amountA),
                    amountB: new eth_contract_6.BigNumber(result.amountB),
                    liquidity: new eth_contract_6.BigNumber(result.liquidity)
                };
            };
            let addLiquidity_txData = async (params, options) => {
                let result = await this.txData('addLiquidity', addLiquidityParams(params), options);
                return result;
            };
            this.addLiquidity = Object.assign(addLiquidity_send, {
                call: addLiquidity_call,
                txData: addLiquidity_txData
            });
            let addLiquidityETHParams = (params) => [params.token, this.wallet.utils.toString(params.amountTokenDesired), this.wallet.utils.toString(params.amountTokenMin), this.wallet.utils.toString(params.amountETHMin), params.to, this.wallet.utils.toString(params.deadline)];
            let addLiquidityETH_send = async (params, options) => {
                let result = await this.send('addLiquidityETH', addLiquidityETHParams(params), options);
                return result;
            };
            let addLiquidityETH_call = async (params, options) => {
                let result = await this.call('addLiquidityETH', addLiquidityETHParams(params), options);
                return {
                    amountToken: new eth_contract_6.BigNumber(result.amountToken),
                    amountETH: new eth_contract_6.BigNumber(result.amountETH),
                    liquidity: new eth_contract_6.BigNumber(result.liquidity)
                };
            };
            let addLiquidityETH_txData = async (params, options) => {
                let result = await this.txData('addLiquidityETH', addLiquidityETHParams(params), options);
                return result;
            };
            this.addLiquidityETH = Object.assign(addLiquidityETH_send, {
                call: addLiquidityETH_call,
                txData: addLiquidityETH_txData
            });
            let removeLiquidityParams = (params) => [params.tokenA, params.tokenB, this.wallet.utils.toString(params.liquidity), this.wallet.utils.toString(params.amountAMin), this.wallet.utils.toString(params.amountBMin), params.to, this.wallet.utils.toString(params.deadline)];
            let removeLiquidity_send = async (params, options) => {
                let result = await this.send('removeLiquidity', removeLiquidityParams(params), options);
                return result;
            };
            let removeLiquidity_call = async (params, options) => {
                let result = await this.call('removeLiquidity', removeLiquidityParams(params), options);
                return {
                    amountA: new eth_contract_6.BigNumber(result.amountA),
                    amountB: new eth_contract_6.BigNumber(result.amountB)
                };
            };
            let removeLiquidity_txData = async (params, options) => {
                let result = await this.txData('removeLiquidity', removeLiquidityParams(params), options);
                return result;
            };
            this.removeLiquidity = Object.assign(removeLiquidity_send, {
                call: removeLiquidity_call,
                txData: removeLiquidity_txData
            });
            let removeLiquidityETHParams = (params) => [params.token, this.wallet.utils.toString(params.liquidity), this.wallet.utils.toString(params.amountTokenMin), this.wallet.utils.toString(params.amountETHMin), params.to, this.wallet.utils.toString(params.deadline)];
            let removeLiquidityETH_send = async (params, options) => {
                let result = await this.send('removeLiquidityETH', removeLiquidityETHParams(params), options);
                return result;
            };
            let removeLiquidityETH_call = async (params, options) => {
                let result = await this.call('removeLiquidityETH', removeLiquidityETHParams(params), options);
                return {
                    amountToken: new eth_contract_6.BigNumber(result.amountToken),
                    amountETH: new eth_contract_6.BigNumber(result.amountETH)
                };
            };
            let removeLiquidityETH_txData = async (params, options) => {
                let result = await this.txData('removeLiquidityETH', removeLiquidityETHParams(params), options);
                return result;
            };
            this.removeLiquidityETH = Object.assign(removeLiquidityETH_send, {
                call: removeLiquidityETH_call,
                txData: removeLiquidityETH_txData
            });
            let removeLiquidityETHSupportingFeeOnTransferTokensParams = (params) => [params.token, this.wallet.utils.toString(params.liquidity), this.wallet.utils.toString(params.amountTokenMin), this.wallet.utils.toString(params.amountETHMin), params.to, this.wallet.utils.toString(params.deadline)];
            let removeLiquidityETHSupportingFeeOnTransferTokens_send = async (params, options) => {
                let result = await this.send('removeLiquidityETHSupportingFeeOnTransferTokens', removeLiquidityETHSupportingFeeOnTransferTokensParams(params), options);
                return result;
            };
            let removeLiquidityETHSupportingFeeOnTransferTokens_call = async (params, options) => {
                let result = await this.call('removeLiquidityETHSupportingFeeOnTransferTokens', removeLiquidityETHSupportingFeeOnTransferTokensParams(params), options);
                return new eth_contract_6.BigNumber(result);
            };
            let removeLiquidityETHSupportingFeeOnTransferTokens_txData = async (params, options) => {
                let result = await this.txData('removeLiquidityETHSupportingFeeOnTransferTokens', removeLiquidityETHSupportingFeeOnTransferTokensParams(params), options);
                return result;
            };
            this.removeLiquidityETHSupportingFeeOnTransferTokens = Object.assign(removeLiquidityETHSupportingFeeOnTransferTokens_send, {
                call: removeLiquidityETHSupportingFeeOnTransferTokens_call,
                txData: removeLiquidityETHSupportingFeeOnTransferTokens_txData
            });
            let removeLiquidityETHWithPermitParams = (params) => [params.token, this.wallet.utils.toString(params.liquidity), this.wallet.utils.toString(params.amountTokenMin), this.wallet.utils.toString(params.amountETHMin), params.to, this.wallet.utils.toString(params.deadline), params.approveMax, this.wallet.utils.toString(params.v), this.wallet.utils.stringToBytes32(params.r), this.wallet.utils.stringToBytes32(params.s)];
            let removeLiquidityETHWithPermit_send = async (params, options) => {
                let result = await this.send('removeLiquidityETHWithPermit', removeLiquidityETHWithPermitParams(params), options);
                return result;
            };
            let removeLiquidityETHWithPermit_call = async (params, options) => {
                let result = await this.call('removeLiquidityETHWithPermit', removeLiquidityETHWithPermitParams(params), options);
                return {
                    amountToken: new eth_contract_6.BigNumber(result.amountToken),
                    amountETH: new eth_contract_6.BigNumber(result.amountETH)
                };
            };
            let removeLiquidityETHWithPermit_txData = async (params, options) => {
                let result = await this.txData('removeLiquidityETHWithPermit', removeLiquidityETHWithPermitParams(params), options);
                return result;
            };
            this.removeLiquidityETHWithPermit = Object.assign(removeLiquidityETHWithPermit_send, {
                call: removeLiquidityETHWithPermit_call,
                txData: removeLiquidityETHWithPermit_txData
            });
            let removeLiquidityETHWithPermitSupportingFeeOnTransferTokensParams = (params) => [params.token, this.wallet.utils.toString(params.liquidity), this.wallet.utils.toString(params.amountTokenMin), this.wallet.utils.toString(params.amountETHMin), params.to, this.wallet.utils.toString(params.deadline), params.approveMax, this.wallet.utils.toString(params.v), this.wallet.utils.stringToBytes32(params.r), this.wallet.utils.stringToBytes32(params.s)];
            let removeLiquidityETHWithPermitSupportingFeeOnTransferTokens_send = async (params, options) => {
                let result = await this.send('removeLiquidityETHWithPermitSupportingFeeOnTransferTokens', removeLiquidityETHWithPermitSupportingFeeOnTransferTokensParams(params), options);
                return result;
            };
            let removeLiquidityETHWithPermitSupportingFeeOnTransferTokens_call = async (params, options) => {
                let result = await this.call('removeLiquidityETHWithPermitSupportingFeeOnTransferTokens', removeLiquidityETHWithPermitSupportingFeeOnTransferTokensParams(params), options);
                return new eth_contract_6.BigNumber(result);
            };
            let removeLiquidityETHWithPermitSupportingFeeOnTransferTokens_txData = async (params, options) => {
                let result = await this.txData('removeLiquidityETHWithPermitSupportingFeeOnTransferTokens', removeLiquidityETHWithPermitSupportingFeeOnTransferTokensParams(params), options);
                return result;
            };
            this.removeLiquidityETHWithPermitSupportingFeeOnTransferTokens = Object.assign(removeLiquidityETHWithPermitSupportingFeeOnTransferTokens_send, {
                call: removeLiquidityETHWithPermitSupportingFeeOnTransferTokens_call,
                txData: removeLiquidityETHWithPermitSupportingFeeOnTransferTokens_txData
            });
            let removeLiquidityWithPermitParams = (params) => [params.tokenA, params.tokenB, this.wallet.utils.toString(params.liquidity), this.wallet.utils.toString(params.amountAMin), this.wallet.utils.toString(params.amountBMin), params.to, this.wallet.utils.toString(params.deadline), params.approveMax, this.wallet.utils.toString(params.v), this.wallet.utils.stringToBytes32(params.r), this.wallet.utils.stringToBytes32(params.s)];
            let removeLiquidityWithPermit_send = async (params, options) => {
                let result = await this.send('removeLiquidityWithPermit', removeLiquidityWithPermitParams(params), options);
                return result;
            };
            let removeLiquidityWithPermit_call = async (params, options) => {
                let result = await this.call('removeLiquidityWithPermit', removeLiquidityWithPermitParams(params), options);
                return {
                    amountA: new eth_contract_6.BigNumber(result.amountA),
                    amountB: new eth_contract_6.BigNumber(result.amountB)
                };
            };
            let removeLiquidityWithPermit_txData = async (params, options) => {
                let result = await this.txData('removeLiquidityWithPermit', removeLiquidityWithPermitParams(params), options);
                return result;
            };
            this.removeLiquidityWithPermit = Object.assign(removeLiquidityWithPermit_send, {
                call: removeLiquidityWithPermit_call,
                txData: removeLiquidityWithPermit_txData
            });
            let swapETHForExactTokensParams = (params) => [this.wallet.utils.toString(params.amountOut), params.path, params.to, this.wallet.utils.toString(params.deadline)];
            let swapETHForExactTokens_send = async (params, options) => {
                let result = await this.send('swapETHForExactTokens', swapETHForExactTokensParams(params), options);
                return result;
            };
            let swapETHForExactTokens_call = async (params, options) => {
                let result = await this.call('swapETHForExactTokens', swapETHForExactTokensParams(params), options);
                return result.map(e => new eth_contract_6.BigNumber(e));
            };
            let swapETHForExactTokens_txData = async (params, options) => {
                let result = await this.txData('swapETHForExactTokens', swapETHForExactTokensParams(params), options);
                return result;
            };
            this.swapETHForExactTokens = Object.assign(swapETHForExactTokens_send, {
                call: swapETHForExactTokens_call,
                txData: swapETHForExactTokens_txData
            });
            let swapExactETHForTokensParams = (params) => [this.wallet.utils.toString(params.amountOutMin), params.path, params.to, this.wallet.utils.toString(params.deadline)];
            let swapExactETHForTokens_send = async (params, options) => {
                let result = await this.send('swapExactETHForTokens', swapExactETHForTokensParams(params), options);
                return result;
            };
            let swapExactETHForTokens_call = async (params, options) => {
                let result = await this.call('swapExactETHForTokens', swapExactETHForTokensParams(params), options);
                return result.map(e => new eth_contract_6.BigNumber(e));
            };
            let swapExactETHForTokens_txData = async (params, options) => {
                let result = await this.txData('swapExactETHForTokens', swapExactETHForTokensParams(params), options);
                return result;
            };
            this.swapExactETHForTokens = Object.assign(swapExactETHForTokens_send, {
                call: swapExactETHForTokens_call,
                txData: swapExactETHForTokens_txData
            });
            let swapExactETHForTokensSupportingFeeOnTransferTokensParams = (params) => [this.wallet.utils.toString(params.amountOutMin), params.path, params.to, this.wallet.utils.toString(params.deadline)];
            let swapExactETHForTokensSupportingFeeOnTransferTokens_send = async (params, options) => {
                let result = await this.send('swapExactETHForTokensSupportingFeeOnTransferTokens', swapExactETHForTokensSupportingFeeOnTransferTokensParams(params), options);
                return result;
            };
            let swapExactETHForTokensSupportingFeeOnTransferTokens_call = async (params, options) => {
                let result = await this.call('swapExactETHForTokensSupportingFeeOnTransferTokens', swapExactETHForTokensSupportingFeeOnTransferTokensParams(params), options);
                return;
            };
            let swapExactETHForTokensSupportingFeeOnTransferTokens_txData = async (params, options) => {
                let result = await this.txData('swapExactETHForTokensSupportingFeeOnTransferTokens', swapExactETHForTokensSupportingFeeOnTransferTokensParams(params), options);
                return result;
            };
            this.swapExactETHForTokensSupportingFeeOnTransferTokens = Object.assign(swapExactETHForTokensSupportingFeeOnTransferTokens_send, {
                call: swapExactETHForTokensSupportingFeeOnTransferTokens_call,
                txData: swapExactETHForTokensSupportingFeeOnTransferTokens_txData
            });
            let swapExactTokensForETHParams = (params) => [this.wallet.utils.toString(params.amountIn), this.wallet.utils.toString(params.amountOutMin), params.path, params.to, this.wallet.utils.toString(params.deadline)];
            let swapExactTokensForETH_send = async (params, options) => {
                let result = await this.send('swapExactTokensForETH', swapExactTokensForETHParams(params), options);
                return result;
            };
            let swapExactTokensForETH_call = async (params, options) => {
                let result = await this.call('swapExactTokensForETH', swapExactTokensForETHParams(params), options);
                return result.map(e => new eth_contract_6.BigNumber(e));
            };
            let swapExactTokensForETH_txData = async (params, options) => {
                let result = await this.txData('swapExactTokensForETH', swapExactTokensForETHParams(params), options);
                return result;
            };
            this.swapExactTokensForETH = Object.assign(swapExactTokensForETH_send, {
                call: swapExactTokensForETH_call,
                txData: swapExactTokensForETH_txData
            });
            let swapExactTokensForETHSupportingFeeOnTransferTokensParams = (params) => [this.wallet.utils.toString(params.amountIn), this.wallet.utils.toString(params.amountOutMin), params.path, params.to, this.wallet.utils.toString(params.deadline)];
            let swapExactTokensForETHSupportingFeeOnTransferTokens_send = async (params, options) => {
                let result = await this.send('swapExactTokensForETHSupportingFeeOnTransferTokens', swapExactTokensForETHSupportingFeeOnTransferTokensParams(params), options);
                return result;
            };
            let swapExactTokensForETHSupportingFeeOnTransferTokens_call = async (params, options) => {
                let result = await this.call('swapExactTokensForETHSupportingFeeOnTransferTokens', swapExactTokensForETHSupportingFeeOnTransferTokensParams(params), options);
                return;
            };
            let swapExactTokensForETHSupportingFeeOnTransferTokens_txData = async (params, options) => {
                let result = await this.txData('swapExactTokensForETHSupportingFeeOnTransferTokens', swapExactTokensForETHSupportingFeeOnTransferTokensParams(params), options);
                return result;
            };
            this.swapExactTokensForETHSupportingFeeOnTransferTokens = Object.assign(swapExactTokensForETHSupportingFeeOnTransferTokens_send, {
                call: swapExactTokensForETHSupportingFeeOnTransferTokens_call,
                txData: swapExactTokensForETHSupportingFeeOnTransferTokens_txData
            });
            let swapExactTokensForTokensParams = (params) => [this.wallet.utils.toString(params.amountIn), this.wallet.utils.toString(params.amountOutMin), params.path, params.to, this.wallet.utils.toString(params.deadline)];
            let swapExactTokensForTokens_send = async (params, options) => {
                let result = await this.send('swapExactTokensForTokens', swapExactTokensForTokensParams(params), options);
                return result;
            };
            let swapExactTokensForTokens_call = async (params, options) => {
                let result = await this.call('swapExactTokensForTokens', swapExactTokensForTokensParams(params), options);
                return result.map(e => new eth_contract_6.BigNumber(e));
            };
            let swapExactTokensForTokens_txData = async (params, options) => {
                let result = await this.txData('swapExactTokensForTokens', swapExactTokensForTokensParams(params), options);
                return result;
            };
            this.swapExactTokensForTokens = Object.assign(swapExactTokensForTokens_send, {
                call: swapExactTokensForTokens_call,
                txData: swapExactTokensForTokens_txData
            });
            let swapExactTokensForTokensSupportingFeeOnTransferTokensParams = (params) => [this.wallet.utils.toString(params.amountIn), this.wallet.utils.toString(params.amountOutMin), params.path, params.to, this.wallet.utils.toString(params.deadline)];
            let swapExactTokensForTokensSupportingFeeOnTransferTokens_send = async (params, options) => {
                let result = await this.send('swapExactTokensForTokensSupportingFeeOnTransferTokens', swapExactTokensForTokensSupportingFeeOnTransferTokensParams(params), options);
                return result;
            };
            let swapExactTokensForTokensSupportingFeeOnTransferTokens_call = async (params, options) => {
                let result = await this.call('swapExactTokensForTokensSupportingFeeOnTransferTokens', swapExactTokensForTokensSupportingFeeOnTransferTokensParams(params), options);
                return;
            };
            let swapExactTokensForTokensSupportingFeeOnTransferTokens_txData = async (params, options) => {
                let result = await this.txData('swapExactTokensForTokensSupportingFeeOnTransferTokens', swapExactTokensForTokensSupportingFeeOnTransferTokensParams(params), options);
                return result;
            };
            this.swapExactTokensForTokensSupportingFeeOnTransferTokens = Object.assign(swapExactTokensForTokensSupportingFeeOnTransferTokens_send, {
                call: swapExactTokensForTokensSupportingFeeOnTransferTokens_call,
                txData: swapExactTokensForTokensSupportingFeeOnTransferTokens_txData
            });
            let swapTokensForExactETHParams = (params) => [this.wallet.utils.toString(params.amountOut), this.wallet.utils.toString(params.amountInMax), params.path, params.to, this.wallet.utils.toString(params.deadline)];
            let swapTokensForExactETH_send = async (params, options) => {
                let result = await this.send('swapTokensForExactETH', swapTokensForExactETHParams(params), options);
                return result;
            };
            let swapTokensForExactETH_call = async (params, options) => {
                let result = await this.call('swapTokensForExactETH', swapTokensForExactETHParams(params), options);
                return result.map(e => new eth_contract_6.BigNumber(e));
            };
            let swapTokensForExactETH_txData = async (params, options) => {
                let result = await this.txData('swapTokensForExactETH', swapTokensForExactETHParams(params), options);
                return result;
            };
            this.swapTokensForExactETH = Object.assign(swapTokensForExactETH_send, {
                call: swapTokensForExactETH_call,
                txData: swapTokensForExactETH_txData
            });
            let swapTokensForExactTokensParams = (params) => [this.wallet.utils.toString(params.amountOut), this.wallet.utils.toString(params.amountInMax), params.path, params.to, this.wallet.utils.toString(params.deadline)];
            let swapTokensForExactTokens_send = async (params, options) => {
                let result = await this.send('swapTokensForExactTokens', swapTokensForExactTokensParams(params), options);
                return result;
            };
            let swapTokensForExactTokens_call = async (params, options) => {
                let result = await this.call('swapTokensForExactTokens', swapTokensForExactTokensParams(params), options);
                return result.map(e => new eth_contract_6.BigNumber(e));
            };
            let swapTokensForExactTokens_txData = async (params, options) => {
                let result = await this.txData('swapTokensForExactTokens', swapTokensForExactTokensParams(params), options);
                return result;
            };
            this.swapTokensForExactTokens = Object.assign(swapTokensForExactTokens_send, {
                call: swapTokensForExactTokens_call,
                txData: swapTokensForExactTokens_txData
            });
        }
    }
    OSWAP_Router._abi = OSWAP_Router_json_1.default.abi;
    exports.OSWAP_Router = OSWAP_Router;
});
define("@scom/scom-swap/contracts/oswap-openswap-contract/contracts/amm/OSWAP_VotingExecutor1.json.ts", ["require", "exports"], function (require, exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    ///<amd-module name='@scom/scom-swap/contracts/oswap-openswap-contract/contracts/amm/OSWAP_VotingExecutor1.json.ts'/> 
    exports.default = {
        "abi": [
            { "inputs": [{ "internalType": "address", "name": "_factory", "type": "address" }], "stateMutability": "nonpayable", "type": "constructor" },
            { "inputs": [{ "internalType": "bytes32[]", "name": "params", "type": "bytes32[]" }], "name": "execute", "outputs": [], "stateMutability": "nonpayable", "type": "function" },
            { "inputs": [], "name": "factory", "outputs": [{ "internalType": "address", "name": "", "type": "address" }], "stateMutability": "view", "type": "function" },
            { "inputs": [], "name": "governance", "outputs": [{ "internalType": "address", "name": "", "type": "address" }], "stateMutability": "view", "type": "function" }
        ],
        "bytecode": "608060405234801561001057600080fd5b506040516107cc3803806107cc8339818101604052602081101561003357600080fd5b5051600180546001600160a01b0319166001600160a01b03831690811790915560408051635aa6e67560e01b81529051635aa6e67591600480820192602092909190829003018186803b15801561008957600080fd5b505afa15801561009d573d6000803e3d6000fd5b505050506040513d60208110156100b357600080fd5b5051600080546001600160a01b039092166001600160a01b0319909216919091179055506106e6806100e66000396000f3fe608060405234801561001057600080fd5b50600436106100415760003560e01c80635aa6e675146100465780638af7c64914610077578063c45a0155146100e9575b600080fd5b61004e6100f1565b6040805173ffffffffffffffffffffffffffffffffffffffff9092168252519081900360200190f35b6100e76004803603602081101561008d57600080fd5b8101906020810181356401000000008111156100a857600080fd5b8201836020820111156100ba57600080fd5b803590602001918460208302840111640100000000831117156100dc57600080fd5b50909250905061010d565b005b61004e610694565b60005473ffffffffffffffffffffffffffffffffffffffff1681565b600054604080517fb15866e6000000000000000000000000000000000000000000000000000000008152336004820152905173ffffffffffffffffffffffffffffffffffffffff9092169163b15866e691602480820192602092909190829003018186803b15801561017e57600080fd5b505afa158015610192573d6000803e3d6000fd5b505050506040513d60208110156101a857600080fd5b505161021557604080517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152600f60248201527f4e6f742066726f6d20766f74696e670000000000000000000000000000000000604482015290519081900360640190fd5b60008282600081811061022457fe5b90506020020135905060008383600181811061023c57fe5b6020029190910135915050600283141561054957817f7365745472616465466565000000000000000000000000000000000000000000141561030857600154604080517f1060302300000000000000000000000000000000000000000000000000000000815260048101849052905173ffffffffffffffffffffffffffffffffffffffff9092169163106030239160248082019260009290919082900301818387803b1580156102eb57600080fd5b505af11580156102ff573d6000803e3d6000fd5b50505050610544565b817f73657450726f746f636f6c46656500000000000000000000000000000000000014156103a357600154604080517f787dce3d00000000000000000000000000000000000000000000000000000000815260048101849052905173ffffffffffffffffffffffffffffffffffffffff9092169163787dce3d9160248082019260009290919082900301818387803b1580156102eb57600080fd5b817f73657450726f746f636f6c466565546f00000000000000000000000000000000141561044157600154604080517fe0e6799f000000000000000000000000000000000000000000000000000000008152606084901c6004820152905173ffffffffffffffffffffffffffffffffffffffff9092169163e0e6799f9160248082019260009290919082900301818387803b1580156102eb57600080fd5b817f7365744c6976650000000000000000000000000000000000000000000000000014156104dd57600154604080517ff5ee33480000000000000000000000000000000000000000000000000000000081528315156004820152905173ffffffffffffffffffffffffffffffffffffffff9092169163f5ee33489160248082019260009290919082900301818387803b1580156102eb57600080fd5b604080517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152600f60248201527f556e6b6e6f776e20636f6d6d616e640000000000000000000000000000000000604482015290519081900360640190fd5b61068e565b600383141561062757817f7365744c697665466f725061697200000000000000000000000000000000000014156104dd5760015473ffffffffffffffffffffffffffffffffffffffff16636883618a606083901c868660028181106105aa57fe5b604080517fffffffff0000000000000000000000000000000000000000000000000000000060e088901b16815273ffffffffffffffffffffffffffffffffffffffff909516600486015260209091029290920135151560248401525051604480830192600092919082900301818387803b1580156102eb57600080fd5b604080517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601260248201527f496e76616c696420706172616d65746572730000000000000000000000000000604482015290519081900360640190fd5b50505050565b60015473ffffffffffffffffffffffffffffffffffffffff168156fea26469706673582212206cad92ecb11b8ee5a7559c9233f8d31eabdc8c614ccfecf4895f1d4e4c0bac8064736f6c634300060b0033"
    };
});
define("@scom/scom-swap/contracts/oswap-openswap-contract/contracts/amm/OSWAP_VotingExecutor1.ts", ["require", "exports", "@ijstech/eth-contract", "@scom/scom-swap/contracts/oswap-openswap-contract/contracts/amm/OSWAP_VotingExecutor1.json.ts"], function (require, exports, eth_contract_7, OSWAP_VotingExecutor1_json_1) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.OSWAP_VotingExecutor1 = void 0;
    class OSWAP_VotingExecutor1 extends eth_contract_7.Contract {
        constructor(wallet, address) {
            super(wallet, address, OSWAP_VotingExecutor1_json_1.default.abi, OSWAP_VotingExecutor1_json_1.default.bytecode);
            this.assign();
        }
        deploy(factory, options) {
            return this.__deploy([factory], options);
        }
        assign() {
            let factory_call = async (options) => {
                let result = await this.call('factory', [], options);
                return result;
            };
            this.factory = factory_call;
            let governance_call = async (options) => {
                let result = await this.call('governance', [], options);
                return result;
            };
            this.governance = governance_call;
            let execute_send = async (params, options) => {
                let result = await this.send('execute', [this.wallet.utils.stringToBytes32(params)], options);
                return result;
            };
            let execute_call = async (params, options) => {
                let result = await this.call('execute', [this.wallet.utils.stringToBytes32(params)], options);
                return;
            };
            let execute_txData = async (params, options) => {
                let result = await this.txData('execute', [this.wallet.utils.stringToBytes32(params)], options);
                return result;
            };
            this.execute = Object.assign(execute_send, {
                call: execute_call,
                txData: execute_txData
            });
        }
    }
    OSWAP_VotingExecutor1._abi = OSWAP_VotingExecutor1_json_1.default.abi;
    exports.OSWAP_VotingExecutor1 = OSWAP_VotingExecutor1;
});
define("@scom/scom-swap/contracts/oswap-openswap-contract/contracts/commons/OSWAP_FactoryBase.json.ts", ["require", "exports"], function (require, exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    ///<amd-module name='@scom/scom-swap/contracts/oswap-openswap-contract/contracts/commons/OSWAP_FactoryBase.json.ts'/> 
    exports.default = {
        "abi": [
            { "inputs": [{ "internalType": "address", "name": "_governance", "type": "address" }, { "internalType": "address", "name": "_pairCreator", "type": "address" }], "stateMutability": "nonpayable", "type": "constructor" },
            { "anonymous": false, "inputs": [{ "indexed": true, "internalType": "address", "name": "token0", "type": "address" }, { "indexed": true, "internalType": "address", "name": "token1", "type": "address" }, { "indexed": false, "internalType": "address", "name": "pair", "type": "address" }, { "indexed": false, "internalType": "uint256", "name": "newSize", "type": "uint256" }], "name": "PairCreated", "type": "event" },
            { "anonymous": false, "inputs": [{ "indexed": true, "internalType": "address", "name": "pair", "type": "address" }], "name": "PairRestarted", "type": "event" },
            { "anonymous": false, "inputs": [{ "indexed": true, "internalType": "address", "name": "pair", "type": "address" }], "name": "PairShutdowned", "type": "event" },
            { "anonymous": false, "inputs": [], "name": "Restarted", "type": "event" },
            { "anonymous": false, "inputs": [], "name": "Shutdowned", "type": "event" },
            { "inputs": [{ "internalType": "uint256", "name": "", "type": "uint256" }], "name": "allPairs", "outputs": [{ "internalType": "address", "name": "", "type": "address" }], "stateMutability": "view", "type": "function" },
            { "inputs": [], "name": "allPairsLength", "outputs": [{ "internalType": "uint256", "name": "", "type": "uint256" }], "stateMutability": "view", "type": "function" },
            { "inputs": [{ "internalType": "address", "name": "tokenA", "type": "address" }, { "internalType": "address", "name": "tokenB", "type": "address" }], "name": "createPair", "outputs": [{ "internalType": "address", "name": "pair", "type": "address" }], "stateMutability": "nonpayable", "type": "function" },
            { "inputs": [{ "internalType": "address", "name": "", "type": "address" }, { "internalType": "address", "name": "", "type": "address" }], "name": "getPair", "outputs": [{ "internalType": "address", "name": "", "type": "address" }], "stateMutability": "view", "type": "function" },
            { "inputs": [], "name": "governance", "outputs": [{ "internalType": "address", "name": "", "type": "address" }], "stateMutability": "view", "type": "function" },
            { "inputs": [], "name": "isLive", "outputs": [{ "internalType": "bool", "name": "", "type": "bool" }], "stateMutability": "view", "type": "function" },
            { "inputs": [], "name": "pairCreator", "outputs": [{ "internalType": "address", "name": "", "type": "address" }], "stateMutability": "view", "type": "function" },
            { "inputs": [{ "internalType": "bool", "name": "_isLive", "type": "bool" }], "name": "setLive", "outputs": [], "stateMutability": "nonpayable", "type": "function" },
            { "inputs": [{ "internalType": "address", "name": "pair", "type": "address" }, { "internalType": "bool", "name": "live", "type": "bool" }], "name": "setLiveForPair", "outputs": [], "stateMutability": "nonpayable", "type": "function" }
        ],
        "bytecode": "60a060405234801561001057600080fd5b50604051610eb3380380610eb38339818101604052604081101561003357600080fd5b508051602090910151606082901b6001600160601b03191660805260008054600160ff1990911617610100600160a81b0319166101006001600160a01b0393841602178155911690610e0d906100a6903980610242528061027d52806103705280610b6a5280610c5d5250610e0d6000f3fe608060405234801561001057600080fd5b50600436106100a35760003560e01c8063b8f7a66511610076578063c9c653961161005b578063c9c6539614610171578063e6a43905146101ac578063f5ee3348146101e7576100a3565b8063b8f7a6651461014d578063c538b5d614610169576100a3565b80631e3dd18b146100a8578063574f2ba3146100ee5780635aa6e675146101085780636883618a14610110575b600080fd5b6100c5600480360360208110156100be57600080fd5b5035610206565b6040805173ffffffffffffffffffffffffffffffffffffffff9092168252519081900360200190f35b6100f661023a565b60408051918252519081900360200190f35b6100c5610240565b61014b6004803603604081101561012657600080fd5b5073ffffffffffffffffffffffffffffffffffffffff81351690602001351515610264565b005b610155610551565b604080519115158252519081900360200190f35b6100c561055a565b6100c56004803603604081101561018757600080fd5b5073ffffffffffffffffffffffffffffffffffffffff8135811691602001351661057b565b6100c5600480360360408110156101c257600080fd5b5073ffffffffffffffffffffffffffffffffffffffff81358116916020013516610b1e565b61014b600480360360208110156101fd57600080fd5b50351515610b51565b6002818154811061021357fe5b60009182526020909120015473ffffffffffffffffffffffffffffffffffffffff16905081565b60025490565b7f000000000000000000000000000000000000000000000000000000000000000081565b3373ffffffffffffffffffffffffffffffffffffffff167f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff1663f851a4406040518163ffffffff1660e01b815260040160206040518083038186803b1580156102e157600080fd5b505afa1580156102f5573d6000803e3d6000fd5b505050506040513d602081101561030b57600080fd5b505173ffffffffffffffffffffffffffffffffffffffff1614806103e35750604080517fa3818b3b000000000000000000000000000000000000000000000000000000008152336004820152905173ffffffffffffffffffffffffffffffffffffffff7f0000000000000000000000000000000000000000000000000000000000000000169163a3818b3b916024808301926020929190829003018186803b1580156103b657600080fd5b505afa1580156103ca573d6000803e3d6000fd5b505050506040513d60208110156103e057600080fd5b50515b610438576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401808060200182810382526021815260200180610db76021913960400191505060405180910390fd5b604080517ff5ee33480000000000000000000000000000000000000000000000000000000081528215156004820152905173ffffffffffffffffffffffffffffffffffffffff84169163f5ee334891602480830192600092919082900301818387803b1580156104a757600080fd5b505af11580156104bb573d6000803e3d6000fd5b50505050801561050b5760405173ffffffffffffffffffffffffffffffffffffffff8316907fc96ebf6dcdf5c5e56ad8961009b9d49aa6f2d53d5ffe374048f1d603e3b2908a90600090a261054d565b60405173ffffffffffffffffffffffffffffffffffffffff8316907f7dc5983a5f99179c76b5bbff56fcf9e8373f1a7078dcef4537a5176b333c2bfe90600090a25b5050565b60005460ff1681565b600054610100900473ffffffffffffffffffffffffffffffffffffffff1681565b60008173ffffffffffffffffffffffffffffffffffffffff168373ffffffffffffffffffffffffffffffffffffffff16141561061857604080517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601360248201527f4944454e544943414c5f41444452455353455300000000000000000000000000604482015290519081900360640190fd5b6000808373ffffffffffffffffffffffffffffffffffffffff168573ffffffffffffffffffffffffffffffffffffffff1610610655578385610658565b84845b909250905073ffffffffffffffffffffffffffffffffffffffff82166106df57604080517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152600c60248201527f5a45524f5f414444524553530000000000000000000000000000000000000000604482015290519081900360640190fd5b73ffffffffffffffffffffffffffffffffffffffff82811660009081526001602090815260408083208585168452909152902054161561078057604080517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152600b60248201527f504149525f455849535453000000000000000000000000000000000000000000604482015290519081900360640190fd5b604080517fffffffffffffffffffffffffffffffffffffffff000000000000000000000000606085811b821660208085019190915285821b90921660348401528351602881850301815260488401855280519083012060008054606c80870184905287518088039091018152608c909601875293850180517bffffffffffffffffffffffffffffffffffffffffffffffffffffffff167fed25a5a20000000000000000000000000000000000000000000000000000000017815295518551929691959394610100900473ffffffffffffffffffffffffffffffffffffffff169392909182918083835b602083106108a657805182527fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe09092019160209182019101610869565b6001836020036101000a038019825116818451168082178552505050505050905001915050600060405180830381855af49150503d8060008114610906576040519150601f19603f3d011682016040523d82523d6000602084013e61090b565b606091505b50915091508161097c57604080517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601560248201527f4661696c656420746f2063726561746520706169720000000000000000000000604482015290519081900360640190fd5b80806020019051602081101561099157600080fd5b5051604080517f485cc95500000000000000000000000000000000000000000000000000000000815273ffffffffffffffffffffffffffffffffffffffff8881166004830152878116602483015291519298509088169163485cc9559160448082019260009290919082900301818387803b158015610a0f57600080fd5b505af1158015610a23573d6000803e3d6000fd5b5050505073ffffffffffffffffffffffffffffffffffffffff85811660008181526001602081815260408084208a87168086529083528185208054978e167fffffffffffffffffffffffff0000000000000000000000000000000000000000988916811790915584845282862087875284528286208054891682179055600280549586018155958690527f405787fa12a823e0f2b7631cc41b3ba8828b3321ca811111fa75cd3aa3bb5ace90940180549097168417909655925483519283529082015281517f0d3648bd0f6ba80134a33ba9275ac585d9d315f0ad8355cddefde31afa28d0e9929181900390910190a3505050505092915050565b600160209081526000928352604080842090915290825290205473ffffffffffffffffffffffffffffffffffffffff1681565b3373ffffffffffffffffffffffffffffffffffffffff167f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff1663f851a4406040518163ffffffff1660e01b815260040160206040518083038186803b158015610bce57600080fd5b505afa158015610be2573d6000803e3d6000fd5b505050506040513d6020811015610bf857600080fd5b505173ffffffffffffffffffffffffffffffffffffffff161480610cd05750604080517fa3818b3b000000000000000000000000000000000000000000000000000000008152336004820152905173ffffffffffffffffffffffffffffffffffffffff7f0000000000000000000000000000000000000000000000000000000000000000169163a3818b3b916024808301926020929190829003018186803b158015610ca357600080fd5b505afa158015610cb7573d6000803e3d6000fd5b505050506040513d6020811015610ccd57600080fd5b50515b610d25576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401808060200182810382526021815260200180610db76021913960400191505060405180910390fd5b600080547fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff0016821515179081905560ff1615610d89576040517f71d46a587e8ae446d9442949c41f57019d17b5b4f3610941960517c9c230304790600090a1610db3565b6040517fb821dc27f036017c075c6746b9e8608a15f78f90a8c03acbce13e9438ca76e1b90600090a15b5056fe4e6f742066726f6d2073687574646f776e2061646d696e206f7220766f74696e67a2646970667358221220dd5c87ec837f11be8c5aea567df055d593c10659a2bac55f7a7cc04fb6bb993a64736f6c634300060b0033"
    };
});
define("@scom/scom-swap/contracts/oswap-openswap-contract/contracts/commons/OSWAP_FactoryBase.ts", ["require", "exports", "@ijstech/eth-contract", "@scom/scom-swap/contracts/oswap-openswap-contract/contracts/commons/OSWAP_FactoryBase.json.ts"], function (require, exports, eth_contract_8, OSWAP_FactoryBase_json_1) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.OSWAP_FactoryBase = void 0;
    class OSWAP_FactoryBase extends eth_contract_8.Contract {
        constructor(wallet, address) {
            super(wallet, address, OSWAP_FactoryBase_json_1.default.abi, OSWAP_FactoryBase_json_1.default.bytecode);
            this.assign();
        }
        deploy(params, options) {
            return this.__deploy([params.governance, params.pairCreator], options);
        }
        parsePairCreatedEvent(receipt) {
            return this.parseEvents(receipt, "PairCreated").map(e => this.decodePairCreatedEvent(e));
        }
        decodePairCreatedEvent(event) {
            let result = event.data;
            return {
                token0: result.token0,
                token1: result.token1,
                pair: result.pair,
                newSize: new eth_contract_8.BigNumber(result.newSize),
                _event: event
            };
        }
        parsePairRestartedEvent(receipt) {
            return this.parseEvents(receipt, "PairRestarted").map(e => this.decodePairRestartedEvent(e));
        }
        decodePairRestartedEvent(event) {
            let result = event.data;
            return {
                pair: result.pair,
                _event: event
            };
        }
        parsePairShutdownedEvent(receipt) {
            return this.parseEvents(receipt, "PairShutdowned").map(e => this.decodePairShutdownedEvent(e));
        }
        decodePairShutdownedEvent(event) {
            let result = event.data;
            return {
                pair: result.pair,
                _event: event
            };
        }
        parseRestartedEvent(receipt) {
            return this.parseEvents(receipt, "Restarted").map(e => this.decodeRestartedEvent(e));
        }
        decodeRestartedEvent(event) {
            let result = event.data;
            return {
                _event: event
            };
        }
        parseShutdownedEvent(receipt) {
            return this.parseEvents(receipt, "Shutdowned").map(e => this.decodeShutdownedEvent(e));
        }
        decodeShutdownedEvent(event) {
            let result = event.data;
            return {
                _event: event
            };
        }
        assign() {
            let allPairs_call = async (param1, options) => {
                let result = await this.call('allPairs', [this.wallet.utils.toString(param1)], options);
                return result;
            };
            this.allPairs = allPairs_call;
            let allPairsLength_call = async (options) => {
                let result = await this.call('allPairsLength', [], options);
                return new eth_contract_8.BigNumber(result);
            };
            this.allPairsLength = allPairsLength_call;
            let getPairParams = (params) => [params.param1, params.param2];
            let getPair_call = async (params, options) => {
                let result = await this.call('getPair', getPairParams(params), options);
                return result;
            };
            this.getPair = getPair_call;
            let governance_call = async (options) => {
                let result = await this.call('governance', [], options);
                return result;
            };
            this.governance = governance_call;
            let isLive_call = async (options) => {
                let result = await this.call('isLive', [], options);
                return result;
            };
            this.isLive = isLive_call;
            let pairCreator_call = async (options) => {
                let result = await this.call('pairCreator', [], options);
                return result;
            };
            this.pairCreator = pairCreator_call;
            let createPairParams = (params) => [params.tokenA, params.tokenB];
            let createPair_send = async (params, options) => {
                let result = await this.send('createPair', createPairParams(params), options);
                return result;
            };
            let createPair_call = async (params, options) => {
                let result = await this.call('createPair', createPairParams(params), options);
                return result;
            };
            let createPair_txData = async (params, options) => {
                let result = await this.txData('createPair', createPairParams(params), options);
                return result;
            };
            this.createPair = Object.assign(createPair_send, {
                call: createPair_call,
                txData: createPair_txData
            });
            let setLive_send = async (isLive, options) => {
                let result = await this.send('setLive', [isLive], options);
                return result;
            };
            let setLive_call = async (isLive, options) => {
                let result = await this.call('setLive', [isLive], options);
                return;
            };
            let setLive_txData = async (isLive, options) => {
                let result = await this.txData('setLive', [isLive], options);
                return result;
            };
            this.setLive = Object.assign(setLive_send, {
                call: setLive_call,
                txData: setLive_txData
            });
            let setLiveForPairParams = (params) => [params.pair, params.live];
            let setLiveForPair_send = async (params, options) => {
                let result = await this.send('setLiveForPair', setLiveForPairParams(params), options);
                return result;
            };
            let setLiveForPair_call = async (params, options) => {
                let result = await this.call('setLiveForPair', setLiveForPairParams(params), options);
                return;
            };
            let setLiveForPair_txData = async (params, options) => {
                let result = await this.txData('setLiveForPair', setLiveForPairParams(params), options);
                return result;
            };
            this.setLiveForPair = Object.assign(setLiveForPair_send, {
                call: setLiveForPair_call,
                txData: setLiveForPair_txData
            });
        }
    }
    OSWAP_FactoryBase._abi = OSWAP_FactoryBase_json_1.default.abi;
    exports.OSWAP_FactoryBase = OSWAP_FactoryBase;
});
define("@scom/scom-swap/contracts/oswap-openswap-contract/contracts/commons/OSWAP_PausableFactory.json.ts", ["require", "exports"], function (require, exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    ///<amd-module name='@scom/scom-swap/contracts/oswap-openswap-contract/contracts/commons/OSWAP_PausableFactory.json.ts'/> 
    exports.default = {
        "abi": [
            { "inputs": [{ "internalType": "address", "name": "_governance", "type": "address" }], "stateMutability": "nonpayable", "type": "constructor" },
            { "anonymous": false, "inputs": [{ "indexed": true, "internalType": "address", "name": "pair", "type": "address" }], "name": "PairRestarted", "type": "event" },
            { "anonymous": false, "inputs": [{ "indexed": true, "internalType": "address", "name": "pair", "type": "address" }], "name": "PairShutdowned", "type": "event" },
            { "anonymous": false, "inputs": [], "name": "Restarted", "type": "event" },
            { "anonymous": false, "inputs": [], "name": "Shutdowned", "type": "event" },
            { "inputs": [], "name": "governance", "outputs": [{ "internalType": "address", "name": "", "type": "address" }], "stateMutability": "view", "type": "function" },
            { "inputs": [], "name": "isLive", "outputs": [{ "internalType": "bool", "name": "", "type": "bool" }], "stateMutability": "view", "type": "function" },
            { "inputs": [{ "internalType": "bool", "name": "_isLive", "type": "bool" }], "name": "setLive", "outputs": [], "stateMutability": "nonpayable", "type": "function" },
            { "inputs": [{ "internalType": "address", "name": "pair", "type": "address" }, { "internalType": "bool", "name": "live", "type": "bool" }], "name": "setLiveForPair", "outputs": [], "stateMutability": "nonpayable", "type": "function" }
        ],
        "bytecode": "60a060405234801561001057600080fd5b506040516107553803806107558339818101604052602081101561003357600080fd5b50516001600160601b031960609190911b166080526000805460ff1916600117905560805160601c6106d06100856000398060fc5280610137528061022a528061042d528061052052506106d06000f3fe608060405234801561001057600080fd5b506004361061004c5760003560e01c80635aa6e675146100515780636883618a14610082578063b8f7a665146100bf578063f5ee3348146100db575b600080fd5b6100596100fa565b6040805173ffffffffffffffffffffffffffffffffffffffff9092168252519081900360200190f35b6100bd6004803603604081101561009857600080fd5b5073ffffffffffffffffffffffffffffffffffffffff8135169060200135151561011e565b005b6100c761040b565b604080519115158252519081900360200190f35b6100bd600480360360208110156100f157600080fd5b50351515610414565b7f000000000000000000000000000000000000000000000000000000000000000081565b3373ffffffffffffffffffffffffffffffffffffffff167f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff1663f851a4406040518163ffffffff1660e01b815260040160206040518083038186803b15801561019b57600080fd5b505afa1580156101af573d6000803e3d6000fd5b505050506040513d60208110156101c557600080fd5b505173ffffffffffffffffffffffffffffffffffffffff16148061029d5750604080517fa3818b3b000000000000000000000000000000000000000000000000000000008152336004820152905173ffffffffffffffffffffffffffffffffffffffff7f0000000000000000000000000000000000000000000000000000000000000000169163a3818b3b916024808301926020929190829003018186803b15801561027057600080fd5b505afa158015610284573d6000803e3d6000fd5b505050506040513d602081101561029a57600080fd5b50515b6102f2576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040180806020018281038252602181526020018061067a6021913960400191505060405180910390fd5b604080517ff5ee33480000000000000000000000000000000000000000000000000000000081528215156004820152905173ffffffffffffffffffffffffffffffffffffffff84169163f5ee334891602480830192600092919082900301818387803b15801561036157600080fd5b505af1158015610375573d6000803e3d6000fd5b5050505080156103c55760405173ffffffffffffffffffffffffffffffffffffffff8316907fc96ebf6dcdf5c5e56ad8961009b9d49aa6f2d53d5ffe374048f1d603e3b2908a90600090a2610407565b60405173ffffffffffffffffffffffffffffffffffffffff8316907f7dc5983a5f99179c76b5bbff56fcf9e8373f1a7078dcef4537a5176b333c2bfe90600090a25b5050565b60005460ff1681565b3373ffffffffffffffffffffffffffffffffffffffff167f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff1663f851a4406040518163ffffffff1660e01b815260040160206040518083038186803b15801561049157600080fd5b505afa1580156104a5573d6000803e3d6000fd5b505050506040513d60208110156104bb57600080fd5b505173ffffffffffffffffffffffffffffffffffffffff1614806105935750604080517fa3818b3b000000000000000000000000000000000000000000000000000000008152336004820152905173ffffffffffffffffffffffffffffffffffffffff7f0000000000000000000000000000000000000000000000000000000000000000169163a3818b3b916024808301926020929190829003018186803b15801561056657600080fd5b505afa15801561057a573d6000803e3d6000fd5b505050506040513d602081101561059057600080fd5b50515b6105e8576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040180806020018281038252602181526020018061067a6021913960400191505060405180910390fd5b600080547fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff0016821515179081905560ff161561064c576040517f71d46a587e8ae446d9442949c41f57019d17b5b4f3610941960517c9c230304790600090a1610676565b6040517fb821dc27f036017c075c6746b9e8608a15f78f90a8c03acbce13e9438ca76e1b90600090a15b5056fe4e6f742066726f6d2073687574646f776e2061646d696e206f7220766f74696e67a2646970667358221220da446436743c2f019e6eaf7d28351771aa9624e79e82ec225ac894b979ea658e64736f6c634300060b0033"
    };
});
define("@scom/scom-swap/contracts/oswap-openswap-contract/contracts/commons/OSWAP_PausableFactory.ts", ["require", "exports", "@ijstech/eth-contract", "@scom/scom-swap/contracts/oswap-openswap-contract/contracts/commons/OSWAP_PausableFactory.json.ts"], function (require, exports, eth_contract_9, OSWAP_PausableFactory_json_1) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.OSWAP_PausableFactory = void 0;
    class OSWAP_PausableFactory extends eth_contract_9.Contract {
        constructor(wallet, address) {
            super(wallet, address, OSWAP_PausableFactory_json_1.default.abi, OSWAP_PausableFactory_json_1.default.bytecode);
            this.assign();
        }
        deploy(governance, options) {
            return this.__deploy([governance], options);
        }
        parsePairRestartedEvent(receipt) {
            return this.parseEvents(receipt, "PairRestarted").map(e => this.decodePairRestartedEvent(e));
        }
        decodePairRestartedEvent(event) {
            let result = event.data;
            return {
                pair: result.pair,
                _event: event
            };
        }
        parsePairShutdownedEvent(receipt) {
            return this.parseEvents(receipt, "PairShutdowned").map(e => this.decodePairShutdownedEvent(e));
        }
        decodePairShutdownedEvent(event) {
            let result = event.data;
            return {
                pair: result.pair,
                _event: event
            };
        }
        parseRestartedEvent(receipt) {
            return this.parseEvents(receipt, "Restarted").map(e => this.decodeRestartedEvent(e));
        }
        decodeRestartedEvent(event) {
            let result = event.data;
            return {
                _event: event
            };
        }
        parseShutdownedEvent(receipt) {
            return this.parseEvents(receipt, "Shutdowned").map(e => this.decodeShutdownedEvent(e));
        }
        decodeShutdownedEvent(event) {
            let result = event.data;
            return {
                _event: event
            };
        }
        assign() {
            let governance_call = async (options) => {
                let result = await this.call('governance', [], options);
                return result;
            };
            this.governance = governance_call;
            let isLive_call = async (options) => {
                let result = await this.call('isLive', [], options);
                return result;
            };
            this.isLive = isLive_call;
            let setLive_send = async (isLive, options) => {
                let result = await this.send('setLive', [isLive], options);
                return result;
            };
            let setLive_call = async (isLive, options) => {
                let result = await this.call('setLive', [isLive], options);
                return;
            };
            let setLive_txData = async (isLive, options) => {
                let result = await this.txData('setLive', [isLive], options);
                return result;
            };
            this.setLive = Object.assign(setLive_send, {
                call: setLive_call,
                txData: setLive_txData
            });
            let setLiveForPairParams = (params) => [params.pair, params.live];
            let setLiveForPair_send = async (params, options) => {
                let result = await this.send('setLiveForPair', setLiveForPairParams(params), options);
                return result;
            };
            let setLiveForPair_call = async (params, options) => {
                let result = await this.call('setLiveForPair', setLiveForPairParams(params), options);
                return;
            };
            let setLiveForPair_txData = async (params, options) => {
                let result = await this.txData('setLiveForPair', setLiveForPairParams(params), options);
                return result;
            };
            this.setLiveForPair = Object.assign(setLiveForPair_send, {
                call: setLiveForPair_call,
                txData: setLiveForPair_txData
            });
        }
    }
    OSWAP_PausableFactory._abi = OSWAP_PausableFactory_json_1.default.abi;
    exports.OSWAP_PausableFactory = OSWAP_PausableFactory;
});
define("@scom/scom-swap/contracts/oswap-openswap-contract/contracts/commons/OSWAP_PausablePair.json.ts", ["require", "exports"], function (require, exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    ///<amd-module name='@scom/scom-swap/contracts/oswap-openswap-contract/contracts/commons/OSWAP_PausablePair.json.ts'/> 
    exports.default = {
        "abi": [
            { "inputs": [], "stateMutability": "nonpayable", "type": "constructor" },
            { "inputs": [], "name": "factory", "outputs": [{ "internalType": "address", "name": "", "type": "address" }], "stateMutability": "view", "type": "function" },
            { "inputs": [], "name": "isLive", "outputs": [{ "internalType": "bool", "name": "", "type": "bool" }], "stateMutability": "view", "type": "function" },
            { "inputs": [{ "internalType": "bool", "name": "_isLive", "type": "bool" }], "name": "setLive", "outputs": [], "stateMutability": "nonpayable", "type": "function" }
        ],
        "bytecode": "60a060405234801561001057600080fd5b503360601b6080526000805460ff1916600117905560805160601c6101ec6100456000398060bf528060f952506101ec6000f3fe608060405234801561001057600080fd5b50600436106100415760003560e01c8063b8f7a66514610046578063c45a015514610062578063f5ee334814610093575b600080fd5b61004e6100b4565b604080519115158252519081900360200190f35b61006a6100bd565b6040805173ffffffffffffffffffffffffffffffffffffffff9092168252519081900360200190f35b6100b2600480360360208110156100a957600080fd5b503515156100e1565b005b60005460ff1681565b7f000000000000000000000000000000000000000000000000000000000000000081565b3373ffffffffffffffffffffffffffffffffffffffff7f0000000000000000000000000000000000000000000000000000000000000000161461018557604080517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152600960248201527f464f5242494444454e0000000000000000000000000000000000000000000000604482015290519081900360640190fd5b600080547fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff001691151591909117905556fea2646970667358221220e05fb854aed1563d2723be99c1c39328951ea7b27264067c4da6e04ca9069f1a64736f6c634300060b0033"
    };
});
define("@scom/scom-swap/contracts/oswap-openswap-contract/contracts/commons/OSWAP_PausablePair.ts", ["require", "exports", "@ijstech/eth-contract", "@scom/scom-swap/contracts/oswap-openswap-contract/contracts/commons/OSWAP_PausablePair.json.ts"], function (require, exports, eth_contract_10, OSWAP_PausablePair_json_1) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.OSWAP_PausablePair = void 0;
    class OSWAP_PausablePair extends eth_contract_10.Contract {
        constructor(wallet, address) {
            super(wallet, address, OSWAP_PausablePair_json_1.default.abi, OSWAP_PausablePair_json_1.default.bytecode);
            this.assign();
        }
        deploy(options) {
            return this.__deploy([], options);
        }
        assign() {
            let factory_call = async (options) => {
                let result = await this.call('factory', [], options);
                return result;
            };
            this.factory = factory_call;
            let isLive_call = async (options) => {
                let result = await this.call('isLive', [], options);
                return result;
            };
            this.isLive = isLive_call;
            let setLive_send = async (isLive, options) => {
                let result = await this.send('setLive', [isLive], options);
                return result;
            };
            let setLive_call = async (isLive, options) => {
                let result = await this.call('setLive', [isLive], options);
                return;
            };
            let setLive_txData = async (isLive, options) => {
                let result = await this.txData('setLive', [isLive], options);
                return result;
            };
            this.setLive = Object.assign(setLive_send, {
                call: setLive_call,
                txData: setLive_txData
            });
        }
    }
    OSWAP_PausablePair._abi = OSWAP_PausablePair_json_1.default.abi;
    exports.OSWAP_PausablePair = OSWAP_PausablePair;
});
define("@scom/scom-swap/contracts/oswap-openswap-contract/contracts/gov/OAXDEX_Administrator.json.ts", ["require", "exports"], function (require, exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    ///<amd-module name='@scom/scom-swap/contracts/oswap-openswap-contract/contracts/gov/OAXDEX_Administrator.json.ts'/> 
    exports.default = {
        "abi": [
            { "inputs": [{ "internalType": "address", "name": "_governance", "type": "address" }], "stateMutability": "nonpayable", "type": "constructor" },
            { "anonymous": false, "inputs": [{ "indexed": false, "internalType": "address", "name": "admin", "type": "address" }], "name": "AddAdmin", "type": "event" },
            { "anonymous": false, "inputs": [{ "indexed": false, "internalType": "address", "name": "admin", "type": "address" }], "name": "RemoveAdmin", "type": "event" },
            { "anonymous": false, "inputs": [{ "indexed": false, "internalType": "uint256", "name": "maxAdmin", "type": "uint256" }], "name": "SetMaxAdmin", "type": "event" },
            { "anonymous": false, "inputs": [{ "indexed": true, "internalType": "address", "name": "admin", "type": "address" }, { "indexed": true, "internalType": "address", "name": "factory", "type": "address" }, { "indexed": false, "internalType": "bool", "name": "YorN", "type": "bool" }], "name": "VotedFactoryRestart", "type": "event" },
            { "anonymous": false, "inputs": [{ "indexed": true, "internalType": "address", "name": "admin", "type": "address" }, { "indexed": true, "internalType": "address", "name": "factory", "type": "address" }, { "indexed": false, "internalType": "bool", "name": "YorN", "type": "bool" }], "name": "VotedFactoryShutdown", "type": "event" },
            { "anonymous": false, "inputs": [{ "indexed": true, "internalType": "address", "name": "admin", "type": "address" }, { "indexed": true, "internalType": "address", "name": "pair", "type": "address" }, { "indexed": false, "internalType": "bool", "name": "YorN", "type": "bool" }], "name": "VotedPairRestart", "type": "event" },
            { "anonymous": false, "inputs": [{ "indexed": true, "internalType": "address", "name": "admin", "type": "address" }, { "indexed": true, "internalType": "address", "name": "pair", "type": "address" }, { "indexed": false, "internalType": "bool", "name": "YorN", "type": "bool" }], "name": "VotedPairShutdown", "type": "event" },
            { "anonymous": false, "inputs": [{ "indexed": true, "internalType": "address", "name": "admin", "type": "address" }, { "indexed": true, "internalType": "address", "name": "votingContract", "type": "address" }, { "indexed": false, "internalType": "bool", "name": "YorN", "type": "bool" }], "name": "VotedVeto", "type": "event" },
            { "inputs": [{ "internalType": "address", "name": "_admin", "type": "address" }], "name": "addAdmin", "outputs": [], "stateMutability": "nonpayable", "type": "function" },
            { "inputs": [{ "internalType": "uint256", "name": "", "type": "uint256" }], "name": "admins", "outputs": [{ "internalType": "address", "name": "", "type": "address" }], "stateMutability": "view", "type": "function" },
            { "inputs": [{ "internalType": "address", "name": "", "type": "address" }], "name": "adminsIdx", "outputs": [{ "internalType": "uint256", "name": "", "type": "uint256" }], "stateMutability": "view", "type": "function" },
            { "inputs": [], "name": "allAdmins", "outputs": [{ "internalType": "address[]", "name": "", "type": "address[]" }], "stateMutability": "view", "type": "function" },
            { "inputs": [{ "internalType": "address", "name": "factory", "type": "address" }], "name": "executeFactoryRestart", "outputs": [], "stateMutability": "nonpayable", "type": "function" },
            { "inputs": [{ "internalType": "address", "name": "factory", "type": "address" }], "name": "executeFactoryShutdown", "outputs": [], "stateMutability": "nonpayable", "type": "function" },
            { "inputs": [{ "internalType": "address", "name": "factory", "type": "address" }, { "internalType": "address", "name": "pair", "type": "address" }], "name": "executePairRestart", "outputs": [], "stateMutability": "nonpayable", "type": "function" },
            { "inputs": [{ "internalType": "address", "name": "factory", "type": "address" }, { "internalType": "address", "name": "pair", "type": "address" }], "name": "executePairShutdown", "outputs": [], "stateMutability": "nonpayable", "type": "function" },
            { "inputs": [{ "internalType": "address", "name": "votingContract", "type": "address" }], "name": "executeVetoVoting", "outputs": [], "stateMutability": "nonpayable", "type": "function" },
            { "inputs": [{ "internalType": "address", "name": "factory", "type": "address" }, { "internalType": "bool", "name": "YorN", "type": "bool" }], "name": "factoryRestart", "outputs": [], "stateMutability": "nonpayable", "type": "function" },
            { "inputs": [{ "internalType": "address", "name": "", "type": "address" }, { "internalType": "address", "name": "", "type": "address" }], "name": "factoryRestartVote", "outputs": [{ "internalType": "bool", "name": "", "type": "bool" }], "stateMutability": "view", "type": "function" },
            { "inputs": [{ "internalType": "address", "name": "factory", "type": "address" }, { "internalType": "bool", "name": "YorN", "type": "bool" }], "name": "factoryShutdown", "outputs": [], "stateMutability": "nonpayable", "type": "function" },
            { "inputs": [{ "internalType": "address", "name": "", "type": "address" }, { "internalType": "address", "name": "", "type": "address" }], "name": "factoryShutdownVote", "outputs": [{ "internalType": "bool", "name": "", "type": "bool" }], "stateMutability": "view", "type": "function" },
            { "inputs": [{ "internalType": "address", "name": "factory", "type": "address" }], "name": "getFactoryRestartVote", "outputs": [{ "internalType": "bool[]", "name": "votes", "type": "bool[]" }], "stateMutability": "view", "type": "function" },
            { "inputs": [{ "internalType": "address", "name": "factory", "type": "address" }], "name": "getFactoryShutdownVote", "outputs": [{ "internalType": "bool[]", "name": "votes", "type": "bool[]" }], "stateMutability": "view", "type": "function" },
            { "inputs": [{ "internalType": "address", "name": "pair", "type": "address" }], "name": "getPairRestartVote", "outputs": [{ "internalType": "bool[]", "name": "votes", "type": "bool[]" }], "stateMutability": "view", "type": "function" },
            { "inputs": [{ "internalType": "address", "name": "pair", "type": "address" }], "name": "getPairShutdownVote", "outputs": [{ "internalType": "bool[]", "name": "votes", "type": "bool[]" }], "stateMutability": "view", "type": "function" },
            { "inputs": [{ "internalType": "address", "name": "votingContract", "type": "address" }], "name": "getVetoVotingVote", "outputs": [{ "internalType": "bool[]", "name": "votes", "type": "bool[]" }], "stateMutability": "view", "type": "function" },
            { "inputs": [], "name": "governance", "outputs": [{ "internalType": "address", "name": "", "type": "address" }], "stateMutability": "view", "type": "function" },
            { "inputs": [], "name": "maxAdmin", "outputs": [{ "internalType": "uint256", "name": "", "type": "uint256" }], "stateMutability": "view", "type": "function" },
            { "inputs": [{ "internalType": "address", "name": "pair", "type": "address" }, { "internalType": "bool", "name": "YorN", "type": "bool" }], "name": "pairRestart", "outputs": [], "stateMutability": "nonpayable", "type": "function" },
            { "inputs": [{ "internalType": "address", "name": "", "type": "address" }, { "internalType": "address", "name": "", "type": "address" }], "name": "pairRestartVote", "outputs": [{ "internalType": "bool", "name": "", "type": "bool" }], "stateMutability": "view", "type": "function" },
            { "inputs": [{ "internalType": "address", "name": "pair", "type": "address" }, { "internalType": "bool", "name": "YorN", "type": "bool" }], "name": "pairShutdown", "outputs": [], "stateMutability": "nonpayable", "type": "function" },
            { "inputs": [{ "internalType": "address", "name": "", "type": "address" }, { "internalType": "address", "name": "", "type": "address" }], "name": "pairShutdownVote", "outputs": [{ "internalType": "bool", "name": "", "type": "bool" }], "stateMutability": "view", "type": "function" },
            { "inputs": [{ "internalType": "address", "name": "_admin", "type": "address" }], "name": "removeAdmin", "outputs": [], "stateMutability": "nonpayable", "type": "function" },
            { "inputs": [{ "internalType": "uint256", "name": "_maxAdmin", "type": "uint256" }], "name": "setMaxAdmin", "outputs": [], "stateMutability": "nonpayable", "type": "function" },
            { "inputs": [{ "internalType": "address", "name": "votingContract", "type": "address" }, { "internalType": "bool", "name": "YorN", "type": "bool" }], "name": "vetoVoting", "outputs": [], "stateMutability": "nonpayable", "type": "function" },
            { "inputs": [{ "internalType": "address", "name": "", "type": "address" }, { "internalType": "address", "name": "", "type": "address" }], "name": "vetoVotingVote", "outputs": [{ "internalType": "bool", "name": "", "type": "bool" }], "stateMutability": "view", "type": "function" }
        ],
        "bytecode": "60a060405234801561001057600080fd5b5060405161238b38038061238b8339818101604052602081101561003357600080fd5b5051606081901b6001600160601b0319166080526001600160a01b031661231061007b600039806107f75280610a24528061100a528061147a5280611d7d52506123106000f3fe608060405234801561001057600080fd5b50600436106101c45760003560e01c80635d801cde116100f95780639c32abbb11610097578063e03d9a8611610071578063e03d9a8614610700578063e7be483714610733578063e9204d271461076e578063f1f63806146107a9576101c4565b80639c32abbb1461065f578063a1e363ac14610692578063c88e3366146106c5576101c4565b80636c84f565116100d35780636c84f5651461057b57806370480275146105b65780638cece344146105e95780639bc0cc3114610624576101c4565b80635d801cde146104ca578063656b7a901461050557806368ddb11714610540576101c4565b806327e93d3a1161016657806341ab10161161014057806341ab10161461040f57806348d64c55146104545780635aa6e675146104875780635b7ddc911461048f576101c4565b806327e93d3a1461039957806337d493de146103d457806340f32be614610407576101c4565b806314bfd6d0116101a257806314bfd6d01461029e57806314ffa2f6146102e45780631785f53c146103175780632097ca0f1461034a576101c4565b806303cb43e5146101c95780630f436c50146101e85780631378f9af1461026b575b600080fd5b6101e6600480360360208110156101df57600080fd5b50356107b1565b005b61021b600480360360208110156101fe57600080fd5b503573ffffffffffffffffffffffffffffffffffffffff1661090f565b60408051602080825283518183015283519192839290830191858101910280838360005b8381101561025757818101518382015260200161023f565b505050509050019250505060405180910390f35b61021b6004803603602081101561028157600080fd5b503573ffffffffffffffffffffffffffffffffffffffff16610948565b6102bb600480360360208110156102b457600080fd5b5035610979565b6040805173ffffffffffffffffffffffffffffffffffffffff9092168252519081900360200190f35b61021b600480360360208110156102fa57600080fd5b503573ffffffffffffffffffffffffffffffffffffffff166109ad565b6101e66004803603602081101561032d57600080fd5b503573ffffffffffffffffffffffffffffffffffffffff166109de565b6103856004803603604081101561036057600080fd5b5073ffffffffffffffffffffffffffffffffffffffff81358116916020013516610ddc565b604080519115158252519081900360200190f35b610385600480360360408110156103af57600080fd5b5073ffffffffffffffffffffffffffffffffffffffff81358116916020013516610dfc565b61021b600480360360208110156103ea57600080fd5b503573ffffffffffffffffffffffffffffffffffffffff16610e1c565b61021b610e4d565b6104426004803603602081101561042557600080fd5b503573ffffffffffffffffffffffffffffffffffffffff16610ebc565b60408051918252519081900360200190f35b6101e66004803603602081101561046a57600080fd5b503573ffffffffffffffffffffffffffffffffffffffff16610ece565b6102bb611008565b6101e6600480360360408110156104a557600080fd5b5073ffffffffffffffffffffffffffffffffffffffff8135811691602001351661102c565b610385600480360360408110156104e057600080fd5b5073ffffffffffffffffffffffffffffffffffffffff8135811691602001351661116e565b6101e66004803603604081101561051b57600080fd5b5073ffffffffffffffffffffffffffffffffffffffff8135169060200135151561118e565b6101e66004803603604081101561055657600080fd5b5073ffffffffffffffffffffffffffffffffffffffff813516906020013515156112d1565b6103856004803603604081101561059157600080fd5b5073ffffffffffffffffffffffffffffffffffffffff81358116916020013516611414565b6101e6600480360360208110156105cc57600080fd5b503573ffffffffffffffffffffffffffffffffffffffff16611434565b6101e6600480360360408110156105ff57600080fd5b5073ffffffffffffffffffffffffffffffffffffffff813581169160200135166117cd565b6101e66004803603604081101561063a57600080fd5b5073ffffffffffffffffffffffffffffffffffffffff813516906020013515156118f6565b6101e66004803603602081101561067557600080fd5b503573ffffffffffffffffffffffffffffffffffffffff16611a39565b61021b600480360360208110156106a857600080fd5b503573ffffffffffffffffffffffffffffffffffffffff16611b56565b6101e6600480360360408110156106db57600080fd5b5073ffffffffffffffffffffffffffffffffffffffff81351690602001351515611b87565b6101e66004803603602081101561071657600080fd5b503573ffffffffffffffffffffffffffffffffffffffff16611cca565b6103856004803603604081101561074957600080fd5b5073ffffffffffffffffffffffffffffffffffffffff81358116916020013516611e1a565b6101e66004803603604081101561078457600080fd5b5073ffffffffffffffffffffffffffffffffffffffff81351690602001351515611e3a565b610442611f7d565b604080517fa3818b3b000000000000000000000000000000000000000000000000000000008152336004820152905173ffffffffffffffffffffffffffffffffffffffff7f0000000000000000000000000000000000000000000000000000000000000000169163a3818b3b916024808301926020929190829003018186803b15801561083d57600080fd5b505afa158015610851573d6000803e3d6000fd5b505050506040513d602081101561086757600080fd5b50516108d457604080517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601760248201527f4f41584445583a204e6f742066726f6d20766f74696e67000000000000000000604482015290519081900360640190fd5b60008190556040805182815290517fbfebbee9defc5b0daedb13be2253f4b914aed3dd852d6f6df95bc3407a70f56b9181900360200190a150565b73ffffffffffffffffffffffffffffffffffffffff8116600090815260076020526040902060609061094090611f83565b90505b919050565b73ffffffffffffffffffffffffffffffffffffffff8116600090815260066020526040902060609061094090611f83565b6001818154811061098657fe5b60009182526020909120015473ffffffffffffffffffffffffffffffffffffffff16905081565b73ffffffffffffffffffffffffffffffffffffffff8116600090815260056020526040902060609061094090611f83565b604080517fa3818b3b000000000000000000000000000000000000000000000000000000008152336004820152905173ffffffffffffffffffffffffffffffffffffffff7f0000000000000000000000000000000000000000000000000000000000000000169163a3818b3b916024808301926020929190829003018186803b158015610a6a57600080fd5b505afa158015610a7e573d6000803e3d6000fd5b505050506040513d6020811015610a9457600080fd5b5051610b0157604080517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601760248201527f4f41584445583a204e6f742066726f6d20766f74696e67000000000000000000604482015290519081900360640190fd5b73ffffffffffffffffffffffffffffffffffffffff811660009081526002602052604090205480151580610b7957508173ffffffffffffffffffffffffffffffffffffffff166001600081548110610b5557fe5b60009182526020909120015473ffffffffffffffffffffffffffffffffffffffff16145b610be457604080517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820181905260248201527f41646d696e3a2053687574646f776e2061646d696e206e6f7420657869737473604482015290519081900360640190fd5b6001547fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff01811015610d0057600180547fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff8101908110610c4057fe5b6000918252602090912001546001805473ffffffffffffffffffffffffffffffffffffffff9092169183908110610c7357fe5b9060005260206000200160006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff160217905550806002600060018481548110610ccd57fe5b600091825260208083209091015473ffffffffffffffffffffffffffffffffffffffff1683528201929092526040019020555b73ffffffffffffffffffffffffffffffffffffffff82166000908152600260205260408120556001805480610d3157fe5b600082815260209081902082017fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff90810180547fffffffffffffffffffffffff00000000000000000000000000000000000000001690559091019091556040805173ffffffffffffffffffffffffffffffffffffffff8516815290517f753f40ca3312b2408759a67875b367955e7baa221daf08aa3d643d96202ac12b929181900390910190a15050565b600560209081526000928352604080842090915290825290205460ff1681565b600460209081526000928352604080842090915290825290205460ff1681565b73ffffffffffffffffffffffffffffffffffffffff8116600090815260036020526040902060609061094090611f83565b60606001805480602002602001604051908101604052809291908181526020018280548015610eb257602002820191906000526020600020905b815473ffffffffffffffffffffffffffffffffffffffff168152600190910190602001808311610e87575b5050505050905090565b60026020526000908152604090205481565b73ffffffffffffffffffffffffffffffffffffffff81166000908152600560205260409020610efc9061204d565b610f51576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040180806020018281038252602c815260200180612286602c913960400191505060405180910390fd5b73ffffffffffffffffffffffffffffffffffffffff81166000908152600560205260409020610f7f906120dd565b604080517ff5ee334800000000000000000000000000000000000000000000000000000000815260016004820152905173ffffffffffffffffffffffffffffffffffffffff83169163f5ee334891602480830192600092919082900301818387803b158015610fed57600080fd5b505af1158015611001573d6000803e3d6000fd5b5050505050565b7f000000000000000000000000000000000000000000000000000000000000000081565b73ffffffffffffffffffffffffffffffffffffffff8116600090815260066020526040902061105a9061204d565b6110af576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040180806020018281038252602a81526020018061225c602a913960400191505060405180910390fd5b73ffffffffffffffffffffffffffffffffffffffff811660009081526006602052604090206110dd906120dd565b604080517f6883618a00000000000000000000000000000000000000000000000000000000815273ffffffffffffffffffffffffffffffffffffffff8381166004830152600060248301819052925190851692636883618a926044808201939182900301818387803b15801561115257600080fd5b505af1158015611166573d6000803e3d6000fd5b505050505050565b600360209081526000928352604080842090915290825290205460ff1681565b336000818152600260205260409020546001805490919081106111ad57fe5b60009182526020909120015473ffffffffffffffffffffffffffffffffffffffff161461123b57604080517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601b60248201527f41646d696e3a204e6f7420612073687574646f776e2061646d696e0000000000604482015290519081900360640190fd5b73ffffffffffffffffffffffffffffffffffffffff82166000818152600560209081526040808320338085529083529281902080547fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff0016861515908117909155815190815290517fc740c963ad3062876764b3de1e79ec958ecc91bc80c843ab880b445b6f08aaf5929181900390910190a35050565b336000818152600260205260409020546001805490919081106112f057fe5b60009182526020909120015473ffffffffffffffffffffffffffffffffffffffff161461137e57604080517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601b60248201527f41646d696e3a204e6f7420612073687574646f776e2061646d696e0000000000604482015290519081900360640190fd5b73ffffffffffffffffffffffffffffffffffffffff82166000818152600460209081526040808320338085529083529281902080547fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff0016861515908117909155815190815290517fd2779ae0737775372a46dca2b6eccc807e4a580e65b2991fb71802ccf652f477929181900390910190a35050565b600660209081526000928352604080842090915290825290205460ff1681565b604080517fa3818b3b000000000000000000000000000000000000000000000000000000008152336004820152905173ffffffffffffffffffffffffffffffffffffffff7f0000000000000000000000000000000000000000000000000000000000000000169163a3818b3b916024808301926020929190829003018186803b1580156114c057600080fd5b505afa1580156114d4573d6000803e3d6000fd5b505050506040513d60208110156114ea57600080fd5b505161155757604080517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601760248201527f4f41584445583a204e6f742066726f6d20766f74696e67000000000000000000604482015290519081900360640190fd5b6000546001805461156d9163ffffffff61216916565b11156115c4576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004018080602001828103825260228152602001806121e56022913960400191505060405180910390fd5b73ffffffffffffffffffffffffffffffffffffffff811661164657604080517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601e60248201527f4f41584445583a20494e56414c49445f53485554444f574e5f41444d494e0000604482015290519081900360640190fd5b60015415806116aa575073ffffffffffffffffffffffffffffffffffffffff811660008181526002602052604090205460018054909190811061168557fe5b60009182526020909120015473ffffffffffffffffffffffffffffffffffffffff1614155b61171557604080517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820181905260248201527f4f41584445583a20616c726561647920612073687574646f776e2061646d696e604482015290519081900360640190fd5b6001805473ffffffffffffffffffffffffffffffffffffffff831660008181526002602090815260408083208590558486018655949091527fb10e2d527612073b26eecdfd717e6a320cf44b4afac2b0732d9fcbe2b7fa0cf690920180547fffffffffffffffffffffffff00000000000000000000000000000000000000001682179055825190815291517fad6de4452a631e641cb59902236607946ce9272b9b981f2f80e8d129cb9084ba9281900390910190a150565b73ffffffffffffffffffffffffffffffffffffffff811660009081526007602052604090206117fb9061204d565b611850576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004018080602001828103825260298152602001806122b26029913960400191505060405180910390fd5b73ffffffffffffffffffffffffffffffffffffffff8116600090815260076020526040902061187e906120dd565b604080517f6883618a00000000000000000000000000000000000000000000000000000000815273ffffffffffffffffffffffffffffffffffffffff838116600483015260016024830152915191841691636883618a9160448082019260009290919082900301818387803b15801561115257600080fd5b3360008181526002602052604090205460018054909190811061191557fe5b60009182526020909120015473ffffffffffffffffffffffffffffffffffffffff16146119a357604080517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601b60248201527f41646d696e3a204e6f7420612073687574646f776e2061646d696e0000000000604482015290519081900360640190fd5b73ffffffffffffffffffffffffffffffffffffffff82166000818152600660209081526040808320338085529083529281902080547fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff0016861515908117909155815190815290517ff0d5f0e6914c3a2c68c9720c557fe7dcd776e534cac2331a83f31c90bfeb7daa929181900390910190a35050565b73ffffffffffffffffffffffffffffffffffffffff81166000908152600460205260409020611a679061204d565b611abc576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040180806020018281038252602d81526020018061222f602d913960400191505060405180910390fd5b73ffffffffffffffffffffffffffffffffffffffff81166000908152600460205260409020611aea906120dd565b604080517ff5ee3348000000000000000000000000000000000000000000000000000000008152600060048201819052915173ffffffffffffffffffffffffffffffffffffffff84169263f5ee3348926024808201939182900301818387803b158015610fed57600080fd5b73ffffffffffffffffffffffffffffffffffffffff8116600090815260046020526040902060609061094090611f83565b33600081815260026020526040902054600180549091908110611ba657fe5b60009182526020909120015473ffffffffffffffffffffffffffffffffffffffff1614611c3457604080517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601b60248201527f41646d696e3a204e6f7420612073687574646f776e2061646d696e0000000000604482015290519081900360640190fd5b73ffffffffffffffffffffffffffffffffffffffff82166000818152600360209081526040808320338085529083529281902080547fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff0016861515908117909155815190815290517f65a2cd14fa9c26913c0e70766d15e6e2d83b8caa96eb968322857ac9e7a865e7929181900390910190a35050565b73ffffffffffffffffffffffffffffffffffffffff81166000908152600360205260409020611cf89061204d565b611d4d576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004018080602001828103825260288152602001806122076028913960400191505060405180910390fd5b73ffffffffffffffffffffffffffffffffffffffff81166000908152600360205260409020611d7b906120dd565b7f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff166326ae21a9826040518263ffffffff1660e01b8152600401808273ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001915050600060405180830381600087803b158015610fed57600080fd5b600760209081526000928352604080842090915290825290205460ff1681565b33600081815260026020526040902054600180549091908110611e5957fe5b60009182526020909120015473ffffffffffffffffffffffffffffffffffffffff1614611ee757604080517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601b60248201527f41646d696e3a204e6f7420612073687574646f776e2061646d696e0000000000604482015290519081900360640190fd5b73ffffffffffffffffffffffffffffffffffffffff82166000818152600760209081526040808320338085529083529281902080547fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff0016861515908117909155815190815290517f4977a037ed21a1311479c0431a1dd57b219c93415c05a88aab887818d4d3888d929181900390910190a35050565b60005481565b6001546060908067ffffffffffffffff81118015611fa057600080fd5b50604051908082528060200260200182016040528015611fca578160200160208202803683370190505b50915060005b818110156120465783600060018381548110611fe857fe5b600091825260208083209091015473ffffffffffffffffffffffffffffffffffffffff168352820192909252604001902054835160ff9091169084908390811061202e57fe5b91151560209283029190910190910152600101611fd0565b5050919050565b6001805460009182919081901c825b828110156120d1578560006001838154811061207457fe5b600091825260208083209091015473ffffffffffffffffffffffffffffffffffffffff16835282019290925260400190205460ff16156120c957600190930192818411156120c9576001945050505050610943565b60010161205c565b50600095945050505050565b60015460005b81811015612164576000836000600184815481106120fd57fe5b60009182526020808320919091015473ffffffffffffffffffffffffffffffffffffffff168352820192909252604001902080547fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff00169115159190911790556001016120e3565b505050565b6000828201838110156121dd57604080517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601b60248201527f536166654d6174683a206164646974696f6e206f766572666c6f770000000000604482015290519081900360640190fd5b939250505056fe4f41584445583a204d61782073687574646f776e2061646d696e207265616368656441646d696e3a20657865637574655665746f566f74696e673a2051756f72756d206e6f74206d657441646d696e3a2065786563757465466163746f727953687574646f776e3a2051756f72756d206e6f74206d657441646d696e3a20657865637574655061697253687574646f776e3a2051756f72756d206e6f74206d657441646d696e3a2065786563757465466163746f7279526573746172743a2051756f72756d206e6f74206d657441646d696e3a206578656375746550616972526573746172743a2051756f72756d206e6f74206d6574a264697066735822122091b40f31142abe20e4e119ad248b5e3294b137ff4dd1c2d6b1abe3b2613dae9064736f6c634300060b0033"
    };
});
define("@scom/scom-swap/contracts/oswap-openswap-contract/contracts/gov/OAXDEX_Administrator.ts", ["require", "exports", "@ijstech/eth-contract", "@scom/scom-swap/contracts/oswap-openswap-contract/contracts/gov/OAXDEX_Administrator.json.ts"], function (require, exports, eth_contract_11, OAXDEX_Administrator_json_1) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.OAXDEX_Administrator = void 0;
    class OAXDEX_Administrator extends eth_contract_11.Contract {
        constructor(wallet, address) {
            super(wallet, address, OAXDEX_Administrator_json_1.default.abi, OAXDEX_Administrator_json_1.default.bytecode);
            this.assign();
        }
        deploy(governance, options) {
            return this.__deploy([governance], options);
        }
        parseAddAdminEvent(receipt) {
            return this.parseEvents(receipt, "AddAdmin").map(e => this.decodeAddAdminEvent(e));
        }
        decodeAddAdminEvent(event) {
            let result = event.data;
            return {
                admin: result.admin,
                _event: event
            };
        }
        parseRemoveAdminEvent(receipt) {
            return this.parseEvents(receipt, "RemoveAdmin").map(e => this.decodeRemoveAdminEvent(e));
        }
        decodeRemoveAdminEvent(event) {
            let result = event.data;
            return {
                admin: result.admin,
                _event: event
            };
        }
        parseSetMaxAdminEvent(receipt) {
            return this.parseEvents(receipt, "SetMaxAdmin").map(e => this.decodeSetMaxAdminEvent(e));
        }
        decodeSetMaxAdminEvent(event) {
            let result = event.data;
            return {
                maxAdmin: new eth_contract_11.BigNumber(result.maxAdmin),
                _event: event
            };
        }
        parseVotedFactoryRestartEvent(receipt) {
            return this.parseEvents(receipt, "VotedFactoryRestart").map(e => this.decodeVotedFactoryRestartEvent(e));
        }
        decodeVotedFactoryRestartEvent(event) {
            let result = event.data;
            return {
                admin: result.admin,
                factory: result.factory,
                YorN: result.YorN,
                _event: event
            };
        }
        parseVotedFactoryShutdownEvent(receipt) {
            return this.parseEvents(receipt, "VotedFactoryShutdown").map(e => this.decodeVotedFactoryShutdownEvent(e));
        }
        decodeVotedFactoryShutdownEvent(event) {
            let result = event.data;
            return {
                admin: result.admin,
                factory: result.factory,
                YorN: result.YorN,
                _event: event
            };
        }
        parseVotedPairRestartEvent(receipt) {
            return this.parseEvents(receipt, "VotedPairRestart").map(e => this.decodeVotedPairRestartEvent(e));
        }
        decodeVotedPairRestartEvent(event) {
            let result = event.data;
            return {
                admin: result.admin,
                pair: result.pair,
                YorN: result.YorN,
                _event: event
            };
        }
        parseVotedPairShutdownEvent(receipt) {
            return this.parseEvents(receipt, "VotedPairShutdown").map(e => this.decodeVotedPairShutdownEvent(e));
        }
        decodeVotedPairShutdownEvent(event) {
            let result = event.data;
            return {
                admin: result.admin,
                pair: result.pair,
                YorN: result.YorN,
                _event: event
            };
        }
        parseVotedVetoEvent(receipt) {
            return this.parseEvents(receipt, "VotedVeto").map(e => this.decodeVotedVetoEvent(e));
        }
        decodeVotedVetoEvent(event) {
            let result = event.data;
            return {
                admin: result.admin,
                votingContract: result.votingContract,
                YorN: result.YorN,
                _event: event
            };
        }
        assign() {
            let admins_call = async (param1, options) => {
                let result = await this.call('admins', [this.wallet.utils.toString(param1)], options);
                return result;
            };
            this.admins = admins_call;
            let adminsIdx_call = async (param1, options) => {
                let result = await this.call('adminsIdx', [param1], options);
                return new eth_contract_11.BigNumber(result);
            };
            this.adminsIdx = adminsIdx_call;
            let allAdmins_call = async (options) => {
                let result = await this.call('allAdmins', [], options);
                return result;
            };
            this.allAdmins = allAdmins_call;
            let factoryRestartVoteParams = (params) => [params.param1, params.param2];
            let factoryRestartVote_call = async (params, options) => {
                let result = await this.call('factoryRestartVote', factoryRestartVoteParams(params), options);
                return result;
            };
            this.factoryRestartVote = factoryRestartVote_call;
            let factoryShutdownVoteParams = (params) => [params.param1, params.param2];
            let factoryShutdownVote_call = async (params, options) => {
                let result = await this.call('factoryShutdownVote', factoryShutdownVoteParams(params), options);
                return result;
            };
            this.factoryShutdownVote = factoryShutdownVote_call;
            let getFactoryRestartVote_call = async (factory, options) => {
                let result = await this.call('getFactoryRestartVote', [factory], options);
                return result;
            };
            this.getFactoryRestartVote = getFactoryRestartVote_call;
            let getFactoryShutdownVote_call = async (factory, options) => {
                let result = await this.call('getFactoryShutdownVote', [factory], options);
                return result;
            };
            this.getFactoryShutdownVote = getFactoryShutdownVote_call;
            let getPairRestartVote_call = async (pair, options) => {
                let result = await this.call('getPairRestartVote', [pair], options);
                return result;
            };
            this.getPairRestartVote = getPairRestartVote_call;
            let getPairShutdownVote_call = async (pair, options) => {
                let result = await this.call('getPairShutdownVote', [pair], options);
                return result;
            };
            this.getPairShutdownVote = getPairShutdownVote_call;
            let getVetoVotingVote_call = async (votingContract, options) => {
                let result = await this.call('getVetoVotingVote', [votingContract], options);
                return result;
            };
            this.getVetoVotingVote = getVetoVotingVote_call;
            let governance_call = async (options) => {
                let result = await this.call('governance', [], options);
                return result;
            };
            this.governance = governance_call;
            let maxAdmin_call = async (options) => {
                let result = await this.call('maxAdmin', [], options);
                return new eth_contract_11.BigNumber(result);
            };
            this.maxAdmin = maxAdmin_call;
            let pairRestartVoteParams = (params) => [params.param1, params.param2];
            let pairRestartVote_call = async (params, options) => {
                let result = await this.call('pairRestartVote', pairRestartVoteParams(params), options);
                return result;
            };
            this.pairRestartVote = pairRestartVote_call;
            let pairShutdownVoteParams = (params) => [params.param1, params.param2];
            let pairShutdownVote_call = async (params, options) => {
                let result = await this.call('pairShutdownVote', pairShutdownVoteParams(params), options);
                return result;
            };
            this.pairShutdownVote = pairShutdownVote_call;
            let vetoVotingVoteParams = (params) => [params.param1, params.param2];
            let vetoVotingVote_call = async (params, options) => {
                let result = await this.call('vetoVotingVote', vetoVotingVoteParams(params), options);
                return result;
            };
            this.vetoVotingVote = vetoVotingVote_call;
            let addAdmin_send = async (admin, options) => {
                let result = await this.send('addAdmin', [admin], options);
                return result;
            };
            let addAdmin_call = async (admin, options) => {
                let result = await this.call('addAdmin', [admin], options);
                return;
            };
            let addAdmin_txData = async (admin, options) => {
                let result = await this.txData('addAdmin', [admin], options);
                return result;
            };
            this.addAdmin = Object.assign(addAdmin_send, {
                call: addAdmin_call,
                txData: addAdmin_txData
            });
            let executeFactoryRestart_send = async (factory, options) => {
                let result = await this.send('executeFactoryRestart', [factory], options);
                return result;
            };
            let executeFactoryRestart_call = async (factory, options) => {
                let result = await this.call('executeFactoryRestart', [factory], options);
                return;
            };
            let executeFactoryRestart_txData = async (factory, options) => {
                let result = await this.txData('executeFactoryRestart', [factory], options);
                return result;
            };
            this.executeFactoryRestart = Object.assign(executeFactoryRestart_send, {
                call: executeFactoryRestart_call,
                txData: executeFactoryRestart_txData
            });
            let executeFactoryShutdown_send = async (factory, options) => {
                let result = await this.send('executeFactoryShutdown', [factory], options);
                return result;
            };
            let executeFactoryShutdown_call = async (factory, options) => {
                let result = await this.call('executeFactoryShutdown', [factory], options);
                return;
            };
            let executeFactoryShutdown_txData = async (factory, options) => {
                let result = await this.txData('executeFactoryShutdown', [factory], options);
                return result;
            };
            this.executeFactoryShutdown = Object.assign(executeFactoryShutdown_send, {
                call: executeFactoryShutdown_call,
                txData: executeFactoryShutdown_txData
            });
            let executePairRestartParams = (params) => [params.factory, params.pair];
            let executePairRestart_send = async (params, options) => {
                let result = await this.send('executePairRestart', executePairRestartParams(params), options);
                return result;
            };
            let executePairRestart_call = async (params, options) => {
                let result = await this.call('executePairRestart', executePairRestartParams(params), options);
                return;
            };
            let executePairRestart_txData = async (params, options) => {
                let result = await this.txData('executePairRestart', executePairRestartParams(params), options);
                return result;
            };
            this.executePairRestart = Object.assign(executePairRestart_send, {
                call: executePairRestart_call,
                txData: executePairRestart_txData
            });
            let executePairShutdownParams = (params) => [params.factory, params.pair];
            let executePairShutdown_send = async (params, options) => {
                let result = await this.send('executePairShutdown', executePairShutdownParams(params), options);
                return result;
            };
            let executePairShutdown_call = async (params, options) => {
                let result = await this.call('executePairShutdown', executePairShutdownParams(params), options);
                return;
            };
            let executePairShutdown_txData = async (params, options) => {
                let result = await this.txData('executePairShutdown', executePairShutdownParams(params), options);
                return result;
            };
            this.executePairShutdown = Object.assign(executePairShutdown_send, {
                call: executePairShutdown_call,
                txData: executePairShutdown_txData
            });
            let executeVetoVoting_send = async (votingContract, options) => {
                let result = await this.send('executeVetoVoting', [votingContract], options);
                return result;
            };
            let executeVetoVoting_call = async (votingContract, options) => {
                let result = await this.call('executeVetoVoting', [votingContract], options);
                return;
            };
            let executeVetoVoting_txData = async (votingContract, options) => {
                let result = await this.txData('executeVetoVoting', [votingContract], options);
                return result;
            };
            this.executeVetoVoting = Object.assign(executeVetoVoting_send, {
                call: executeVetoVoting_call,
                txData: executeVetoVoting_txData
            });
            let factoryRestartParams = (params) => [params.factory, params.YorN];
            let factoryRestart_send = async (params, options) => {
                let result = await this.send('factoryRestart', factoryRestartParams(params), options);
                return result;
            };
            let factoryRestart_call = async (params, options) => {
                let result = await this.call('factoryRestart', factoryRestartParams(params), options);
                return;
            };
            let factoryRestart_txData = async (params, options) => {
                let result = await this.txData('factoryRestart', factoryRestartParams(params), options);
                return result;
            };
            this.factoryRestart = Object.assign(factoryRestart_send, {
                call: factoryRestart_call,
                txData: factoryRestart_txData
            });
            let factoryShutdownParams = (params) => [params.factory, params.YorN];
            let factoryShutdown_send = async (params, options) => {
                let result = await this.send('factoryShutdown', factoryShutdownParams(params), options);
                return result;
            };
            let factoryShutdown_call = async (params, options) => {
                let result = await this.call('factoryShutdown', factoryShutdownParams(params), options);
                return;
            };
            let factoryShutdown_txData = async (params, options) => {
                let result = await this.txData('factoryShutdown', factoryShutdownParams(params), options);
                return result;
            };
            this.factoryShutdown = Object.assign(factoryShutdown_send, {
                call: factoryShutdown_call,
                txData: factoryShutdown_txData
            });
            let pairRestartParams = (params) => [params.pair, params.YorN];
            let pairRestart_send = async (params, options) => {
                let result = await this.send('pairRestart', pairRestartParams(params), options);
                return result;
            };
            let pairRestart_call = async (params, options) => {
                let result = await this.call('pairRestart', pairRestartParams(params), options);
                return;
            };
            let pairRestart_txData = async (params, options) => {
                let result = await this.txData('pairRestart', pairRestartParams(params), options);
                return result;
            };
            this.pairRestart = Object.assign(pairRestart_send, {
                call: pairRestart_call,
                txData: pairRestart_txData
            });
            let pairShutdownParams = (params) => [params.pair, params.YorN];
            let pairShutdown_send = async (params, options) => {
                let result = await this.send('pairShutdown', pairShutdownParams(params), options);
                return result;
            };
            let pairShutdown_call = async (params, options) => {
                let result = await this.call('pairShutdown', pairShutdownParams(params), options);
                return;
            };
            let pairShutdown_txData = async (params, options) => {
                let result = await this.txData('pairShutdown', pairShutdownParams(params), options);
                return result;
            };
            this.pairShutdown = Object.assign(pairShutdown_send, {
                call: pairShutdown_call,
                txData: pairShutdown_txData
            });
            let removeAdmin_send = async (admin, options) => {
                let result = await this.send('removeAdmin', [admin], options);
                return result;
            };
            let removeAdmin_call = async (admin, options) => {
                let result = await this.call('removeAdmin', [admin], options);
                return;
            };
            let removeAdmin_txData = async (admin, options) => {
                let result = await this.txData('removeAdmin', [admin], options);
                return result;
            };
            this.removeAdmin = Object.assign(removeAdmin_send, {
                call: removeAdmin_call,
                txData: removeAdmin_txData
            });
            let setMaxAdmin_send = async (maxAdmin, options) => {
                let result = await this.send('setMaxAdmin', [this.wallet.utils.toString(maxAdmin)], options);
                return result;
            };
            let setMaxAdmin_call = async (maxAdmin, options) => {
                let result = await this.call('setMaxAdmin', [this.wallet.utils.toString(maxAdmin)], options);
                return;
            };
            let setMaxAdmin_txData = async (maxAdmin, options) => {
                let result = await this.txData('setMaxAdmin', [this.wallet.utils.toString(maxAdmin)], options);
                return result;
            };
            this.setMaxAdmin = Object.assign(setMaxAdmin_send, {
                call: setMaxAdmin_call,
                txData: setMaxAdmin_txData
            });
            let vetoVotingParams = (params) => [params.votingContract, params.YorN];
            let vetoVoting_send = async (params, options) => {
                let result = await this.send('vetoVoting', vetoVotingParams(params), options);
                return result;
            };
            let vetoVoting_call = async (params, options) => {
                let result = await this.call('vetoVoting', vetoVotingParams(params), options);
                return;
            };
            let vetoVoting_txData = async (params, options) => {
                let result = await this.txData('vetoVoting', vetoVotingParams(params), options);
                return result;
            };
            this.vetoVoting = Object.assign(vetoVoting_send, {
                call: vetoVoting_call,
                txData: vetoVoting_txData
            });
        }
    }
    OAXDEX_Administrator._abi = OAXDEX_Administrator_json_1.default.abi;
    exports.OAXDEX_Administrator = OAXDEX_Administrator;
});
define("@scom/scom-swap/contracts/oswap-openswap-contract/contracts/gov/OAXDEX_Governance.json.ts", ["require", "exports"], function (require, exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    ///<amd-module name='@scom/scom-swap/contracts/oswap-openswap-contract/contracts/gov/OAXDEX_Governance.json.ts'/> 
    exports.default = {
        "abi": [
            { "inputs": [{ "internalType": "address", "name": "_oaxToken", "type": "address" }, { "internalType": "address", "name": "_votingToken", "type": "address" }, { "internalType": "bytes32[]", "name": "_names", "type": "bytes32[]" }, { "internalType": "uint256[]", "name": "_minExeDelay", "type": "uint256[]" }, { "internalType": "uint256[]", "name": "_minVoteDuration", "type": "uint256[]" }, { "internalType": "uint256[]", "name": "_maxVoteDuration", "type": "uint256[]" }, { "internalType": "uint256[]", "name": "_minOaxTokenToCreateVote", "type": "uint256[]" }, { "internalType": "uint256[]", "name": "_minQuorum", "type": "uint256[]" }, { "internalType": "uint256", "name": "_minStakePeriod", "type": "uint256" }], "stateMutability": "nonpayable", "type": "constructor" },
            { "anonymous": false, "inputs": [{ "indexed": false, "internalType": "bytes32", "name": "name", "type": "bytes32" }, { "indexed": false, "internalType": "uint256", "name": "minExeDelay", "type": "uint256" }, { "indexed": false, "internalType": "uint256", "name": "minVoteDuration", "type": "uint256" }, { "indexed": false, "internalType": "uint256", "name": "maxVoteDuration", "type": "uint256" }, { "indexed": false, "internalType": "uint256", "name": "minOaxTokenToCreateVote", "type": "uint256" }, { "indexed": false, "internalType": "uint256", "name": "minQuorum", "type": "uint256" }], "name": "AddVotingConfig", "type": "event" },
            { "anonymous": false, "inputs": [{ "indexed": true, "internalType": "address", "name": "vote", "type": "address" }], "name": "Executed", "type": "event" },
            { "anonymous": false, "inputs": [{ "indexed": true, "internalType": "address", "name": "poll", "type": "address" }], "name": "NewPoll", "type": "event" },
            { "anonymous": false, "inputs": [{ "indexed": true, "internalType": "address", "name": "vote", "type": "address" }], "name": "NewVote", "type": "event" },
            { "anonymous": false, "inputs": [{ "indexed": true, "internalType": "address", "name": "previousOwner", "type": "address" }, { "indexed": true, "internalType": "address", "name": "newOwner", "type": "address" }], "name": "OwnershipTransferred", "type": "event" },
            { "anonymous": false, "inputs": [{ "indexed": true, "internalType": "bytes32", "name": "name", "type": "bytes32" }, { "indexed": false, "internalType": "bytes32", "name": "value", "type": "bytes32" }], "name": "ParamSet", "type": "event" },
            { "anonymous": false, "inputs": [{ "indexed": false, "internalType": "bytes32", "name": "name", "type": "bytes32" }, { "indexed": false, "internalType": "bytes32", "name": "value1", "type": "bytes32" }, { "indexed": false, "internalType": "bytes32", "name": "value2", "type": "bytes32" }], "name": "ParamSet2", "type": "event" },
            { "anonymous": false, "inputs": [{ "indexed": true, "internalType": "address", "name": "account", "type": "address" }, { "indexed": true, "internalType": "address", "name": "poll", "type": "address" }, { "indexed": false, "internalType": "uint256", "name": "option", "type": "uint256" }], "name": "Poll", "type": "event" },
            { "anonymous": false, "inputs": [{ "indexed": true, "internalType": "bytes32", "name": "configName", "type": "bytes32" }, { "indexed": true, "internalType": "bytes32", "name": "paramName", "type": "bytes32" }, { "indexed": false, "internalType": "uint256", "name": "minExeDelay", "type": "uint256" }], "name": "SetVotingConfig", "type": "event" },
            { "anonymous": false, "inputs": [{ "indexed": true, "internalType": "address", "name": "who", "type": "address" }, { "indexed": false, "internalType": "uint256", "name": "value", "type": "uint256" }], "name": "Stake", "type": "event" },
            { "anonymous": false, "inputs": [{ "indexed": true, "internalType": "address", "name": "who", "type": "address" }, { "indexed": false, "internalType": "uint256", "name": "value", "type": "uint256" }], "name": "Unstake", "type": "event" },
            { "anonymous": false, "inputs": [{ "indexed": true, "internalType": "address", "name": "vote", "type": "address" }], "name": "Veto", "type": "event" },
            { "anonymous": false, "inputs": [{ "indexed": true, "internalType": "address", "name": "account", "type": "address" }, { "indexed": true, "internalType": "address", "name": "vote", "type": "address" }, { "indexed": false, "internalType": "uint256", "name": "option", "type": "uint256" }], "name": "Vote", "type": "event" },
            { "inputs": [{ "internalType": "bytes32", "name": "name", "type": "bytes32" }, { "internalType": "uint256", "name": "minExeDelay", "type": "uint256" }, { "internalType": "uint256", "name": "minVoteDuration", "type": "uint256" }, { "internalType": "uint256", "name": "maxVoteDuration", "type": "uint256" }, { "internalType": "uint256", "name": "minOaxTokenToCreateVote", "type": "uint256" }, { "internalType": "uint256", "name": "minQuorum", "type": "uint256" }], "name": "addVotingConfig", "outputs": [], "stateMutability": "nonpayable", "type": "function" },
            { "inputs": [], "name": "admin", "outputs": [{ "internalType": "address", "name": "", "type": "address" }], "stateMutability": "view", "type": "function" },
            { "inputs": [], "name": "allVotings", "outputs": [{ "internalType": "address[]", "name": "", "type": "address[]" }], "stateMutability": "view", "type": "function" },
            { "inputs": [{ "internalType": "address", "name": "vote", "type": "address" }], "name": "closeVote", "outputs": [], "stateMutability": "nonpayable", "type": "function" },
            { "inputs": [], "name": "executed", "outputs": [], "stateMutability": "nonpayable", "type": "function" },
            { "inputs": [{ "internalType": "address", "name": "", "type": "address" }], "name": "freezedStake", "outputs": [{ "internalType": "uint256", "name": "amount", "type": "uint256" }, { "internalType": "uint256", "name": "timestamp", "type": "uint256" }], "stateMutability": "view", "type": "function" },
            { "inputs": [], "name": "getNewVoteId", "outputs": [{ "internalType": "uint256", "name": "", "type": "uint256" }], "stateMutability": "nonpayable", "type": "function" },
            { "inputs": [{ "internalType": "uint256", "name": "start", "type": "uint256" }, { "internalType": "uint256", "name": "length", "type": "uint256" }], "name": "getVotingConfigProfiles", "outputs": [{ "internalType": "bytes32[]", "name": "profiles", "type": "bytes32[]" }], "stateMutability": "view", "type": "function" },
            { "inputs": [], "name": "getVotingCount", "outputs": [{ "internalType": "uint256", "name": "", "type": "uint256" }], "stateMutability": "view", "type": "function" },
            { "inputs": [{ "internalType": "bytes32", "name": "name", "type": "bytes32" }], "name": "getVotingParams", "outputs": [{ "internalType": "uint256", "name": "_minExeDelay", "type": "uint256" }, { "internalType": "uint256", "name": "_minVoteDuration", "type": "uint256" }, { "internalType": "uint256", "name": "_maxVoteDuration", "type": "uint256" }, { "internalType": "uint256", "name": "_minOaxTokenToCreateVote", "type": "uint256" }, { "internalType": "uint256", "name": "_minQuorum", "type": "uint256" }], "stateMutability": "view", "type": "function" },
            { "inputs": [{ "internalType": "uint256", "name": "start", "type": "uint256" }, { "internalType": "uint256", "name": "count", "type": "uint256" }], "name": "getVotings", "outputs": [{ "internalType": "address[]", "name": "_votings", "type": "address[]" }], "stateMutability": "view", "type": "function" },
            { "inputs": [{ "internalType": "address", "name": "_admin", "type": "address" }], "name": "initAdmin", "outputs": [], "stateMutability": "nonpayable", "type": "function" },
            { "inputs": [{ "internalType": "address[]", "name": "_votingExecutor", "type": "address[]" }], "name": "initVotingExecutor", "outputs": [], "stateMutability": "nonpayable", "type": "function" },
            { "inputs": [{ "internalType": "address", "name": "votingContract", "type": "address" }], "name": "isVotingContract", "outputs": [{ "internalType": "bool", "name": "", "type": "bool" }], "stateMutability": "view", "type": "function" },
            { "inputs": [{ "internalType": "address", "name": "", "type": "address" }], "name": "isVotingExecutor", "outputs": [{ "internalType": "bool", "name": "", "type": "bool" }], "stateMutability": "view", "type": "function" },
            { "inputs": [], "name": "minStakePeriod", "outputs": [{ "internalType": "uint256", "name": "", "type": "uint256" }], "stateMutability": "view", "type": "function" },
            { "inputs": [{ "internalType": "address", "name": "vote", "type": "address" }, { "internalType": "bool", "name": "isExecutiveVote", "type": "bool" }], "name": "newVote", "outputs": [], "stateMutability": "nonpayable", "type": "function" },
            { "inputs": [], "name": "oaxToken", "outputs": [{ "internalType": "address", "name": "", "type": "address" }], "stateMutability": "view", "type": "function" },
            { "inputs": [], "name": "owner", "outputs": [{ "internalType": "address", "name": "", "type": "address" }], "stateMutability": "view", "type": "function" },
            { "inputs": [], "name": "renounceOwnership", "outputs": [], "stateMutability": "nonpayable", "type": "function" },
            { "inputs": [{ "internalType": "address", "name": "_admin", "type": "address" }], "name": "setAdmin", "outputs": [], "stateMutability": "nonpayable", "type": "function" },
            { "inputs": [{ "internalType": "uint256", "name": "_minStakePeriod", "type": "uint256" }], "name": "setMinStakePeriod", "outputs": [], "stateMutability": "nonpayable", "type": "function" },
            { "inputs": [{ "internalType": "bytes32", "name": "configName", "type": "bytes32" }, { "internalType": "bytes32", "name": "paramName", "type": "bytes32" }, { "internalType": "uint256", "name": "paramValue", "type": "uint256" }], "name": "setVotingConfig", "outputs": [], "stateMutability": "nonpayable", "type": "function" },
            { "inputs": [{ "internalType": "address", "name": "_votingExecutor", "type": "address" }, { "internalType": "bool", "name": "_bool", "type": "bool" }], "name": "setVotingExecutor", "outputs": [], "stateMutability": "nonpayable", "type": "function" },
            { "inputs": [{ "internalType": "address", "name": "_votingRegister", "type": "address" }], "name": "setVotingRegister", "outputs": [], "stateMutability": "nonpayable", "type": "function" },
            { "inputs": [{ "internalType": "uint256", "name": "value", "type": "uint256" }], "name": "stake", "outputs": [], "stateMutability": "nonpayable", "type": "function" },
            { "inputs": [{ "internalType": "address", "name": "", "type": "address" }], "name": "stakeOf", "outputs": [{ "internalType": "uint256", "name": "", "type": "uint256" }], "stateMutability": "view", "type": "function" },
            { "inputs": [], "name": "totalStake", "outputs": [{ "internalType": "uint256", "name": "", "type": "uint256" }], "stateMutability": "view", "type": "function" },
            { "inputs": [{ "internalType": "address", "name": "newOwner", "type": "address" }], "name": "transferOwnership", "outputs": [], "stateMutability": "nonpayable", "type": "function" },
            { "inputs": [], "name": "unlockStake", "outputs": [], "stateMutability": "nonpayable", "type": "function" },
            { "inputs": [{ "internalType": "uint256", "name": "value", "type": "uint256" }], "name": "unstake", "outputs": [], "stateMutability": "nonpayable", "type": "function" },
            { "inputs": [{ "internalType": "address", "name": "voting", "type": "address" }], "name": "veto", "outputs": [], "stateMutability": "nonpayable", "type": "function" },
            { "inputs": [], "name": "voteCount", "outputs": [{ "internalType": "uint256", "name": "", "type": "uint256" }], "stateMutability": "view", "type": "function" },
            { "inputs": [{ "internalType": "bool", "name": "poll", "type": "bool" }, { "internalType": "address", "name": "account", "type": "address" }, { "internalType": "uint256", "name": "option", "type": "uint256" }], "name": "voted", "outputs": [], "stateMutability": "nonpayable", "type": "function" },
            { "inputs": [{ "internalType": "uint256", "name": "", "type": "uint256" }], "name": "votingConfigProfiles", "outputs": [{ "internalType": "bytes32", "name": "", "type": "bytes32" }], "stateMutability": "view", "type": "function" },
            { "inputs": [], "name": "votingConfigProfilesLength", "outputs": [{ "internalType": "uint256", "name": "", "type": "uint256" }], "stateMutability": "view", "type": "function" },
            { "inputs": [{ "internalType": "bytes32", "name": "", "type": "bytes32" }], "name": "votingConfigs", "outputs": [{ "internalType": "uint256", "name": "minExeDelay", "type": "uint256" }, { "internalType": "uint256", "name": "minVoteDuration", "type": "uint256" }, { "internalType": "uint256", "name": "maxVoteDuration", "type": "uint256" }, { "internalType": "uint256", "name": "minOaxTokenToCreateVote", "type": "uint256" }, { "internalType": "uint256", "name": "minQuorum", "type": "uint256" }], "stateMutability": "view", "type": "function" },
            { "inputs": [{ "internalType": "uint256", "name": "", "type": "uint256" }], "name": "votingExecutor", "outputs": [{ "internalType": "address", "name": "", "type": "address" }], "stateMutability": "view", "type": "function" },
            { "inputs": [{ "internalType": "address", "name": "", "type": "address" }], "name": "votingExecutorInv", "outputs": [{ "internalType": "uint256", "name": "", "type": "uint256" }], "stateMutability": "view", "type": "function" },
            { "inputs": [], "name": "votingExecutorLength", "outputs": [{ "internalType": "uint256", "name": "", "type": "uint256" }], "stateMutability": "view", "type": "function" },
            { "inputs": [{ "internalType": "address", "name": "", "type": "address" }], "name": "votingIdx", "outputs": [{ "internalType": "uint256", "name": "", "type": "uint256" }], "stateMutability": "view", "type": "function" },
            { "inputs": [], "name": "votingRegister", "outputs": [{ "internalType": "address", "name": "", "type": "address" }], "stateMutability": "view", "type": "function" },
            { "inputs": [], "name": "votingToken", "outputs": [{ "internalType": "address", "name": "", "type": "address" }], "stateMutability": "view", "type": "function" },
            { "inputs": [{ "internalType": "uint256", "name": "", "type": "uint256" }], "name": "votings", "outputs": [{ "internalType": "address", "name": "", "type": "address" }], "stateMutability": "view", "type": "function" }
        ],
        "bytecode": "60c06040523480156200001157600080fd5b50604051620046433803806200464383398181016040526101208110156200003857600080fd5b815160208301516040808501805191519395929483019291846401000000008211156200006457600080fd5b9083019060208201858111156200007a57600080fd5b82518660208202830111640100000000821117156200009857600080fd5b82525081516020918201928201910280838360005b83811015620000c7578181015183820152602001620000ad565b5050505090500160405260200180516040519392919084640100000000821115620000f157600080fd5b9083019060208201858111156200010757600080fd5b82518660208202830111640100000000821117156200012557600080fd5b82525081516020918201928201910280838360005b83811015620001545781810151838201526020016200013a565b50505050905001604052602001805160405193929190846401000000008211156200017e57600080fd5b9083019060208201858111156200019457600080fd5b8251866020820283011164010000000082111715620001b257600080fd5b82525081516020918201928201910280838360005b83811015620001e1578181015183820152602001620001c7565b50505050905001604052602001805160405193929190846401000000008211156200020b57600080fd5b9083019060208201858111156200022157600080fd5b82518660208202830111640100000000821117156200023f57600080fd5b82525081516020918201928201910280838360005b838110156200026e57818101518382015260200162000254565b50505050905001604052602001805160405193929190846401000000008211156200029857600080fd5b908301906020820185811115620002ae57600080fd5b8251866020820283011164010000000082111715620002cc57600080fd5b82525081516020918201928201910280838360005b83811015620002fb578181015183820152602001620002e1565b50505050905001604052602001805160405193929190846401000000008211156200032557600080fd5b9083019060208201858111156200033b57600080fd5b82518660208202830111640100000000821117156200035957600080fd5b82525081516020918201928201910280838360005b83811015620003885781810151838201526020016200036e565b50505050919091016040525060200151915060009050620003b16001600160e01b036200080316565b600080546001600160a01b0319166001600160a01b0383169081178255604051929350917f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e0908290a3506001600160601b031960608a811b821660805289901b1660a0528551875114801562000428575084518651145b801562000436575083518551145b801562000444575082518451145b801562000452575081518351145b6200048f5760405162461bcd60e51b81526004018080602001828103825260248152602001806200461f6024913960400191505060405180910390fd5b60005b875181101562000741576000878281518110620004ab57fe5b6020026020010151118015620004d8575062093a80878281518110620004cd57fe5b602002602001015111155b6200052a576040805162461bcd60e51b815260206004820152601b60248201527f4f41584445583a20496e76616c6964206d696e45786544656c61790000000000604482015290519081900360640190fd5b8481815181106200053757fe5b60200260200101518682815181106200054c57fe5b602002602001015110801562000579575062093a808682815181106200056e57fe5b602002602001015111155b620005cb576040805162461bcd60e51b815260206004820152601f60248201527f4f41584445583a20496e76616c6964206d696e566f74654475726174696f6e00604482015290519081900360640190fd5b6000600160008a8481518110620005de57fe5b6020026020010151815260200190815260200160002090508782815181106200060357fe5b602002602001015181600001819055508682815181106200062057fe5b602002602001015181600101819055508582815181106200063d57fe5b602002602001015181600201819055508482815181106200065a57fe5b602002602001015181600301819055508382815181106200067757fe5b6020026020010151816004018190555060028983815181106200069657fe5b6020908102919091018101518254600181018455600093845291909220015588517f4298cd6fa0bb1aeb8e309c8da40e32f5d5383c757a49341ef32bdcfe4bf09129908a9084908110620006e657fe5b602090810291909101810151835460018501546002860154600387015460048801546040805196875296860194909452848601929092526060840152608083015260a082015290519081900360c00190a15060010162000492565b5060008111801562000756575062278d008111155b620007a8576040805162461bcd60e51b815260206004820152601e60248201527f4f41584445583a20496e76616c6964206d696e5374616b65506572696f640000604482015290519081900360640190fd5b600b8190556040805182815290516d1b5a5b94dd185ad954195c9a5bd960921b917f22ea5a9dcc7fb5bc447fcb472061adc51caa147724a67a6695d49a9dff162509919081900360200190a250505050505050505062000807565b3390565b60805160601c60a05160601c613ddf6200084060003980610f445280612553528061263852806126bc5250806127415250613ddf6000f3fe608060405234801561001057600080fd5b50600436106102f45760003560e01c80638da5cb5b11610191578063b716d463116100e3578063f2486f4411610097578063f851a44011610071578063f851a44014610963578063ff2a59b01461096b578063ffccd84314610973576102f4565b8063f2486f44146108e0578063f2fde38b146108fd578063f6f04d7f14610930576102f4565b8063c6384071116100c8578063c6384071146108a7578063d84f2bc6146108af578063d9c37086146108b7576102f4565b8063b716d46314610897578063bb9fe6bf1461089f576102f4565b8063a3818b3b11610145578063a8fd327e1161011f578063a8fd327e1461083f578063b03401231461085c578063b15866e614610864576102f4565b8063a3818b3b146107be578063a598d03c14610805578063a694fc3a14610822576102f4565b80639449f013116101765780639449f0131461076057806395e5cfa2146107935780639c2aab5e146107b6576102f4565b80638da5cb5b146107125780639192705014610743576102f4565b806362072e761161024a578063715018a6116101fe57806378a1a9fa116101d857806378a1a9fa146106c757806382107751146106cf5780638b0e9f3f1461070a576102f4565b8063715018a61461063c578063718fbb7914610644578063788ddbcb1461068c576102f4565b806365eaf8bc1161022f57806365eaf8bc146105955780636a333cee146105d6578063704b6c0214610609576102f4565b806362072e761461052757806365611e431461055a576102f4565b80632e17de78116102ac5780634262336011610286578063426233601461048b578063499b86d8146104be5780635c13d4ac146104db576102f4565b80632e17de78146103f657806331a38c89146104135780633b32cf421461041b576102f4565b806326ae21a9116102dd57806326ae21a91461034857806329294e2b1461037b57806329711413146103ee576102f4565b806308c4934d146102f9578063145988981461032e575b600080fd5b61032c6004803603602081101561030f57600080fd5b503573ffffffffffffffffffffffffffffffffffffffff1661097b565b005b610336610a9d565b60408051918252519081900360200190f35b61032c6004803603602081101561035e57600080fd5b503573ffffffffffffffffffffffffffffffffffffffff16610b1f565b61039e6004803603604081101561039157600080fd5b5080359060200135610c52565b60408051602080825283518183015283519192839290830191858101910280838360005b838110156103da5781810151838201526020016103c2565b505050509050019250505060405180910390f35b61039e610d44565b61032c6004803603602081101561040c57600080fd5b5035610db3565b61032c610f6a565b61032c6004803603602081101561043157600080fd5b81019060208101813564010000000081111561044c57600080fd5b82018360208201111561045e57600080fd5b8035906020019184602083028401116401000000008311171561048057600080fd5b509092509050611037565b610336600480360360208110156104a157600080fd5b503573ffffffffffffffffffffffffffffffffffffffff16611184565b61032c600480360360208110156104d457600080fd5b5035611196565b61050e600480360360208110156104f157600080fd5b503573ffffffffffffffffffffffffffffffffffffffff166112f0565b6040805192835260208301919091528051918290030190f35b61032c6004803603602081101561053d57600080fd5b503573ffffffffffffffffffffffffffffffffffffffff16611309565b61032c600480360360c081101561057057600080fd5b5080359060208101359060408101359060608101359060808101359060a0013561158d565b61032c600480360360608110156105ab57600080fd5b50803515159073ffffffffffffffffffffffffffffffffffffffff60208201351690604001356118fc565b61032c600480360360208110156105ec57600080fd5b503573ffffffffffffffffffffffffffffffffffffffff16611a3e565b61032c6004803603602081101561061f57600080fd5b503573ffffffffffffffffffffffffffffffffffffffff16611c18565b61032c611c96565b6106616004803603602081101561065a57600080fd5b5035611d96565b6040805195865260208601949094528484019290925260608401526080830152519081900360a00190f35b61032c600480360360408110156106a257600080fd5b5073ffffffffffffffffffffffffffffffffffffffff81351690602001351515611e29565b610336611eb5565b61032c600480360360408110156106e557600080fd5b5073ffffffffffffffffffffffffffffffffffffffff81351690602001351515611ebb565b6103366123a4565b61071a6123aa565b6040805173ffffffffffffffffffffffffffffffffffffffff9092168252519081900360200190f35b61071a6004803603602081101561075957600080fd5b50356123c6565b6103366004803603602081101561077657600080fd5b503573ffffffffffffffffffffffffffffffffffffffff166123fa565b61039e600480360360408110156107a957600080fd5b508035906020013561240c565b6103366124e5565b6107f1600480360360208110156107d457600080fd5b503573ffffffffffffffffffffffffffffffffffffffff166124eb565b604080519115158252519081900360200190f35b61071a6004803603602081101561081b57600080fd5b5035612500565b61032c6004803603602081101561083857600080fd5b503561250d565b6106616004803603602081101561085557600080fd5b503561268c565b61071a6126ba565b6107f16004803603602081101561087a57600080fd5b503573ffffffffffffffffffffffffffffffffffffffff166126de565b61071a61273f565b61032c612763565b610336612870565b610336612876565b61032c600480360360608110156108cd57600080fd5b508035906020810135906040013561287c565b610336600480360360208110156108f657600080fd5b5035612d47565b61032c6004803603602081101561091357600080fd5b503573ffffffffffffffffffffffffffffffffffffffff16612d65565b6103366004803603602081101561094657600080fd5b503573ffffffffffffffffffffffffffffffffffffffff16612eef565b61071a612f01565b610336612f1d565b61071a612f23565b610983612f3f565b60005473ffffffffffffffffffffffffffffffffffffffff908116911614610a0c57604080517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820181905260248201527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e6572604482015290519081900360640190fd5b600a5473ffffffffffffffffffffffffffffffffffffffff1615610a9157604080517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601360248201527f4f41584445583a20416c72656164792073657400000000000000000000000000604482015290519081900360640190fd5b610a9a81612f43565b50565b60065460009073ffffffffffffffffffffffffffffffffffffffff163314610b10576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401808060200182810382526023815260200180613ccf6023913960400191505060405180910390fd5b50600c80546001019081905590565b600a5473ffffffffffffffffffffffffffffffffffffffff163314610ba557604080517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601f60248201527f4f41584445583a204e6f742066726f6d2073687574646f776e2061646d696e00604482015290519081900360640190fd5b8073ffffffffffffffffffffffffffffffffffffffff1663ef9b78c66040518163ffffffff1660e01b8152600401600060405180830381600087803b158015610bed57600080fd5b505af1158015610c01573d6000803e3d6000fd5b50505050610c0e81613089565b60405173ffffffffffffffffffffffffffffffffffffffff8216907f1c24a27ac669c0278656c76cc711441c8dd32d21c32227dad2b42bf6271e8fae90600090a250565b600e54606090610c68848463ffffffff6132ff16565b1115610c7757600e5483900391505b8167ffffffffffffffff81118015610c8e57600080fd5b50604051908082528060200260200182016040528015610cb8578160200160208202803683370190505b5090508260005b83811015610d3c57600e8281548110610cd457fe5b9060005260206000200160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16838281518110610d0b57fe5b73ffffffffffffffffffffffffffffffffffffffff9092166020928302919091019091015260019182019101610cbf565b505092915050565b6060600e805480602002602001604051908101604052809291908181526020018280548015610da957602002820191906000526020600020905b815473ffffffffffffffffffffffffffffffffffffffff168152600190910190602001808311610d7e575b5050505050905090565b33600090815260036020908152604080832054600490925290912054610dde9163ffffffff6132ff16565b811115610e36576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040180806020018281038252602b815260200180613ca4602b913960400191505060405180910390fd5b336000908152600360205260409020548111610e815733600090815260036020526040902054610e6c908263ffffffff61337a16565b33600090815260036020526040902055610f3f565b33600090815260036020526040812054610ea290839063ffffffff61337a16565b3360009081526003602090815260408083208381556001018390556004909152902054909150610ed8908263ffffffff61337a16565b33600090815260046020526040902055600554610efb908263ffffffff61337a16565b600555610f07336133bc565b60408051828152905133917f85082129d87b2fe11527cb1b3b7a520aeb5aa6913f88a3d8757fe40d1db02fdd919081900360200190a2505b610a9a7f00000000000000000000000000000000000000000000000000000000000000003383613472565b336000818152600d6020526040902054600e80549091908110610f8957fe5b60009182526020909120015473ffffffffffffffffffffffffffffffffffffffff1614611001576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401808060200182810382526026815260200180613cf26026913960400191505060405180910390fd5b61100a33613089565b60405133907fdf42bfa876a741bbe542cf1a563269e1390bf03901b5d433a6e8afd6ee36dbfe90600090a2565b61103f612f3f565b60005473ffffffffffffffffffffffffffffffffffffffff9081169116146110c857604080517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820181905260248201527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e6572604482015290519081900360640190fd5b6007541561113757604080517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601c60248201527f4f41584445583a206578656375746f7220616c72656164792073657400000000604482015290519081900360640190fd5b8060005b8181101561117e5761117684848381811061115257fe5b9050602002013573ffffffffffffffffffffffffffffffffffffffff16600161364f565b60010161113b565b50505050565b60046020526000908152604090205481565b3360009081526009602052604090205460ff1661121457604080517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601760248201527f4f41584445583a204e6f742066726f6d20766f74696e67000000000000000000604482015290519081900360640190fd5b600081118015611227575062278d008111155b61129257604080517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601e60248201527f4f41584445583a20496e76616c6964206d696e5374616b65506572696f640000604482015290519081900360640190fd5b600b8190556040805182815290517f6d696e5374616b65506572696f64000000000000000000000000000000000000917f22ea5a9dcc7fb5bc447fcb472061adc51caa147724a67a6695d49a9dff162509919081900360200190a250565b6003602052600090815260409020805460019091015482565b8073ffffffffffffffffffffffffffffffffffffffff1663b3fff9bf6040518163ffffffff1660e01b815260040160006040518083038186803b15801561134f57600080fd5b505afa158015611363573d6000803e3d6000fd5b505050506040513d6000823e601f3d9081017fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe016820160405260208110156113aa57600080fd5b81019080805160405193929190846401000000008211156113ca57600080fd5b9083019060208201858111156113df57600080fd5b82518660208202830111640100000000821117156113fc57600080fd5b82525081516020918201928201910280838360005b83811015611429578181015183820152602001611411565b50505050905001604052505050516000146114a557604080517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601660248201527f476f7665726e616e63653a204e6f74206120506f6c6c00000000000000000000604482015290519081900360640190fd5b8073ffffffffffffffffffffffffffffffffffffffff16639e6cb42b6040518163ffffffff1660e01b815260040160206040518083038186803b1580156114eb57600080fd5b505afa1580156114ff573d6000803e3d6000fd5b505050506040513d602081101561151557600080fd5b5051421161158457604080517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601c60248201527f476f7665726e616e63653a20566f74696e67206e6f7420656e64656400000000604482015290519081900360640190fd5b610a9a81613089565b3360009081526009602052604090205460ff1661160b57604080517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601760248201527f4f41584445583a204e6f742066726f6d20766f74696e67000000000000000000604482015290519081900360640190fd5b60008511801561161e575062093a808511155b61168957604080517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601b60248201527f4f41584445583a20496e76616c6964206d696e45786544656c61790000000000604482015290519081900360640190fd5b828410801561169b575062093a808411155b61170657604080517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601c60248201527f4f41584445583a20496e76616c696420766f74654475726174696f6e00000000604482015290519081900360640190fd5b600554821115611761576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401808060200182810382526027815260200180613d186027913960400191505060405180910390fd5b6005548111156117d257604080517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601960248201527f4f41584445583a20496e76616c6964206d696e51756f72756d00000000000000604482015290519081900360640190fd5b600086815260016020526040902080541561184e57604080517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601d60248201527f4f41584445583a20436f6e66696720616c726561647920657869737473000000604482015290519081900360640190fd5b858155600180820186905560028083018690556003830185905560048301849055805491820181556000527f405787fa12a823e0f2b7631cc41b3ba8828b3321ca811111fa75cd3aa3bb5ace018790556040805188815260208101889052808201879052606081018690526080810185905260a0810184905290517f4298cd6fa0bb1aeb8e309c8da40e32f5d5383c757a49341ef32bdcfe4bf091299181900360c00190a150505050505050565b336000818152600d6020526040902054600e8054909190811061191b57fe5b60009182526020909120015473ffffffffffffffffffffffffffffffffffffffff1614611993576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401808060200182810382526026815260200180613cf26026913960400191505060405180910390fd5b82156119eb57604080518281529051339173ffffffffffffffffffffffffffffffffffffffff8516917f939cecbaa6409c96475d12a0cf1c30c058192b2b51716b5591c3f659ed9354a79181900360200190a3611a39565b604080518281529051339173ffffffffffffffffffffffffffffffffffffffff8516917f66a9138482c99e9baf08860110ef332cc0c23b4a199a53593d8db0fc8f96fbfc9181900360200190a35b505050565b611a46612f3f565b60005473ffffffffffffffffffffffffffffffffffffffff908116911614611acf57604080517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820181905260248201527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e6572604482015290519081900360640190fd5b60065473ffffffffffffffffffffffffffffffffffffffff1615611b5457604080517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601360248201527f4f41584445583a20416c72656164792073657400000000000000000000000000604482015290519081900360640190fd5b600680547fffffffffffffffffffffffff00000000000000000000000000000000000000001673ffffffffffffffffffffffffffffffffffffffff831617908190556040805160609290921b7fffffffffffffffffffffffffffffffffffffffff000000000000000000000000168252517f766f74696e675265676973746572000000000000000000000000000000000000917f22ea5a9dcc7fb5bc447fcb472061adc51caa147724a67a6695d49a9dff162509916020918190039190910190a250565b3360009081526009602052604090205460ff16610a9157604080517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601760248201527f4f41584445583a204e6f742066726f6d20766f74696e67000000000000000000604482015290519081900360640190fd5b611c9e612f3f565b60005473ffffffffffffffffffffffffffffffffffffffff908116911614611d2757604080517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820181905260248201527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e6572604482015290519081900360640190fd5b6000805460405173ffffffffffffffffffffffffffffffffffffffff909116907f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e0908390a3600080547fffffffffffffffffffffffff0000000000000000000000000000000000000000169055565b600081815260016020526040812060038101548291829182918291611e0157507f766f74650000000000000000000000000000000000000000000000000000000060005260016020527f981ebb1b944d3b52f140c2fb331aac52efb7ba38f2e98cea5942f05b58a04f6f5b8054600182015460028301546003840154600490940154929a91995097509195509350915050565b3360009081526009602052604090205460ff16611ea757604080517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601760248201527f4f41584445583a204e6f742066726f6d20766f74696e67000000000000000000604482015290519081900360640190fd5b611eb1828261364f565b5050565b60075490565b60065473ffffffffffffffffffffffffffffffffffffffff163314611f2b576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401808060200182810382526023815260200180613ccf6023913960400191505060405180910390fd5b73ffffffffffffffffffffffffffffffffffffffff8216611f97576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401808060200182810382526022815260200180613d886022913960400191505060405180910390fd5b600e541580611ffb575073ffffffffffffffffffffffffffffffffffffffff82166000818152600d6020526040902054600e80549091908110611fd657fe5b60009182526020909120015473ffffffffffffffffffffffffffffffffffffffff1614155b612050576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040180806020018281038252602a815260200180613c7a602a913960400191505060405180910390fd5b60005b600e54811015612291576000600e828154811061206c57fe5b6000918252602082200154604080517fb3fff9bf000000000000000000000000000000000000000000000000000000008152905173ffffffffffffffffffffffffffffffffffffffff9092169350839263b3fff9bf92600480840193829003018186803b1580156120dc57600080fd5b505afa1580156120f0573d6000803e3d6000fd5b505050506040513d6000823e601f3d9081017fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe0168201604052602081101561213757600080fd5b810190808051604051939291908464010000000082111561215757600080fd5b90830190602082018581111561216c57600080fd5b825186602082028301116401000000008211171561218957600080fd5b82525081516020918201928201910280838360005b838110156121b657818101518382015260200161219e565b505050509050016040525050505160001480156122435750428173ffffffffffffffffffffffffffffffffffffffff16639e6cb42b6040518163ffffffff1660e01b815260040160206040518083038186803b15801561221557600080fd5b505afa158015612229573d6000803e3d6000fd5b505050506040513d602081101561223f57600080fd5b5051105b156122845761227f600e838154811061225857fe5b60009182526020909120015473ffffffffffffffffffffffffffffffffffffffff16613089565b61228b565b6001909101905b50612053565b600e805473ffffffffffffffffffffffffffffffffffffffff85166000818152600d60205260408120839055600183018455929092527fbb7b4a454dc3493923482f07822329ed19e8244eff582cc204f8554c3620c3fd0180547fffffffffffffffffffffffff0000000000000000000000000000000000000000169091179055811561235e5760405173ffffffffffffffffffffffffffffffffffffffff8416907f3b7f4bea1b2462212751e8a9d23ca2a37a1abf7ff729725e224314f1c190c99190600090a2611a39565b60405173ffffffffffffffffffffffffffffffffffffffff8416907f83f5721a5071f4aac6f77c58360d8c8618098cebdc6d3c393f1e757ef4d1082b90600090a2505050565b60055481565b60005473ffffffffffffffffffffffffffffffffffffffff1690565b600781815481106123d357fe5b60009182526020909120015473ffffffffffffffffffffffffffffffffffffffff16905081565b600d6020526000908152604090205481565b6002546060908310156124df5760025461242c848463ffffffff6132ff16565b111561244857600254612445908463ffffffff61337a16565b91505b8167ffffffffffffffff8111801561245f57600080fd5b50604051908082528060200260200182016040528015612489578160200160208202803683370190505b50905060005b828110156124dd5760026124a9828663ffffffff6132ff16565b815481106124b357fe5b90600052602060002001548282815181106124ca57fe5b602090810291909101015260010161248f565b505b92915050565b600e5490565b60096020526000908152604090205460ff1681565b600e81815481106123d357fe5b604080517f70a08231000000000000000000000000000000000000000000000000000000008152336004820152905173ffffffffffffffffffffffffffffffffffffffff7f000000000000000000000000000000000000000000000000000000000000000016916370a08231916024808301926020929190829003018186803b15801561259957600080fd5b505afa1580156125ad573d6000803e3d6000fd5b505050506040513d60208110156125c357600080fd5b505181111561263357604080517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820181905260248201527f476f7665726e616e63653a20696e73756666696369656e742062616c616e6365604482015290519081900360640190fd5b61265f7f0000000000000000000000000000000000000000000000000000000000000000333084613928565b3360009081526003602052604090208054612680908363ffffffff6132ff16565b81554260019091015550565b6001602081905260009182526040909120805491810154600282015460038301546004909301549192909185565b7f000000000000000000000000000000000000000000000000000000000000000081565b73ffffffffffffffffffffffffffffffffffffffff81166000818152600d6020526040812054600e8054929392909190811061271657fe5b60009182526020909120015473ffffffffffffffffffffffffffffffffffffffff161492915050565b7f000000000000000000000000000000000000000000000000000000000000000081565b33600090815260036020526040902080546127df57604080517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601c60248201527f476f7665726e616e63653a204e6f7468696e6720746f207374616b6500000000604482015290519081900360640190fd5b426127f9600b5483600101546132ff90919063ffffffff16565b1061284f576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401808060200182810382526025815260200180613d3f6025913960400191505060405180910390fd5b805433600090815260036020526040812081815560010155611eb181613af8565b600c5481565b600b5481565b3360009081526009602052604090205460ff166128fa57604080517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601760248201527f4f41584445583a204e6f742066726f6d20766f74696e67000000000000000000604482015290519081900360640190fd5b60008381526001602052604090205461297457604080517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601960248201527f4f41584445583a20436f6e666967206e6f742065786973747300000000000000604482015290519081900360640190fd5b817f6d696e45786544656c61790000000000000000000000000000000000000000001415612a30576000811180156129af575062093a808111155b612a1a57604080517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601b60248201527f4f41584445583a20496e76616c6964206d696e45786544656c61790000000000604482015290519081900360640190fd5b6000838152600160205260409020819055612d0b565b817f6d696e566f74654475726174696f6e00000000000000000000000000000000001415612b005760008381526001602052604090206002015481108015612a7b575062093a808111155b612ae657604080517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601c60248201527f4f41584445583a20496e76616c696420766f74654475726174696f6e00000000604482015290519081900360640190fd5b600083815260016020819052604090912001819055612d0b565b817f6d6178566f74654475726174696f6e00000000000000000000000000000000001415612bc157600083815260016020819052604090912001548111612ba857604080517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601c60248201527f4f41584445583a20496e76616c696420766f74654475726174696f6e00000000604482015290519081900360640190fd5b6000838152600160205260409020600201819055612d0b565b817f6d696e4f6178546f6b656e546f437265617465566f74650000000000000000001415612c5d57600554811115612c44576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401808060200182810382526027815260200180613d186027913960400191505060405180910390fd5b6000838152600160205260409020600301819055612d0b565b817f6d696e51756f72756d00000000000000000000000000000000000000000000001415612d0b57600554811115612cf657604080517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601960248201527f4f41584445583a20496e76616c6964206d696e51756f72756d00000000000000604482015290519081900360640190fd5b60008381526001602052604090206004018190555b604080518281529051839185917f10eff86a4e52b12bd92a6e64442cdb5baa87a9b327114811ebfc96a7c1e002819181900360200190a3505050565b60028181548110612d5457fe5b600091825260209091200154905081565b612d6d612f3f565b60005473ffffffffffffffffffffffffffffffffffffffff908116911614612df657604080517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820181905260248201527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e6572604482015290519081900360640190fd5b73ffffffffffffffffffffffffffffffffffffffff8116612e62576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401808060200182810382526026815260200180613c546026913960400191505060405180910390fd5b6000805460405173ffffffffffffffffffffffffffffffffffffffff808516939216917f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e091a3600080547fffffffffffffffffffffffff00000000000000000000000000000000000000001673ffffffffffffffffffffffffffffffffffffffff92909216919091179055565b60086020526000908152604090205481565b600a5473ffffffffffffffffffffffffffffffffffffffff1681565b60025490565b60065473ffffffffffffffffffffffffffffffffffffffff1681565b3390565b73ffffffffffffffffffffffffffffffffffffffff8116612fc557604080517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601560248201527f4f41584445583a20496e76616c69642061646d696e0000000000000000000000604482015290519081900360640190fd5b600a80547fffffffffffffffffffffffff00000000000000000000000000000000000000001673ffffffffffffffffffffffffffffffffffffffff831617908190556040805160609290921b7fffffffffffffffffffffffffffffffffffffffff000000000000000000000000168252517f61646d696e000000000000000000000000000000000000000000000000000000917f22ea5a9dcc7fb5bc447fcb472061adc51caa147724a67a6695d49a9dff162509916020918190039190910190a250565b73ffffffffffffffffffffffffffffffffffffffff81166000908152600d60205260409020548015158061310157508173ffffffffffffffffffffffffffffffffffffffff16600e6000815481106130dd57fe5b60009182526020909120015473ffffffffffffffffffffffffffffffffffffffff16145b613156576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401808060200182810382526026815260200180613cf26026913960400191505060405180910390fd5b600e547fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff0181101561327257600e80547fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff81019081106131b257fe5b600091825260209091200154600e805473ffffffffffffffffffffffffffffffffffffffff90921691839081106131e557fe5b9060005260206000200160006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555080600d6000600e848154811061323f57fe5b600091825260208083209091015473ffffffffffffffffffffffffffffffffffffffff1683528201929092526040019020555b73ffffffffffffffffffffffffffffffffffffffff82166000908152600d6020526040812055600e8054806132a357fe5b60008281526020902081017fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff90810180547fffffffffffffffffffffffff00000000000000000000000000000000000000001690550190555050565b60008282018381101561337357604080517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601b60248201527f536166654d6174683a206164646974696f6e206f766572666c6f770000000000604482015290519081900360640190fd5b9392505050565b600061337383836040518060400160405280601e81526020017f536166654d6174683a207375627472616374696f6e206f766572666c6f770000815250613b80565b60005b600e54811015611eb157600e81815481106133d657fe5b6000918252602082200154604080517f17e42ec000000000000000000000000000000000000000000000000000000000815273ffffffffffffffffffffffffffffffffffffffff8681166004830152915191909216926317e42ec0926024808201939182900301818387803b15801561344e57600080fd5b505af1158015613462573d6000803e3d6000fd5b5050600190920191506133bf9050565b6040805173ffffffffffffffffffffffffffffffffffffffff8481166024830152604480830185905283518084039091018152606490920183526020820180517bffffffffffffffffffffffffffffffffffffffffffffffffffffffff167fa9059cbb00000000000000000000000000000000000000000000000000000000178152925182516000946060949389169392918291908083835b6020831061354857805182527fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe0909201916020918201910161350b565b6001836020036101000a0380198251168184511680821785525050505050509050019150506000604051808303816000865af19150503d80600081146135aa576040519150601f19603f3d011682016040523d82523d6000602084013e6135af565b606091505b50915091508180156135dd5750805115806135dd57508080602001905160208110156135da57600080fd5b50515b61364857604080517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601f60248201527f5472616e7366657248656c7065723a205452414e534645525f4641494c454400604482015290519081900360640190fd5b5050505050565b73ffffffffffffffffffffffffffffffffffffffff82166136d157604080517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601860248201527f4f41584445583a20496e76616c6964206578656375746f720000000000000000604482015290519081900360640190fd5b6007541580613735575073ffffffffffffffffffffffffffffffffffffffff821660008181526008602052604090205460078054909190811061371057fe5b60009182526020909120015473ffffffffffffffffffffffffffffffffffffffff1614155b156137c0576007805473ffffffffffffffffffffffffffffffffffffffff84166000818152600860205260408120839055600183018455929092527fa66cc928b5edb82af9bd49922954155ab7b0942694bea4ce44661d9a8736c6880180547fffffffffffffffffffffffff000000000000000000000000000000000000000016909117905561383b565b73ffffffffffffffffffffffffffffffffffffffff821660009081526008602052604090205461383b576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401808060200182810382526022815260200180613c326022913960400191505060405180910390fd5b73ffffffffffffffffffffffffffffffffffffffff8216600090815260096020526040902080547fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff00168215151790557f410bdf2fedecd51e396bd4e5ca41880366c00ff01f4df34d7cc46faef60eb706606083901b7fffffffffffffffffffffffffffffffffffffffff00000000000000000000000016826138de5760006138e1565b60015b604080517f766f74696e674578656375746f720000000000000000000000000000000000008152602081019390935260ff9190911682820152519081900360600190a15050565b6040805173ffffffffffffffffffffffffffffffffffffffff85811660248301528481166044830152606480830185905283518084039091018152608490920183526020820180517bffffffffffffffffffffffffffffffffffffffffffffffffffffffff167f23b872dd0000000000000000000000000000000000000000000000000000000017815292518251600094606094938a169392918291908083835b60208310613a0657805182527fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe090920191602091820191016139c9565b6001836020036101000a0380198251168184511680821785525050505050509050019150506000604051808303816000865af19150503d8060008114613a68576040519150601f19603f3d011682016040523d82523d6000602084013e613a6d565b606091505b5091509150818015613a9b575080511580613a9b5750808060200190516020811015613a9857600080fd5b50515b613af0576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401808060200182810382526024815260200180613d646024913960400191505060405180910390fd5b505050505050565b33600090815260046020526040902054613b18908263ffffffff6132ff16565b33600090815260046020526040902055600554613b3b908263ffffffff6132ff16565b600555613b47336133bc565b60408051828152905133917febedb8b3c678666e7f36970bc8f57abf6d8fa2e828c0da91ea5b75bf68ed101a919081900360200190a250565b60008184841115613c29576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004018080602001828103825283818151815260200191508051906020019080838360005b83811015613bee578181015183820152602001613bd6565b50505050905090810190601f168015613c1b5780820380516001836020036101000a031916815260200191505b509250505060405180910390fd5b50505090039056fe4f41584445583a2063616e6e6f74207265736574206d61696e206578656375746f724f776e61626c653a206e6577206f776e657220697320746865207a65726f2061646472657373476f7665726e616e63653a20566f74696e6720636f6e747261637420616c726561647920657869737473476f7665726e616e63653a20756e6c6f636b2076616c756520657863656564206c6f636b65642066756e64476f7665726e616e63653a204e6f742066726f6d20766f74696e675265676973747279476f7665726e616e63653a20566f74696e6720636f6e7472616374206e6f74206578697374734f41584445583a20496e76616c6964206d696e4f6178546f6b656e546f437265617465566f7465476f7665726e616e63653a20467265657a656420706572696f64206e6f74207061737365645472616e7366657248656c7065723a205452414e534645525f46524f4d5f4641494c4544476f7665726e616e63653a20496e76616c696420766f74696e672061646472657373a2646970667358221220d90ff00ac71282603f5116370920486c8e7c1a711eb10243fa7404f7a062fe2864736f6c634300060b00334f41584445583a20417267756d656e74206c656e67746873206e6f74206d617463686564"
    };
});
define("@scom/scom-swap/contracts/oswap-openswap-contract/contracts/gov/OAXDEX_Governance.ts", ["require", "exports", "@ijstech/eth-contract", "@scom/scom-swap/contracts/oswap-openswap-contract/contracts/gov/OAXDEX_Governance.json.ts"], function (require, exports, eth_contract_12, OAXDEX_Governance_json_1) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.OAXDEX_Governance = void 0;
    class OAXDEX_Governance extends eth_contract_12.Contract {
        constructor(wallet, address) {
            super(wallet, address, OAXDEX_Governance_json_1.default.abi, OAXDEX_Governance_json_1.default.bytecode);
            this.assign();
        }
        deploy(params, options) {
            return this.__deploy([params.oaxToken, params.votingToken, this.wallet.utils.stringToBytes32(params.names), this.wallet.utils.toString(params.minExeDelay), this.wallet.utils.toString(params.minVoteDuration), this.wallet.utils.toString(params.maxVoteDuration), this.wallet.utils.toString(params.minOaxTokenToCreateVote), this.wallet.utils.toString(params.minQuorum), this.wallet.utils.toString(params.minStakePeriod)], options);
        }
        parseAddVotingConfigEvent(receipt) {
            return this.parseEvents(receipt, "AddVotingConfig").map(e => this.decodeAddVotingConfigEvent(e));
        }
        decodeAddVotingConfigEvent(event) {
            let result = event.data;
            return {
                name: result.name,
                minExeDelay: new eth_contract_12.BigNumber(result.minExeDelay),
                minVoteDuration: new eth_contract_12.BigNumber(result.minVoteDuration),
                maxVoteDuration: new eth_contract_12.BigNumber(result.maxVoteDuration),
                minOaxTokenToCreateVote: new eth_contract_12.BigNumber(result.minOaxTokenToCreateVote),
                minQuorum: new eth_contract_12.BigNumber(result.minQuorum),
                _event: event
            };
        }
        parseExecutedEvent(receipt) {
            return this.parseEvents(receipt, "Executed").map(e => this.decodeExecutedEvent(e));
        }
        decodeExecutedEvent(event) {
            let result = event.data;
            return {
                vote: result.vote,
                _event: event
            };
        }
        parseNewPollEvent(receipt) {
            return this.parseEvents(receipt, "NewPoll").map(e => this.decodeNewPollEvent(e));
        }
        decodeNewPollEvent(event) {
            let result = event.data;
            return {
                poll: result.poll,
                _event: event
            };
        }
        parseNewVoteEvent(receipt) {
            return this.parseEvents(receipt, "NewVote").map(e => this.decodeNewVoteEvent(e));
        }
        decodeNewVoteEvent(event) {
            let result = event.data;
            return {
                vote: result.vote,
                _event: event
            };
        }
        parseOwnershipTransferredEvent(receipt) {
            return this.parseEvents(receipt, "OwnershipTransferred").map(e => this.decodeOwnershipTransferredEvent(e));
        }
        decodeOwnershipTransferredEvent(event) {
            let result = event.data;
            return {
                previousOwner: result.previousOwner,
                newOwner: result.newOwner,
                _event: event
            };
        }
        parseParamSetEvent(receipt) {
            return this.parseEvents(receipt, "ParamSet").map(e => this.decodeParamSetEvent(e));
        }
        decodeParamSetEvent(event) {
            let result = event.data;
            return {
                name: result.name,
                value: result.value,
                _event: event
            };
        }
        parseParamSet2Event(receipt) {
            return this.parseEvents(receipt, "ParamSet2").map(e => this.decodeParamSet2Event(e));
        }
        decodeParamSet2Event(event) {
            let result = event.data;
            return {
                name: result.name,
                value1: result.value1,
                value2: result.value2,
                _event: event
            };
        }
        parsePollEvent(receipt) {
            return this.parseEvents(receipt, "Poll").map(e => this.decodePollEvent(e));
        }
        decodePollEvent(event) {
            let result = event.data;
            return {
                account: result.account,
                poll: result.poll,
                option: new eth_contract_12.BigNumber(result.option),
                _event: event
            };
        }
        parseSetVotingConfigEvent(receipt) {
            return this.parseEvents(receipt, "SetVotingConfig").map(e => this.decodeSetVotingConfigEvent(e));
        }
        decodeSetVotingConfigEvent(event) {
            let result = event.data;
            return {
                configName: result.configName,
                paramName: result.paramName,
                minExeDelay: new eth_contract_12.BigNumber(result.minExeDelay),
                _event: event
            };
        }
        parseStakeEvent(receipt) {
            return this.parseEvents(receipt, "Stake").map(e => this.decodeStakeEvent(e));
        }
        decodeStakeEvent(event) {
            let result = event.data;
            return {
                who: result.who,
                value: new eth_contract_12.BigNumber(result.value),
                _event: event
            };
        }
        parseUnstakeEvent(receipt) {
            return this.parseEvents(receipt, "Unstake").map(e => this.decodeUnstakeEvent(e));
        }
        decodeUnstakeEvent(event) {
            let result = event.data;
            return {
                who: result.who,
                value: new eth_contract_12.BigNumber(result.value),
                _event: event
            };
        }
        parseVetoEvent(receipt) {
            return this.parseEvents(receipt, "Veto").map(e => this.decodeVetoEvent(e));
        }
        decodeVetoEvent(event) {
            let result = event.data;
            return {
                vote: result.vote,
                _event: event
            };
        }
        parseVoteEvent(receipt) {
            return this.parseEvents(receipt, "Vote").map(e => this.decodeVoteEvent(e));
        }
        decodeVoteEvent(event) {
            let result = event.data;
            return {
                account: result.account,
                vote: result.vote,
                option: new eth_contract_12.BigNumber(result.option),
                _event: event
            };
        }
        assign() {
            let admin_call = async (options) => {
                let result = await this.call('admin', [], options);
                return result;
            };
            this.admin = admin_call;
            let allVotings_call = async (options) => {
                let result = await this.call('allVotings', [], options);
                return result;
            };
            this.allVotings = allVotings_call;
            let freezedStake_call = async (param1, options) => {
                let result = await this.call('freezedStake', [param1], options);
                return {
                    amount: new eth_contract_12.BigNumber(result.amount),
                    timestamp: new eth_contract_12.BigNumber(result.timestamp)
                };
            };
            this.freezedStake = freezedStake_call;
            let getVotingConfigProfilesParams = (params) => [this.wallet.utils.toString(params.start), this.wallet.utils.toString(params.length)];
            let getVotingConfigProfiles_call = async (params, options) => {
                let result = await this.call('getVotingConfigProfiles', getVotingConfigProfilesParams(params), options);
                return result;
            };
            this.getVotingConfigProfiles = getVotingConfigProfiles_call;
            let getVotingCount_call = async (options) => {
                let result = await this.call('getVotingCount', [], options);
                return new eth_contract_12.BigNumber(result);
            };
            this.getVotingCount = getVotingCount_call;
            let getVotingParams_call = async (name, options) => {
                let result = await this.call('getVotingParams', [this.wallet.utils.stringToBytes32(name)], options);
                return {
                    _minExeDelay: new eth_contract_12.BigNumber(result._minExeDelay),
                    _minVoteDuration: new eth_contract_12.BigNumber(result._minVoteDuration),
                    _maxVoteDuration: new eth_contract_12.BigNumber(result._maxVoteDuration),
                    _minOaxTokenToCreateVote: new eth_contract_12.BigNumber(result._minOaxTokenToCreateVote),
                    _minQuorum: new eth_contract_12.BigNumber(result._minQuorum)
                };
            };
            this.getVotingParams = getVotingParams_call;
            let getVotingsParams = (params) => [this.wallet.utils.toString(params.start), this.wallet.utils.toString(params.count)];
            let getVotings_call = async (params, options) => {
                let result = await this.call('getVotings', getVotingsParams(params), options);
                return result;
            };
            this.getVotings = getVotings_call;
            let isVotingContract_call = async (votingContract, options) => {
                let result = await this.call('isVotingContract', [votingContract], options);
                return result;
            };
            this.isVotingContract = isVotingContract_call;
            let isVotingExecutor_call = async (param1, options) => {
                let result = await this.call('isVotingExecutor', [param1], options);
                return result;
            };
            this.isVotingExecutor = isVotingExecutor_call;
            let minStakePeriod_call = async (options) => {
                let result = await this.call('minStakePeriod', [], options);
                return new eth_contract_12.BigNumber(result);
            };
            this.minStakePeriod = minStakePeriod_call;
            let oaxToken_call = async (options) => {
                let result = await this.call('oaxToken', [], options);
                return result;
            };
            this.oaxToken = oaxToken_call;
            let owner_call = async (options) => {
                let result = await this.call('owner', [], options);
                return result;
            };
            this.owner = owner_call;
            let stakeOf_call = async (param1, options) => {
                let result = await this.call('stakeOf', [param1], options);
                return new eth_contract_12.BigNumber(result);
            };
            this.stakeOf = stakeOf_call;
            let totalStake_call = async (options) => {
                let result = await this.call('totalStake', [], options);
                return new eth_contract_12.BigNumber(result);
            };
            this.totalStake = totalStake_call;
            let voteCount_call = async (options) => {
                let result = await this.call('voteCount', [], options);
                return new eth_contract_12.BigNumber(result);
            };
            this.voteCount = voteCount_call;
            let votingConfigProfiles_call = async (param1, options) => {
                let result = await this.call('votingConfigProfiles', [this.wallet.utils.toString(param1)], options);
                return result;
            };
            this.votingConfigProfiles = votingConfigProfiles_call;
            let votingConfigProfilesLength_call = async (options) => {
                let result = await this.call('votingConfigProfilesLength', [], options);
                return new eth_contract_12.BigNumber(result);
            };
            this.votingConfigProfilesLength = votingConfigProfilesLength_call;
            let votingConfigs_call = async (param1, options) => {
                let result = await this.call('votingConfigs', [this.wallet.utils.stringToBytes32(param1)], options);
                return {
                    minExeDelay: new eth_contract_12.BigNumber(result.minExeDelay),
                    minVoteDuration: new eth_contract_12.BigNumber(result.minVoteDuration),
                    maxVoteDuration: new eth_contract_12.BigNumber(result.maxVoteDuration),
                    minOaxTokenToCreateVote: new eth_contract_12.BigNumber(result.minOaxTokenToCreateVote),
                    minQuorum: new eth_contract_12.BigNumber(result.minQuorum)
                };
            };
            this.votingConfigs = votingConfigs_call;
            let votingExecutor_call = async (param1, options) => {
                let result = await this.call('votingExecutor', [this.wallet.utils.toString(param1)], options);
                return result;
            };
            this.votingExecutor = votingExecutor_call;
            let votingExecutorInv_call = async (param1, options) => {
                let result = await this.call('votingExecutorInv', [param1], options);
                return new eth_contract_12.BigNumber(result);
            };
            this.votingExecutorInv = votingExecutorInv_call;
            let votingExecutorLength_call = async (options) => {
                let result = await this.call('votingExecutorLength', [], options);
                return new eth_contract_12.BigNumber(result);
            };
            this.votingExecutorLength = votingExecutorLength_call;
            let votingIdx_call = async (param1, options) => {
                let result = await this.call('votingIdx', [param1], options);
                return new eth_contract_12.BigNumber(result);
            };
            this.votingIdx = votingIdx_call;
            let votingRegister_call = async (options) => {
                let result = await this.call('votingRegister', [], options);
                return result;
            };
            this.votingRegister = votingRegister_call;
            let votingToken_call = async (options) => {
                let result = await this.call('votingToken', [], options);
                return result;
            };
            this.votingToken = votingToken_call;
            let votings_call = async (param1, options) => {
                let result = await this.call('votings', [this.wallet.utils.toString(param1)], options);
                return result;
            };
            this.votings = votings_call;
            let addVotingConfigParams = (params) => [this.wallet.utils.stringToBytes32(params.name), this.wallet.utils.toString(params.minExeDelay), this.wallet.utils.toString(params.minVoteDuration), this.wallet.utils.toString(params.maxVoteDuration), this.wallet.utils.toString(params.minOaxTokenToCreateVote), this.wallet.utils.toString(params.minQuorum)];
            let addVotingConfig_send = async (params, options) => {
                let result = await this.send('addVotingConfig', addVotingConfigParams(params), options);
                return result;
            };
            let addVotingConfig_call = async (params, options) => {
                let result = await this.call('addVotingConfig', addVotingConfigParams(params), options);
                return;
            };
            let addVotingConfig_txData = async (params, options) => {
                let result = await this.txData('addVotingConfig', addVotingConfigParams(params), options);
                return result;
            };
            this.addVotingConfig = Object.assign(addVotingConfig_send, {
                call: addVotingConfig_call,
                txData: addVotingConfig_txData
            });
            let closeVote_send = async (vote, options) => {
                let result = await this.send('closeVote', [vote], options);
                return result;
            };
            let closeVote_call = async (vote, options) => {
                let result = await this.call('closeVote', [vote], options);
                return;
            };
            let closeVote_txData = async (vote, options) => {
                let result = await this.txData('closeVote', [vote], options);
                return result;
            };
            this.closeVote = Object.assign(closeVote_send, {
                call: closeVote_call,
                txData: closeVote_txData
            });
            let executed_send = async (options) => {
                let result = await this.send('executed', [], options);
                return result;
            };
            let executed_call = async (options) => {
                let result = await this.call('executed', [], options);
                return;
            };
            let executed_txData = async (options) => {
                let result = await this.txData('executed', [], options);
                return result;
            };
            this.executed = Object.assign(executed_send, {
                call: executed_call,
                txData: executed_txData
            });
            let getNewVoteId_send = async (options) => {
                let result = await this.send('getNewVoteId', [], options);
                return result;
            };
            let getNewVoteId_call = async (options) => {
                let result = await this.call('getNewVoteId', [], options);
                return new eth_contract_12.BigNumber(result);
            };
            let getNewVoteId_txData = async (options) => {
                let result = await this.txData('getNewVoteId', [], options);
                return result;
            };
            this.getNewVoteId = Object.assign(getNewVoteId_send, {
                call: getNewVoteId_call,
                txData: getNewVoteId_txData
            });
            let initAdmin_send = async (admin, options) => {
                let result = await this.send('initAdmin', [admin], options);
                return result;
            };
            let initAdmin_call = async (admin, options) => {
                let result = await this.call('initAdmin', [admin], options);
                return;
            };
            let initAdmin_txData = async (admin, options) => {
                let result = await this.txData('initAdmin', [admin], options);
                return result;
            };
            this.initAdmin = Object.assign(initAdmin_send, {
                call: initAdmin_call,
                txData: initAdmin_txData
            });
            let initVotingExecutor_send = async (votingExecutor, options) => {
                let result = await this.send('initVotingExecutor', [votingExecutor], options);
                return result;
            };
            let initVotingExecutor_call = async (votingExecutor, options) => {
                let result = await this.call('initVotingExecutor', [votingExecutor], options);
                return;
            };
            let initVotingExecutor_txData = async (votingExecutor, options) => {
                let result = await this.txData('initVotingExecutor', [votingExecutor], options);
                return result;
            };
            this.initVotingExecutor = Object.assign(initVotingExecutor_send, {
                call: initVotingExecutor_call,
                txData: initVotingExecutor_txData
            });
            let newVoteParams = (params) => [params.vote, params.isExecutiveVote];
            let newVote_send = async (params, options) => {
                let result = await this.send('newVote', newVoteParams(params), options);
                return result;
            };
            let newVote_call = async (params, options) => {
                let result = await this.call('newVote', newVoteParams(params), options);
                return;
            };
            let newVote_txData = async (params, options) => {
                let result = await this.txData('newVote', newVoteParams(params), options);
                return result;
            };
            this.newVote = Object.assign(newVote_send, {
                call: newVote_call,
                txData: newVote_txData
            });
            let renounceOwnership_send = async (options) => {
                let result = await this.send('renounceOwnership', [], options);
                return result;
            };
            let renounceOwnership_call = async (options) => {
                let result = await this.call('renounceOwnership', [], options);
                return;
            };
            let renounceOwnership_txData = async (options) => {
                let result = await this.txData('renounceOwnership', [], options);
                return result;
            };
            this.renounceOwnership = Object.assign(renounceOwnership_send, {
                call: renounceOwnership_call,
                txData: renounceOwnership_txData
            });
            let setAdmin_send = async (admin, options) => {
                let result = await this.send('setAdmin', [admin], options);
                return result;
            };
            let setAdmin_call = async (admin, options) => {
                let result = await this.call('setAdmin', [admin], options);
                return;
            };
            let setAdmin_txData = async (admin, options) => {
                let result = await this.txData('setAdmin', [admin], options);
                return result;
            };
            this.setAdmin = Object.assign(setAdmin_send, {
                call: setAdmin_call,
                txData: setAdmin_txData
            });
            let setMinStakePeriod_send = async (minStakePeriod, options) => {
                let result = await this.send('setMinStakePeriod', [this.wallet.utils.toString(minStakePeriod)], options);
                return result;
            };
            let setMinStakePeriod_call = async (minStakePeriod, options) => {
                let result = await this.call('setMinStakePeriod', [this.wallet.utils.toString(minStakePeriod)], options);
                return;
            };
            let setMinStakePeriod_txData = async (minStakePeriod, options) => {
                let result = await this.txData('setMinStakePeriod', [this.wallet.utils.toString(minStakePeriod)], options);
                return result;
            };
            this.setMinStakePeriod = Object.assign(setMinStakePeriod_send, {
                call: setMinStakePeriod_call,
                txData: setMinStakePeriod_txData
            });
            let setVotingConfigParams = (params) => [this.wallet.utils.stringToBytes32(params.configName), this.wallet.utils.stringToBytes32(params.paramName), this.wallet.utils.toString(params.paramValue)];
            let setVotingConfig_send = async (params, options) => {
                let result = await this.send('setVotingConfig', setVotingConfigParams(params), options);
                return result;
            };
            let setVotingConfig_call = async (params, options) => {
                let result = await this.call('setVotingConfig', setVotingConfigParams(params), options);
                return;
            };
            let setVotingConfig_txData = async (params, options) => {
                let result = await this.txData('setVotingConfig', setVotingConfigParams(params), options);
                return result;
            };
            this.setVotingConfig = Object.assign(setVotingConfig_send, {
                call: setVotingConfig_call,
                txData: setVotingConfig_txData
            });
            let setVotingExecutorParams = (params) => [params.votingExecutor, params.bool];
            let setVotingExecutor_send = async (params, options) => {
                let result = await this.send('setVotingExecutor', setVotingExecutorParams(params), options);
                return result;
            };
            let setVotingExecutor_call = async (params, options) => {
                let result = await this.call('setVotingExecutor', setVotingExecutorParams(params), options);
                return;
            };
            let setVotingExecutor_txData = async (params, options) => {
                let result = await this.txData('setVotingExecutor', setVotingExecutorParams(params), options);
                return result;
            };
            this.setVotingExecutor = Object.assign(setVotingExecutor_send, {
                call: setVotingExecutor_call,
                txData: setVotingExecutor_txData
            });
            let setVotingRegister_send = async (votingRegister, options) => {
                let result = await this.send('setVotingRegister', [votingRegister], options);
                return result;
            };
            let setVotingRegister_call = async (votingRegister, options) => {
                let result = await this.call('setVotingRegister', [votingRegister], options);
                return;
            };
            let setVotingRegister_txData = async (votingRegister, options) => {
                let result = await this.txData('setVotingRegister', [votingRegister], options);
                return result;
            };
            this.setVotingRegister = Object.assign(setVotingRegister_send, {
                call: setVotingRegister_call,
                txData: setVotingRegister_txData
            });
            let stake_send = async (value, options) => {
                let result = await this.send('stake', [this.wallet.utils.toString(value)], options);
                return result;
            };
            let stake_call = async (value, options) => {
                let result = await this.call('stake', [this.wallet.utils.toString(value)], options);
                return;
            };
            let stake_txData = async (value, options) => {
                let result = await this.txData('stake', [this.wallet.utils.toString(value)], options);
                return result;
            };
            this.stake = Object.assign(stake_send, {
                call: stake_call,
                txData: stake_txData
            });
            let transferOwnership_send = async (newOwner, options) => {
                let result = await this.send('transferOwnership', [newOwner], options);
                return result;
            };
            let transferOwnership_call = async (newOwner, options) => {
                let result = await this.call('transferOwnership', [newOwner], options);
                return;
            };
            let transferOwnership_txData = async (newOwner, options) => {
                let result = await this.txData('transferOwnership', [newOwner], options);
                return result;
            };
            this.transferOwnership = Object.assign(transferOwnership_send, {
                call: transferOwnership_call,
                txData: transferOwnership_txData
            });
            let unlockStake_send = async (options) => {
                let result = await this.send('unlockStake', [], options);
                return result;
            };
            let unlockStake_call = async (options) => {
                let result = await this.call('unlockStake', [], options);
                return;
            };
            let unlockStake_txData = async (options) => {
                let result = await this.txData('unlockStake', [], options);
                return result;
            };
            this.unlockStake = Object.assign(unlockStake_send, {
                call: unlockStake_call,
                txData: unlockStake_txData
            });
            let unstake_send = async (value, options) => {
                let result = await this.send('unstake', [this.wallet.utils.toString(value)], options);
                return result;
            };
            let unstake_call = async (value, options) => {
                let result = await this.call('unstake', [this.wallet.utils.toString(value)], options);
                return;
            };
            let unstake_txData = async (value, options) => {
                let result = await this.txData('unstake', [this.wallet.utils.toString(value)], options);
                return result;
            };
            this.unstake = Object.assign(unstake_send, {
                call: unstake_call,
                txData: unstake_txData
            });
            let veto_send = async (voting, options) => {
                let result = await this.send('veto', [voting], options);
                return result;
            };
            let veto_call = async (voting, options) => {
                let result = await this.call('veto', [voting], options);
                return;
            };
            let veto_txData = async (voting, options) => {
                let result = await this.txData('veto', [voting], options);
                return result;
            };
            this.veto = Object.assign(veto_send, {
                call: veto_call,
                txData: veto_txData
            });
            let votedParams = (params) => [params.poll, params.account, this.wallet.utils.toString(params.option)];
            let voted_send = async (params, options) => {
                let result = await this.send('voted', votedParams(params), options);
                return result;
            };
            let voted_call = async (params, options) => {
                let result = await this.call('voted', votedParams(params), options);
                return;
            };
            let voted_txData = async (params, options) => {
                let result = await this.txData('voted', votedParams(params), options);
                return result;
            };
            this.voted = Object.assign(voted_send, {
                call: voted_call,
                txData: voted_txData
            });
        }
    }
    OAXDEX_Governance._abi = OAXDEX_Governance_json_1.default.abi;
    exports.OAXDEX_Governance = OAXDEX_Governance;
});
define("@scom/scom-swap/contracts/oswap-openswap-contract/contracts/gov/OAXDEX_VotingContract.json.ts", ["require", "exports"], function (require, exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    ///<amd-module name='@scom/scom-swap/contracts/oswap-openswap-contract/contracts/gov/OAXDEX_VotingContract.json.ts'/> 
    exports.default = {
        "abi": [
            { "inputs": [{ "internalType": "address", "name": "governance_", "type": "address" }, { "internalType": "address", "name": "executor_", "type": "address" }, { "internalType": "uint256", "name": "id_", "type": "uint256" }, { "internalType": "bytes32", "name": "name_", "type": "bytes32" }, { "internalType": "bytes32[]", "name": "options_", "type": "bytes32[]" }, { "internalType": "uint256", "name": "quorum_", "type": "uint256" }, { "internalType": "uint256", "name": "threshold_", "type": "uint256" }, { "internalType": "uint256", "name": "voteEndTime_", "type": "uint256" }, { "internalType": "uint256", "name": "executeDelay_", "type": "uint256" }, { "internalType": "bytes32[]", "name": "executeParam_", "type": "bytes32[]" }], "stateMutability": "nonpayable", "type": "constructor" },
            { "inputs": [{ "internalType": "uint256", "name": "", "type": "uint256" }], "name": "_executeParam", "outputs": [{ "internalType": "bytes32", "name": "", "type": "bytes32" }], "stateMutability": "view", "type": "function" },
            { "inputs": [{ "internalType": "uint256", "name": "", "type": "uint256" }], "name": "_options", "outputs": [{ "internalType": "bytes32", "name": "", "type": "bytes32" }], "stateMutability": "view", "type": "function" },
            { "inputs": [{ "internalType": "uint256", "name": "", "type": "uint256" }], "name": "_optionsWeight", "outputs": [{ "internalType": "uint256", "name": "", "type": "uint256" }], "stateMutability": "view", "type": "function" },
            { "inputs": [{ "internalType": "address", "name": "", "type": "address" }], "name": "accountVoteOption", "outputs": [{ "internalType": "uint256", "name": "", "type": "uint256" }], "stateMutability": "view", "type": "function" },
            { "inputs": [{ "internalType": "address", "name": "", "type": "address" }], "name": "accountVoteWeight", "outputs": [{ "internalType": "uint256", "name": "", "type": "uint256" }], "stateMutability": "view", "type": "function" },
            { "inputs": [], "name": "execute", "outputs": [], "stateMutability": "nonpayable", "type": "function" },
            { "inputs": [], "name": "executeDelay", "outputs": [{ "internalType": "uint256", "name": "", "type": "uint256" }], "stateMutability": "view", "type": "function" },
            { "inputs": [], "name": "executeParam", "outputs": [{ "internalType": "bytes32[]", "name": "", "type": "bytes32[]" }], "stateMutability": "view", "type": "function" },
            { "inputs": [], "name": "executed", "outputs": [{ "internalType": "bool", "name": "", "type": "bool" }], "stateMutability": "view", "type": "function" },
            { "inputs": [], "name": "executor", "outputs": [{ "internalType": "address", "name": "", "type": "address" }], "stateMutability": "view", "type": "function" },
            { "inputs": [], "name": "getParams", "outputs": [{ "internalType": "address", "name": "executor_", "type": "address" }, { "internalType": "uint256", "name": "id_", "type": "uint256" }, { "internalType": "bytes32", "name": "name_", "type": "bytes32" }, { "internalType": "bytes32[]", "name": "options_", "type": "bytes32[]" }, { "internalType": "uint256", "name": "voteStartTime_", "type": "uint256" }, { "internalType": "uint256", "name": "voteEndTime_", "type": "uint256" }, { "internalType": "uint256", "name": "executeDelay_", "type": "uint256" }, { "internalType": "bool[2]", "name": "status_", "type": "bool[2]" }, { "internalType": "uint256[]", "name": "optionsWeight_", "type": "uint256[]" }, { "internalType": "uint256[3]", "name": "quorum_", "type": "uint256[3]" }, { "internalType": "bytes32[]", "name": "executeParam_", "type": "bytes32[]" }], "stateMutability": "view", "type": "function" },
            { "inputs": [], "name": "governance", "outputs": [{ "internalType": "address", "name": "", "type": "address" }], "stateMutability": "view", "type": "function" },
            { "inputs": [], "name": "id", "outputs": [{ "internalType": "uint256", "name": "", "type": "uint256" }], "stateMutability": "view", "type": "function" },
            { "inputs": [], "name": "name", "outputs": [{ "internalType": "bytes32", "name": "", "type": "bytes32" }], "stateMutability": "view", "type": "function" },
            { "inputs": [], "name": "options", "outputs": [{ "internalType": "bytes32[]", "name": "", "type": "bytes32[]" }], "stateMutability": "view", "type": "function" },
            { "inputs": [], "name": "optionsCount", "outputs": [{ "internalType": "uint256", "name": "", "type": "uint256" }], "stateMutability": "view", "type": "function" },
            { "inputs": [], "name": "optionsWeight", "outputs": [{ "internalType": "uint256[]", "name": "", "type": "uint256[]" }], "stateMutability": "view", "type": "function" },
            { "inputs": [], "name": "quorum", "outputs": [{ "internalType": "uint256", "name": "", "type": "uint256" }], "stateMutability": "view", "type": "function" },
            { "inputs": [], "name": "threshold", "outputs": [{ "internalType": "uint256", "name": "", "type": "uint256" }], "stateMutability": "view", "type": "function" },
            { "inputs": [], "name": "totalVoteWeight", "outputs": [{ "internalType": "uint256", "name": "", "type": "uint256" }], "stateMutability": "view", "type": "function" },
            { "inputs": [], "name": "totalWeight", "outputs": [{ "internalType": "uint256", "name": "", "type": "uint256" }], "stateMutability": "view", "type": "function" },
            { "inputs": [{ "internalType": "address", "name": "account", "type": "address" }], "name": "updateWeight", "outputs": [], "stateMutability": "nonpayable", "type": "function" },
            { "inputs": [], "name": "veto", "outputs": [], "stateMutability": "nonpayable", "type": "function" },
            { "inputs": [], "name": "vetoed", "outputs": [{ "internalType": "bool", "name": "", "type": "bool" }], "stateMutability": "view", "type": "function" },
            { "inputs": [{ "internalType": "uint256", "name": "option", "type": "uint256" }], "name": "vote", "outputs": [], "stateMutability": "nonpayable", "type": "function" },
            { "inputs": [], "name": "voteEndTime", "outputs": [{ "internalType": "uint256", "name": "", "type": "uint256" }], "stateMutability": "view", "type": "function" },
            { "inputs": [], "name": "voteStartTime", "outputs": [{ "internalType": "uint256", "name": "", "type": "uint256" }], "stateMutability": "view", "type": "function" }
        ],
        "bytecode": ""
    };
});
define("@scom/scom-swap/contracts/oswap-openswap-contract/contracts/gov/OAXDEX_VotingContract.ts", ["require", "exports", "@ijstech/eth-contract", "@scom/scom-swap/contracts/oswap-openswap-contract/contracts/gov/OAXDEX_VotingContract.json.ts"], function (require, exports, eth_contract_13, OAXDEX_VotingContract_json_1) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.OAXDEX_VotingContract = void 0;
    class OAXDEX_VotingContract extends eth_contract_13.Contract {
        constructor(wallet, address) {
            super(wallet, address, OAXDEX_VotingContract_json_1.default.abi, OAXDEX_VotingContract_json_1.default.bytecode);
            this.assign();
        }
        deploy(params, options) {
            return this.__deploy([params.governance, params.executor, this.wallet.utils.toString(params.id), this.wallet.utils.stringToBytes32(params.name), this.wallet.utils.stringToBytes32(params.options), this.wallet.utils.toString(params.quorum), this.wallet.utils.toString(params.threshold), this.wallet.utils.toString(params.voteEndTime), this.wallet.utils.toString(params.executeDelay), this.wallet.utils.stringToBytes32(params.executeParam)], options);
        }
        assign() {
            let _executeParam_call = async (param1, options) => {
                let result = await this.call('_executeParam', [this.wallet.utils.toString(param1)], options);
                return result;
            };
            this._executeParam = _executeParam_call;
            let _options_call = async (param1, options) => {
                let result = await this.call('_options', [this.wallet.utils.toString(param1)], options);
                return result;
            };
            this._options = _options_call;
            let _optionsWeight_call = async (param1, options) => {
                let result = await this.call('_optionsWeight', [this.wallet.utils.toString(param1)], options);
                return new eth_contract_13.BigNumber(result);
            };
            this._optionsWeight = _optionsWeight_call;
            let accountVoteOption_call = async (param1, options) => {
                let result = await this.call('accountVoteOption', [param1], options);
                return new eth_contract_13.BigNumber(result);
            };
            this.accountVoteOption = accountVoteOption_call;
            let accountVoteWeight_call = async (param1, options) => {
                let result = await this.call('accountVoteWeight', [param1], options);
                return new eth_contract_13.BigNumber(result);
            };
            this.accountVoteWeight = accountVoteWeight_call;
            let executeDelay_call = async (options) => {
                let result = await this.call('executeDelay', [], options);
                return new eth_contract_13.BigNumber(result);
            };
            this.executeDelay = executeDelay_call;
            let executeParam_call = async (options) => {
                let result = await this.call('executeParam', [], options);
                return result;
            };
            this.executeParam = executeParam_call;
            let executed_call = async (options) => {
                let result = await this.call('executed', [], options);
                return result;
            };
            this.executed = executed_call;
            let executor_call = async (options) => {
                let result = await this.call('executor', [], options);
                return result;
            };
            this.executor = executor_call;
            let getParams_call = async (options) => {
                let result = await this.call('getParams', [], options);
                return {
                    executor_: result.executor_,
                    id_: new eth_contract_13.BigNumber(result.id_),
                    name_: result.name_,
                    options_: result.options_,
                    voteStartTime_: new eth_contract_13.BigNumber(result.voteStartTime_),
                    voteEndTime_: new eth_contract_13.BigNumber(result.voteEndTime_),
                    executeDelay_: new eth_contract_13.BigNumber(result.executeDelay_),
                    status_: result.status_,
                    optionsWeight_: result.optionsWeight_.map(e => new eth_contract_13.BigNumber(e)),
                    quorum_: result.quorum_.map(e => new eth_contract_13.BigNumber(e)),
                    executeParam_: result.executeParam_
                };
            };
            this.getParams = getParams_call;
            let governance_call = async (options) => {
                let result = await this.call('governance', [], options);
                return result;
            };
            this.governance = governance_call;
            let id_call = async (options) => {
                let result = await this.call('id', [], options);
                return new eth_contract_13.BigNumber(result);
            };
            this.id = id_call;
            let name_call = async (options) => {
                let result = await this.call('name', [], options);
                return result;
            };
            this.name = name_call;
            let options_call = async (options) => {
                let result = await this.call('options', [], options);
                return result;
            };
            this.options = options_call;
            let optionsCount_call = async (options) => {
                let result = await this.call('optionsCount', [], options);
                return new eth_contract_13.BigNumber(result);
            };
            this.optionsCount = optionsCount_call;
            let optionsWeight_call = async (options) => {
                let result = await this.call('optionsWeight', [], options);
                return result.map(e => new eth_contract_13.BigNumber(e));
            };
            this.optionsWeight = optionsWeight_call;
            let quorum_call = async (options) => {
                let result = await this.call('quorum', [], options);
                return new eth_contract_13.BigNumber(result);
            };
            this.quorum = quorum_call;
            let threshold_call = async (options) => {
                let result = await this.call('threshold', [], options);
                return new eth_contract_13.BigNumber(result);
            };
            this.threshold = threshold_call;
            let totalVoteWeight_call = async (options) => {
                let result = await this.call('totalVoteWeight', [], options);
                return new eth_contract_13.BigNumber(result);
            };
            this.totalVoteWeight = totalVoteWeight_call;
            let totalWeight_call = async (options) => {
                let result = await this.call('totalWeight', [], options);
                return new eth_contract_13.BigNumber(result);
            };
            this.totalWeight = totalWeight_call;
            let vetoed_call = async (options) => {
                let result = await this.call('vetoed', [], options);
                return result;
            };
            this.vetoed = vetoed_call;
            let voteEndTime_call = async (options) => {
                let result = await this.call('voteEndTime', [], options);
                return new eth_contract_13.BigNumber(result);
            };
            this.voteEndTime = voteEndTime_call;
            let voteStartTime_call = async (options) => {
                let result = await this.call('voteStartTime', [], options);
                return new eth_contract_13.BigNumber(result);
            };
            this.voteStartTime = voteStartTime_call;
            let execute_send = async (options) => {
                let result = await this.send('execute', [], options);
                return result;
            };
            let execute_call = async (options) => {
                let result = await this.call('execute', [], options);
                return;
            };
            let execute_txData = async (options) => {
                let result = await this.txData('execute', [], options);
                return result;
            };
            this.execute = Object.assign(execute_send, {
                call: execute_call,
                txData: execute_txData
            });
            let updateWeight_send = async (account, options) => {
                let result = await this.send('updateWeight', [account], options);
                return result;
            };
            let updateWeight_call = async (account, options) => {
                let result = await this.call('updateWeight', [account], options);
                return;
            };
            let updateWeight_txData = async (account, options) => {
                let result = await this.txData('updateWeight', [account], options);
                return result;
            };
            this.updateWeight = Object.assign(updateWeight_send, {
                call: updateWeight_call,
                txData: updateWeight_txData
            });
            let veto_send = async (options) => {
                let result = await this.send('veto', [], options);
                return result;
            };
            let veto_call = async (options) => {
                let result = await this.call('veto', [], options);
                return;
            };
            let veto_txData = async (options) => {
                let result = await this.txData('veto', [], options);
                return result;
            };
            this.veto = Object.assign(veto_send, {
                call: veto_call,
                txData: veto_txData
            });
            let vote_send = async (option, options) => {
                let result = await this.send('vote', [this.wallet.utils.toString(option)], options);
                return result;
            };
            let vote_call = async (option, options) => {
                let result = await this.call('vote', [this.wallet.utils.toString(option)], options);
                return;
            };
            let vote_txData = async (option, options) => {
                let result = await this.txData('vote', [this.wallet.utils.toString(option)], options);
                return result;
            };
            this.vote = Object.assign(vote_send, {
                call: vote_call,
                txData: vote_txData
            });
        }
    }
    OAXDEX_VotingContract._abi = OAXDEX_VotingContract_json_1.default.abi;
    exports.OAXDEX_VotingContract = OAXDEX_VotingContract;
});
define("@scom/scom-swap/contracts/oswap-openswap-contract/contracts/gov/OAXDEX_VotingExecutor.json.ts", ["require", "exports"], function (require, exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    ///<amd-module name='@scom/scom-swap/contracts/oswap-openswap-contract/contracts/gov/OAXDEX_VotingExecutor.json.ts'/> 
    exports.default = {
        "abi": [
            { "inputs": [{ "internalType": "address", "name": "_governance", "type": "address" }, { "internalType": "address", "name": "_admin", "type": "address" }], "stateMutability": "nonpayable", "type": "constructor" },
            { "inputs": [], "name": "admin", "outputs": [{ "internalType": "address", "name": "", "type": "address" }], "stateMutability": "view", "type": "function" },
            { "inputs": [{ "internalType": "bytes32[]", "name": "params", "type": "bytes32[]" }], "name": "execute", "outputs": [], "stateMutability": "nonpayable", "type": "function" },
            { "inputs": [], "name": "governance", "outputs": [{ "internalType": "address", "name": "", "type": "address" }], "stateMutability": "view", "type": "function" }
        ],
        "bytecode": "608060405234801561001057600080fd5b50604051610a04380380610a048339818101604052604081101561003357600080fd5b508051602090910151600080546001600160a01b039384166001600160a01b0319918216179091556001805493909216921691909117905561098a8061007a6000396000f3fe608060405234801561001057600080fd5b50600436106100415760003560e01c80635aa6e675146100465780638af7c64914610077578063f851a440146100e9575b600080fd5b61004e6100f1565b6040805173ffffffffffffffffffffffffffffffffffffffff9092168252519081900360200190f35b6100e76004803603602081101561008d57600080fd5b8101906020810181356401000000008111156100a857600080fd5b8201836020820111156100ba57600080fd5b803590602001918460208302840111640100000000831117156100dc57600080fd5b50909250905061010d565b005b61004e6108c3565b60005473ffffffffffffffffffffffffffffffffffffffff1681565b600054604080517fb15866e6000000000000000000000000000000000000000000000000000000008152336004820152905173ffffffffffffffffffffffffffffffffffffffff9092169163b15866e691602480820192602092909190829003018186803b15801561017e57600080fd5b505afa158015610192573d6000803e3d6000fd5b505050506040513d60208110156101a857600080fd5b50516101ff576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004018080602001828103825260268152602001806108e06026913960400191505060405180910390fd5b60008282600081811061020e57fe5b90506020020135905060008383600181811061022657fe5b6020029190910135915050600483141561036357817f736574566f74696e67436f6e6669670000000000000000000000000000000000141561030d5760005473ffffffffffffffffffffffffffffffffffffffff1663d9c37086828686600281811061028e57fe5b90506020020135878760038181106102a257fe5b9050602002013560001c6040518463ffffffff1660e01b8152600401808481526020018381526020018281526020019350505050600060405180830381600087803b1580156102f057600080fd5b505af1158015610304573d6000803e3d6000fd5b5050505061035e565b6040517f08c379a000000000000000000000000000000000000000000000000000000000815260040180806020018281038252602681526020018061092f6026913960400191505060405180910390fd5b6108bd565b600283141561067257817f7365744d696e5374616b65506572696f6400000000000000000000000000000014156104025760008054604080517f499b86d800000000000000000000000000000000000000000000000000000000815260048101859052905173ffffffffffffffffffffffffffffffffffffffff9092169263499b86d89260248084019382900301818387803b1580156102f057600080fd5b817f7365744d617841646d696e000000000000000000000000000000000000000000141561049d57600154604080517f03cb43e500000000000000000000000000000000000000000000000000000000815260048101849052905173ffffffffffffffffffffffffffffffffffffffff909216916303cb43e59160248082019260009290919082900301818387803b1580156102f057600080fd5b817f61646441646d696e000000000000000000000000000000000000000000000000141561053b57600154604080517f70480275000000000000000000000000000000000000000000000000000000008152606084901c6004820152905173ffffffffffffffffffffffffffffffffffffffff9092169163704802759160248082019260009290919082900301818387803b1580156102f057600080fd5b817f72656d6f766541646d696e00000000000000000000000000000000000000000014156105d957600154604080517f1785f53c000000000000000000000000000000000000000000000000000000008152606084901c6004820152905173ffffffffffffffffffffffffffffffffffffffff90921691631785f53c9160248082019260009290919082900301818387803b1580156102f057600080fd5b817f73657441646d696e000000000000000000000000000000000000000000000000141561030d5760008054604080517f704b6c02000000000000000000000000000000000000000000000000000000008152606085901c6004820152905173ffffffffffffffffffffffffffffffffffffffff9092169263704b6c029260248084019382900301818387803b1580156102f057600080fd5b600383141561075057817f736574566f74696e674578656375746f72000000000000000000000000000000141561030d5760005473ffffffffffffffffffffffffffffffffffffffff1663788ddbcb606083901c868660028181106106d357fe5b604080517fffffffff0000000000000000000000000000000000000000000000000000000060e088901b16815273ffffffffffffffffffffffffffffffffffffffff909516600486015260209091029290920135151560248401525051604480830192600092919082900301818387803b1580156102f057600080fd5b600783141561086c57817f616464566f74696e67436f6e6669670000000000000000000000000000000000141561030d5760005473ffffffffffffffffffffffffffffffffffffffff166365611e4382868660028181106107ad57fe5b9050602002013560001c878760038181106107c457fe5b9050602002013560001c888860048181106107db57fe5b9050602002013560001c898960058181106107f257fe5b9050602002013560001c8a8a600681811061080957fe5b9050602002013560001c6040518763ffffffff1660e01b8152600401808781526020018681526020018581526020018481526020018381526020018281526020019650505050505050600060405180830381600087803b1580156102f057600080fd5b6040517f08c379a00000000000000000000000000000000000000000000000000000000081526004018080602001828103825260298152602001806109066029913960400191505060405180910390fd5b50505050565b60015473ffffffffffffffffffffffffffffffffffffffff168156fe4f41584445585f566f74696e674578656375746f723a204e6f742066726f6d20766f74696e674f41584445585f566f74696e674578656375746f723a20496e76616c696420706172616d65746572734f41584445585f566f74696e674578656375746f723a20556e6b6e6f776e20636f6d6d616e64a2646970667358221220c7b0e11642a4108f4ad99d81218fac6c87c1a32d1beace76ffaa02f9736aac2664736f6c634300060b0033"
    };
});
define("@scom/scom-swap/contracts/oswap-openswap-contract/contracts/gov/OAXDEX_VotingExecutor.ts", ["require", "exports", "@ijstech/eth-contract", "@scom/scom-swap/contracts/oswap-openswap-contract/contracts/gov/OAXDEX_VotingExecutor.json.ts"], function (require, exports, eth_contract_14, OAXDEX_VotingExecutor_json_1) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.OAXDEX_VotingExecutor = void 0;
    class OAXDEX_VotingExecutor extends eth_contract_14.Contract {
        constructor(wallet, address) {
            super(wallet, address, OAXDEX_VotingExecutor_json_1.default.abi, OAXDEX_VotingExecutor_json_1.default.bytecode);
            this.assign();
        }
        deploy(params, options) {
            return this.__deploy([params.governance, params.admin], options);
        }
        assign() {
            let admin_call = async (options) => {
                let result = await this.call('admin', [], options);
                return result;
            };
            this.admin = admin_call;
            let governance_call = async (options) => {
                let result = await this.call('governance', [], options);
                return result;
            };
            this.governance = governance_call;
            let execute_send = async (params, options) => {
                let result = await this.send('execute', [this.wallet.utils.stringToBytes32(params)], options);
                return result;
            };
            let execute_call = async (params, options) => {
                let result = await this.call('execute', [this.wallet.utils.stringToBytes32(params)], options);
                return;
            };
            let execute_txData = async (params, options) => {
                let result = await this.txData('execute', [this.wallet.utils.stringToBytes32(params)], options);
                return result;
            };
            this.execute = Object.assign(execute_send, {
                call: execute_call,
                txData: execute_txData
            });
        }
    }
    OAXDEX_VotingExecutor._abi = OAXDEX_VotingExecutor_json_1.default.abi;
    exports.OAXDEX_VotingExecutor = OAXDEX_VotingExecutor;
});
define("@scom/scom-swap/contracts/oswap-openswap-contract/contracts/gov/OAXDEX_VotingRegistry.json.ts", ["require", "exports"], function (require, exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    ///<amd-module name='@scom/scom-swap/contracts/oswap-openswap-contract/contracts/gov/OAXDEX_VotingRegistry.json.ts'/> 
    exports.default = {
        "abi": [
            { "inputs": [{ "internalType": "address", "name": "_governance", "type": "address" }], "stateMutability": "nonpayable", "type": "constructor" },
            { "inputs": [], "name": "governance", "outputs": [{ "internalType": "address", "name": "", "type": "address" }], "stateMutability": "view", "type": "function" },
            { "inputs": [{ "internalType": "address", "name": "executor", "type": "address" }, { "internalType": "bytes32", "name": "name", "type": "bytes32" }, { "internalType": "bytes32[]", "name": "options", "type": "bytes32[]" }, { "internalType": "uint256", "name": "quorum", "type": "uint256" }, { "internalType": "uint256", "name": "threshold", "type": "uint256" }, { "internalType": "uint256", "name": "voteEndTime", "type": "uint256" }, { "internalType": "uint256", "name": "executeDelay", "type": "uint256" }, { "internalType": "bytes32[]", "name": "executeParam", "type": "bytes32[]" }], "name": "newVote", "outputs": [], "stateMutability": "nonpayable", "type": "function" }
        ],
        "bytecode": "608060405234801561001057600080fd5b50604051612b1b380380612b1b8339818101604052602081101561003357600080fd5b5051600080546001600160a01b039092166001600160a01b0319909216919091179055612ab6806100656000396000f3fe60806040523480156200001157600080fd5b50600436106200003a5760003560e01c80635aa6e675146200003f578063dac642fb1462000072575b600080fd5b6200004962000178565b6040805173ffffffffffffffffffffffffffffffffffffffff9092168252519081900360200190f35b6200017660048036036101008110156200008b57600080fd5b73ffffffffffffffffffffffffffffffffffffffff82351691602081013591810190606081016040820135640100000000811115620000c957600080fd5b820183602082011115620000dc57600080fd5b80359060200191846020830284011164010000000083111715620000ff57600080fd5b9193909282359260208101359260408201359260608301359260a0810190608001356401000000008111156200013457600080fd5b8201836020820111156200014757600080fd5b803590602001918460208302840111640100000000831117156200016a57600080fd5b50909250905062000194565b005b60005473ffffffffffffffffffffffffffffffffffffffff1681565b600054604080517fa3818b3b00000000000000000000000000000000000000000000000000000000815273ffffffffffffffffffffffffffffffffffffffff8d81166004830152915184151593929092169163a3818b3b91602480820192602092909190829003018186803b1580156200020d57600080fd5b505afa15801562000222573d6000803e3d6000fd5b505050506040513d60208110156200023957600080fd5b505162000292576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040180806020018281038252602781526020018062002a5a6027913960400191505060405180910390fd5b600081620002c1577f706f6c6c00000000000000000000000000000000000000000000000000000000620002d7565b83836000818110620002cf57fe5b905060200201355b905060008060008060008060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1663718fbb79876040518263ffffffff1660e01b81526004018082815260200191505060a06040518083038186803b1580156200035457600080fd5b505afa15801562000369573d6000803e3d6000fd5b505050506040513d60a08110156200038057600080fd5b50805160208083015160408085015160608601516080909601516000805484517f426233600000000000000000000000000000000000000000000000000000000081523360048201529451979d50949b5091995095975094955073ffffffffffffffffffffffffffffffffffffffff90911692634262336092602480840193919291829003018186803b1580156200041757600080fd5b505afa1580156200042c573d6000803e3d6000fd5b505050506040513d60208110156200044357600080fd5b5051905082811015620004a2576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401808060200182810382526036815260200180620029ce6036913960400191505060405180910390fd5b84620004b58d4263ffffffff620008f516565b10156200050e576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040180806020018281038252602e81526020018062002a04602e913960400191505060405180910390fd5b83620005218d4263ffffffff620008f516565b11156200057a576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040180806020018281038252602f81526020018062002975602f913960400191505060405180910390fd5b87156200063757818e1015620005dc576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040180806020018281038252602881526020018062002a326028913960400191505060405180910390fd5b858b101562000637576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040180806020018281038252602a815260200180620029a4602a913960400191505060405180910390fd5b5050505050505060008060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1663145988986040518163ffffffff1660e01b8152600401602060405180830381600087803b158015620006aa57600080fd5b505af1158015620006bf573d6000803e3d6000fd5b505050506040513d6020811015620006d657600080fd5b505160008054604051929350909173ffffffffffffffffffffffffffffffffffffffff909116908e9084908f908f908f908f908f908f908f908f908f906200071e90620009f5565b808d73ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020018c73ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020018b81526020018a8152602001806020018881526020018781526020018681526020018581526020018060200183810383528b8b82818152602001925060200280828437600083820152601f017fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe0169091018481038352858152602090810191508690860280828437600081840152601f19601f8201169050808301925050509e505050505050505050505050505050604051809103906000f0801580156200084f573d6000803e3d6000fd5b5060008054604080517f8210775100000000000000000000000000000000000000000000000000000000815273ffffffffffffffffffffffffffffffffffffffff80861660048301528815156024830152915194955091169263821077519260448084019391929182900301818387803b158015620008cd57600080fd5b505af1158015620008e2573d6000803e3d6000fd5b5050505050505050505050505050505050565b60006200093983836040518060400160405280601e81526020017f536166654d6174683a207375627472616374696f6e206f766572666c6f77000081525062000940565b9392505050565b60008184841115620009ed576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004018080602001828103825283818151815260200191508051906020019080838360005b83811015620009b157818101518382015260200162000997565b50505050905090810190601f168015620009df5780820380516001836020036101000a031916815260200191505b509250505060405180910390fd5b505050900390565b611f718062000a048339019056fe60806040523480156200001157600080fd5b5060405162001f7138038062001f7183398181016040526101408110156200003857600080fd5b81516020830151604080850151606086015160808701805193519597949692959194919392820192846401000000008211156200007457600080fd5b9083019060208201858111156200008a57600080fd5b8251866020820283011164010000000082111715620000a857600080fd5b82525081516020918201928201910280838360005b83811015620000d7578181015183820152602001620000bd565b505050509190910160408181526020840151908401516060850151608086015160a0909601805193989297919695509192909190846401000000008211156200011f57600080fd5b9083019060208201858111156200013557600080fd5b82518660208202830111640100000000821117156200015357600080fd5b82525081516020918201928201910280838360005b838110156200018257818101518382015260200162000168565b5050505090500160405250505082421115620001d05760405162461bcd60e51b815260040180806020018281038252602481526020018062001f4d6024913960400191505060405180910390fd5b805115620003da57896001600160a01b031663a3818b3b8a6040518263ffffffff1660e01b815260040180826001600160a01b03166001600160a01b0316815260200191505060206040518083038186803b1580156200022f57600080fd5b505afa15801562000244573d6000803e3d6000fd5b505050506040513d60208110156200025b57600080fd5b5051620002af576040805162461bcd60e51b815260206004820181905260248201527f566f74696e67436f6e74726163743a20496e76616c6964206578656375746f72604482015290519081900360640190fd5b85516002148015620002d9575085600081518110620002ca57fe5b6020026020010151605960f81b145b8015620002fe575085600181518110620002ef57fe5b6020026020010151602760f91b145b62000350576040805162461bcd60e51b815260206004820152601f60248201527f566f74696e67436f6e74726163743a20496e76616c6964206f7074696f6e7300604482015290519081900360640190fd5b670de0b6b3a7640000841115620003995760405162461bcd60e51b815260040180806020018281038252602181526020018062001f2c6021913960400191505060405180910390fd5b60008211620003da5760405162461bcd60e51b815260040180806020018281038252602581526020018062001f076025913960400191505060405180910390fd5b600080546001600160a01b03808d166001600160a01b03199283161792839055600180548d831693169290921790915560408051638b0e9f3f60e01b815290519290911691638b0e9f3f91600480820192602092909190829003018186803b1580156200044657600080fd5b505afa1580156200045b573d6000803e3d6000fd5b505050506040513d60208110156200047257600080fd5b5051600f556002889055600387905585516200049690600490602089019062000530565b506005859055600684905585516001600160401b0381118015620004b957600080fd5b50604051908082528060200260200182016040528015620004e4578160200160208202803683370190505b508051620004fb91600d9160209091019062000530565b50426007556008839055600982905580516200051f90601090602084019062000530565b5050505050505050505050620005a0565b8280548282559060005260206000209081019282156200056e579160200282015b828111156200056e57825182559160200191906001019062000551565b506200057c92915062000580565b5090565b6200059d91905b808211156200057c576000815560010162000587565b90565b61195780620005b06000396000f3fe608060405234801561001057600080fd5b50600436106101b95760003560e01c80635e615a6b116100f9578063af640d0f11610097578063e5188f5511610071578063e5188f5514610561578063ede20b4614610569578063ef9b78c614610571578063fc8add8114610579576101b9565b8063af640d0f14610549578063b3fff9bf14610551578063c34c08e514610559576101b9565b8063876cdb2f116100d3578063876cdb2f1461051457806396c82e571461051c5780639e6cb42b14610524578063a25457611461052c576101b9565b80635e615a6b146103725780636146195414610504578063769bdea31461050c576101b9565b80631a1dbabb1161016657806331a38c891161014057806331a38c891461030057806342cde4e81461031c578063583b306e146103245780635aa6e67514610341576101b9565b80631a1dbabb146102925780632376a29a1461029a578063281a9bdf146102cd576101b9565b80631703a018116101975780631703a0181461024f57806317e42ec01461025757806318024acc1461028a576101b9565b80630121b93f146101be57806306fdde03146101dd5780631069143a146101f7575b600080fd5b6101db600480360360208110156101d457600080fd5b5035610596565b005b6101e5610a48565b60408051918252519081900360200190f35b6101ff610a4e565b60408051602080825283518183015283519192839290830191858101910280838360005b8381101561023b578181015183820152602001610223565b505050509050019250505060405180910390f35b6101e5610aa6565b6101db6004803603602081101561026d57600080fd5b503573ffffffffffffffffffffffffffffffffffffffff16610aac565b6101e5610cb2565b6101e5610cb8565b6101e5600480360360208110156102b057600080fd5b503573ffffffffffffffffffffffffffffffffffffffff16610cbe565b6101e5600480360360208110156102e357600080fd5b503573ffffffffffffffffffffffffffffffffffffffff16610cd0565b610308610ce2565b604080519115158252519081900360200190f35b6101e5610ceb565b6101e56004803603602081101561033a57600080fd5b5035610cf1565b610349610d0f565b6040805173ffffffffffffffffffffffffffffffffffffffff9092168252519081900360200190f35b61037a610d2b565b604051808c73ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020018b81526020018a81526020018060200189815260200188815260200187815260200186600260200280838360005b838110156103f65781810151838201526020016103de565b50505092019150506020810185606080838360005b8381101561042357818101518382015260200161040b565b505050509050018060200184810384528c818151815260200191508051906020019060200280838360005b8381101561046657818101518382015260200161044e565b50505050905001848103835287818151815260200191508051906020019060200280838360005b838110156104a557818101518382015260200161048d565b50505050905001848103825285818151815260200191508051906020019060200280838360005b838110156104e45781810151838201526020016104cc565b505050509050019e50505050505050505050505050505060405180910390f35b6101db610edd565b6101ff611388565b6101e56113de565b6101e56113e4565b6101e56113ea565b6101e56004803603602081101561054257600080fd5b50356113f0565b6101e56113fd565b6101ff611403565b610349611459565b6101e5611475565b61030861147b565b6101db611489565b6101e56004803603602081101561058f57600080fd5b5035611583565b6008544211156105f1576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040180806020018281038252602281526020018061186b6022913960400191505060405180910390fd5b600a54610100900460ff1615610652576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004018080602001828103825260238152602001806117ff6023913960400191505060405180910390fd5b600a5460ff16156106ae576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004018080602001828103825260258152602001806117da6025913960400191505060405180910390fd5b600454811061071e57604080517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601e60248201527f566f74696e67436f6e74726163743a20496e76616c6964206f7074696f6e0000604482015290519081900360640190fd5b60008054601054604080517f65eaf8bc00000000000000000000000000000000000000000000000000000000815291156004830152336024830152604482018590525173ffffffffffffffffffffffffffffffffffffffff909216926365eaf8bc9260648084019382900301818387803b15801561079b57600080fd5b505af11580156107af573d6000803e3d6000fd5b5050336000908152600c6020526040902054915050801561083857336000908152600b6020526040902054600d8054610807918491849081106107ee57fe5b906000526020600020015461159090919063ffffffff16565b600d828154811061081457fe5b600091825260209091200155600e54610833908363ffffffff61159016565b600e55505b60008054604080517f42623360000000000000000000000000000000000000000000000000000000008152336004820152905173ffffffffffffffffffffffffffffffffffffffff90921691634262336091602480820192602092909190829003018186803b1580156108aa57600080fd5b505afa1580156108be573d6000803e3d6000fd5b505050506040513d60208110156108d457600080fd5b505190508061092e576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004018080602001828103825260228152602001806118226022913960400191505060405180910390fd5b336000908152600b60209081526040808320869055600c9091529020819055600d805461097a9183918690811061096157fe5b90600052602060002001546115db90919063ffffffff16565b600d848154811061098757fe5b600091825260209091200155600e546109a6908263ffffffff6115db16565b600e55600054604080517f8b0e9f3f000000000000000000000000000000000000000000000000000000008152905173ffffffffffffffffffffffffffffffffffffffff90921691638b0e9f3f91600480820192602092909190829003018186803b158015610a1457600080fd5b505afa158015610a28573d6000803e3d6000fd5b505050506040513d6020811015610a3e57600080fd5b5051600f55505050565b60035481565b60606004805480602002602001604051908101604052809291908181526020018280548015610a9c57602002820191906000526020600020905b815481526020019060010190808311610a88575b5050505050905090565b60055481565b6008544211158015610ac65750600a54610100900460ff16155b8015610ad55750600a5460ff16155b15610caf5760008054604080517f4262336000000000000000000000000000000000000000000000000000000000815273ffffffffffffffffffffffffffffffffffffffff8581166004830152915191909216916342623360916024808301926020929190829003018186803b158015610b4e57600080fd5b505afa158015610b62573d6000803e3d6000fd5b505050506040513d6020811015610b7857600080fd5b505173ffffffffffffffffffffffffffffffffffffffff83166000908152600c60205260409020549091508015801590610bb25750818114155b15610c485773ffffffffffffffffffffffffffffffffffffffff83166000908152600b6020908152604080832054600c909252909120839055600d8054610c11918591610c05918691869081106107ee57fe5b9063ffffffff6115db16565b600d8281548110610c1e57fe5b600091825260209091200155600e54610c43908490610c05908563ffffffff61159016565b600e55505b6000809054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16638b0e9f3f6040518163ffffffff1660e01b815260040160206040518083038186803b158015610a1457600080fd5b50565b60075481565b60045490565b600c6020526000908152604090205481565b600b6020526000908152604090205481565b600a5460ff1681565b60065481565b60108181548110610cfe57fe5b600091825260209091200154905081565b60005473ffffffffffffffffffffffffffffffffffffffff1681565b600080600060606000806000610d3f611773565b6060610d49611791565b600154600254600354600754600854600954604080518082018252600a5460ff80821615158352610100909104161515602080830191909152825160608181018552600554825260065482840152600f548286015260048054865181860281018601909752808752919b73ffffffffffffffffffffffffffffffffffffffff169a9998909790969095909493600d9392601092918a9190830182828015610e0f57602002820191906000526020600020905b815481526020019060010190808311610dfb575b5050505050975082805480602002602001604051908101604052809291908181526020018280548015610e6157602002820191906000526020600020905b815481526020019060010190808311610e4d575b5050505050925080805480602002602001604051908101604052809291908181526020018280548015610eb357602002820191906000526020600020905b815481526020019060010190808311610e9f575b505050505090509a509a509a509a509a509a509a509a509a509a509a50909192939495969798999a565b600954600854610ef29163ffffffff6115db16565b4211610f49576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040180806020018281038252602a8152602001806117b0602a913960400191505060405180910390fd5b600a54610100900460ff1615610faa576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004018080602001828103825260238152602001806117ff6023913960400191505060405180910390fd5b600a5460ff1615611006576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004018080602001828103825260258152602001806117da6025913960400191505060405180910390fd5b60105461105e576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040180806020018281038252602981526020018061188d6029913960400191505060405180910390fd5b600554600e5410156110d157604080517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601e60248201527f566f74696e67436f6e74726163743a2051756f72756d206e6f74206d65740000604482015290519081900360640190fd5b600d6001815481106110df57fe5b9060005260206000200154600d6000815481106110f857fe5b90600052602060002001541161116f57604080517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820181905260248201527f566f74696e67436f6e74726163743a204d616a6f72697479206e6f74206d6574604482015290519081900360640190fd5b600654600e546111849163ffffffff61164f16565b6111b7670de0b6b3a7640000600d60008154811061119e57fe5b906000526020600020015461164f90919063ffffffff16565b1161120d576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004018080602001828103825260218152602001806119016021913960400191505060405180910390fd5b600a80547fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff00166001908117909155546040517f8af7c649000000000000000000000000000000000000000000000000000000008152602060048201908152601080546024840181905273ffffffffffffffffffffffffffffffffffffffff90941693638af7c649939192918291604490910190849080156112cd57602002820191906000526020600020905b8154815260200190600101908083116112b9575b505092505050600060405180830381600087803b1580156112ed57600080fd5b505af1158015611301573d6000803e3d6000fd5b505060008054604080517f31a38c89000000000000000000000000000000000000000000000000000000008152905173ffffffffffffffffffffffffffffffffffffffff90921694506331a38c899350600480820193929182900301818387803b15801561136e57600080fd5b505af1158015611382573d6000803e3d6000fd5b50505050565b6060600d805480602002602001604051908101604052809291908181526020018280548015610a9c5760200282019190600052602060002090815481526020019060010190808311610a88575050505050905090565b60095481565b600f5481565b60085481565b60048181548110610cfe57fe5b60025481565b60606010805480602002602001604051908101604052809291908181526020018280548015610a9c5760200282019190600052602060002090815481526020019060010190808311610a88575050505050905090565b60015473ffffffffffffffffffffffffffffffffffffffff1681565b600e5481565b600a54610100900460ff1681565b60005473ffffffffffffffffffffffffffffffffffffffff1633146114f9576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040180806020018281038252602a8152602001806118d7602a913960400191505060405180910390fd5b600a5460ff1615611555576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004018080602001828103825260278152602001806118446027913960400191505060405180910390fd5b600a80547fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff00ff16610100179055565b600d8181548110610cfe57fe5b60006115d283836040518060400160405280601e81526020017f536166654d6174683a207375627472616374696f6e206f766572666c6f7700008152506116c2565b90505b92915050565b6000828201838110156115d257604080517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601b60248201527f536166654d6174683a206164646974696f6e206f766572666c6f770000000000604482015290519081900360640190fd5b60008261165e575060006115d5565b8282028284828161166b57fe5b04146115d2576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004018080602001828103825260218152602001806118b66021913960400191505060405180910390fd5b6000818484111561176b576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004018080602001828103825283818151815260200191508051906020019080838360005b83811015611730578181015183820152602001611718565b50505050905090810190601f16801561175d5780820380516001836020036101000a031916815260200191505b509250505060405180910390fd5b505050900390565b60405180604001604052806002906020820280368337509192915050565b6040518060600160405280600390602082028036833750919291505056fe566f74696e67436f6e74726163743a20457865637574652064656c6179206e6f74207061737420796574566f74696e67436f6e74726163743a20566f746520616c7265616479206578656375746564566f74696e67436f6e74726163743a20566f746520616c7265616479207665746f6564566f74696e67436f6e74726163743a204e6f74207374616b656420746f20766f74654f41584445585f566f74696e67436f6e74726163743a20416c7265616479206578656375746564566f74696e67436f6e74726163743a20566f746520616c726561647920656e646564566f74696e67436f6e74726163743a204578656375746520706172616d206e6f7420646566696e6564536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f774f41584445585f566f74696e67436f6e74726163743a204e6f742066726f6d20476f7665726e616e6365566f74696e67436f6e74726163743a205468726573686f6c64206e6f74206d6574a2646970667358221220048474bbf8fa3121408a09801c28f822bd71a401da4e4c19cf56c790c53526ad64736f6c634300060b0033566f74696e67436f6e74726163743a20496e76616c696420657865637574652064656c6179566f74696e67436f6e74726163743a20496e76616c6964207468726573686f6c64566f74696e67436f6e74726163743a20566f74696e6720616c726561647920656e6465644f41584445585f566f74696e6752656769737472793a206578636565646564206d6178566f74654475726174696f6e4f41584445585f566f74696e6752656769737472793a206d696e45786544656c6179206e6f74206d65744f41584445585f566f74696e6752656769737472793a206d696e4f6178546f6b656e546f437265617465566f7465206e6f74206d65744f41584445585f566f74696e6752656769737472793a206d696e566f74654475726174696f6e206e6f74206d65744f41584445585f566f74696e6752656769737472793a206d696e51756f72756d206e6f74206d65744f41584445585f566f74696e6752656769737472793a20496e76616c6964206578656375746f72a2646970667358221220575603f1034e2c37d9854afdf3e04ad17a6a1d1fa3ad56a3f36aa2c2663b098b64736f6c634300060b0033"
    };
});
define("@scom/scom-swap/contracts/oswap-openswap-contract/contracts/gov/OAXDEX_VotingRegistry.ts", ["require", "exports", "@ijstech/eth-contract", "@scom/scom-swap/contracts/oswap-openswap-contract/contracts/gov/OAXDEX_VotingRegistry.json.ts"], function (require, exports, eth_contract_15, OAXDEX_VotingRegistry_json_1) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.OAXDEX_VotingRegistry = void 0;
    class OAXDEX_VotingRegistry extends eth_contract_15.Contract {
        constructor(wallet, address) {
            super(wallet, address, OAXDEX_VotingRegistry_json_1.default.abi, OAXDEX_VotingRegistry_json_1.default.bytecode);
            this.assign();
        }
        deploy(governance, options) {
            return this.__deploy([governance], options);
        }
        assign() {
            let governance_call = async (options) => {
                let result = await this.call('governance', [], options);
                return result;
            };
            this.governance = governance_call;
            let newVoteParams = (params) => [params.executor, this.wallet.utils.stringToBytes32(params.name), this.wallet.utils.stringToBytes32(params.options), this.wallet.utils.toString(params.quorum), this.wallet.utils.toString(params.threshold), this.wallet.utils.toString(params.voteEndTime), this.wallet.utils.toString(params.executeDelay), this.wallet.utils.stringToBytes32(params.executeParam)];
            let newVote_send = async (params, options) => {
                let result = await this.send('newVote', newVoteParams(params), options);
                return result;
            };
            let newVote_call = async (params, options) => {
                let result = await this.call('newVote', newVoteParams(params), options);
                return;
            };
            let newVote_txData = async (params, options) => {
                let result = await this.txData('newVote', newVoteParams(params), options);
                return result;
            };
            this.newVote = Object.assign(newVote_send, {
                call: newVote_call,
                txData: newVote_txData
            });
        }
    }
    OAXDEX_VotingRegistry._abi = OAXDEX_VotingRegistry_json_1.default.abi;
    exports.OAXDEX_VotingRegistry = OAXDEX_VotingRegistry;
});
define("@scom/scom-swap/contracts/oswap-openswap-contract/contracts/libraries/ERC20.json.ts", ["require", "exports"], function (require, exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    ///<amd-module name='@scom/scom-swap/contracts/oswap-openswap-contract/contracts/libraries/ERC20.json.ts'/> 
    exports.default = {
        "abi": [
            { "inputs": [{ "internalType": "string", "name": "name_", "type": "string" }, { "internalType": "string", "name": "symbol_", "type": "string" }], "stateMutability": "nonpayable", "type": "constructor" },
            { "anonymous": false, "inputs": [{ "indexed": true, "internalType": "address", "name": "owner", "type": "address" }, { "indexed": true, "internalType": "address", "name": "spender", "type": "address" }, { "indexed": false, "internalType": "uint256", "name": "value", "type": "uint256" }], "name": "Approval", "type": "event" },
            { "anonymous": false, "inputs": [{ "indexed": true, "internalType": "address", "name": "from", "type": "address" }, { "indexed": true, "internalType": "address", "name": "to", "type": "address" }, { "indexed": false, "internalType": "uint256", "name": "value", "type": "uint256" }], "name": "Transfer", "type": "event" },
            { "inputs": [{ "internalType": "address", "name": "owner", "type": "address" }, { "internalType": "address", "name": "spender", "type": "address" }], "name": "allowance", "outputs": [{ "internalType": "uint256", "name": "", "type": "uint256" }], "stateMutability": "view", "type": "function" },
            { "inputs": [{ "internalType": "address", "name": "spender", "type": "address" }, { "internalType": "uint256", "name": "amount", "type": "uint256" }], "name": "approve", "outputs": [{ "internalType": "bool", "name": "", "type": "bool" }], "stateMutability": "nonpayable", "type": "function" },
            { "inputs": [{ "internalType": "address", "name": "account", "type": "address" }], "name": "balanceOf", "outputs": [{ "internalType": "uint256", "name": "", "type": "uint256" }], "stateMutability": "view", "type": "function" },
            { "inputs": [], "name": "decimals", "outputs": [{ "internalType": "uint8", "name": "", "type": "uint8" }], "stateMutability": "view", "type": "function" },
            { "inputs": [{ "internalType": "address", "name": "spender", "type": "address" }, { "internalType": "uint256", "name": "subtractedValue", "type": "uint256" }], "name": "decreaseAllowance", "outputs": [{ "internalType": "bool", "name": "", "type": "bool" }], "stateMutability": "nonpayable", "type": "function" },
            { "inputs": [{ "internalType": "address", "name": "spender", "type": "address" }, { "internalType": "uint256", "name": "addedValue", "type": "uint256" }], "name": "increaseAllowance", "outputs": [{ "internalType": "bool", "name": "", "type": "bool" }], "stateMutability": "nonpayable", "type": "function" },
            { "inputs": [], "name": "name", "outputs": [{ "internalType": "string", "name": "", "type": "string" }], "stateMutability": "view", "type": "function" },
            { "inputs": [], "name": "symbol", "outputs": [{ "internalType": "string", "name": "", "type": "string" }], "stateMutability": "view", "type": "function" },
            { "inputs": [], "name": "totalSupply", "outputs": [{ "internalType": "uint256", "name": "", "type": "uint256" }], "stateMutability": "view", "type": "function" },
            { "inputs": [{ "internalType": "address", "name": "recipient", "type": "address" }, { "internalType": "uint256", "name": "amount", "type": "uint256" }], "name": "transfer", "outputs": [{ "internalType": "bool", "name": "", "type": "bool" }], "stateMutability": "nonpayable", "type": "function" },
            { "inputs": [{ "internalType": "address", "name": "sender", "type": "address" }, { "internalType": "address", "name": "recipient", "type": "address" }, { "internalType": "uint256", "name": "amount", "type": "uint256" }], "name": "transferFrom", "outputs": [{ "internalType": "bool", "name": "", "type": "bool" }], "stateMutability": "nonpayable", "type": "function" }
        ],
        "bytecode": "60806040523480156200001157600080fd5b5060405162000eae38038062000eae833981810160405260408110156200003757600080fd5b81019080805160405193929190846401000000008211156200005857600080fd5b9083019060208201858111156200006e57600080fd5b82516401000000008111828201881017156200008957600080fd5b82525081516020918201929091019080838360005b83811015620000b85781810151838201526020016200009e565b50505050905090810190601f168015620000e65780820380516001836020036101000a031916815260200191505b50604052602001805160405193929190846401000000008211156200010a57600080fd5b9083019060208201858111156200012057600080fd5b82516401000000008111828201881017156200013b57600080fd5b82525081516020918201929091019080838360005b838110156200016a57818101518382015260200162000150565b50505050905090810190601f168015620001985780820380516001836020036101000a031916815260200191505b5060405250508251620001b491506003906020850190620001e0565b508051620001ca906004906020840190620001e0565b50506005805460ff191660121790555062000285565b828054600181600116156101000203166002900490600052602060002090601f016020900481019282601f106200022357805160ff191683800117855562000253565b8280016001018555821562000253579182015b828111156200025357825182559160200191906001019062000236565b506200026192915062000265565b5090565b6200028291905b808211156200026157600081556001016200026c565b90565b610c1980620002956000396000f3fe608060405234801561001057600080fd5b50600436106100c95760003560e01c80633950935111610081578063a457c2d71161005b578063a457c2d714610287578063a9059cbb146102c0578063dd62ed3e146102f9576100c9565b8063395093511461021357806370a082311461024c57806395d89b411461027f576100c9565b806318160ddd116100b257806318160ddd1461019857806323b872dd146101b2578063313ce567146101f5576100c9565b806306fdde03146100ce578063095ea7b31461014b575b600080fd5b6100d6610334565b6040805160208082528351818301528351919283929083019185019080838360005b838110156101105781810151838201526020016100f8565b50505050905090810190601f16801561013d5780820380516001836020036101000a031916815260200191505b509250505060405180910390f35b6101846004803603604081101561016157600080fd5b5073ffffffffffffffffffffffffffffffffffffffff81351690602001356103e8565b604080519115158252519081900360200190f35b6101a0610405565b60408051918252519081900360200190f35b610184600480360360608110156101c857600080fd5b5073ffffffffffffffffffffffffffffffffffffffff81358116916020810135909116906040013561040b565b6101fd6104b2565b6040805160ff9092168252519081900360200190f35b6101846004803603604081101561022957600080fd5b5073ffffffffffffffffffffffffffffffffffffffff81351690602001356104bb565b6101a06004803603602081101561026257600080fd5b503573ffffffffffffffffffffffffffffffffffffffff1661051c565b6100d6610544565b6101846004803603604081101561029d57600080fd5b5073ffffffffffffffffffffffffffffffffffffffff81351690602001356105c3565b610184600480360360408110156102d657600080fd5b5073ffffffffffffffffffffffffffffffffffffffff813516906020013561063e565b6101a06004803603604081101561030f57600080fd5b5073ffffffffffffffffffffffffffffffffffffffff81358116916020013516610652565b60038054604080516020601f60027fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff6101006001881615020190951694909404938401819004810282018101909252828152606093909290918301828280156103de5780601f106103b3576101008083540402835291602001916103de565b820191906000526020600020905b8154815290600101906020018083116103c157829003601f168201915b5050505050905090565b60006103fc6103f561068a565b848461068e565b50600192915050565b60025490565b60006104188484846107d5565b6104a88461042461068a565b6104a385604051806060016040528060288152602001610b4e6028913973ffffffffffffffffffffffffffffffffffffffff8a1660009081526001602052604081209061046f61068a565b73ffffffffffffffffffffffffffffffffffffffff168152602081019190915260400160002054919063ffffffff6109b116565b61068e565b5060019392505050565b60055460ff1690565b60006103fc6104c861068a565b846104a385600160006104d961068a565b73ffffffffffffffffffffffffffffffffffffffff908116825260208083019390935260409182016000908120918c16815292529020549063ffffffff610a6216565b73ffffffffffffffffffffffffffffffffffffffff1660009081526020819052604090205490565b60048054604080516020601f60027fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff6101006001881615020190951694909404938401819004810282018101909252828152606093909290918301828280156103de5780601f106103b3576101008083540402835291602001916103de565b60006103fc6105d061068a565b846104a385604051806060016040528060258152602001610bbf60259139600160006105fa61068a565b73ffffffffffffffffffffffffffffffffffffffff908116825260208083019390935260409182016000908120918d1681529252902054919063ffffffff6109b116565b60006103fc61064b61068a565b84846107d5565b73ffffffffffffffffffffffffffffffffffffffff918216600090815260016020908152604080832093909416825291909152205490565b3390565b73ffffffffffffffffffffffffffffffffffffffff83166106fa576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401808060200182810382526024815260200180610b9b6024913960400191505060405180910390fd5b73ffffffffffffffffffffffffffffffffffffffff8216610766576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401808060200182810382526022815260200180610b066022913960400191505060405180910390fd5b73ffffffffffffffffffffffffffffffffffffffff808416600081815260016020908152604080832094871680845294825291829020859055815185815291517f8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b9259281900390910190a3505050565b73ffffffffffffffffffffffffffffffffffffffff8316610841576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401808060200182810382526025815260200180610b766025913960400191505060405180910390fd5b73ffffffffffffffffffffffffffffffffffffffff82166108ad576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401808060200182810382526023815260200180610ae36023913960400191505060405180910390fd5b6108b8838383610add565b61090881604051806060016040528060268152602001610b286026913973ffffffffffffffffffffffffffffffffffffffff8616600090815260208190526040902054919063ffffffff6109b116565b73ffffffffffffffffffffffffffffffffffffffff808516600090815260208190526040808220939093559084168152205461094a908263ffffffff610a6216565b73ffffffffffffffffffffffffffffffffffffffff8084166000818152602081815260409182902094909455805185815290519193928716927fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef92918290030190a3505050565b60008184841115610a5a576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004018080602001828103825283818151815260200191508051906020019080838360005b83811015610a1f578181015183820152602001610a07565b50505050905090810190601f168015610a4c5780820380516001836020036101000a031916815260200191505b509250505060405180910390fd5b505050900390565b600082820183811015610ad657604080517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601b60248201527f536166654d6174683a206164646974696f6e206f766572666c6f770000000000604482015290519081900360640190fd5b9392505050565b50505056fe45524332303a207472616e7366657220746f20746865207a65726f206164647265737345524332303a20617070726f766520746f20746865207a65726f206164647265737345524332303a207472616e7366657220616d6f756e7420657863656564732062616c616e636545524332303a207472616e7366657220616d6f756e74206578636565647320616c6c6f77616e636545524332303a207472616e736665722066726f6d20746865207a65726f206164647265737345524332303a20617070726f76652066726f6d20746865207a65726f206164647265737345524332303a2064656372656173656420616c6c6f77616e63652062656c6f77207a65726fa2646970667358221220421706e8ce8b1ce7d30c2e9941df88d708c52265cf6f438c9e10789614a48a9d64736f6c634300060b0033"
    };
});
define("@scom/scom-swap/contracts/oswap-openswap-contract/contracts/libraries/ERC20.ts", ["require", "exports", "@ijstech/eth-contract", "@scom/scom-swap/contracts/oswap-openswap-contract/contracts/libraries/ERC20.json.ts"], function (require, exports, eth_contract_16, ERC20_json_1) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.ERC20 = void 0;
    class ERC20 extends eth_contract_16.Contract {
        constructor(wallet, address) {
            super(wallet, address, ERC20_json_1.default.abi, ERC20_json_1.default.bytecode);
            this.assign();
        }
        deploy(params, options) {
            return this.__deploy([params.name, params.symbol], options);
        }
        parseApprovalEvent(receipt) {
            return this.parseEvents(receipt, "Approval").map(e => this.decodeApprovalEvent(e));
        }
        decodeApprovalEvent(event) {
            let result = event.data;
            return {
                owner: result.owner,
                spender: result.spender,
                value: new eth_contract_16.BigNumber(result.value),
                _event: event
            };
        }
        parseTransferEvent(receipt) {
            return this.parseEvents(receipt, "Transfer").map(e => this.decodeTransferEvent(e));
        }
        decodeTransferEvent(event) {
            let result = event.data;
            return {
                from: result.from,
                to: result.to,
                value: new eth_contract_16.BigNumber(result.value),
                _event: event
            };
        }
        assign() {
            let allowanceParams = (params) => [params.owner, params.spender];
            let allowance_call = async (params, options) => {
                let result = await this.call('allowance', allowanceParams(params), options);
                return new eth_contract_16.BigNumber(result);
            };
            this.allowance = allowance_call;
            let balanceOf_call = async (account, options) => {
                let result = await this.call('balanceOf', [account], options);
                return new eth_contract_16.BigNumber(result);
            };
            this.balanceOf = balanceOf_call;
            let decimals_call = async (options) => {
                let result = await this.call('decimals', [], options);
                return new eth_contract_16.BigNumber(result);
            };
            this.decimals = decimals_call;
            let name_call = async (options) => {
                let result = await this.call('name', [], options);
                return result;
            };
            this.name = name_call;
            let symbol_call = async (options) => {
                let result = await this.call('symbol', [], options);
                return result;
            };
            this.symbol = symbol_call;
            let totalSupply_call = async (options) => {
                let result = await this.call('totalSupply', [], options);
                return new eth_contract_16.BigNumber(result);
            };
            this.totalSupply = totalSupply_call;
            let approveParams = (params) => [params.spender, this.wallet.utils.toString(params.amount)];
            let approve_send = async (params, options) => {
                let result = await this.send('approve', approveParams(params), options);
                return result;
            };
            let approve_call = async (params, options) => {
                let result = await this.call('approve', approveParams(params), options);
                return result;
            };
            let approve_txData = async (params, options) => {
                let result = await this.txData('approve', approveParams(params), options);
                return result;
            };
            this.approve = Object.assign(approve_send, {
                call: approve_call,
                txData: approve_txData
            });
            let decreaseAllowanceParams = (params) => [params.spender, this.wallet.utils.toString(params.subtractedValue)];
            let decreaseAllowance_send = async (params, options) => {
                let result = await this.send('decreaseAllowance', decreaseAllowanceParams(params), options);
                return result;
            };
            let decreaseAllowance_call = async (params, options) => {
                let result = await this.call('decreaseAllowance', decreaseAllowanceParams(params), options);
                return result;
            };
            let decreaseAllowance_txData = async (params, options) => {
                let result = await this.txData('decreaseAllowance', decreaseAllowanceParams(params), options);
                return result;
            };
            this.decreaseAllowance = Object.assign(decreaseAllowance_send, {
                call: decreaseAllowance_call,
                txData: decreaseAllowance_txData
            });
            let increaseAllowanceParams = (params) => [params.spender, this.wallet.utils.toString(params.addedValue)];
            let increaseAllowance_send = async (params, options) => {
                let result = await this.send('increaseAllowance', increaseAllowanceParams(params), options);
                return result;
            };
            let increaseAllowance_call = async (params, options) => {
                let result = await this.call('increaseAllowance', increaseAllowanceParams(params), options);
                return result;
            };
            let increaseAllowance_txData = async (params, options) => {
                let result = await this.txData('increaseAllowance', increaseAllowanceParams(params), options);
                return result;
            };
            this.increaseAllowance = Object.assign(increaseAllowance_send, {
                call: increaseAllowance_call,
                txData: increaseAllowance_txData
            });
            let transferParams = (params) => [params.recipient, this.wallet.utils.toString(params.amount)];
            let transfer_send = async (params, options) => {
                let result = await this.send('transfer', transferParams(params), options);
                return result;
            };
            let transfer_call = async (params, options) => {
                let result = await this.call('transfer', transferParams(params), options);
                return result;
            };
            let transfer_txData = async (params, options) => {
                let result = await this.txData('transfer', transferParams(params), options);
                return result;
            };
            this.transfer = Object.assign(transfer_send, {
                call: transfer_call,
                txData: transfer_txData
            });
            let transferFromParams = (params) => [params.sender, params.recipient, this.wallet.utils.toString(params.amount)];
            let transferFrom_send = async (params, options) => {
                let result = await this.send('transferFrom', transferFromParams(params), options);
                return result;
            };
            let transferFrom_call = async (params, options) => {
                let result = await this.call('transferFrom', transferFromParams(params), options);
                return result;
            };
            let transferFrom_txData = async (params, options) => {
                let result = await this.txData('transferFrom', transferFromParams(params), options);
                return result;
            };
            this.transferFrom = Object.assign(transferFrom_send, {
                call: transferFrom_call,
                txData: transferFrom_txData
            });
        }
    }
    ERC20._abi = ERC20_json_1.default.abi;
    exports.ERC20 = ERC20;
});
define("@scom/scom-swap/contracts/oswap-openswap-contract/contracts/oracle/OSWAP_CertiKSecurityOracle.json.ts", ["require", "exports"], function (require, exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    ///<amd-module name='@scom/scom-swap/contracts/oswap-openswap-contract/contracts/oracle/OSWAP_CertiKSecurityOracle.json.ts'/> 
    exports.default = {
        "abi": [
            { "inputs": [{ "internalType": "address", "name": "_oracleAddress", "type": "address" }], "stateMutability": "nonpayable", "type": "constructor" },
            { "inputs": [{ "internalType": "address", "name": "oracle", "type": "address" }], "name": "getSecurityScore", "outputs": [{ "internalType": "uint256", "name": "", "type": "uint256" }], "stateMutability": "view", "type": "function" },
            { "inputs": [], "name": "oracleAddress", "outputs": [{ "internalType": "address", "name": "", "type": "address" }], "stateMutability": "view", "type": "function" }
        ],
        "bytecode": "60a060405234801561001057600080fd5b506040516102a53803806102a58339818101604052602081101561003357600080fd5b50516001600160a01b038116610090576040805162461bcd60e51b815260206004820152601660248201527f496e76616c6964206f7261636c65206164647265737300000000000000000000604482015290519081900360640190fd5b606081901b6001600160601b0319166080526001600160a01b03166101df6100c66000398060b5528061018752506101df6000f3fe608060405234801561001057600080fd5b50600436106100365760003560e01c806352d382431461003b578063a89ae4ba14610080575b600080fd5b61006e6004803603602081101561005157600080fd5b503573ffffffffffffffffffffffffffffffffffffffff166100b1565b60408051918252519081900360200190f35b610088610185565b6040805173ffffffffffffffffffffffffffffffffffffffff9092168252519081900360200190f35b60007f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff166352d38243836040518263ffffffff1660e01b8152600401808273ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200191505060206040518083038186803b15801561015057600080fd5b505afa158015610164573d6000803e3d6000fd5b505050506040513d602081101561017a57600080fd5b505160ff1692915050565b7f00000000000000000000000000000000000000000000000000000000000000008156fea2646970667358221220bdf066927faf91f43d754c3fc88fc4ef3b43121f6d6bc7d651cae3dd2d1f516664736f6c634300060b0033"
    };
});
define("@scom/scom-swap/contracts/oswap-openswap-contract/contracts/oracle/OSWAP_CertiKSecurityOracle.ts", ["require", "exports", "@ijstech/eth-contract", "@scom/scom-swap/contracts/oswap-openswap-contract/contracts/oracle/OSWAP_CertiKSecurityOracle.json.ts"], function (require, exports, eth_contract_17, OSWAP_CertiKSecurityOracle_json_1) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.OSWAP_CertiKSecurityOracle = void 0;
    class OSWAP_CertiKSecurityOracle extends eth_contract_17.Contract {
        constructor(wallet, address) {
            super(wallet, address, OSWAP_CertiKSecurityOracle_json_1.default.abi, OSWAP_CertiKSecurityOracle_json_1.default.bytecode);
            this.assign();
        }
        deploy(oracleAddress, options) {
            return this.__deploy([oracleAddress], options);
        }
        assign() {
            let getSecurityScore_call = async (oracle, options) => {
                let result = await this.call('getSecurityScore', [oracle], options);
                return new eth_contract_17.BigNumber(result);
            };
            this.getSecurityScore = getSecurityScore_call;
            let oracleAddress_call = async (options) => {
                let result = await this.call('oracleAddress', [], options);
                return result;
            };
            this.oracleAddress = oracleAddress_call;
        }
    }
    OSWAP_CertiKSecurityOracle._abi = OSWAP_CertiKSecurityOracle_json_1.default.abi;
    exports.OSWAP_CertiKSecurityOracle = OSWAP_CertiKSecurityOracle;
});
define("@scom/scom-swap/contracts/oswap-openswap-contract/contracts/oracle/OSWAP_OracleFactory.json.ts", ["require", "exports"], function (require, exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    ///<amd-module name='@scom/scom-swap/contracts/oswap-openswap-contract/contracts/oracle/OSWAP_OracleFactory.json.ts'/> 
    exports.default = {
        "abi": [
            { "inputs": [{ "internalType": "address", "name": "_governance", "type": "address" }, { "internalType": "address", "name": "_pairCreator", "type": "address" }, { "internalType": "uint256", "name": "_tradeFee", "type": "uint256" }, { "internalType": "uint256", "name": "_protocolFee", "type": "uint256" }, { "internalType": "uint256", "name": "_feePerDelegator", "type": "uint256" }, { "internalType": "address", "name": "_protocolFeeTo", "type": "address" }], "stateMutability": "nonpayable", "type": "constructor" },
            { "anonymous": false, "inputs": [{ "indexed": true, "internalType": "address", "name": "token0", "type": "address" }, { "indexed": true, "internalType": "address", "name": "token1", "type": "address" }, { "indexed": false, "internalType": "address", "name": "oracle", "type": "address" }], "name": "OracleAdded", "type": "event" },
            { "anonymous": false, "inputs": [{ "indexed": true, "internalType": "address", "name": "oracle", "type": "address" }, { "indexed": false, "internalType": "uint256", "name": "score", "type": "uint256" }], "name": "OracleScores", "type": "event" },
            { "anonymous": false, "inputs": [{ "indexed": true, "internalType": "address", "name": "previousOwner", "type": "address" }, { "indexed": true, "internalType": "address", "name": "newOwner", "type": "address" }], "name": "OwnershipTransferred", "type": "event" },
            { "anonymous": false, "inputs": [{ "indexed": true, "internalType": "address", "name": "token0", "type": "address" }, { "indexed": true, "internalType": "address", "name": "token1", "type": "address" }, { "indexed": false, "internalType": "address", "name": "pair", "type": "address" }, { "indexed": false, "internalType": "uint256", "name": "newSize", "type": "uint256" }], "name": "PairCreated", "type": "event" },
            { "anonymous": false, "inputs": [{ "indexed": true, "internalType": "address", "name": "pair", "type": "address" }], "name": "PairRestarted", "type": "event" },
            { "anonymous": false, "inputs": [{ "indexed": true, "internalType": "address", "name": "pair", "type": "address" }], "name": "PairShutdowned", "type": "event" },
            { "anonymous": false, "inputs": [{ "indexed": false, "internalType": "bytes32", "name": "name", "type": "bytes32" }, { "indexed": false, "internalType": "bytes32", "name": "value", "type": "bytes32" }], "name": "ParamSet", "type": "event" },
            { "anonymous": false, "inputs": [{ "indexed": false, "internalType": "bytes32", "name": "name", "type": "bytes32" }, { "indexed": false, "internalType": "bytes32", "name": "value1", "type": "bytes32" }, { "indexed": false, "internalType": "bytes32", "name": "value2", "type": "bytes32" }], "name": "ParamSet2", "type": "event" },
            { "anonymous": false, "inputs": [], "name": "Restarted", "type": "event" },
            { "anonymous": false, "inputs": [], "name": "Shutdowned", "type": "event" },
            { "anonymous": false, "inputs": [{ "indexed": true, "internalType": "address", "name": "who", "type": "address" }, { "indexed": false, "internalType": "bool", "name": "allow", "type": "bool" }], "name": "Whitelisted", "type": "event" },
            { "inputs": [{ "internalType": "address", "name": "tokenA", "type": "address" }, { "internalType": "address", "name": "tokenB", "type": "address" }, { "internalType": "address", "name": "oracle", "type": "address" }], "name": "addOldOracleToNewPair", "outputs": [], "stateMutability": "nonpayable", "type": "function" },
            { "inputs": [{ "internalType": "uint256", "name": "", "type": "uint256" }], "name": "allPairs", "outputs": [{ "internalType": "address", "name": "", "type": "address" }], "stateMutability": "view", "type": "function" },
            { "inputs": [], "name": "allPairsLength", "outputs": [{ "internalType": "uint256", "name": "", "type": "uint256" }], "stateMutability": "view", "type": "function" },
            { "inputs": [], "name": "allWhiteListed", "outputs": [{ "internalType": "address[]", "name": "list", "type": "address[]" }, { "internalType": "bool[]", "name": "allowed", "type": "bool[]" }], "stateMutability": "view", "type": "function" },
            { "inputs": [{ "internalType": "address", "name": "tokenA", "type": "address" }, { "internalType": "address", "name": "tokenB", "type": "address" }], "name": "checkAndGetOracle", "outputs": [{ "internalType": "address", "name": "oracle", "type": "address" }], "stateMutability": "view", "type": "function" },
            { "inputs": [{ "internalType": "address", "name": "tokenA", "type": "address" }, { "internalType": "address", "name": "tokenB", "type": "address" }], "name": "checkAndGetOracleSwapParams", "outputs": [{ "internalType": "address", "name": "oracle_", "type": "address" }, { "internalType": "uint256", "name": "tradeFee_", "type": "uint256" }, { "internalType": "uint256", "name": "protocolFee_", "type": "uint256" }], "stateMutability": "view", "type": "function" },
            { "inputs": [{ "internalType": "address", "name": "tokenA", "type": "address" }, { "internalType": "address", "name": "tokenB", "type": "address" }], "name": "createPair", "outputs": [{ "internalType": "address", "name": "pair", "type": "address" }], "stateMutability": "nonpayable", "type": "function" },
            { "inputs": [], "name": "feePerDelegator", "outputs": [{ "internalType": "uint256", "name": "", "type": "uint256" }], "stateMutability": "view", "type": "function" },
            { "inputs": [{ "internalType": "address", "name": "", "type": "address" }, { "internalType": "address", "name": "", "type": "address" }], "name": "getPair", "outputs": [{ "internalType": "address", "name": "", "type": "address" }], "stateMutability": "view", "type": "function" },
            { "inputs": [], "name": "governance", "outputs": [{ "internalType": "address", "name": "", "type": "address" }], "stateMutability": "view", "type": "function" },
            { "inputs": [], "name": "isLive", "outputs": [{ "internalType": "bool", "name": "", "type": "bool" }], "stateMutability": "view", "type": "function" },
            { "inputs": [{ "internalType": "address", "name": "", "type": "address" }], "name": "isOracle", "outputs": [{ "internalType": "bool", "name": "", "type": "bool" }], "stateMutability": "view", "type": "function" },
            { "inputs": [{ "internalType": "address", "name": "", "type": "address" }], "name": "isWhitelisted", "outputs": [{ "internalType": "bool", "name": "", "type": "bool" }], "stateMutability": "view", "type": "function" },
            { "inputs": [{ "internalType": "address", "name": "", "type": "address" }], "name": "minLotSize", "outputs": [{ "internalType": "uint256", "name": "", "type": "uint256" }], "stateMutability": "view", "type": "function" },
            { "inputs": [], "name": "minOracleScore", "outputs": [{ "internalType": "uint256", "name": "", "type": "uint256" }], "stateMutability": "view", "type": "function" },
            { "inputs": [], "name": "oracleLiquidityProvider", "outputs": [{ "internalType": "address", "name": "", "type": "address" }], "stateMutability": "view", "type": "function" },
            { "inputs": [{ "internalType": "address", "name": "", "type": "address" }], "name": "oracleScores", "outputs": [{ "internalType": "uint256", "name": "", "type": "uint256" }], "stateMutability": "view", "type": "function" },
            { "inputs": [{ "internalType": "address", "name": "", "type": "address" }, { "internalType": "address", "name": "", "type": "address" }], "name": "oracles", "outputs": [{ "internalType": "address", "name": "", "type": "address" }], "stateMutability": "view", "type": "function" },
            { "inputs": [], "name": "owner", "outputs": [{ "internalType": "address", "name": "", "type": "address" }], "stateMutability": "view", "type": "function" },
            { "inputs": [], "name": "pairCreator", "outputs": [{ "internalType": "address", "name": "", "type": "address" }], "stateMutability": "view", "type": "function" },
            { "inputs": [], "name": "protocolFee", "outputs": [{ "internalType": "uint256", "name": "", "type": "uint256" }], "stateMutability": "view", "type": "function" },
            { "inputs": [], "name": "protocolFeeTo", "outputs": [{ "internalType": "address", "name": "", "type": "address" }], "stateMutability": "view", "type": "function" },
            { "inputs": [], "name": "renounceOwnership", "outputs": [], "stateMutability": "nonpayable", "type": "function" },
            { "inputs": [], "name": "securityScoreOracle", "outputs": [{ "internalType": "address", "name": "", "type": "address" }], "stateMutability": "view", "type": "function" },
            { "inputs": [{ "internalType": "uint256", "name": "_feePerDelegator", "type": "uint256" }], "name": "setFeePerDelegator", "outputs": [], "stateMutability": "nonpayable", "type": "function" },
            { "inputs": [{ "internalType": "bool", "name": "_isLive", "type": "bool" }], "name": "setLive", "outputs": [], "stateMutability": "nonpayable", "type": "function" },
            { "inputs": [{ "internalType": "address", "name": "pair", "type": "address" }, { "internalType": "bool", "name": "live", "type": "bool" }], "name": "setLiveForPair", "outputs": [], "stateMutability": "nonpayable", "type": "function" },
            { "inputs": [{ "internalType": "address", "name": "token", "type": "address" }, { "internalType": "uint256", "name": "_minLotSize", "type": "uint256" }], "name": "setMinLotSize", "outputs": [], "stateMutability": "nonpayable", "type": "function" },
            { "inputs": [{ "internalType": "address", "name": "tokenA", "type": "address" }, { "internalType": "address", "name": "tokenB", "type": "address" }, { "internalType": "address", "name": "oracle", "type": "address" }], "name": "setOracle", "outputs": [], "stateMutability": "nonpayable", "type": "function" },
            { "inputs": [{ "internalType": "address", "name": "_oracleRouter", "type": "address" }, { "internalType": "address", "name": "_oracleLiquidityProvider", "type": "address" }], "name": "setOracleLiquidityProvider", "outputs": [], "stateMutability": "nonpayable", "type": "function" },
            { "inputs": [{ "internalType": "uint256", "name": "_protocolFee", "type": "uint256" }], "name": "setProtocolFee", "outputs": [], "stateMutability": "nonpayable", "type": "function" },
            { "inputs": [{ "internalType": "address", "name": "_protocolFeeTo", "type": "address" }], "name": "setProtocolFeeTo", "outputs": [], "stateMutability": "nonpayable", "type": "function" },
            { "inputs": [{ "internalType": "address", "name": "_securityScoreOracle", "type": "address" }, { "internalType": "uint256", "name": "_minOracleScore", "type": "uint256" }], "name": "setSecurityScoreOracle", "outputs": [], "stateMutability": "nonpayable", "type": "function" },
            { "inputs": [{ "internalType": "uint256", "name": "_tradeFee", "type": "uint256" }], "name": "setTradeFee", "outputs": [], "stateMutability": "nonpayable", "type": "function" },
            { "inputs": [{ "internalType": "address", "name": "_who", "type": "address" }, { "internalType": "bool", "name": "_allow", "type": "bool" }], "name": "setWhiteList", "outputs": [], "stateMutability": "nonpayable", "type": "function" },
            { "inputs": [], "name": "tradeFee", "outputs": [{ "internalType": "uint256", "name": "", "type": "uint256" }], "stateMutability": "view", "type": "function" },
            { "inputs": [{ "internalType": "address", "name": "newOwner", "type": "address" }], "name": "transferOwnership", "outputs": [], "stateMutability": "nonpayable", "type": "function" },
            { "inputs": [{ "internalType": "address", "name": "oracle", "type": "address" }], "name": "updateOracleScore", "outputs": [], "stateMutability": "nonpayable", "type": "function" },
            { "inputs": [{ "internalType": "uint256", "name": "", "type": "uint256" }], "name": "whitelisted", "outputs": [{ "internalType": "address", "name": "", "type": "address" }], "stateMutability": "view", "type": "function" },
            { "inputs": [{ "internalType": "address", "name": "", "type": "address" }], "name": "whitelistedInv", "outputs": [{ "internalType": "uint256", "name": "", "type": "uint256" }], "stateMutability": "view", "type": "function" },
            { "inputs": [], "name": "whitelistedLength", "outputs": [{ "internalType": "uint256", "name": "", "type": "uint256" }], "stateMutability": "view", "type": "function" }
        ],
        "bytecode": "60a06040523480156200001157600080fd5b506040516200380438038062003804833981810160405260c08110156200003757600080fd5b5080516020820151604083015160608085015160808087015160a0909701519286901b6001600160601b031916905260008054600160ff1990911617610100600160a81b0319166101006001600160a01b038716021781559495939492939092909190620000a4620002c7565b600380546001600160a01b0319166001600160a01b038316908117909155604051919250906000907f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e0908290a350620186a08411156200013f576040805162461bcd60e51b8152602060048201526011602482015270494e56414c49445f54524144455f46454560781b604482015290519081900360640190fd5b620186a083111562000198576040805162461bcd60e51b815260206004820152601460248201527f494e56414c49445f50524f544f434f4c5f464545000000000000000000000000604482015290519081900360640190fd5b600584905560068390556007829055600880546001600160a01b0319166001600160a01b0383161790556040805167747261646546656560c01b8152602081018690528151600080516020620037e4833981519152929181900390910190a1600654604080516a70726f746f636f6c46656560a81b815260208101929092528051600080516020620037e48339815191529281900390910190a1600754604080516e3332b2a832b92232b632b3b0ba37b960891b815260208101929092528051600080516020620037e48339815191529281900390910190a1600854604080516c70726f746f636f6c466565546f60981b815260609290921b6001600160601b03191660208301528051600080516020620037e48339815191529281900390910190a1505050505050620002cb565b3390565b60805160601c6134bf6200032560003980610a785280610c705280610e7c528061154752806115af528061170852806117fb5280611ddd5280611fd55280612a5a5280612def5280612ee252806130af52506134bf6000f3fe608060405234801561001057600080fd5b50600436106102d35760003560e01c8063715018a611610186578063b8f7a665116100e3578063e6a4390511610097578063f5ee334811610071578063f5ee334814610931578063f98126f914610950578063fc9e3c1414610983576102d3565b8063e6a43905146108bb578063ef369252146108f6578063f2fde38b146108fe576102d3565b8063c9c65396116100c8578063c9c6539614610845578063ddf2d4f414610880578063e0e6799f14610888576102d3565b8063b8f7a66514610835578063c538b5d61461083d576102d3565b80638da5cb5b1161013a57806396c669491161011f57806396c66949146107f2578063a97e5c93146107fa578063b0e21e8a1461082d576102d3565b80638da5cb5b146107af57806395277f39146107b7576102d3565b806376d3d5471161016b57806376d3d5471461074f578063787dce3d146107575780638d14e12714610774576102d3565b8063715018a61461070c5780637587044a14610714576102d3565b806341f4368211610234578063574f2ba3116101e85780635aa6e675116101cd5780635aa6e675146106ac578063636b0d1a146106b45780636883618a146106d1576102d3565b8063574f2ba31461067157806358ced00414610679576102d3565b80634fe2b2b3116102195780634fe2b2b3146105fb578063506a42851461062e57806352a03c0314610636576102d3565b806341f43682146105275780634fc4cc9b146105c8576102d3565b80632288f2ff1161028b5780633997624711610270578063399762471461047e5780633af32abf146104c35780633d4efe091461050a576102d3565b80632288f2ff1461042b57806324bcdfbd14610464576102d3565b806310603023116102bc578063106030231461038f578063130a0b40146103ac5780631e3dd18b146103e5576102d3565b8063069d188f146102d85780630c14458114610348575b600080fd5b610313600480360360408110156102ee57600080fd5b5073ffffffffffffffffffffffffffffffffffffffff8135811691602001351661098b565b6040805173ffffffffffffffffffffffffffffffffffffffff9094168452602084019290925282820152519081900360600190f35b61038d6004803603606081101561035e57600080fd5b5073ffffffffffffffffffffffffffffffffffffffff8135811691602081013582169160409091013516610a22565b005b61038d600480360360208110156103a557600080fd5b5035610a32565b61038d600480360360408110156103c257600080fd5b5073ffffffffffffffffffffffffffffffffffffffff8135169060200135610c2a565b610402600480360360208110156103fb57600080fd5b5035610e02565b6040805173ffffffffffffffffffffffffffffffffffffffff9092168252519081900360200190f35b61038d6004803603604081101561044157600080fd5b5073ffffffffffffffffffffffffffffffffffffffff8135169060200135610e36565b61046c61109a565b60408051918252519081900360200190f35b61038d6004803603606081101561049457600080fd5b5073ffffffffffffffffffffffffffffffffffffffff81358116916020810135821691604090910135166110a0565b6104f6600480360360208110156104d957600080fd5b503573ffffffffffffffffffffffffffffffffffffffff166111d5565b604080519115158252519081900360200190f35b6104026004803603602081101561052057600080fd5b50356111ea565b61052f6111f7565b604051808060200180602001838103835285818151815260200191508051906020019060200280838360005b8381101561057357818101518382015260200161055b565b50505050905001838103825284818151815260200191508051906020019060200280838360005b838110156105b257818101518382015260200161059a565b5050505090500194505050505060405180910390f35b61038d600480360360208110156105de57600080fd5b503573ffffffffffffffffffffffffffffffffffffffff1661132e565b61046c6004803603602081101561061157600080fd5b503573ffffffffffffffffffffffffffffffffffffffff166114cc565b6104026114de565b6104026004803603604081101561064c57600080fd5b5073ffffffffffffffffffffffffffffffffffffffff813581169160200135166114fa565b61046c61152d565b61046c6004803603602081101561068f57600080fd5b503573ffffffffffffffffffffffffffffffffffffffff16611533565b610402611545565b61038d600480360360208110156106ca57600080fd5b5035611569565b61038d600480360360408110156106e757600080fd5b5073ffffffffffffffffffffffffffffffffffffffff813516906020013515156116ef565b61038d6119dc565b61038d6004803603604081101561072a57600080fd5b5073ffffffffffffffffffffffffffffffffffffffff81358116916020013516611adc565b61046c611d91565b61038d6004803603602081101561076d57600080fd5b5035611d97565b61038d6004803603604081101561078a57600080fd5b5073ffffffffffffffffffffffffffffffffffffffff81351690602001351515611f8f565b610402612228565b610402600480360360408110156107cd57600080fd5b5073ffffffffffffffffffffffffffffffffffffffff81358116916020013516612244565b61046c612420565b6104f66004803603602081101561081057600080fd5b503573ffffffffffffffffffffffffffffffffffffffff16612426565b61046c61243b565b6104f6612441565b61040261244a565b6104026004803603604081101561085b57600080fd5b5073ffffffffffffffffffffffffffffffffffffffff8135811691602001351661246b565b61046c612a0e565b61038d6004803603602081101561089e57600080fd5b503573ffffffffffffffffffffffffffffffffffffffff16612a14565b610402600480360360408110156108d157600080fd5b5073ffffffffffffffffffffffffffffffffffffffff81358116916020013516612bfc565b610402612c2f565b61038d6004803603602081101561091457600080fd5b503573ffffffffffffffffffffffffffffffffffffffff16612c4b565b61038d6004803603602081101561094757600080fd5b50351515612dd6565b61046c6004803603602081101561096657600080fd5b503573ffffffffffffffffffffffffffffffffffffffff1661303b565b61040261304d565b600080548190819060ff16610a0157604080517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152600f60248201527f474c4f42414c4c59205041555345440000000000000000000000000000000000604482015290519081900360640190fd5b6000610a0d8686612244565b60055460065491955093509150509250925092565b610a2d838383613069565b505050565b604080517fa3818b3b000000000000000000000000000000000000000000000000000000008152336004820152905173ffffffffffffffffffffffffffffffffffffffff7f0000000000000000000000000000000000000000000000000000000000000000169163a3818b3b916024808301926020929190829003018186803b158015610abe57600080fd5b505afa158015610ad2573d6000803e3d6000fd5b505050506040513d6020811015610ae857600080fd5b5051610b5557604080517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152600f60248201527f4e6f742066726f6d20766f74696e670000000000000000000000000000000000604482015290519081900360640190fd5b620186a0811115610bc757604080517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601160248201527f494e56414c49445f54524144455f464545000000000000000000000000000000604482015290519081900360640190fd5b6005819055604080517f747261646546656500000000000000000000000000000000000000000000000081526020810183905281517f22ea5a9dcc7fb5bc447fcb472061adc51caa147724a67a6695d49a9dff162509929181900390910190a150565b604080517fa3818b3b000000000000000000000000000000000000000000000000000000008152336004820152905173ffffffffffffffffffffffffffffffffffffffff7f0000000000000000000000000000000000000000000000000000000000000000169163a3818b3b916024808301926020929190829003018186803b158015610cb657600080fd5b505afa158015610cca573d6000803e3d6000fd5b505050506040513d6020811015610ce057600080fd5b5051610d4d57604080517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152600f60248201527f4e6f742066726f6d20766f74696e670000000000000000000000000000000000604482015290519081900360640190fd5b73ffffffffffffffffffffffffffffffffffffffff82166000908152600c602090815260409182902083905581517f6d696e4c6f7453697a65000000000000000000000000000000000000000000008152606085811b7fffffffffffffffffffffffffffffffffffffffff000000000000000000000000169282019290925280830184905291517f410bdf2fedecd51e396bd4e5ca41880366c00ff01f4df34d7cc46faef60eb7069281900390910190a15050565b60028181548110610e0f57fe5b60009182526020909120015473ffffffffffffffffffffffffffffffffffffffff16905081565b604080517fa3818b3b000000000000000000000000000000000000000000000000000000008152336004820152905173ffffffffffffffffffffffffffffffffffffffff7f0000000000000000000000000000000000000000000000000000000000000000169163a3818b3b916024808301926020929190829003018186803b158015610ec257600080fd5b505afa158015610ed6573d6000803e3d6000fd5b505050506040513d6020811015610eec57600080fd5b5051610f5957604080517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152600f60248201527f4e6f742066726f6d20766f74696e670000000000000000000000000000000000604482015290519081900360640190fd5b6064811115610fc957604080517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601660248201527f496e76616c69642073656375726974792073636f726500000000000000000000604482015290519081900360640190fd5b600980547fffffffffffffffffffffffff00000000000000000000000000000000000000001673ffffffffffffffffffffffffffffffffffffffff84161790819055600a829055604080517f736563757269747953636f72654f7261636c65000000000000000000000000008152606092831b7fffffffffffffffffffffffffffffffffffffffff00000000000000000000000016602082015280820184905290517f410bdf2fedecd51e396bd4e5ca41880366c00ff01f4df34d7cc46faef60eb706929181900390910190a15050565b60055481565b73ffffffffffffffffffffffffffffffffffffffff8381166000908152600b602090815260408083208685168452909152902054161561114157604080517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601260248201527f6f7261636c6520616c7265616479207365740000000000000000000000000000604482015290519081900360640190fd5b73ffffffffffffffffffffffffffffffffffffffff81166000908152600d602052604090205460ff16610a2257604080517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152600f60248201527f6f7261636c65206e6f74207365656e0000000000000000000000000000000000604482015290519081900360640190fd5b60116020526000908152604090205460ff1681565b600f8181548110610e0f57fe5b606080600f80548060200260200160405190810160405280929190818152602001828054801561125d57602002820191906000526020600020905b815473ffffffffffffffffffffffffffffffffffffffff168152600190910190602001808311611232575b505050505091506000825190508067ffffffffffffffff8111801561128157600080fd5b506040519080825280602002602001820160405280156112ab578160200160208202803683370190505b50915060005b818110156113285760116000600f83815481106112ca57fe5b600091825260208083209091015473ffffffffffffffffffffffffffffffffffffffff168352820192909252604001902054835160ff9091169084908390811061131057fe5b911515602092830291909101909101526001016112b1565b50509091565b73ffffffffffffffffffffffffffffffffffffffff81166000908152600d602052604090205460ff166113c257604080517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601860248201527f4f7261636c652041646170746f72206e6f7420666f756e640000000000000000604482015290519081900360640190fd5b600954604080517f52d3824300000000000000000000000000000000000000000000000000000000815273ffffffffffffffffffffffffffffffffffffffff8481166004830152915160009392909216916352d3824391602480820192602092909190829003018186803b15801561143957600080fd5b505afa15801561144d573d6000803e3d6000fd5b505050506040513d602081101561146357600080fd5b505173ffffffffffffffffffffffffffffffffffffffff83166000818152600e60209081526040918290208490558151848152915193945091927f6aebc546a88b3e78f39de087a95a99cadce9673bfa36aced1a7d77d2fd3c5f53929181900390910190a25050565b60106020526000908152604090205481565b60045473ffffffffffffffffffffffffffffffffffffffff1681565b600b60209081526000928352604080842090915290825290205473ffffffffffffffffffffffffffffffffffffffff1681565b60025490565b600e6020526000908152604090205481565b7f000000000000000000000000000000000000000000000000000000000000000081565b604080517fa3818b3b000000000000000000000000000000000000000000000000000000008152336004820152905173ffffffffffffffffffffffffffffffffffffffff7f0000000000000000000000000000000000000000000000000000000000000000169163a3818b3b916024808301926020929190829003018186803b1580156115f557600080fd5b505afa158015611609573d6000803e3d6000fd5b505050506040513d602081101561161f57600080fd5b505161168c57604080517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152600f60248201527f4e6f742066726f6d20766f74696e670000000000000000000000000000000000604482015290519081900360640190fd5b6007819055604080517f66656550657244656c656761746f72000000000000000000000000000000000081526020810183905281517f22ea5a9dcc7fb5bc447fcb472061adc51caa147724a67a6695d49a9dff162509929181900390910190a150565b3373ffffffffffffffffffffffffffffffffffffffff167f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff1663f851a4406040518163ffffffff1660e01b815260040160206040518083038186803b15801561176c57600080fd5b505afa158015611780573d6000803e3d6000fd5b505050506040513d602081101561179657600080fd5b505173ffffffffffffffffffffffffffffffffffffffff16148061186e5750604080517fa3818b3b000000000000000000000000000000000000000000000000000000008152336004820152905173ffffffffffffffffffffffffffffffffffffffff7f0000000000000000000000000000000000000000000000000000000000000000169163a3818b3b916024808301926020929190829003018186803b15801561184157600080fd5b505afa158015611855573d6000803e3d6000fd5b505050506040513d602081101561186b57600080fd5b50515b6118c3576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004018080602001828103825260218152602001806134696021913960400191505060405180910390fd5b604080517ff5ee33480000000000000000000000000000000000000000000000000000000081528215156004820152905173ffffffffffffffffffffffffffffffffffffffff84169163f5ee334891602480830192600092919082900301818387803b15801561193257600080fd5b505af1158015611946573d6000803e3d6000fd5b5050505080156119965760405173ffffffffffffffffffffffffffffffffffffffff8316907fc96ebf6dcdf5c5e56ad8961009b9d49aa6f2d53d5ffe374048f1d603e3b2908a90600090a26119d8565b60405173ffffffffffffffffffffffffffffffffffffffff8316907f7dc5983a5f99179c76b5bbff56fcf9e8373f1a7078dcef4537a5176b333c2bfe90600090a25b5050565b6119e461341b565b60035473ffffffffffffffffffffffffffffffffffffffff908116911614611a6d57604080517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820181905260248201527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e6572604482015290519081900360640190fd5b60035460405160009173ffffffffffffffffffffffffffffffffffffffff16907f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e0908390a3600380547fffffffffffffffffffffffff0000000000000000000000000000000000000000169055565b611ae461341b565b60035473ffffffffffffffffffffffffffffffffffffffff908116911614611b6d57604080517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820181905260248201527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e6572604482015290519081900360640190fd5b60045473ffffffffffffffffffffffffffffffffffffffff1615611bdc576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004018080602001828103825260238152602001806134466023913960400191505060405180910390fd5b600480547fffffffffffffffffffffffff00000000000000000000000000000000000000001673ffffffffffffffffffffffffffffffffffffffff8316179055600f541580611c80575073ffffffffffffffffffffffffffffffffffffffff8216600081815260106020526040902054600f80549091908110611c5b57fe5b60009182526020909120015473ffffffffffffffffffffffffffffffffffffffff1614155b15611d0757600f805473ffffffffffffffffffffffffffffffffffffffff84166000818152601060205260408120839055600183018455929092527f8d1108e10bcb7c27dddfc02ed9d693a074039d026cf4ea4240b40f7d581ac8020180547fffffffffffffffffffffffff00000000000000000000000000000000000000001690911790555b73ffffffffffffffffffffffffffffffffffffffff821660008181526011602090815260409182902080547fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff00166001908117909155825190815291517fa54714518c5d275fdcd3d2a461e4858e4e8cb04fb93cd0bca9d6d34115f264409281900390910190a25050565b600a5481565b604080517fa3818b3b000000000000000000000000000000000000000000000000000000008152336004820152905173ffffffffffffffffffffffffffffffffffffffff7f0000000000000000000000000000000000000000000000000000000000000000169163a3818b3b916024808301926020929190829003018186803b158015611e2357600080fd5b505afa158015611e37573d6000803e3d6000fd5b505050506040513d6020811015611e4d57600080fd5b5051611eba57604080517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152600f60248201527f4e6f742066726f6d20766f74696e670000000000000000000000000000000000604482015290519081900360640190fd5b620186a0811115611f2c57604080517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601460248201527f494e56414c49445f50524f544f434f4c5f464545000000000000000000000000604482015290519081900360640190fd5b6006819055604080517f70726f746f636f6c46656500000000000000000000000000000000000000000081526020810183905281517f22ea5a9dcc7fb5bc447fcb472061adc51caa147724a67a6695d49a9dff162509929181900390910190a150565b604080517fa3818b3b000000000000000000000000000000000000000000000000000000008152336004820152905173ffffffffffffffffffffffffffffffffffffffff7f0000000000000000000000000000000000000000000000000000000000000000169163a3818b3b916024808301926020929190829003018186803b15801561201b57600080fd5b505afa15801561202f573d6000803e3d6000fd5b505050506040513d602081101561204557600080fd5b50516120b257604080517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152600f60248201527f4e6f742066726f6d20766f74696e670000000000000000000000000000000000604482015290519081900360640190fd5b600f541580612116575073ffffffffffffffffffffffffffffffffffffffff8216600081815260106020526040902054600f805490919081106120f157fe5b60009182526020909120015473ffffffffffffffffffffffffffffffffffffffff1614155b1561219d57600f805473ffffffffffffffffffffffffffffffffffffffff84166000818152601060205260408120839055600183018455929092527f8d1108e10bcb7c27dddfc02ed9d693a074039d026cf4ea4240b40f7d581ac8020180547fffffffffffffffffffffffff00000000000000000000000000000000000000001690911790555b73ffffffffffffffffffffffffffffffffffffffff821660008181526011602090815260409182902080547fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff0016851515908117909155825190815291517fa54714518c5d275fdcd3d2a461e4858e4e8cb04fb93cd0bca9d6d34115f264409281900390910190a25050565b60035473ffffffffffffffffffffffffffffffffffffffff1690565b60008173ffffffffffffffffffffffffffffffffffffffff168373ffffffffffffffffffffffffffffffffffffffff16106122e057604080517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601660248201527f41646472657373206d75737420626520736f7274656400000000000000000000604482015290519081900360640190fd5b5073ffffffffffffffffffffffffffffffffffffffff8083166000908152600b602090815260408083208585168452909152902054168061238257604080517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152600f60248201527f4e6f206f7261636c6520666f756e640000000000000000000000000000000000604482015290519081900360640190fd5b73ffffffffffffffffffffffffffffffffffffffff81166000908152600e6020526040902054600a5481101561241957604080517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601460248201527f4f7261636c652073636f726520746f6f206c6f77000000000000000000000000604482015290519081900360640190fd5b5092915050565b60075481565b600d6020526000908152604090205460ff1681565b60065481565b60005460ff1681565b600054610100900473ffffffffffffffffffffffffffffffffffffffff1681565b60008173ffffffffffffffffffffffffffffffffffffffff168373ffffffffffffffffffffffffffffffffffffffff16141561250857604080517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601360248201527f4944454e544943414c5f41444452455353455300000000000000000000000000604482015290519081900360640190fd5b6000808373ffffffffffffffffffffffffffffffffffffffff168573ffffffffffffffffffffffffffffffffffffffff1610612545578385612548565b84845b909250905073ffffffffffffffffffffffffffffffffffffffff82166125cf57604080517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152600c60248201527f5a45524f5f414444524553530000000000000000000000000000000000000000604482015290519081900360640190fd5b73ffffffffffffffffffffffffffffffffffffffff82811660009081526001602090815260408083208585168452909152902054161561267057604080517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152600b60248201527f504149525f455849535453000000000000000000000000000000000000000000604482015290519081900360640190fd5b604080517fffffffffffffffffffffffffffffffffffffffff000000000000000000000000606085811b821660208085019190915285821b90921660348401528351602881850301815260488401855280519083012060008054606c80870184905287518088039091018152608c909601875293850180517bffffffffffffffffffffffffffffffffffffffffffffffffffffffff167fed25a5a20000000000000000000000000000000000000000000000000000000017815295518551929691959394610100900473ffffffffffffffffffffffffffffffffffffffff169392909182918083835b6020831061279657805182527fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe09092019160209182019101612759565b6001836020036101000a038019825116818451168082178552505050505050905001915050600060405180830381855af49150503d80600081146127f6576040519150601f19603f3d011682016040523d82523d6000602084013e6127fb565b606091505b50915091508161286c57604080517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601560248201527f4661696c656420746f2063726561746520706169720000000000000000000000604482015290519081900360640190fd5b80806020019051602081101561288157600080fd5b5051604080517f485cc95500000000000000000000000000000000000000000000000000000000815273ffffffffffffffffffffffffffffffffffffffff8881166004830152878116602483015291519298509088169163485cc9559160448082019260009290919082900301818387803b1580156128ff57600080fd5b505af1158015612913573d6000803e3d6000fd5b5050505073ffffffffffffffffffffffffffffffffffffffff85811660008181526001602081815260408084208a87168086529083528185208054978e167fffffffffffffffffffffffff0000000000000000000000000000000000000000988916811790915584845282862087875284528286208054891682179055600280549586018155958690527f405787fa12a823e0f2b7631cc41b3ba8828b3321ca811111fa75cd3aa3bb5ace90940180549097168417909655925483519283529082015281517f0d3648bd0f6ba80134a33ba9275ac585d9d315f0ad8355cddefde31afa28d0e9929181900390910190a3505050505092915050565b600f5490565b604080517fa3818b3b000000000000000000000000000000000000000000000000000000008152336004820152905173ffffffffffffffffffffffffffffffffffffffff7f0000000000000000000000000000000000000000000000000000000000000000169163a3818b3b916024808301926020929190829003018186803b158015612aa057600080fd5b505afa158015612ab4573d6000803e3d6000fd5b505050506040513d6020811015612aca57600080fd5b5051612b3757604080517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152600f60248201527f4e6f742066726f6d20766f74696e670000000000000000000000000000000000604482015290519081900360640190fd5b600880547fffffffffffffffffffffffff00000000000000000000000000000000000000001673ffffffffffffffffffffffffffffffffffffffff83161790819055604080517f70726f746f636f6c466565546f00000000000000000000000000000000000000815260609290921b7fffffffffffffffffffffffffffffffffffffffff00000000000000000000000016602083015280517f22ea5a9dcc7fb5bc447fcb472061adc51caa147724a67a6695d49a9dff1625099281900390910190a150565b600160209081526000928352604080842090915290825290205473ffffffffffffffffffffffffffffffffffffffff1681565b60085473ffffffffffffffffffffffffffffffffffffffff1681565b612c5361341b565b60035473ffffffffffffffffffffffffffffffffffffffff908116911614612cdc57604080517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820181905260248201527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e6572604482015290519081900360640190fd5b73ffffffffffffffffffffffffffffffffffffffff8116612d48576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004018080602001828103825260268152602001806134206026913960400191505060405180910390fd5b60035460405173ffffffffffffffffffffffffffffffffffffffff8084169216907f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e090600090a3600380547fffffffffffffffffffffffff00000000000000000000000000000000000000001673ffffffffffffffffffffffffffffffffffffffff92909216919091179055565b3373ffffffffffffffffffffffffffffffffffffffff167f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff1663f851a4406040518163ffffffff1660e01b815260040160206040518083038186803b158015612e5357600080fd5b505afa158015612e67573d6000803e3d6000fd5b505050506040513d6020811015612e7d57600080fd5b505173ffffffffffffffffffffffffffffffffffffffff161480612f555750604080517fa3818b3b000000000000000000000000000000000000000000000000000000008152336004820152905173ffffffffffffffffffffffffffffffffffffffff7f0000000000000000000000000000000000000000000000000000000000000000169163a3818b3b916024808301926020929190829003018186803b158015612f2857600080fd5b505afa158015612f3c573d6000803e3d6000fd5b505050506040513d6020811015612f5257600080fd5b50515b612faa576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004018080602001828103825260218152602001806134696021913960400191505060405180910390fd5b600080547fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff0016821515179081905560ff161561300e576040517f71d46a587e8ae446d9442949c41f57019d17b5b4f3610941960517c9c230304790600090a1613038565b6040517fb821dc27f036017c075c6746b9e8608a15f78f90a8c03acbce13e9438ca76e1b90600090a15b50565b600c6020526000908152604090205481565b60095473ffffffffffffffffffffffffffffffffffffffff1681565b604080517fa3818b3b000000000000000000000000000000000000000000000000000000008152336004820152905173ffffffffffffffffffffffffffffffffffffffff7f0000000000000000000000000000000000000000000000000000000000000000169163a3818b3b916024808301926020929190829003018186803b1580156130f557600080fd5b505afa158015613109573d6000803e3d6000fd5b505050506040513d602081101561311f57600080fd5b505161318c57604080517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152600f60248201527f4e6f742066726f6d20766f74696e670000000000000000000000000000000000604482015290519081900360640190fd5b8173ffffffffffffffffffffffffffffffffffffffff168373ffffffffffffffffffffffffffffffffffffffff161061322657604080517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601a60248201527f496e76616c696420616464726573732070616972206f72646572000000000000604482015290519081900360640190fd5b604080517f88462c8d00000000000000000000000000000000000000000000000000000000815273ffffffffffffffffffffffffffffffffffffffff858116600483015284811660248301529151918316916388462c8d91604480820192602092909190829003018186803b15801561329e57600080fd5b505afa1580156132b2573d6000803e3d6000fd5b505050506040513d60208110156132c857600080fd5b505161333557604080517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601c60248201527f50616972206e6f7420737570706f72746564206279206f7261636c6500000000604482015290519081900360640190fd5b73ffffffffffffffffffffffffffffffffffffffff8084166000818152600b6020818152604080842088871680865290835281852080549789167fffffffffffffffffffffffff00000000000000000000000000000000000000009889168117909155938352818520868652835281852080549097168417909655828452600d82529283902080547fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff00166001179055825191825291517fb4af261139740f02bdfd600c83590a7b42e71fd7798891b2b39cc7203e3de147929181900390910190a3505050565b339056fe4f776e61626c653a206e6577206f776e657220697320746865207a65726f20616464726573734f7261636c654c697175696469747950726f766964657220616c7265616479207365744e6f742066726f6d2073687574646f776e2061646d696e206f7220766f74696e67a26469706673582212205d6f6cb97760b31c2abfd3aa45c5781bc6acc4fdc310c4cba004b29f210e683f64736f6c634300060b003322ea5a9dcc7fb5bc447fcb472061adc51caa147724a67a6695d49a9dff162509"
    };
});
define("@scom/scom-swap/contracts/oswap-openswap-contract/contracts/oracle/OSWAP_OracleFactory.ts", ["require", "exports", "@ijstech/eth-contract", "@scom/scom-swap/contracts/oswap-openswap-contract/contracts/oracle/OSWAP_OracleFactory.json.ts"], function (require, exports, eth_contract_18, OSWAP_OracleFactory_json_1) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.OSWAP_OracleFactory = void 0;
    class OSWAP_OracleFactory extends eth_contract_18.Contract {
        constructor(wallet, address) {
            super(wallet, address, OSWAP_OracleFactory_json_1.default.abi, OSWAP_OracleFactory_json_1.default.bytecode);
            this.assign();
        }
        deploy(params, options) {
            return this.__deploy([params.governance, params.pairCreator, this.wallet.utils.toString(params.tradeFee), this.wallet.utils.toString(params.protocolFee), this.wallet.utils.toString(params.feePerDelegator), params.protocolFeeTo], options);
        }
        parseOracleAddedEvent(receipt) {
            return this.parseEvents(receipt, "OracleAdded").map(e => this.decodeOracleAddedEvent(e));
        }
        decodeOracleAddedEvent(event) {
            let result = event.data;
            return {
                token0: result.token0,
                token1: result.token1,
                oracle: result.oracle,
                _event: event
            };
        }
        parseOracleScoresEvent(receipt) {
            return this.parseEvents(receipt, "OracleScores").map(e => this.decodeOracleScoresEvent(e));
        }
        decodeOracleScoresEvent(event) {
            let result = event.data;
            return {
                oracle: result.oracle,
                score: new eth_contract_18.BigNumber(result.score),
                _event: event
            };
        }
        parseOwnershipTransferredEvent(receipt) {
            return this.parseEvents(receipt, "OwnershipTransferred").map(e => this.decodeOwnershipTransferredEvent(e));
        }
        decodeOwnershipTransferredEvent(event) {
            let result = event.data;
            return {
                previousOwner: result.previousOwner,
                newOwner: result.newOwner,
                _event: event
            };
        }
        parsePairCreatedEvent(receipt) {
            return this.parseEvents(receipt, "PairCreated").map(e => this.decodePairCreatedEvent(e));
        }
        decodePairCreatedEvent(event) {
            let result = event.data;
            return {
                token0: result.token0,
                token1: result.token1,
                pair: result.pair,
                newSize: new eth_contract_18.BigNumber(result.newSize),
                _event: event
            };
        }
        parsePairRestartedEvent(receipt) {
            return this.parseEvents(receipt, "PairRestarted").map(e => this.decodePairRestartedEvent(e));
        }
        decodePairRestartedEvent(event) {
            let result = event.data;
            return {
                pair: result.pair,
                _event: event
            };
        }
        parsePairShutdownedEvent(receipt) {
            return this.parseEvents(receipt, "PairShutdowned").map(e => this.decodePairShutdownedEvent(e));
        }
        decodePairShutdownedEvent(event) {
            let result = event.data;
            return {
                pair: result.pair,
                _event: event
            };
        }
        parseParamSetEvent(receipt) {
            return this.parseEvents(receipt, "ParamSet").map(e => this.decodeParamSetEvent(e));
        }
        decodeParamSetEvent(event) {
            let result = event.data;
            return {
                name: result.name,
                value: result.value,
                _event: event
            };
        }
        parseParamSet2Event(receipt) {
            return this.parseEvents(receipt, "ParamSet2").map(e => this.decodeParamSet2Event(e));
        }
        decodeParamSet2Event(event) {
            let result = event.data;
            return {
                name: result.name,
                value1: result.value1,
                value2: result.value2,
                _event: event
            };
        }
        parseRestartedEvent(receipt) {
            return this.parseEvents(receipt, "Restarted").map(e => this.decodeRestartedEvent(e));
        }
        decodeRestartedEvent(event) {
            let result = event.data;
            return {
                _event: event
            };
        }
        parseShutdownedEvent(receipt) {
            return this.parseEvents(receipt, "Shutdowned").map(e => this.decodeShutdownedEvent(e));
        }
        decodeShutdownedEvent(event) {
            let result = event.data;
            return {
                _event: event
            };
        }
        parseWhitelistedEvent(receipt) {
            return this.parseEvents(receipt, "Whitelisted").map(e => this.decodeWhitelistedEvent(e));
        }
        decodeWhitelistedEvent(event) {
            let result = event.data;
            return {
                who: result.who,
                allow: result.allow,
                _event: event
            };
        }
        assign() {
            let allPairs_call = async (param1, options) => {
                let result = await this.call('allPairs', [this.wallet.utils.toString(param1)], options);
                return result;
            };
            this.allPairs = allPairs_call;
            let allPairsLength_call = async (options) => {
                let result = await this.call('allPairsLength', [], options);
                return new eth_contract_18.BigNumber(result);
            };
            this.allPairsLength = allPairsLength_call;
            let allWhiteListed_call = async (options) => {
                let result = await this.call('allWhiteListed', [], options);
                return {
                    list: result.list,
                    allowed: result.allowed
                };
            };
            this.allWhiteListed = allWhiteListed_call;
            let checkAndGetOracleParams = (params) => [params.tokenA, params.tokenB];
            let checkAndGetOracle_call = async (params, options) => {
                let result = await this.call('checkAndGetOracle', checkAndGetOracleParams(params), options);
                return result;
            };
            this.checkAndGetOracle = checkAndGetOracle_call;
            let checkAndGetOracleSwapParamsParams = (params) => [params.tokenA, params.tokenB];
            let checkAndGetOracleSwapParams_call = async (params, options) => {
                let result = await this.call('checkAndGetOracleSwapParams', checkAndGetOracleSwapParamsParams(params), options);
                return {
                    oracle_: result.oracle_,
                    tradeFee_: new eth_contract_18.BigNumber(result.tradeFee_),
                    protocolFee_: new eth_contract_18.BigNumber(result.protocolFee_)
                };
            };
            this.checkAndGetOracleSwapParams = checkAndGetOracleSwapParams_call;
            let feePerDelegator_call = async (options) => {
                let result = await this.call('feePerDelegator', [], options);
                return new eth_contract_18.BigNumber(result);
            };
            this.feePerDelegator = feePerDelegator_call;
            let getPairParams = (params) => [params.param1, params.param2];
            let getPair_call = async (params, options) => {
                let result = await this.call('getPair', getPairParams(params), options);
                return result;
            };
            this.getPair = getPair_call;
            let governance_call = async (options) => {
                let result = await this.call('governance', [], options);
                return result;
            };
            this.governance = governance_call;
            let isLive_call = async (options) => {
                let result = await this.call('isLive', [], options);
                return result;
            };
            this.isLive = isLive_call;
            let isOracle_call = async (param1, options) => {
                let result = await this.call('isOracle', [param1], options);
                return result;
            };
            this.isOracle = isOracle_call;
            let isWhitelisted_call = async (param1, options) => {
                let result = await this.call('isWhitelisted', [param1], options);
                return result;
            };
            this.isWhitelisted = isWhitelisted_call;
            let minLotSize_call = async (param1, options) => {
                let result = await this.call('minLotSize', [param1], options);
                return new eth_contract_18.BigNumber(result);
            };
            this.minLotSize = minLotSize_call;
            let minOracleScore_call = async (options) => {
                let result = await this.call('minOracleScore', [], options);
                return new eth_contract_18.BigNumber(result);
            };
            this.minOracleScore = minOracleScore_call;
            let oracleLiquidityProvider_call = async (options) => {
                let result = await this.call('oracleLiquidityProvider', [], options);
                return result;
            };
            this.oracleLiquidityProvider = oracleLiquidityProvider_call;
            let oracleScores_call = async (param1, options) => {
                let result = await this.call('oracleScores', [param1], options);
                return new eth_contract_18.BigNumber(result);
            };
            this.oracleScores = oracleScores_call;
            let oraclesParams = (params) => [params.param1, params.param2];
            let oracles_call = async (params, options) => {
                let result = await this.call('oracles', oraclesParams(params), options);
                return result;
            };
            this.oracles = oracles_call;
            let owner_call = async (options) => {
                let result = await this.call('owner', [], options);
                return result;
            };
            this.owner = owner_call;
            let pairCreator_call = async (options) => {
                let result = await this.call('pairCreator', [], options);
                return result;
            };
            this.pairCreator = pairCreator_call;
            let protocolFee_call = async (options) => {
                let result = await this.call('protocolFee', [], options);
                return new eth_contract_18.BigNumber(result);
            };
            this.protocolFee = protocolFee_call;
            let protocolFeeTo_call = async (options) => {
                let result = await this.call('protocolFeeTo', [], options);
                return result;
            };
            this.protocolFeeTo = protocolFeeTo_call;
            let securityScoreOracle_call = async (options) => {
                let result = await this.call('securityScoreOracle', [], options);
                return result;
            };
            this.securityScoreOracle = securityScoreOracle_call;
            let tradeFee_call = async (options) => {
                let result = await this.call('tradeFee', [], options);
                return new eth_contract_18.BigNumber(result);
            };
            this.tradeFee = tradeFee_call;
            let whitelisted_call = async (param1, options) => {
                let result = await this.call('whitelisted', [this.wallet.utils.toString(param1)], options);
                return result;
            };
            this.whitelisted = whitelisted_call;
            let whitelistedInv_call = async (param1, options) => {
                let result = await this.call('whitelistedInv', [param1], options);
                return new eth_contract_18.BigNumber(result);
            };
            this.whitelistedInv = whitelistedInv_call;
            let whitelistedLength_call = async (options) => {
                let result = await this.call('whitelistedLength', [], options);
                return new eth_contract_18.BigNumber(result);
            };
            this.whitelistedLength = whitelistedLength_call;
            let addOldOracleToNewPairParams = (params) => [params.tokenA, params.tokenB, params.oracle];
            let addOldOracleToNewPair_send = async (params, options) => {
                let result = await this.send('addOldOracleToNewPair', addOldOracleToNewPairParams(params), options);
                return result;
            };
            let addOldOracleToNewPair_call = async (params, options) => {
                let result = await this.call('addOldOracleToNewPair', addOldOracleToNewPairParams(params), options);
                return;
            };
            let addOldOracleToNewPair_txData = async (params, options) => {
                let result = await this.txData('addOldOracleToNewPair', addOldOracleToNewPairParams(params), options);
                return result;
            };
            this.addOldOracleToNewPair = Object.assign(addOldOracleToNewPair_send, {
                call: addOldOracleToNewPair_call,
                txData: addOldOracleToNewPair_txData
            });
            let createPairParams = (params) => [params.tokenA, params.tokenB];
            let createPair_send = async (params, options) => {
                let result = await this.send('createPair', createPairParams(params), options);
                return result;
            };
            let createPair_call = async (params, options) => {
                let result = await this.call('createPair', createPairParams(params), options);
                return result;
            };
            let createPair_txData = async (params, options) => {
                let result = await this.txData('createPair', createPairParams(params), options);
                return result;
            };
            this.createPair = Object.assign(createPair_send, {
                call: createPair_call,
                txData: createPair_txData
            });
            let renounceOwnership_send = async (options) => {
                let result = await this.send('renounceOwnership', [], options);
                return result;
            };
            let renounceOwnership_call = async (options) => {
                let result = await this.call('renounceOwnership', [], options);
                return;
            };
            let renounceOwnership_txData = async (options) => {
                let result = await this.txData('renounceOwnership', [], options);
                return result;
            };
            this.renounceOwnership = Object.assign(renounceOwnership_send, {
                call: renounceOwnership_call,
                txData: renounceOwnership_txData
            });
            let setFeePerDelegator_send = async (feePerDelegator, options) => {
                let result = await this.send('setFeePerDelegator', [this.wallet.utils.toString(feePerDelegator)], options);
                return result;
            };
            let setFeePerDelegator_call = async (feePerDelegator, options) => {
                let result = await this.call('setFeePerDelegator', [this.wallet.utils.toString(feePerDelegator)], options);
                return;
            };
            let setFeePerDelegator_txData = async (feePerDelegator, options) => {
                let result = await this.txData('setFeePerDelegator', [this.wallet.utils.toString(feePerDelegator)], options);
                return result;
            };
            this.setFeePerDelegator = Object.assign(setFeePerDelegator_send, {
                call: setFeePerDelegator_call,
                txData: setFeePerDelegator_txData
            });
            let setLive_send = async (isLive, options) => {
                let result = await this.send('setLive', [isLive], options);
                return result;
            };
            let setLive_call = async (isLive, options) => {
                let result = await this.call('setLive', [isLive], options);
                return;
            };
            let setLive_txData = async (isLive, options) => {
                let result = await this.txData('setLive', [isLive], options);
                return result;
            };
            this.setLive = Object.assign(setLive_send, {
                call: setLive_call,
                txData: setLive_txData
            });
            let setLiveForPairParams = (params) => [params.pair, params.live];
            let setLiveForPair_send = async (params, options) => {
                let result = await this.send('setLiveForPair', setLiveForPairParams(params), options);
                return result;
            };
            let setLiveForPair_call = async (params, options) => {
                let result = await this.call('setLiveForPair', setLiveForPairParams(params), options);
                return;
            };
            let setLiveForPair_txData = async (params, options) => {
                let result = await this.txData('setLiveForPair', setLiveForPairParams(params), options);
                return result;
            };
            this.setLiveForPair = Object.assign(setLiveForPair_send, {
                call: setLiveForPair_call,
                txData: setLiveForPair_txData
            });
            let setMinLotSizeParams = (params) => [params.token, this.wallet.utils.toString(params.minLotSize)];
            let setMinLotSize_send = async (params, options) => {
                let result = await this.send('setMinLotSize', setMinLotSizeParams(params), options);
                return result;
            };
            let setMinLotSize_call = async (params, options) => {
                let result = await this.call('setMinLotSize', setMinLotSizeParams(params), options);
                return;
            };
            let setMinLotSize_txData = async (params, options) => {
                let result = await this.txData('setMinLotSize', setMinLotSizeParams(params), options);
                return result;
            };
            this.setMinLotSize = Object.assign(setMinLotSize_send, {
                call: setMinLotSize_call,
                txData: setMinLotSize_txData
            });
            let setOracleParams = (params) => [params.tokenA, params.tokenB, params.oracle];
            let setOracle_send = async (params, options) => {
                let result = await this.send('setOracle', setOracleParams(params), options);
                return result;
            };
            let setOracle_call = async (params, options) => {
                let result = await this.call('setOracle', setOracleParams(params), options);
                return;
            };
            let setOracle_txData = async (params, options) => {
                let result = await this.txData('setOracle', setOracleParams(params), options);
                return result;
            };
            this.setOracle = Object.assign(setOracle_send, {
                call: setOracle_call,
                txData: setOracle_txData
            });
            let setOracleLiquidityProviderParams = (params) => [params.oracleRouter, params.oracleLiquidityProvider];
            let setOracleLiquidityProvider_send = async (params, options) => {
                let result = await this.send('setOracleLiquidityProvider', setOracleLiquidityProviderParams(params), options);
                return result;
            };
            let setOracleLiquidityProvider_call = async (params, options) => {
                let result = await this.call('setOracleLiquidityProvider', setOracleLiquidityProviderParams(params), options);
                return;
            };
            let setOracleLiquidityProvider_txData = async (params, options) => {
                let result = await this.txData('setOracleLiquidityProvider', setOracleLiquidityProviderParams(params), options);
                return result;
            };
            this.setOracleLiquidityProvider = Object.assign(setOracleLiquidityProvider_send, {
                call: setOracleLiquidityProvider_call,
                txData: setOracleLiquidityProvider_txData
            });
            let setProtocolFee_send = async (protocolFee, options) => {
                let result = await this.send('setProtocolFee', [this.wallet.utils.toString(protocolFee)], options);
                return result;
            };
            let setProtocolFee_call = async (protocolFee, options) => {
                let result = await this.call('setProtocolFee', [this.wallet.utils.toString(protocolFee)], options);
                return;
            };
            let setProtocolFee_txData = async (protocolFee, options) => {
                let result = await this.txData('setProtocolFee', [this.wallet.utils.toString(protocolFee)], options);
                return result;
            };
            this.setProtocolFee = Object.assign(setProtocolFee_send, {
                call: setProtocolFee_call,
                txData: setProtocolFee_txData
            });
            let setProtocolFeeTo_send = async (protocolFeeTo, options) => {
                let result = await this.send('setProtocolFeeTo', [protocolFeeTo], options);
                return result;
            };
            let setProtocolFeeTo_call = async (protocolFeeTo, options) => {
                let result = await this.call('setProtocolFeeTo', [protocolFeeTo], options);
                return;
            };
            let setProtocolFeeTo_txData = async (protocolFeeTo, options) => {
                let result = await this.txData('setProtocolFeeTo', [protocolFeeTo], options);
                return result;
            };
            this.setProtocolFeeTo = Object.assign(setProtocolFeeTo_send, {
                call: setProtocolFeeTo_call,
                txData: setProtocolFeeTo_txData
            });
            let setSecurityScoreOracleParams = (params) => [params.securityScoreOracle, this.wallet.utils.toString(params.minOracleScore)];
            let setSecurityScoreOracle_send = async (params, options) => {
                let result = await this.send('setSecurityScoreOracle', setSecurityScoreOracleParams(params), options);
                return result;
            };
            let setSecurityScoreOracle_call = async (params, options) => {
                let result = await this.call('setSecurityScoreOracle', setSecurityScoreOracleParams(params), options);
                return;
            };
            let setSecurityScoreOracle_txData = async (params, options) => {
                let result = await this.txData('setSecurityScoreOracle', setSecurityScoreOracleParams(params), options);
                return result;
            };
            this.setSecurityScoreOracle = Object.assign(setSecurityScoreOracle_send, {
                call: setSecurityScoreOracle_call,
                txData: setSecurityScoreOracle_txData
            });
            let setTradeFee_send = async (tradeFee, options) => {
                let result = await this.send('setTradeFee', [this.wallet.utils.toString(tradeFee)], options);
                return result;
            };
            let setTradeFee_call = async (tradeFee, options) => {
                let result = await this.call('setTradeFee', [this.wallet.utils.toString(tradeFee)], options);
                return;
            };
            let setTradeFee_txData = async (tradeFee, options) => {
                let result = await this.txData('setTradeFee', [this.wallet.utils.toString(tradeFee)], options);
                return result;
            };
            this.setTradeFee = Object.assign(setTradeFee_send, {
                call: setTradeFee_call,
                txData: setTradeFee_txData
            });
            let setWhiteListParams = (params) => [params.who, params.allow];
            let setWhiteList_send = async (params, options) => {
                let result = await this.send('setWhiteList', setWhiteListParams(params), options);
                return result;
            };
            let setWhiteList_call = async (params, options) => {
                let result = await this.call('setWhiteList', setWhiteListParams(params), options);
                return;
            };
            let setWhiteList_txData = async (params, options) => {
                let result = await this.txData('setWhiteList', setWhiteListParams(params), options);
                return result;
            };
            this.setWhiteList = Object.assign(setWhiteList_send, {
                call: setWhiteList_call,
                txData: setWhiteList_txData
            });
            let transferOwnership_send = async (newOwner, options) => {
                let result = await this.send('transferOwnership', [newOwner], options);
                return result;
            };
            let transferOwnership_call = async (newOwner, options) => {
                let result = await this.call('transferOwnership', [newOwner], options);
                return;
            };
            let transferOwnership_txData = async (newOwner, options) => {
                let result = await this.txData('transferOwnership', [newOwner], options);
                return result;
            };
            this.transferOwnership = Object.assign(transferOwnership_send, {
                call: transferOwnership_call,
                txData: transferOwnership_txData
            });
            let updateOracleScore_send = async (oracle, options) => {
                let result = await this.send('updateOracleScore', [oracle], options);
                return result;
            };
            let updateOracleScore_call = async (oracle, options) => {
                let result = await this.call('updateOracleScore', [oracle], options);
                return;
            };
            let updateOracleScore_txData = async (oracle, options) => {
                let result = await this.txData('updateOracleScore', [oracle], options);
                return result;
            };
            this.updateOracleScore = Object.assign(updateOracleScore_send, {
                call: updateOracleScore_call,
                txData: updateOracleScore_txData
            });
        }
    }
    OSWAP_OracleFactory._abi = OSWAP_OracleFactory_json_1.default.abi;
    exports.OSWAP_OracleFactory = OSWAP_OracleFactory;
});
define("@scom/scom-swap/contracts/oswap-openswap-contract/contracts/oracle/OSWAP_OracleLiquidityProvider.json.ts", ["require", "exports"], function (require, exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    ///<amd-module name='@scom/scom-swap/contracts/oswap-openswap-contract/contracts/oracle/OSWAP_OracleLiquidityProvider.json.ts'/> 
    exports.default = {
        "abi": [
            { "inputs": [{ "internalType": "address", "name": "_factory", "type": "address" }, { "internalType": "address", "name": "_WETH", "type": "address" }], "stateMutability": "nonpayable", "type": "constructor" },
            { "inputs": [], "name": "WETH", "outputs": [{ "internalType": "address", "name": "", "type": "address" }], "stateMutability": "view", "type": "function" },
            { "inputs": [{ "internalType": "address", "name": "tokenA", "type": "address" }, { "internalType": "address", "name": "tokenB", "type": "address" }, { "internalType": "bool", "name": "addingTokenA", "type": "bool" }, { "internalType": "uint256", "name": "staked", "type": "uint256" }, { "internalType": "uint256", "name": "afterIndex", "type": "uint256" }, { "internalType": "uint256", "name": "amountIn", "type": "uint256" }, { "internalType": "uint256", "name": "expire", "type": "uint256" }, { "internalType": "bool", "name": "enable", "type": "bool" }, { "internalType": "uint256", "name": "deadline", "type": "uint256" }], "name": "addLiquidity", "outputs": [{ "internalType": "uint256", "name": "index", "type": "uint256" }], "stateMutability": "nonpayable", "type": "function" },
            { "inputs": [{ "internalType": "address", "name": "tokenA", "type": "address" }, { "internalType": "bool", "name": "addingTokenA", "type": "bool" }, { "internalType": "uint256", "name": "staked", "type": "uint256" }, { "internalType": "uint256", "name": "afterIndex", "type": "uint256" }, { "internalType": "uint256", "name": "amountAIn", "type": "uint256" }, { "internalType": "uint256", "name": "expire", "type": "uint256" }, { "internalType": "bool", "name": "enable", "type": "bool" }, { "internalType": "uint256", "name": "deadline", "type": "uint256" }], "name": "addLiquidityETH", "outputs": [{ "internalType": "uint256", "name": "index", "type": "uint256" }], "stateMutability": "payable", "type": "function" },
            { "inputs": [], "name": "factory", "outputs": [{ "internalType": "address", "name": "", "type": "address" }], "stateMutability": "view", "type": "function" },
            { "inputs": [], "name": "govToken", "outputs": [{ "internalType": "address", "name": "", "type": "address" }], "stateMutability": "view", "type": "function" },
            { "inputs": [{ "internalType": "address", "name": "tokenA", "type": "address" }, { "internalType": "address", "name": "tokenB", "type": "address" }, { "internalType": "address", "name": "to", "type": "address" }, { "internalType": "uint256", "name": "deadline", "type": "uint256" }], "name": "removeAllLiquidity", "outputs": [{ "internalType": "uint256", "name": "amountA", "type": "uint256" }, { "internalType": "uint256", "name": "amountB", "type": "uint256" }], "stateMutability": "nonpayable", "type": "function" },
            { "inputs": [{ "internalType": "address", "name": "tokenA", "type": "address" }, { "internalType": "address", "name": "to", "type": "address" }, { "internalType": "uint256", "name": "deadline", "type": "uint256" }], "name": "removeAllLiquidityETH", "outputs": [{ "internalType": "uint256", "name": "amountToken", "type": "uint256" }, { "internalType": "uint256", "name": "amountETH", "type": "uint256" }], "stateMutability": "nonpayable", "type": "function" },
            { "inputs": [{ "internalType": "address", "name": "tokenA", "type": "address" }, { "internalType": "address", "name": "tokenB", "type": "address" }, { "internalType": "bool", "name": "removingTokenA", "type": "bool" }, { "internalType": "address", "name": "to", "type": "address" }, { "internalType": "uint256", "name": "unstake", "type": "uint256" }, { "internalType": "uint256", "name": "afterIndex", "type": "uint256" }, { "internalType": "uint256", "name": "amountOut", "type": "uint256" }, { "internalType": "uint256", "name": "reserveOut", "type": "uint256" }, { "internalType": "uint256", "name": "expire", "type": "uint256" }, { "internalType": "bool", "name": "enable", "type": "bool" }, { "internalType": "uint256", "name": "deadline", "type": "uint256" }], "name": "removeLiquidity", "outputs": [], "stateMutability": "nonpayable", "type": "function" },
            { "inputs": [{ "internalType": "address", "name": "tokenA", "type": "address" }, { "internalType": "bool", "name": "removingTokenA", "type": "bool" }, { "internalType": "address", "name": "to", "type": "address" }, { "internalType": "uint256", "name": "unstake", "type": "uint256" }, { "internalType": "uint256", "name": "afterIndex", "type": "uint256" }, { "internalType": "uint256", "name": "amountOut", "type": "uint256" }, { "internalType": "uint256", "name": "reserveOut", "type": "uint256" }, { "internalType": "uint256", "name": "expire", "type": "uint256" }, { "internalType": "bool", "name": "enable", "type": "bool" }, { "internalType": "uint256", "name": "deadline", "type": "uint256" }], "name": "removeLiquidityETH", "outputs": [], "stateMutability": "nonpayable", "type": "function" },
            { "stateMutability": "payable", "type": "receive" }
        ],
        "bytecode": ""
    };
});
define("@scom/scom-swap/contracts/oswap-openswap-contract/contracts/oracle/OSWAP_OracleLiquidityProvider.ts", ["require", "exports", "@ijstech/eth-contract", "@scom/scom-swap/contracts/oswap-openswap-contract/contracts/oracle/OSWAP_OracleLiquidityProvider.json.ts"], function (require, exports, eth_contract_19, OSWAP_OracleLiquidityProvider_json_1) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.OSWAP_OracleLiquidityProvider = void 0;
    class OSWAP_OracleLiquidityProvider extends eth_contract_19.Contract {
        constructor(wallet, address) {
            super(wallet, address, OSWAP_OracleLiquidityProvider_json_1.default.abi, OSWAP_OracleLiquidityProvider_json_1.default.bytecode);
            this.assign();
        }
        deploy(params, options) {
            return this.__deploy([params.factory, params.WETH], options);
        }
        assign() {
            let WETH_call = async (options) => {
                let result = await this.call('WETH', [], options);
                return result;
            };
            this.WETH = WETH_call;
            let factory_call = async (options) => {
                let result = await this.call('factory', [], options);
                return result;
            };
            this.factory = factory_call;
            let govToken_call = async (options) => {
                let result = await this.call('govToken', [], options);
                return result;
            };
            this.govToken = govToken_call;
            let addLiquidityParams = (params) => [params.tokenA, params.tokenB, params.addingTokenA, this.wallet.utils.toString(params.staked), this.wallet.utils.toString(params.afterIndex), this.wallet.utils.toString(params.amountIn), this.wallet.utils.toString(params.expire), params.enable, this.wallet.utils.toString(params.deadline)];
            let addLiquidity_send = async (params, options) => {
                let result = await this.send('addLiquidity', addLiquidityParams(params), options);
                return result;
            };
            let addLiquidity_call = async (params, options) => {
                let result = await this.call('addLiquidity', addLiquidityParams(params), options);
                return new eth_contract_19.BigNumber(result);
            };
            let addLiquidity_txData = async (params, options) => {
                let result = await this.txData('addLiquidity', addLiquidityParams(params), options);
                return result;
            };
            this.addLiquidity = Object.assign(addLiquidity_send, {
                call: addLiquidity_call,
                txData: addLiquidity_txData
            });
            let addLiquidityETHParams = (params) => [params.tokenA, params.addingTokenA, this.wallet.utils.toString(params.staked), this.wallet.utils.toString(params.afterIndex), this.wallet.utils.toString(params.amountAIn), this.wallet.utils.toString(params.expire), params.enable, this.wallet.utils.toString(params.deadline)];
            let addLiquidityETH_send = async (params, options) => {
                let result = await this.send('addLiquidityETH', addLiquidityETHParams(params), options);
                return result;
            };
            let addLiquidityETH_call = async (params, options) => {
                let result = await this.call('addLiquidityETH', addLiquidityETHParams(params), options);
                return new eth_contract_19.BigNumber(result);
            };
            let addLiquidityETH_txData = async (params, options) => {
                let result = await this.txData('addLiquidityETH', addLiquidityETHParams(params), options);
                return result;
            };
            this.addLiquidityETH = Object.assign(addLiquidityETH_send, {
                call: addLiquidityETH_call,
                txData: addLiquidityETH_txData
            });
            let removeAllLiquidityParams = (params) => [params.tokenA, params.tokenB, params.to, this.wallet.utils.toString(params.deadline)];
            let removeAllLiquidity_send = async (params, options) => {
                let result = await this.send('removeAllLiquidity', removeAllLiquidityParams(params), options);
                return result;
            };
            let removeAllLiquidity_call = async (params, options) => {
                let result = await this.call('removeAllLiquidity', removeAllLiquidityParams(params), options);
                return {
                    amountA: new eth_contract_19.BigNumber(result.amountA),
                    amountB: new eth_contract_19.BigNumber(result.amountB)
                };
            };
            let removeAllLiquidity_txData = async (params, options) => {
                let result = await this.txData('removeAllLiquidity', removeAllLiquidityParams(params), options);
                return result;
            };
            this.removeAllLiquidity = Object.assign(removeAllLiquidity_send, {
                call: removeAllLiquidity_call,
                txData: removeAllLiquidity_txData
            });
            let removeAllLiquidityETHParams = (params) => [params.tokenA, params.to, this.wallet.utils.toString(params.deadline)];
            let removeAllLiquidityETH_send = async (params, options) => {
                let result = await this.send('removeAllLiquidityETH', removeAllLiquidityETHParams(params), options);
                return result;
            };
            let removeAllLiquidityETH_call = async (params, options) => {
                let result = await this.call('removeAllLiquidityETH', removeAllLiquidityETHParams(params), options);
                return {
                    amountToken: new eth_contract_19.BigNumber(result.amountToken),
                    amountETH: new eth_contract_19.BigNumber(result.amountETH)
                };
            };
            let removeAllLiquidityETH_txData = async (params, options) => {
                let result = await this.txData('removeAllLiquidityETH', removeAllLiquidityETHParams(params), options);
                return result;
            };
            this.removeAllLiquidityETH = Object.assign(removeAllLiquidityETH_send, {
                call: removeAllLiquidityETH_call,
                txData: removeAllLiquidityETH_txData
            });
            let removeLiquidityParams = (params) => [params.tokenA, params.tokenB, params.removingTokenA, params.to, this.wallet.utils.toString(params.unstake), this.wallet.utils.toString(params.afterIndex), this.wallet.utils.toString(params.amountOut), this.wallet.utils.toString(params.reserveOut), this.wallet.utils.toString(params.expire), params.enable, this.wallet.utils.toString(params.deadline)];
            let removeLiquidity_send = async (params, options) => {
                let result = await this.send('removeLiquidity', removeLiquidityParams(params), options);
                return result;
            };
            let removeLiquidity_call = async (params, options) => {
                let result = await this.call('removeLiquidity', removeLiquidityParams(params), options);
                return;
            };
            let removeLiquidity_txData = async (params, options) => {
                let result = await this.txData('removeLiquidity', removeLiquidityParams(params), options);
                return result;
            };
            this.removeLiquidity = Object.assign(removeLiquidity_send, {
                call: removeLiquidity_call,
                txData: removeLiquidity_txData
            });
            let removeLiquidityETHParams = (params) => [params.tokenA, params.removingTokenA, params.to, this.wallet.utils.toString(params.unstake), this.wallet.utils.toString(params.afterIndex), this.wallet.utils.toString(params.amountOut), this.wallet.utils.toString(params.reserveOut), this.wallet.utils.toString(params.expire), params.enable, this.wallet.utils.toString(params.deadline)];
            let removeLiquidityETH_send = async (params, options) => {
                let result = await this.send('removeLiquidityETH', removeLiquidityETHParams(params), options);
                return result;
            };
            let removeLiquidityETH_call = async (params, options) => {
                let result = await this.call('removeLiquidityETH', removeLiquidityETHParams(params), options);
                return;
            };
            let removeLiquidityETH_txData = async (params, options) => {
                let result = await this.txData('removeLiquidityETH', removeLiquidityETHParams(params), options);
                return result;
            };
            this.removeLiquidityETH = Object.assign(removeLiquidityETH_send, {
                call: removeLiquidityETH_call,
                txData: removeLiquidityETH_txData
            });
        }
    }
    OSWAP_OracleLiquidityProvider._abi = OSWAP_OracleLiquidityProvider_json_1.default.abi;
    exports.OSWAP_OracleLiquidityProvider = OSWAP_OracleLiquidityProvider;
});
define("@scom/scom-swap/contracts/oswap-openswap-contract/contracts/oracle/OSWAP_OraclePair.json.ts", ["require", "exports"], function (require, exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    ///<amd-module name='@scom/scom-swap/contracts/oswap-openswap-contract/contracts/oracle/OSWAP_OraclePair.json.ts'/> 
    exports.default = {
        "abi": [
            { "inputs": [], "stateMutability": "nonpayable", "type": "constructor" },
            { "anonymous": false, "inputs": [{ "indexed": true, "internalType": "address", "name": "provider", "type": "address" }, { "indexed": true, "internalType": "bool", "name": "direction", "type": "bool" }, { "indexed": false, "internalType": "uint256", "name": "staked", "type": "uint256" }, { "indexed": false, "internalType": "uint256", "name": "amount", "type": "uint256" }, { "indexed": false, "internalType": "uint256", "name": "newStakeBalance", "type": "uint256" }, { "indexed": false, "internalType": "uint256", "name": "newAmountBalance", "type": "uint256" }, { "indexed": false, "internalType": "uint256", "name": "expire", "type": "uint256" }, { "indexed": false, "internalType": "bool", "name": "enable", "type": "bool" }], "name": "AddLiquidity", "type": "event" },
            { "anonymous": false, "inputs": [{ "indexed": true, "internalType": "address", "name": "delegator", "type": "address" }, { "indexed": true, "internalType": "address", "name": "provider", "type": "address" }, { "indexed": true, "internalType": "bool", "name": "direction", "type": "bool" }], "name": "DelegatorPauseOffer", "type": "event" },
            { "anonymous": false, "inputs": [{ "indexed": true, "internalType": "address", "name": "delegator", "type": "address" }, { "indexed": true, "internalType": "address", "name": "provider", "type": "address" }, { "indexed": true, "internalType": "bool", "name": "direction", "type": "bool" }], "name": "DelegatorResumeOffer", "type": "event" },
            { "anonymous": false, "inputs": [{ "indexed": true, "internalType": "address", "name": "provider", "type": "address" }, { "indexed": false, "internalType": "uint256", "name": "index", "type": "uint256" }], "name": "NewProvider", "type": "event" },
            { "anonymous": false, "inputs": [{ "indexed": true, "internalType": "address", "name": "provider", "type": "address" }, { "indexed": true, "internalType": "bool", "name": "direction", "type": "bool" }, { "indexed": false, "internalType": "uint256", "name": "unstake", "type": "uint256" }, { "indexed": false, "internalType": "uint256", "name": "amountOut", "type": "uint256" }, { "indexed": false, "internalType": "uint256", "name": "reserveOut", "type": "uint256" }, { "indexed": false, "internalType": "uint256", "name": "newStakeBalance", "type": "uint256" }, { "indexed": false, "internalType": "uint256", "name": "newAmountBalance", "type": "uint256" }, { "indexed": false, "internalType": "uint256", "name": "newReserveBalance", "type": "uint256" }, { "indexed": false, "internalType": "uint256", "name": "expire", "type": "uint256" }, { "indexed": false, "internalType": "bool", "name": "enable", "type": "bool" }], "name": "RemoveLiquidity", "type": "event" },
            { "anonymous": false, "inputs": [{ "indexed": true, "internalType": "address", "name": "provider", "type": "address" }, { "indexed": true, "internalType": "bool", "name": "direction", "type": "bool" }, { "indexed": false, "internalType": "uint256", "name": "amountIn", "type": "uint256" }, { "indexed": false, "internalType": "uint256", "name": "newAmountBalance", "type": "uint256" }, { "indexed": false, "internalType": "uint256", "name": "newReserveBalance", "type": "uint256" }, { "indexed": false, "internalType": "uint256", "name": "expire", "type": "uint256" }], "name": "Replenish", "type": "event" },
            { "anonymous": false, "inputs": [{ "indexed": true, "internalType": "address", "name": "provider", "type": "address" }, { "indexed": false, "internalType": "address", "name": "delegator", "type": "address" }], "name": "SetDelegator", "type": "event" },
            { "anonymous": false, "inputs": [{ "indexed": true, "internalType": "address", "name": "to", "type": "address" }, { "indexed": true, "internalType": "bool", "name": "direction", "type": "bool" }, { "indexed": false, "internalType": "uint256", "name": "price", "type": "uint256" }, { "indexed": false, "internalType": "uint256", "name": "amountIn", "type": "uint256" }, { "indexed": false, "internalType": "uint256", "name": "amountOut", "type": "uint256" }, { "indexed": false, "internalType": "uint256", "name": "tradeFee", "type": "uint256" }, { "indexed": false, "internalType": "uint256", "name": "protocolFee", "type": "uint256" }], "name": "Swap", "type": "event" },
            { "anonymous": false, "inputs": [{ "indexed": true, "internalType": "address", "name": "provider", "type": "address" }, { "indexed": true, "internalType": "bool", "name": "direction", "type": "bool" }, { "indexed": false, "internalType": "uint256", "name": "amountOut", "type": "uint256" }, { "indexed": false, "internalType": "uint256", "name": "amountIn", "type": "uint256" }, { "indexed": false, "internalType": "uint256", "name": "newAmountBalance", "type": "uint256" }, { "indexed": false, "internalType": "uint256", "name": "newCounterReserveBalance", "type": "uint256" }], "name": "SwappedOneProvider", "type": "event" },
            { "inputs": [{ "internalType": "address", "name": "provider", "type": "address" }, { "internalType": "bool", "name": "direction", "type": "bool" }, { "internalType": "uint256", "name": "staked", "type": "uint256" }, { "internalType": "uint256", "name": "afterIndex", "type": "uint256" }, { "internalType": "uint256", "name": "expire", "type": "uint256" }, { "internalType": "bool", "name": "enable", "type": "bool" }], "name": "addLiquidity", "outputs": [{ "internalType": "uint256", "name": "index", "type": "uint256" }], "stateMutability": "nonpayable", "type": "function" },
            { "inputs": [], "name": "counter", "outputs": [{ "internalType": "uint256", "name": "", "type": "uint256" }], "stateMutability": "view", "type": "function" },
            { "inputs": [{ "internalType": "address", "name": "", "type": "address" }], "name": "delegator", "outputs": [{ "internalType": "address", "name": "", "type": "address" }], "stateMutability": "view", "type": "function" },
            { "inputs": [], "name": "factory", "outputs": [{ "internalType": "address", "name": "", "type": "address" }], "stateMutability": "view", "type": "function" },
            { "inputs": [], "name": "feeBalance", "outputs": [{ "internalType": "uint256", "name": "", "type": "uint256" }], "stateMutability": "view", "type": "function" },
            { "inputs": [{ "internalType": "bool", "name": "direction", "type": "bool" }, { "internalType": "uint256", "name": "staked", "type": "uint256" }, { "internalType": "uint256", "name": "_afterIndex", "type": "uint256" }], "name": "findPosition", "outputs": [{ "internalType": "uint256", "name": "afterIndex", "type": "uint256" }, { "internalType": "uint256", "name": "nextIndex", "type": "uint256" }], "stateMutability": "view", "type": "function" },
            { "inputs": [{ "internalType": "bool", "name": "", "type": "bool" }], "name": "first", "outputs": [{ "internalType": "uint256", "name": "", "type": "uint256" }], "stateMutability": "view", "type": "function" },
            { "inputs": [{ "internalType": "address", "name": "tokenOut", "type": "address" }, { "internalType": "uint256", "name": "amountOut", "type": "uint256" }, { "internalType": "bytes", "name": "data", "type": "bytes" }], "name": "getAmountIn", "outputs": [{ "internalType": "uint256", "name": "amountIn", "type": "uint256" }], "stateMutability": "view", "type": "function" },
            { "inputs": [{ "internalType": "address", "name": "tokenIn", "type": "address" }, { "internalType": "uint256", "name": "amountIn", "type": "uint256" }, { "internalType": "bytes", "name": "data", "type": "bytes" }], "name": "getAmountOut", "outputs": [{ "internalType": "uint256", "name": "amountOut", "type": "uint256" }], "stateMutability": "view", "type": "function" },
            { "inputs": [], "name": "getBalances", "outputs": [{ "internalType": "uint256", "name": "", "type": "uint256" }, { "internalType": "uint256", "name": "", "type": "uint256" }, { "internalType": "uint256", "name": "", "type": "uint256" }], "stateMutability": "view", "type": "function" },
            { "inputs": [], "name": "getLastBalances", "outputs": [{ "internalType": "uint256", "name": "", "type": "uint256" }, { "internalType": "uint256", "name": "", "type": "uint256" }], "stateMutability": "view", "type": "function" },
            { "inputs": [{ "internalType": "bool", "name": "direction", "type": "bool" }, { "internalType": "bytes", "name": "payload", "type": "bytes" }], "name": "getLatestPrice", "outputs": [{ "internalType": "uint256", "name": "", "type": "uint256" }], "stateMutability": "view", "type": "function" },
            { "inputs": [{ "internalType": "address", "name": "provider", "type": "address" }, { "internalType": "bool", "name": "direction", "type": "bool" }], "name": "getProviderOffer", "outputs": [{ "internalType": "uint256", "name": "index", "type": "uint256" }, { "internalType": "uint256", "name": "staked", "type": "uint256" }, { "internalType": "uint256", "name": "amount", "type": "uint256" }, { "internalType": "uint256", "name": "reserve", "type": "uint256" }, { "internalType": "uint256", "name": "expire", "type": "uint256" }, { "internalType": "bool", "name": "privateReplenish", "type": "bool" }], "stateMutability": "view", "type": "function" },
            { "inputs": [{ "internalType": "bool", "name": "direction", "type": "bool" }, { "internalType": "uint256", "name": "start", "type": "uint256" }, { "internalType": "uint256", "name": "end", "type": "uint256" }], "name": "getQueue", "outputs": [{ "internalType": "uint256[]", "name": "index", "type": "uint256[]" }, { "internalType": "address[]", "name": "provider", "type": "address[]" }, { "internalType": "uint256[]", "name": "amount", "type": "uint256[]" }, { "internalType": "uint256[]", "name": "staked", "type": "uint256[]" }, { "internalType": "uint256[]", "name": "expire", "type": "uint256[]" }], "stateMutability": "view", "type": "function" },
            { "inputs": [{ "internalType": "bool", "name": "direction", "type": "bool" }, { "internalType": "uint256", "name": "from", "type": "uint256" }, { "internalType": "uint256", "name": "count", "type": "uint256" }], "name": "getQueueFromIndex", "outputs": [{ "internalType": "uint256[]", "name": "index", "type": "uint256[]" }, { "internalType": "address[]", "name": "provider", "type": "address[]" }, { "internalType": "uint256[]", "name": "amount", "type": "uint256[]" }, { "internalType": "uint256[]", "name": "staked", "type": "uint256[]" }, { "internalType": "uint256[]", "name": "expire", "type": "uint256[]" }], "stateMutability": "view", "type": "function" },
            { "inputs": [], "name": "govToken", "outputs": [{ "internalType": "address", "name": "", "type": "address" }], "stateMutability": "view", "type": "function" },
            { "inputs": [], "name": "governance", "outputs": [{ "internalType": "address", "name": "", "type": "address" }], "stateMutability": "view", "type": "function" },
            { "inputs": [{ "internalType": "address", "name": "_token0", "type": "address" }, { "internalType": "address", "name": "_token1", "type": "address" }], "name": "initialize", "outputs": [], "stateMutability": "nonpayable", "type": "function" },
            { "inputs": [], "name": "isLive", "outputs": [{ "internalType": "bool", "name": "", "type": "bool" }], "stateMutability": "view", "type": "function" },
            { "inputs": [], "name": "lastGovBalance", "outputs": [{ "internalType": "uint256", "name": "", "type": "uint256" }], "stateMutability": "view", "type": "function" },
            { "inputs": [], "name": "lastToken0Balance", "outputs": [{ "internalType": "uint256", "name": "", "type": "uint256" }], "stateMutability": "view", "type": "function" },
            { "inputs": [], "name": "lastToken1Balance", "outputs": [{ "internalType": "uint256", "name": "", "type": "uint256" }], "stateMutability": "view", "type": "function" },
            { "inputs": [{ "internalType": "bool", "name": "", "type": "bool" }, { "internalType": "uint256", "name": "", "type": "uint256" }], "name": "offers", "outputs": [{ "internalType": "address", "name": "provider", "type": "address" }, { "internalType": "uint256", "name": "staked", "type": "uint256" }, { "internalType": "uint256", "name": "amount", "type": "uint256" }, { "internalType": "uint256", "name": "reserve", "type": "uint256" }, { "internalType": "uint256", "name": "expire", "type": "uint256" }, { "internalType": "bool", "name": "privateReplenish", "type": "bool" }, { "internalType": "bool", "name": "isActive", "type": "bool" }, { "internalType": "bool", "name": "enabled", "type": "bool" }, { "internalType": "uint256", "name": "prev", "type": "uint256" }, { "internalType": "uint256", "name": "next", "type": "uint256" }], "stateMutability": "view", "type": "function" },
            { "inputs": [], "name": "oracleLiquidityProvider", "outputs": [{ "internalType": "address", "name": "", "type": "address" }], "stateMutability": "view", "type": "function" },
            { "inputs": [{ "internalType": "address", "name": "provider", "type": "address" }, { "internalType": "bool", "name": "direction", "type": "bool" }], "name": "pauseOffer", "outputs": [], "stateMutability": "nonpayable", "type": "function" },
            { "inputs": [], "name": "protocolFeeBalance0", "outputs": [{ "internalType": "uint256", "name": "", "type": "uint256" }], "stateMutability": "view", "type": "function" },
            { "inputs": [], "name": "protocolFeeBalance1", "outputs": [{ "internalType": "uint256", "name": "", "type": "uint256" }], "stateMutability": "view", "type": "function" },
            { "inputs": [{ "internalType": "address", "name": "", "type": "address" }], "name": "providerOfferIndex", "outputs": [{ "internalType": "uint256", "name": "", "type": "uint256" }], "stateMutability": "view", "type": "function" },
            { "inputs": [{ "internalType": "bool", "name": "direction", "type": "bool" }, { "internalType": "uint256", "name": "startingIndex", "type": "uint256" }, { "internalType": "uint256", "name": "limit", "type": "uint256" }], "name": "purgeExpire", "outputs": [{ "internalType": "uint256", "name": "purge", "type": "uint256" }], "stateMutability": "nonpayable", "type": "function" },
            { "inputs": [{ "internalType": "bool", "name": "", "type": "bool" }], "name": "queueSize", "outputs": [{ "internalType": "uint256", "name": "", "type": "uint256" }], "stateMutability": "view", "type": "function" },
            { "inputs": [], "name": "redeemProtocolFee", "outputs": [], "stateMutability": "nonpayable", "type": "function" },
            { "inputs": [{ "internalType": "address", "name": "provider", "type": "address" }], "name": "removeAllLiquidity", "outputs": [{ "internalType": "uint256", "name": "amount0", "type": "uint256" }, { "internalType": "uint256", "name": "amount1", "type": "uint256" }, { "internalType": "uint256", "name": "staked", "type": "uint256" }], "stateMutability": "nonpayable", "type": "function" },
            { "inputs": [{ "internalType": "address", "name": "provider", "type": "address" }, { "internalType": "bool", "name": "direction", "type": "bool" }, { "internalType": "uint256", "name": "unstake", "type": "uint256" }, { "internalType": "uint256", "name": "afterIndex", "type": "uint256" }, { "internalType": "uint256", "name": "amountOut", "type": "uint256" }, { "internalType": "uint256", "name": "reserveOut", "type": "uint256" }, { "internalType": "uint256", "name": "expire", "type": "uint256" }, { "internalType": "bool", "name": "enable", "type": "bool" }], "name": "removeLiquidity", "outputs": [], "stateMutability": "nonpayable", "type": "function" },
            { "inputs": [{ "internalType": "address", "name": "provider", "type": "address" }, { "internalType": "bool", "name": "direction", "type": "bool" }, { "internalType": "uint256", "name": "afterIndex", "type": "uint256" }, { "internalType": "uint256", "name": "amountIn", "type": "uint256" }, { "internalType": "uint256", "name": "expire", "type": "uint256" }], "name": "replenish", "outputs": [], "stateMutability": "nonpayable", "type": "function" },
            { "inputs": [{ "internalType": "address", "name": "provider", "type": "address" }, { "internalType": "bool", "name": "direction", "type": "bool" }, { "internalType": "uint256", "name": "afterIndex", "type": "uint256" }], "name": "resumeOffer", "outputs": [], "stateMutability": "nonpayable", "type": "function" },
            { "inputs": [], "name": "scaleDirection", "outputs": [{ "internalType": "bool", "name": "", "type": "bool" }], "stateMutability": "view", "type": "function" },
            { "inputs": [], "name": "scaler", "outputs": [{ "internalType": "uint256", "name": "", "type": "uint256" }], "stateMutability": "view", "type": "function" },
            { "inputs": [{ "internalType": "address", "name": "_delegator", "type": "address" }, { "internalType": "uint256", "name": "fee", "type": "uint256" }], "name": "setDelegator", "outputs": [], "stateMutability": "nonpayable", "type": "function" },
            { "inputs": [{ "internalType": "bool", "name": "_isLive", "type": "bool" }], "name": "setLive", "outputs": [], "stateMutability": "nonpayable", "type": "function" },
            { "inputs": [{ "internalType": "bool", "name": "_replenish", "type": "bool" }], "name": "setPrivateReplenish", "outputs": [], "stateMutability": "nonpayable", "type": "function" },
            { "inputs": [], "name": "stakeBalance", "outputs": [{ "internalType": "uint256", "name": "", "type": "uint256" }], "stateMutability": "view", "type": "function" },
            { "inputs": [{ "internalType": "uint256", "name": "amount0Out", "type": "uint256" }, { "internalType": "uint256", "name": "amount1Out", "type": "uint256" }, { "internalType": "address", "name": "to", "type": "address" }, { "internalType": "bytes", "name": "data", "type": "bytes" }], "name": "swap", "outputs": [], "stateMutability": "nonpayable", "type": "function" },
            { "inputs": [], "name": "sync", "outputs": [], "stateMutability": "nonpayable", "type": "function" },
            { "inputs": [], "name": "token0", "outputs": [{ "internalType": "address", "name": "", "type": "address" }], "stateMutability": "view", "type": "function" },
            { "inputs": [], "name": "token1", "outputs": [{ "internalType": "address", "name": "", "type": "address" }], "stateMutability": "view", "type": "function" }
        ],
        "bytecode": ""
    };
});
define("@scom/scom-swap/contracts/oswap-openswap-contract/contracts/oracle/OSWAP_OraclePair.ts", ["require", "exports", "@ijstech/eth-contract", "@scom/scom-swap/contracts/oswap-openswap-contract/contracts/oracle/OSWAP_OraclePair.json.ts"], function (require, exports, eth_contract_20, OSWAP_OraclePair_json_1) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.OSWAP_OraclePair = void 0;
    class OSWAP_OraclePair extends eth_contract_20.Contract {
        constructor(wallet, address) {
            super(wallet, address, OSWAP_OraclePair_json_1.default.abi, OSWAP_OraclePair_json_1.default.bytecode);
            this.assign();
        }
        deploy(options) {
            return this.__deploy([], options);
        }
        parseAddLiquidityEvent(receipt) {
            return this.parseEvents(receipt, "AddLiquidity").map(e => this.decodeAddLiquidityEvent(e));
        }
        decodeAddLiquidityEvent(event) {
            let result = event.data;
            return {
                provider: result.provider,
                direction: result.direction,
                staked: new eth_contract_20.BigNumber(result.staked),
                amount: new eth_contract_20.BigNumber(result.amount),
                newStakeBalance: new eth_contract_20.BigNumber(result.newStakeBalance),
                newAmountBalance: new eth_contract_20.BigNumber(result.newAmountBalance),
                expire: new eth_contract_20.BigNumber(result.expire),
                enable: result.enable,
                _event: event
            };
        }
        parseDelegatorPauseOfferEvent(receipt) {
            return this.parseEvents(receipt, "DelegatorPauseOffer").map(e => this.decodeDelegatorPauseOfferEvent(e));
        }
        decodeDelegatorPauseOfferEvent(event) {
            let result = event.data;
            return {
                delegator: result.delegator,
                provider: result.provider,
                direction: result.direction,
                _event: event
            };
        }
        parseDelegatorResumeOfferEvent(receipt) {
            return this.parseEvents(receipt, "DelegatorResumeOffer").map(e => this.decodeDelegatorResumeOfferEvent(e));
        }
        decodeDelegatorResumeOfferEvent(event) {
            let result = event.data;
            return {
                delegator: result.delegator,
                provider: result.provider,
                direction: result.direction,
                _event: event
            };
        }
        parseNewProviderEvent(receipt) {
            return this.parseEvents(receipt, "NewProvider").map(e => this.decodeNewProviderEvent(e));
        }
        decodeNewProviderEvent(event) {
            let result = event.data;
            return {
                provider: result.provider,
                index: new eth_contract_20.BigNumber(result.index),
                _event: event
            };
        }
        parseRemoveLiquidityEvent(receipt) {
            return this.parseEvents(receipt, "RemoveLiquidity").map(e => this.decodeRemoveLiquidityEvent(e));
        }
        decodeRemoveLiquidityEvent(event) {
            let result = event.data;
            return {
                provider: result.provider,
                direction: result.direction,
                unstake: new eth_contract_20.BigNumber(result.unstake),
                amountOut: new eth_contract_20.BigNumber(result.amountOut),
                reserveOut: new eth_contract_20.BigNumber(result.reserveOut),
                newStakeBalance: new eth_contract_20.BigNumber(result.newStakeBalance),
                newAmountBalance: new eth_contract_20.BigNumber(result.newAmountBalance),
                newReserveBalance: new eth_contract_20.BigNumber(result.newReserveBalance),
                expire: new eth_contract_20.BigNumber(result.expire),
                enable: result.enable,
                _event: event
            };
        }
        parseReplenishEvent(receipt) {
            return this.parseEvents(receipt, "Replenish").map(e => this.decodeReplenishEvent(e));
        }
        decodeReplenishEvent(event) {
            let result = event.data;
            return {
                provider: result.provider,
                direction: result.direction,
                amountIn: new eth_contract_20.BigNumber(result.amountIn),
                newAmountBalance: new eth_contract_20.BigNumber(result.newAmountBalance),
                newReserveBalance: new eth_contract_20.BigNumber(result.newReserveBalance),
                expire: new eth_contract_20.BigNumber(result.expire),
                _event: event
            };
        }
        parseSetDelegatorEvent(receipt) {
            return this.parseEvents(receipt, "SetDelegator").map(e => this.decodeSetDelegatorEvent(e));
        }
        decodeSetDelegatorEvent(event) {
            let result = event.data;
            return {
                provider: result.provider,
                delegator: result.delegator,
                _event: event
            };
        }
        parseSwapEvent(receipt) {
            return this.parseEvents(receipt, "Swap").map(e => this.decodeSwapEvent(e));
        }
        decodeSwapEvent(event) {
            let result = event.data;
            return {
                to: result.to,
                direction: result.direction,
                price: new eth_contract_20.BigNumber(result.price),
                amountIn: new eth_contract_20.BigNumber(result.amountIn),
                amountOut: new eth_contract_20.BigNumber(result.amountOut),
                tradeFee: new eth_contract_20.BigNumber(result.tradeFee),
                protocolFee: new eth_contract_20.BigNumber(result.protocolFee),
                _event: event
            };
        }
        parseSwappedOneProviderEvent(receipt) {
            return this.parseEvents(receipt, "SwappedOneProvider").map(e => this.decodeSwappedOneProviderEvent(e));
        }
        decodeSwappedOneProviderEvent(event) {
            let result = event.data;
            return {
                provider: result.provider,
                direction: result.direction,
                amountOut: new eth_contract_20.BigNumber(result.amountOut),
                amountIn: new eth_contract_20.BigNumber(result.amountIn),
                newAmountBalance: new eth_contract_20.BigNumber(result.newAmountBalance),
                newCounterReserveBalance: new eth_contract_20.BigNumber(result.newCounterReserveBalance),
                _event: event
            };
        }
        assign() {
            let counter_call = async (options) => {
                let result = await this.call('counter', [], options);
                return new eth_contract_20.BigNumber(result);
            };
            this.counter = counter_call;
            let delegator_call = async (param1, options) => {
                let result = await this.call('delegator', [param1], options);
                return result;
            };
            this.delegator = delegator_call;
            let factory_call = async (options) => {
                let result = await this.call('factory', [], options);
                return result;
            };
            this.factory = factory_call;
            let feeBalance_call = async (options) => {
                let result = await this.call('feeBalance', [], options);
                return new eth_contract_20.BigNumber(result);
            };
            this.feeBalance = feeBalance_call;
            let findPositionParams = (params) => [params.direction, this.wallet.utils.toString(params.staked), this.wallet.utils.toString(params.afterIndex)];
            let findPosition_call = async (params, options) => {
                let result = await this.call('findPosition', findPositionParams(params), options);
                return {
                    afterIndex: new eth_contract_20.BigNumber(result.afterIndex),
                    nextIndex: new eth_contract_20.BigNumber(result.nextIndex)
                };
            };
            this.findPosition = findPosition_call;
            let first_call = async (param1, options) => {
                let result = await this.call('first', [param1], options);
                return new eth_contract_20.BigNumber(result);
            };
            this.first = first_call;
            let getAmountInParams = (params) => [params.tokenOut, this.wallet.utils.toString(params.amountOut), this.wallet.utils.stringToBytes(params.data)];
            let getAmountIn_call = async (params, options) => {
                let result = await this.call('getAmountIn', getAmountInParams(params), options);
                return new eth_contract_20.BigNumber(result);
            };
            this.getAmountIn = getAmountIn_call;
            let getAmountOutParams = (params) => [params.tokenIn, this.wallet.utils.toString(params.amountIn), this.wallet.utils.stringToBytes(params.data)];
            let getAmountOut_call = async (params, options) => {
                let result = await this.call('getAmountOut', getAmountOutParams(params), options);
                return new eth_contract_20.BigNumber(result);
            };
            this.getAmountOut = getAmountOut_call;
            let getBalances_call = async (options) => {
                let result = await this.call('getBalances', [], options);
                return {
                    param1: new eth_contract_20.BigNumber(result[0]),
                    param2: new eth_contract_20.BigNumber(result[1]),
                    param3: new eth_contract_20.BigNumber(result[2])
                };
            };
            this.getBalances = getBalances_call;
            let getLastBalances_call = async (options) => {
                let result = await this.call('getLastBalances', [], options);
                return {
                    param1: new eth_contract_20.BigNumber(result[0]),
                    param2: new eth_contract_20.BigNumber(result[1])
                };
            };
            this.getLastBalances = getLastBalances_call;
            let getLatestPriceParams = (params) => [params.direction, this.wallet.utils.stringToBytes(params.payload)];
            let getLatestPrice_call = async (params, options) => {
                let result = await this.call('getLatestPrice', getLatestPriceParams(params), options);
                return new eth_contract_20.BigNumber(result);
            };
            this.getLatestPrice = getLatestPrice_call;
            let getProviderOfferParams = (params) => [params.provider, params.direction];
            let getProviderOffer_call = async (params, options) => {
                let result = await this.call('getProviderOffer', getProviderOfferParams(params), options);
                return {
                    index: new eth_contract_20.BigNumber(result.index),
                    staked: new eth_contract_20.BigNumber(result.staked),
                    amount: new eth_contract_20.BigNumber(result.amount),
                    reserve: new eth_contract_20.BigNumber(result.reserve),
                    expire: new eth_contract_20.BigNumber(result.expire),
                    privateReplenish: result.privateReplenish
                };
            };
            this.getProviderOffer = getProviderOffer_call;
            let getQueueParams = (params) => [params.direction, this.wallet.utils.toString(params.start), this.wallet.utils.toString(params.end)];
            let getQueue_call = async (params, options) => {
                let result = await this.call('getQueue', getQueueParams(params), options);
                return {
                    index: result.index.map(e => new eth_contract_20.BigNumber(e)),
                    provider: result.provider,
                    amount: result.amount.map(e => new eth_contract_20.BigNumber(e)),
                    staked: result.staked.map(e => new eth_contract_20.BigNumber(e)),
                    expire: result.expire.map(e => new eth_contract_20.BigNumber(e))
                };
            };
            this.getQueue = getQueue_call;
            let getQueueFromIndexParams = (params) => [params.direction, this.wallet.utils.toString(params.from), this.wallet.utils.toString(params.count)];
            let getQueueFromIndex_call = async (params, options) => {
                let result = await this.call('getQueueFromIndex', getQueueFromIndexParams(params), options);
                return {
                    index: result.index.map(e => new eth_contract_20.BigNumber(e)),
                    provider: result.provider,
                    amount: result.amount.map(e => new eth_contract_20.BigNumber(e)),
                    staked: result.staked.map(e => new eth_contract_20.BigNumber(e)),
                    expire: result.expire.map(e => new eth_contract_20.BigNumber(e))
                };
            };
            this.getQueueFromIndex = getQueueFromIndex_call;
            let govToken_call = async (options) => {
                let result = await this.call('govToken', [], options);
                return result;
            };
            this.govToken = govToken_call;
            let governance_call = async (options) => {
                let result = await this.call('governance', [], options);
                return result;
            };
            this.governance = governance_call;
            let isLive_call = async (options) => {
                let result = await this.call('isLive', [], options);
                return result;
            };
            this.isLive = isLive_call;
            let lastGovBalance_call = async (options) => {
                let result = await this.call('lastGovBalance', [], options);
                return new eth_contract_20.BigNumber(result);
            };
            this.lastGovBalance = lastGovBalance_call;
            let lastToken0Balance_call = async (options) => {
                let result = await this.call('lastToken0Balance', [], options);
                return new eth_contract_20.BigNumber(result);
            };
            this.lastToken0Balance = lastToken0Balance_call;
            let lastToken1Balance_call = async (options) => {
                let result = await this.call('lastToken1Balance', [], options);
                return new eth_contract_20.BigNumber(result);
            };
            this.lastToken1Balance = lastToken1Balance_call;
            let offersParams = (params) => [params.param1, this.wallet.utils.toString(params.param2)];
            let offers_call = async (params, options) => {
                let result = await this.call('offers', offersParams(params), options);
                return {
                    provider: result.provider,
                    staked: new eth_contract_20.BigNumber(result.staked),
                    amount: new eth_contract_20.BigNumber(result.amount),
                    reserve: new eth_contract_20.BigNumber(result.reserve),
                    expire: new eth_contract_20.BigNumber(result.expire),
                    privateReplenish: result.privateReplenish,
                    isActive: result.isActive,
                    enabled: result.enabled,
                    prev: new eth_contract_20.BigNumber(result.prev),
                    next: new eth_contract_20.BigNumber(result.next)
                };
            };
            this.offers = offers_call;
            let oracleLiquidityProvider_call = async (options) => {
                let result = await this.call('oracleLiquidityProvider', [], options);
                return result;
            };
            this.oracleLiquidityProvider = oracleLiquidityProvider_call;
            let protocolFeeBalance0_call = async (options) => {
                let result = await this.call('protocolFeeBalance0', [], options);
                return new eth_contract_20.BigNumber(result);
            };
            this.protocolFeeBalance0 = protocolFeeBalance0_call;
            let protocolFeeBalance1_call = async (options) => {
                let result = await this.call('protocolFeeBalance1', [], options);
                return new eth_contract_20.BigNumber(result);
            };
            this.protocolFeeBalance1 = protocolFeeBalance1_call;
            let providerOfferIndex_call = async (param1, options) => {
                let result = await this.call('providerOfferIndex', [param1], options);
                return new eth_contract_20.BigNumber(result);
            };
            this.providerOfferIndex = providerOfferIndex_call;
            let queueSize_call = async (param1, options) => {
                let result = await this.call('queueSize', [param1], options);
                return new eth_contract_20.BigNumber(result);
            };
            this.queueSize = queueSize_call;
            let scaleDirection_call = async (options) => {
                let result = await this.call('scaleDirection', [], options);
                return result;
            };
            this.scaleDirection = scaleDirection_call;
            let scaler_call = async (options) => {
                let result = await this.call('scaler', [], options);
                return new eth_contract_20.BigNumber(result);
            };
            this.scaler = scaler_call;
            let stakeBalance_call = async (options) => {
                let result = await this.call('stakeBalance', [], options);
                return new eth_contract_20.BigNumber(result);
            };
            this.stakeBalance = stakeBalance_call;
            let token0_call = async (options) => {
                let result = await this.call('token0', [], options);
                return result;
            };
            this.token0 = token0_call;
            let token1_call = async (options) => {
                let result = await this.call('token1', [], options);
                return result;
            };
            this.token1 = token1_call;
            let addLiquidityParams = (params) => [params.provider, params.direction, this.wallet.utils.toString(params.staked), this.wallet.utils.toString(params.afterIndex), this.wallet.utils.toString(params.expire), params.enable];
            let addLiquidity_send = async (params, options) => {
                let result = await this.send('addLiquidity', addLiquidityParams(params), options);
                return result;
            };
            let addLiquidity_call = async (params, options) => {
                let result = await this.call('addLiquidity', addLiquidityParams(params), options);
                return new eth_contract_20.BigNumber(result);
            };
            let addLiquidity_txData = async (params, options) => {
                let result = await this.txData('addLiquidity', addLiquidityParams(params), options);
                return result;
            };
            this.addLiquidity = Object.assign(addLiquidity_send, {
                call: addLiquidity_call,
                txData: addLiquidity_txData
            });
            let initializeParams = (params) => [params.token0, params.token1];
            let initialize_send = async (params, options) => {
                let result = await this.send('initialize', initializeParams(params), options);
                return result;
            };
            let initialize_call = async (params, options) => {
                let result = await this.call('initialize', initializeParams(params), options);
                return;
            };
            let initialize_txData = async (params, options) => {
                let result = await this.txData('initialize', initializeParams(params), options);
                return result;
            };
            this.initialize = Object.assign(initialize_send, {
                call: initialize_call,
                txData: initialize_txData
            });
            let pauseOfferParams = (params) => [params.provider, params.direction];
            let pauseOffer_send = async (params, options) => {
                let result = await this.send('pauseOffer', pauseOfferParams(params), options);
                return result;
            };
            let pauseOffer_call = async (params, options) => {
                let result = await this.call('pauseOffer', pauseOfferParams(params), options);
                return;
            };
            let pauseOffer_txData = async (params, options) => {
                let result = await this.txData('pauseOffer', pauseOfferParams(params), options);
                return result;
            };
            this.pauseOffer = Object.assign(pauseOffer_send, {
                call: pauseOffer_call,
                txData: pauseOffer_txData
            });
            let purgeExpireParams = (params) => [params.direction, this.wallet.utils.toString(params.startingIndex), this.wallet.utils.toString(params.limit)];
            let purgeExpire_send = async (params, options) => {
                let result = await this.send('purgeExpire', purgeExpireParams(params), options);
                return result;
            };
            let purgeExpire_call = async (params, options) => {
                let result = await this.call('purgeExpire', purgeExpireParams(params), options);
                return new eth_contract_20.BigNumber(result);
            };
            let purgeExpire_txData = async (params, options) => {
                let result = await this.txData('purgeExpire', purgeExpireParams(params), options);
                return result;
            };
            this.purgeExpire = Object.assign(purgeExpire_send, {
                call: purgeExpire_call,
                txData: purgeExpire_txData
            });
            let redeemProtocolFee_send = async (options) => {
                let result = await this.send('redeemProtocolFee', [], options);
                return result;
            };
            let redeemProtocolFee_call = async (options) => {
                let result = await this.call('redeemProtocolFee', [], options);
                return;
            };
            let redeemProtocolFee_txData = async (options) => {
                let result = await this.txData('redeemProtocolFee', [], options);
                return result;
            };
            this.redeemProtocolFee = Object.assign(redeemProtocolFee_send, {
                call: redeemProtocolFee_call,
                txData: redeemProtocolFee_txData
            });
            let removeAllLiquidity_send = async (provider, options) => {
                let result = await this.send('removeAllLiquidity', [provider], options);
                return result;
            };
            let removeAllLiquidity_call = async (provider, options) => {
                let result = await this.call('removeAllLiquidity', [provider], options);
                return {
                    amount0: new eth_contract_20.BigNumber(result.amount0),
                    amount1: new eth_contract_20.BigNumber(result.amount1),
                    staked: new eth_contract_20.BigNumber(result.staked)
                };
            };
            let removeAllLiquidity_txData = async (provider, options) => {
                let result = await this.txData('removeAllLiquidity', [provider], options);
                return result;
            };
            this.removeAllLiquidity = Object.assign(removeAllLiquidity_send, {
                call: removeAllLiquidity_call,
                txData: removeAllLiquidity_txData
            });
            let removeLiquidityParams = (params) => [params.provider, params.direction, this.wallet.utils.toString(params.unstake), this.wallet.utils.toString(params.afterIndex), this.wallet.utils.toString(params.amountOut), this.wallet.utils.toString(params.reserveOut), this.wallet.utils.toString(params.expire), params.enable];
            let removeLiquidity_send = async (params, options) => {
                let result = await this.send('removeLiquidity', removeLiquidityParams(params), options);
                return result;
            };
            let removeLiquidity_call = async (params, options) => {
                let result = await this.call('removeLiquidity', removeLiquidityParams(params), options);
                return;
            };
            let removeLiquidity_txData = async (params, options) => {
                let result = await this.txData('removeLiquidity', removeLiquidityParams(params), options);
                return result;
            };
            this.removeLiquidity = Object.assign(removeLiquidity_send, {
                call: removeLiquidity_call,
                txData: removeLiquidity_txData
            });
            let replenishParams = (params) => [params.provider, params.direction, this.wallet.utils.toString(params.afterIndex), this.wallet.utils.toString(params.amountIn), this.wallet.utils.toString(params.expire)];
            let replenish_send = async (params, options) => {
                let result = await this.send('replenish', replenishParams(params), options);
                return result;
            };
            let replenish_call = async (params, options) => {
                let result = await this.call('replenish', replenishParams(params), options);
                return;
            };
            let replenish_txData = async (params, options) => {
                let result = await this.txData('replenish', replenishParams(params), options);
                return result;
            };
            this.replenish = Object.assign(replenish_send, {
                call: replenish_call,
                txData: replenish_txData
            });
            let resumeOfferParams = (params) => [params.provider, params.direction, this.wallet.utils.toString(params.afterIndex)];
            let resumeOffer_send = async (params, options) => {
                let result = await this.send('resumeOffer', resumeOfferParams(params), options);
                return result;
            };
            let resumeOffer_call = async (params, options) => {
                let result = await this.call('resumeOffer', resumeOfferParams(params), options);
                return;
            };
            let resumeOffer_txData = async (params, options) => {
                let result = await this.txData('resumeOffer', resumeOfferParams(params), options);
                return result;
            };
            this.resumeOffer = Object.assign(resumeOffer_send, {
                call: resumeOffer_call,
                txData: resumeOffer_txData
            });
            let setDelegatorParams = (params) => [params.delegator, this.wallet.utils.toString(params.fee)];
            let setDelegator_send = async (params, options) => {
                let result = await this.send('setDelegator', setDelegatorParams(params), options);
                return result;
            };
            let setDelegator_call = async (params, options) => {
                let result = await this.call('setDelegator', setDelegatorParams(params), options);
                return;
            };
            let setDelegator_txData = async (params, options) => {
                let result = await this.txData('setDelegator', setDelegatorParams(params), options);
                return result;
            };
            this.setDelegator = Object.assign(setDelegator_send, {
                call: setDelegator_call,
                txData: setDelegator_txData
            });
            let setLive_send = async (isLive, options) => {
                let result = await this.send('setLive', [isLive], options);
                return result;
            };
            let setLive_call = async (isLive, options) => {
                let result = await this.call('setLive', [isLive], options);
                return;
            };
            let setLive_txData = async (isLive, options) => {
                let result = await this.txData('setLive', [isLive], options);
                return result;
            };
            this.setLive = Object.assign(setLive_send, {
                call: setLive_call,
                txData: setLive_txData
            });
            let setPrivateReplenish_send = async (replenish, options) => {
                let result = await this.send('setPrivateReplenish', [replenish], options);
                return result;
            };
            let setPrivateReplenish_call = async (replenish, options) => {
                let result = await this.call('setPrivateReplenish', [replenish], options);
                return;
            };
            let setPrivateReplenish_txData = async (replenish, options) => {
                let result = await this.txData('setPrivateReplenish', [replenish], options);
                return result;
            };
            this.setPrivateReplenish = Object.assign(setPrivateReplenish_send, {
                call: setPrivateReplenish_call,
                txData: setPrivateReplenish_txData
            });
            let swapParams = (params) => [this.wallet.utils.toString(params.amount0Out), this.wallet.utils.toString(params.amount1Out), params.to, this.wallet.utils.stringToBytes(params.data)];
            let swap_send = async (params, options) => {
                let result = await this.send('swap', swapParams(params), options);
                return result;
            };
            let swap_call = async (params, options) => {
                let result = await this.call('swap', swapParams(params), options);
                return;
            };
            let swap_txData = async (params, options) => {
                let result = await this.txData('swap', swapParams(params), options);
                return result;
            };
            this.swap = Object.assign(swap_send, {
                call: swap_call,
                txData: swap_txData
            });
            let sync_send = async (options) => {
                let result = await this.send('sync', [], options);
                return result;
            };
            let sync_call = async (options) => {
                let result = await this.call('sync', [], options);
                return;
            };
            let sync_txData = async (options) => {
                let result = await this.txData('sync', [], options);
                return result;
            };
            this.sync = Object.assign(sync_send, {
                call: sync_call,
                txData: sync_txData
            });
        }
    }
    OSWAP_OraclePair._abi = OSWAP_OraclePair_json_1.default.abi;
    exports.OSWAP_OraclePair = OSWAP_OraclePair;
});
define("@scom/scom-swap/contracts/oswap-openswap-contract/contracts/oracle/OSWAP_OraclePairCreator.json.ts", ["require", "exports"], function (require, exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    ///<amd-module name='@scom/scom-swap/contracts/oswap-openswap-contract/contracts/oracle/OSWAP_OraclePairCreator.json.ts'/> 
    exports.default = {
        "abi": [
            { "inputs": [{ "internalType": "bytes32", "name": "salt", "type": "bytes32" }], "name": "createPair", "outputs": [{ "internalType": "address", "name": "pair", "type": "address" }], "stateMutability": "nonpayable", "type": "function" }
        ],
        "bytecode": "608060405234801561001057600080fd5b50615e69806100206000396000f3fe608060405234801561001057600080fd5b506004361061002b5760003560e01c8063ed25a5a214610030575b600080fd5b61004d6004803603602081101561004657600080fd5b5035610076565b6040805173ffffffffffffffffffffffffffffffffffffffff9092168252519081900360200190f35b600060606040518060200161008a906100b1565b6020820181038252601f19601f820116604052509050828151602083016000f59392505050565b615d75806100bf8339019056fe610100604052600180553480156200001657600080fd5b5033606081901b6080526000805460ff1916600117815560408051635aa6e67560e01b81529051919291635aa6e67591600480820192602092909190829003018186803b1580156200006757600080fd5b505afa1580156200007c573d6000803e3d6000fd5b505050506040513d60208110156200009357600080fd5b50516001600160601b0319606082901b1660a0526040805163b716d46360e01b815290519192506001600160a01b0383169163b716d46391600480820192602092909190829003018186803b158015620000ec57600080fd5b505afa15801562000101573d6000803e3d6000fd5b505050506040513d60208110156200011857600080fd5b505160601b6001600160601b03191660e0526040805163506a428560e01b81529051339163506a4285916004808301926020929190829003018186803b1580156200016257600080fd5b505afa15801562000177573d6000803e3d6000fd5b505050506040513d60208110156200018e57600080fd5b50516001600160601b031960609190911b1660c0525060805160601c60a05160601c60c05160601c60e05160601c615b266200024f60003980610c8d52806113405280611d605280611dd3528061296652806131ba528061336f52806138ff525080611a8352806124ff52806125af5280613090525080612bf7525080610f71528061196e5280612035528061225c5280612cef528061328152806137de528061399e5280613a3652806141fb5280614d3552806151cb5250615b266000f3fe608060405234801561001057600080fd5b50600436106102fe5760003560e01c80636c94fb441161019c578063bd2f54d9116100ee578063db13653c11610097578063f1591f3311610071578063f1591f3314610c40578063f5ee334814610c5f578063fff6cae914610c7e576102fe565b8063db13653c14610b5a578063e4f2fd8f14610bea578063e53c5d5314610c15576102fe565b8063d21220a7116100c8578063d21220a714610aae578063d519f64d14610ab6578063da863e1214610b2f576102fe565b8063bd2f54d914610a65578063bebf7a6114610a9e578063c45a015514610aa6576102fe565b80639749d21311610150578063ae925e251161012a578063ae925e2514610a00578063b2901aa314610a41578063b8f7a66514610a49576102fe565b80639749d21314610969578063a26651e714610971578063a9b34c5e146109e1576102fe565b80637a6a5e1b116101815780637a6a5e1b14610926578063835daf6c1461095957806393bc9dfe14610961576102fe565b80636c94fb44146108d45780636d813c3c146108f3576102fe565b8063506a4285116102555780635a6b49781161020957806361bc221a116101e357806361bc221a14610832578063685639a91461083a5780636b4afee1146108cc576102fe565b80635a6b49781461068f5780635aa6e6751461082257806360b71d4e1461082a576102fe565b8063539e50821161023a578063539e50821461064c578063577e6d081461067f5780635a6af09d14610687576102fe565b8063506a4285146105e2578063517b8fc6146105ea576102fe565b8063284d8c95116102b75780633c6d5c72116102915780633c6d5c7214610531578063429922ef14610552578063485cc955146105a7576102fe565b8063284d8c951461044a5780633b19103b146104855780633c1e6ff514610529576102fe565b806305268cff116102e857806305268cff146103c45780630dfe1681146103f557806321cbf789146103fd576102fe565b8062113e0814610303578063022c0d9f14610329575b600080fd5b61030b610c86565b60408051938452602084019290925282820152519081900360600190f35b6103c26004803603608081101561033f57600080fd5b81359160208101359173ffffffffffffffffffffffffffffffffffffffff604083013516919081019060808101606082013564010000000081111561038357600080fd5b82018360208201111561039557600080fd5b803590602001918460018302840111640100000000831117156103b757600080fd5b509092509050610e9a565b005b6103cc61133e565b6040805173ffffffffffffffffffffffffffffffffffffffff9092168252519081900360200190f35b6103cc611362565b6103c2600480360360a081101561041357600080fd5b5073ffffffffffffffffffffffffffffffffffffffff8135169060208101351515906040810135906060810135906080013561137e565b6103c26004803603604081101561046057600080fd5b5073ffffffffffffffffffffffffffffffffffffffff813516906020013515156116b0565b6105176004803603606081101561049b57600080fd5b73ffffffffffffffffffffffffffffffffffffffff823516916020810135918101906060810160408201356401000000008111156104d857600080fd5b8201836020820111156104ea57600080fd5b8035906020019184600183028401116401000000008311171561050c57600080fd5b509092509050611839565b60408051918252519081900360200190f35b6105176118e1565b6105396118e7565b6040805192835260208301919091528051918290030190f35b610517600480360360c081101561056857600080fd5b5073ffffffffffffffffffffffffffffffffffffffff81351690602081013515159060408101359060608101359060808101359060a0013515156118f1565b6103c2600480360360408110156105bd57600080fd5b5073ffffffffffffffffffffffffffffffffffffffff8135811691602001351661201d565b6103cc6124fd565b6103c2600480360361010081101561060157600080fd5b5073ffffffffffffffffffffffffffffffffffffffff81351690602081013515159060408101359060608101359060808101359060a08101359060c08101359060e001351515612521565b6103cc6004803603602081101561066257600080fd5b503573ffffffffffffffffffffffffffffffffffffffff16612a9f565b610517612ac7565b610517612acd565b6106ba600480360360608110156106a557600080fd5b50803515159060208101359060400135612ad3565b60405180806020018060200180602001806020018060200186810386528b818151815260200191508051906020019060200280838360005b8381101561070a5781810151838201526020016106f2565b5050505090500186810385528a818151815260200191508051906020019060200280838360005b83811015610749578181015183820152602001610731565b50505050905001868103845289818151815260200191508051906020019060200280838360005b83811015610788578181015183820152602001610770565b50505050905001868103835288818151815260200191508051906020019060200280838360005b838110156107c75781810151838201526020016107af565b50505050905001868103825287818151815260200191508051906020019060200280838360005b838110156108065781810151838201526020016107ee565b505050509050019a505050505050505050505060405180910390f35b6103cc612bf5565b610517612c19565b610517612c1f565b6105176004803603606081101561085057600080fd5b73ffffffffffffffffffffffffffffffffffffffff8235169160208101359181019060608101604082013564010000000081111561088d57600080fd5b82018360208201111561089f57600080fd5b803590602001918460018302840111640100000000831117156108c157600080fd5b509092509050612c25565b610517612fd3565b610517600480360360208110156108ea57600080fd5b50351515612fd9565b6105176004803603602081101561090957600080fd5b503573ffffffffffffffffffffffffffffffffffffffff16612feb565b61030b6004803603602081101561093c57600080fd5b503573ffffffffffffffffffffffffffffffffffffffff16612ffd565b6105176131f8565b6105176131fe565b6103c2613204565b6109ac6004803603604081101561098757600080fd5b5073ffffffffffffffffffffffffffffffffffffffff813516906020013515156133b6565b6040805196875260208701959095528585019390935260608501919091526080840152151560a0830152519081900360c00190f35b6103c2600480360360208110156109f757600080fd5b50351515613420565b6103c260048036036060811015610a1657600080fd5b5073ffffffffffffffffffffffffffffffffffffffff813516906020810135151590604001356135b1565b610517613776565b610a5161377c565b604080519115158252519081900360200190f35b6103c260048036036040811015610a7b57600080fd5b5073ffffffffffffffffffffffffffffffffffffffff8135169060200135613785565b610a5161397b565b6103cc61399c565b6103cc6139c0565b61051760048036036040811015610acc57600080fd5b813515159190810190604081016020820135640100000000811115610af057600080fd5b820183602082011115610b0257600080fd5b80359060200191846001830284011164010000000083111715610b2457600080fd5b5090925090506139dc565b61053960048036036060811015610b4557600080fd5b50803515159060208101359060400135613c1b565b610b7f60048036036040811015610b7057600080fd5b50803515159060200135613dac565b6040805173ffffffffffffffffffffffffffffffffffffffff909b168b5260208b0199909952898901979097526060890195909552608088019390935290151560a0870152151560c0860152151560e085015261010084015261012083015251908190036101400190f35b61051760048036036060811015610c0057600080fd5b50803515159060208101359060400135613e26565b6106ba60048036036060811015610c2b57600080fd5b50803515159060208101359060400135613f32565b61051760048036036020811015610c5657600080fd5b503515156141d1565b6103c260048036036020811015610c7557600080fd5b503515156141e3565b6103c26142b8565b60008060007f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff166370a08231306040518263ffffffff1660e01b8152600401808273ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200191505060206040518083038186803b158015610d2857600080fd5b505afa158015610d3c573d6000803e3d6000fd5b505050506040513d6020811015610d5257600080fd5b5051600854604080517f70a08231000000000000000000000000000000000000000000000000000000008152306004820152905173ffffffffffffffffffffffffffffffffffffffff909216916370a0823191602480820192602092909190829003018186803b158015610dc557600080fd5b505afa158015610dd9573d6000803e3d6000fd5b505050506040513d6020811015610def57600080fd5b5051600954604080517f70a08231000000000000000000000000000000000000000000000000000000008152306004820152905173ffffffffffffffffffffffffffffffffffffffff909216916370a0823191602480820192602092909190829003018186803b158015610e6257600080fd5b505afa158015610e76573d6000803e3d6000fd5b505050506040513d6020811015610e8c57600080fd5b505191945092509050909192565b600154600114610f0b57604080517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152600660248201527f4c4f434b45440000000000000000000000000000000000000000000000000000604482015290519081900360640190fd5b60006001553233148015610f255750610f233361433c565b155b80610fe65750604080517f3af32abf000000000000000000000000000000000000000000000000000000008152336004820152905173ffffffffffffffffffffffffffffffffffffffff7f00000000000000000000000000000000000000000000000000000000000000001691633af32abf9160248083019260209291908290030181600087803b158015610fb957600080fd5b505af1158015610fcd573d6000803e3d6000fd5b505050506040513d6020811015610fe357600080fd5b50515b61105157604080517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601c60248201527f4e6f742066726f6d2075736572206f722077686974656c697374656400000000604482015290519081900360640190fd5b60005460ff166110c257604080517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152600660248201527f5041555345440000000000000000000000000000000000000000000000000000604482015290519081900360640190fd5b600c54600854604080517f70a082310000000000000000000000000000000000000000000000000000000081523060048201529051600093849361117893919273ffffffffffffffffffffffffffffffffffffffff909116916370a08231916024808301926020929190829003018186803b15801561114057600080fd5b505afa158015611154573d6000803e3d6000fd5b505050506040513d602081101561116a57600080fd5b50519063ffffffff61434216565b600d54600954604080517f70a0823100000000000000000000000000000000000000000000000000000000815230600482015290519395506111f39373ffffffffffffffffffffffffffffffffffffffff909216916370a0823191602480820192602092909190829003018186803b15801561114057600080fd5b905060008715801561120457508615155b1561125c57611218866001858a898961438d565b60095491985091506112419073ffffffffffffffffffffffffffffffffffffffff1687896147d2565b600e54611254908263ffffffff6149df16565b600e55611328565b8715801590611269575086155b156112c15761127d866000848b898961438d565b60085491995091506112a69073ffffffffffffffffffffffffffffffffffffffff16878a6147d2565b600f546112b9908263ffffffff6149df16565b600f55611328565b604080517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152600d60248201527f4e6f7420737570706f7274656400000000000000000000000000000000000000604482015290519081900360640190fd5b611330614a53565b505060018055505050505050565b7f000000000000000000000000000000000000000000000000000000000000000081565b60085473ffffffffffffffffffffffffffffffffffffffff1681565b6001546001146113ef57604080517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152600660248201527f4c4f434b45440000000000000000000000000000000000000000000000000000604482015290519081900360640190fd5b6000600181905573ffffffffffffffffffffffffffffffffffffffff86168152600660205260409020548061148557604080517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601260248201527f50726f7669646572206e6f7420666f756e640000000000000000000000000000604482015290519081900360640190fd5b84151560009081526005602081815260408084208585529091529091209081015460ff1615806114ca575073ffffffffffffffffffffffffffffffffffffffff871633145b61153557604080517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601160248201527f4e6f742066726f6d2070726f7669646572000000000000000000000000000000604482015290519081900360640190fd5b73ffffffffffffffffffffffffffffffffffffffff8716331461158957600481015461158157851560009081526005602090815260408083208584529091529020600401549250611589565b806004015492505b4283116115f757604080517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152600f60248201527f416c726561647920657870697265640000000000000000000000000000000000604482015290519081900360640190fd5b600381015461160c908563ffffffff61434216565b8160030181905550611635868360008888888760050160029054906101000a900460ff16614a66565b600281015460038201546040805187815260208101939093528281019190915260608201859052518715159173ffffffffffffffffffffffffffffffffffffffff8a16917f49e6e6744d56bfe4585849d662ac11ba289d26bc6f22c021f794dd6c452f09929181900360800190a35050600180555050505050565b8173ffffffffffffffffffffffffffffffffffffffff81163314806116fb575073ffffffffffffffffffffffffffffffffffffffff8181166000908152600760205260409020541633145b61176657604080517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152600f60248201527f4e6f7420612064656c656761746f720000000000000000000000000000000000604482015290519081900360640190fd5b73ffffffffffffffffffffffffffffffffffffffff831660009081526006602090815260408083205485151584526005808452828520828652909352922090810154610100900460ff16156117c1576117bf8483614c38565b505b6005810180547fffffffffffffffffffffffffffffffffffffffffffffffffffffffffff00ffff1690556040518415159073ffffffffffffffffffffffffffffffffffffffff87169033907f3a699c5c4258bdd17cd89244a23fbb80a6ae96fc1f9fd5ea6f7aea92b5a434cc90600090a45050505050565b60008084116118a957604080517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601960248201527f494e53554646494349454e545f494e5055545f414d4f554e5400000000000000604482015290519081900360640190fd5b6008546118d39073ffffffffffffffffffffffffffffffffffffffff878116911614858585614cd3565b509298975050505050505050565b600a5481565b600c54600d549091565b600060015460011461196457604080517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152600660248201527f4c4f434b45440000000000000000000000000000000000000000000000000000604482015290519081900360640190fd5b60006001819055507f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff1663b8f7a6656040518163ffffffff1660e01b8152600401602060405180830381600087803b1580156119d457600080fd5b505af11580156119e8573d6000803e3d6000fd5b505050506040513d60208110156119fe57600080fd5b5051611a6b57604080517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152600f60248201527f474c4f42414c4c59205041555345440000000000000000000000000000000000604482015290519081900360640190fd5b3373ffffffffffffffffffffffffffffffffffffffff7f0000000000000000000000000000000000000000000000000000000000000000161480611ac457503373ffffffffffffffffffffffffffffffffffffffff8816145b611b2f57604080517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601860248201527f4e6f742066726f6d20726f75746572206f72206f776e65720000000000000000604482015290519081900360640190fd5b60005460ff16611ba057604080517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152600660248201527f5041555345440000000000000000000000000000000000000000000000000000604482015290519081900360640190fd5b73ffffffffffffffffffffffffffffffffffffffff8716611c2257604080517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152600c60248201527f4e756c6c20616464726573730000000000000000000000000000000000000000604482015290519081900360640190fd5b428311611c9057604080517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152600f60248201527f416c726561647920657870697265640000000000000000000000000000000000604482015290519081900360640190fd5b6000806000611c9d610c86565b92509250925087611cb9600b548561434290919063ffffffff16565b1015611d2657604080517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152600d60248201527f496e76616c696420666565496e00000000000000000000000000000000000000604482015290519081900360640190fd5b601054611d39908963ffffffff6149df16565b60105560008915611db757600d54611d5890839063ffffffff61434216565b6009549091507f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff90811691161415611db257611daf818a63ffffffff61434216565b90505b611e25565b600c54611dcb90849063ffffffff61434216565b6008549091507f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff90811691161415611e2557611e22818a63ffffffff61434216565b90505b73ffffffffffffffffffffffffffffffffffffffff8b1660009081526006602052604090205494508415611e6757611e628a868b8b858c8c614a66565b611f65565b600280546001019081905573ffffffffffffffffffffffffffffffffffffffff8c166000908152600660205260409020819055945080611f0857604080517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152600c60248201527f4e6f20616d6f756e7420696e0000000000000000000000000000000000000000604482015290519081900360640190fd5b611f188b8b878c8c868d8d615036565b60408051868152905173ffffffffffffffffffffffffffffffffffffffff8d16917f39944be52180e3811405a754586ce476cd9d34d40e98835c2b4c77eb26426b5b919081900360200190a25b600b849055600c839055600d82905589151560008181526005602090815260408083208984528252918290206001810154600282015484518f8152938401879052838501919091526060830152608082018b905289151560a0830152915191929173ffffffffffffffffffffffffffffffffffffffff8f16917ff28d90091af29243a415eaca7c0fee637460bb97faf17a52f7dbe8bd13f70b55919081900360c00190a3505060018055509198975050505050505050565b3373ffffffffffffffffffffffffffffffffffffffff7f000000000000000000000000000000000000000000000000000000000000000016146120c157604080517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152600960248201527f464f5242494444454e0000000000000000000000000000000000000000000000604482015290519081900360640190fd5b6008805473ffffffffffffffffffffffffffffffffffffffff8085167fffffffffffffffffffffffff00000000000000000000000000000000000000009283161792839055600980548583169084161790819055600080527f07f793f8fd62a1688d9e2ebd2c8b2e8ab72cd080250f71b53bf5b4113f244d5e80548416309081179091557f05b8ccbb9d4d8fb16ea74ce3c29a41f1b461fbdaff4714a0d9a8eb05499746bc6020527f45d21ede0cb86a9bc9f3a728b8ad730cd840abb3d7468e2d1713e27e21c48d2880549094161790925590811691161061220457604080517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601860248201527f496e76616c696420746f6b656e2070616972206f726465720000000000000000604482015290519081900360640190fd5b600854600954604080517f52a03c0300000000000000000000000000000000000000000000000000000000815273ffffffffffffffffffffffffffffffffffffffff93841660048201529183166024830152516000927f000000000000000000000000000000000000000000000000000000000000000016916352a03c03916044808301926020929190829003018186803b1580156122a257600080fd5b505afa1580156122b6573d6000803e3d6000fd5b505050506040513d60208110156122cc57600080fd5b5051905073ffffffffffffffffffffffffffffffffffffffff811661235257604080517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152600f60248201527f4e6f206f7261636c6520666f756e640000000000000000000000000000000000604482015290519081900360640190fd5b600854604080517f313ce567000000000000000000000000000000000000000000000000000000008152905160009273ffffffffffffffffffffffffffffffffffffffff169163313ce567916004808301926020929190829003018186803b1580156123bd57600080fd5b505afa1580156123d1573d6000803e3d6000fd5b505050506040513d60208110156123e757600080fd5b5051600954604080517f313ce567000000000000000000000000000000000000000000000000000000008152905192935060009273ffffffffffffffffffffffffffffffffffffffff9092169163313ce56791600480820192602092909190829003018186803b15801561245a57600080fd5b505afa15801561246e573d6000803e3d6000fd5b505050506040513d602081101561248457600080fd5b5051600980547fffffffffffffffffffffff00ffffffffffffffffffffffffffffffffffffffff1660ff858116818516117401000000000000000000000000000000000000000090810292909217928390559293509004166124e8578082036124ec565b8181035b60ff16600a90810a90555050505050565b7f000000000000000000000000000000000000000000000000000000000000000081565b60015460011461259257604080517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152600660248201527f4c4f434b45440000000000000000000000000000000000000000000000000000604482015290519081900360640190fd5b60006001553373ffffffffffffffffffffffffffffffffffffffff7f00000000000000000000000000000000000000000000000000000000000000001614806125f057503373ffffffffffffffffffffffffffffffffffffffff8916145b61265b57604080517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601860248201527f4e6f742066726f6d20726f75746572206f72206f776e65720000000000000000604482015290519081900360640190fd5b4282116126c957604080517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152600f60248201527f416c726561647920657870697265640000000000000000000000000000000000604482015290519081900360640190fd5b73ffffffffffffffffffffffffffffffffffffffff88166000908152600660205260409020548061275b57604080517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601c60248201527f50726f7669646572206c6971756964697479206e6f7420666f756e6400000000604482015290519081900360640190fd5b87151560009081526005602090815260408083208484529091528120600281015490919061278f908863ffffffff61434216565b90508015806127a657506127a28a6151c7565b8110155b61281157604080517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601760248201527f4d696e69756d206c6f742073697a65206e6f74206d6574000000000000000000604482015290519081900360640190fd5b6001820154600090612829908b63ffffffff61434216565b6005840180547fffffffffffffffffffffffffffffffffffffffffffffffffffffffffff00ffff1662010000881515021790559050871561286c57600283018290555b891561287a57600183018190555b600383015461288f908863ffffffff61434216565b6003840155600483018690558415612927576005830154610100900460ff16156129145760008a1180156128f0575088841415806128f057508a15156000908152600560209081526040808320600787015484529091529020600101548111155b1561290f576128ff8b856152d4565b505061290f8b85838c868b615383565b612922565b6129228b85838c868b615383565b612945565b6005830154610100900460ff1615612945576129438b85614c38565b505b891561298c5760105461295e908b63ffffffff61434216565b60105561298c7f0000000000000000000000000000000000000000000000000000000000000000338c6147d2565b600088118061299b5750600087115b156129f6576129f68b6129c65760085473ffffffffffffffffffffffffffffffffffffffff166129e0565b60095473ffffffffffffffffffffffffffffffffffffffff165b336129f18b8b63ffffffff6149df16565b6147d2565b600183015460028401546003850154604080518e8152602081018d90528082018c90526060810194909452608084019290925260a083015260c0820188905286151560e0830152518c15159173ffffffffffffffffffffffffffffffffffffffff8f16917f3349af395fb66f8dc0da9c7cb36de02b3ba8f46b9299c8db3ffb916586432289918190036101000190a3612a8d614a53565b50506001805550505050505050505050565b60076020526000908152604090205473ffffffffffffffffffffffffffffffffffffffff1681565b600f5481565b600c5481565b821515600090815260046020526040902054606090819081908190819080881015612bc657808710612b21578015612b1b57612b1681600163ffffffff61434216565b612b1e565b60005b96505b6000612b4489612b388a600163ffffffff6149df16565b9063ffffffff61434216565b8a15156000908152600360209081526040808320546005835281842081855290925282209293509091905b8b831015612ba757508b1515600090815260056020908152604080832060079094015480845293909152902060019092019190612b6f565b612bb28d8286613f32565b995099509950995099505050505050612bea565b50506040805160008082526020820190815281830190925294509250839150819050805b939792965093509350565b7f000000000000000000000000000000000000000000000000000000000000000081565b60115481565b60025481565b6000808411612c9557604080517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601a60248201527f494e53554646494349454e545f4f55545055545f414d4f554e54000000000000604482015290519081900360640190fd5b600854600954604080517f069d188f00000000000000000000000000000000000000000000000000000000815273ffffffffffffffffffffffffffffffffffffffff938416600482015291831660248301525160009283927f00000000000000000000000000000000000000000000000000000000000000009091169163069d188f91604480820192606092909190829003018186803b158015612d3857600080fd5b505afa158015612d4c573d6000803e3d6000fd5b505050506040513d6060811015612d6257600080fd5b508051602090910151600954919350915073ffffffffffffffffffffffffffffffffffffffff888116911614600081612db35760095473ffffffffffffffffffffffffffffffffffffffff16612dcd565b60085473ffffffffffffffffffffffffffffffffffffffff165b90506000808573ffffffffffffffffffffffffffffffffffffffff1663d9da4fe6848d60008e8e8e6040518763ffffffff1660e01b8152600401808773ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020018673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001858152602001848152602001806020018281038252848482818152602001925080828437600081840152601f19601f820116905080830192505050975050505050505050604080518083038186803b158015612ec757600080fd5b505afa158015612edb573d6000803e3d6000fd5b505050506040513d6040811015612ef157600080fd5b5080516020909101519092509050612f0f8a8263ffffffff6154a216565b96506001600a541115612f6757600960149054906101000a900460ff1615158415151415612f5057600a54612f4b90889063ffffffff61551516565b612f64565b600a54612f6490889063ffffffff6154a216565b96505b612f886001612f7c898563ffffffff61551516565b9063ffffffff6149df16565b9650612fc46001612f7c612fa5620186a08963ffffffff61434216565b612fb88b620186a063ffffffff6154a216565b9063ffffffff61551516565b9b9a5050505050505050505050565b600d5481565b60036020526000908152604090205481565b60066020526000908152604090205481565b600080600060015460011461307357604080517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152600660248201527f4c4f434b45440000000000000000000000000000000000000000000000000000604482015290519081900360640190fd5b60006001553373ffffffffffffffffffffffffffffffffffffffff7f00000000000000000000000000000000000000000000000000000000000000001614806130d157503373ffffffffffffffffffffffffffffffffffffffff8516145b61313c57604080517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601860248201527f4e6f742066726f6d20726f75746572206f72206f776e65720000000000000000604482015290519081900360640190fd5b60008060008061314d886001615557565b9097509093509050613160886000615557565b9098509094509150613178848463ffffffff6149df16565b945061318a878363ffffffff6149df16565b965061319c868263ffffffff6149df16565b6010549096506131b2908663ffffffff61434216565b6010556131e07f000000000000000000000000000000000000000000000000000000000000000033876147d2565b6131e8614a53565b5050600180555092949193509150565b600e5481565b60105481565b60015460011461327557604080517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152600660248201527f4c4f434b45440000000000000000000000000000000000000000000000000000604482015290519081900360640190fd5b600060018190555060007f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff1663ef3692526040518163ffffffff1660e01b815260040160206040518083038186803b1580156132e557600080fd5b505afa1580156132f9573d6000803e3d6000fd5b505050506040513d602081101561330f57600080fd5b5051600e54600f5460115460085493945091929091906133469073ffffffffffffffffffffffffffffffffffffffff1685856147d2565b60095461336a9073ffffffffffffffffffffffffffffffffffffffff1685846147d2565b6133957f000000000000000000000000000000000000000000000000000000000000000085836147d2565b6000600e819055600f8190556011556133ac614a53565b5050600180555050565b73ffffffffffffffffffffffffffffffffffffffff82166000908152600660209081526040808320548415158452600580845282852082865290935292206001810154600282015460038301546004840154939094015491939092909160ff169295509295509295565b60015460011461349157604080517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152600660248201527f4c4f434b45440000000000000000000000000000000000000000000000000000604482015290519081900360640190fd5b600060018190553380825260066020526040909120548061351357604080517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601260248201527f50726f7669646572206e6f7420666f756e640000000000000000000000000000604482015290519081900360640190fd5b60008181527f05b8ccbb9d4d8fb16ea74ce3c29a41f1b461fbdaff4714a0d9a8eb05499746bc60209081526040808320600590810180549715157fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff0098891681179091559484527f1471eb6eb2c5e789fc3de43f8ce62938c7d1836ec861730447e2ada8fd81017b909252909120018054909316179091555060018055565b8273ffffffffffffffffffffffffffffffffffffffff81163314806135fc575073ffffffffffffffffffffffffffffffffffffffff8181166000908152600760205260409020541633145b61366757604080517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152600f60248201527f4e6f7420612064656c656761746f720000000000000000000000000000000000604482015290519081900360640190fd5b73ffffffffffffffffffffffffffffffffffffffff841660009081526006602090815260408083205486151584526005808452828520828652909352922090810154610100900460ff161580156136c15750428160040154115b80156136d957506136d1856151c7565b816002015410155b156136f8576136f8858383600101548785600201548660040154615383565b6005810180547fffffffffffffffffffffffffffffffffffffffffffffffffffffffffff00ffff16620100001790556040518515159073ffffffffffffffffffffffffffffffffffffffff88169033907f0a562c834cabe3252799eb49d60bc919314ee5daaad38ad4543773bbffd9610d90600090a4505050505050565b600b5481565b60005460ff1681565b33600081815260076020526040902080547fffffffffffffffffffffffff00000000000000000000000000000000000000001673ffffffffffffffffffffffffffffffffffffffff8516908117909155156139285760007f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff166396c669496040518163ffffffff1660e01b815260040160206040518083038186803b15801561384257600080fd5b505afa158015613856573d6000803e3d6000fd5b505050506040513d602081101561386c57600080fd5b505190508015613926578083146138e457604080517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152600c60248201527f466565204d69736d617463680000000000000000000000000000000000000000604482015290519081900360640190fd5b6011546138f7908263ffffffff6149df16565b6011556139267f00000000000000000000000000000000000000000000000000000000000000008330846157c1565b505b6040805173ffffffffffffffffffffffffffffffffffffffff85811682529151918316917f49df09fe4d665b253962826a73af1c81a4d8389109f373416bbb0b2c18cd19af9181900360200190a2505050565b60095474010000000000000000000000000000000000000000900460ff1681565b7f000000000000000000000000000000000000000000000000000000000000000081565b60095473ffffffffffffffffffffffffffffffffffffffff1681565b600854600954604080517f069d188f00000000000000000000000000000000000000000000000000000000815273ffffffffffffffffffffffffffffffffffffffff938416600482015291831660248301525160009283927f00000000000000000000000000000000000000000000000000000000000000009091169163069d188f91604480820192606092909190829003018186803b158015613a7f57600080fd5b505afa158015613a93573d6000803e3d6000fd5b505050506040513d6060811015613aa957600080fd5b5051905060008086613ada5760095460085473ffffffffffffffffffffffffffffffffffffffff9182169116613afb565b60085460095473ffffffffffffffffffffffffffffffffffffffff91821691165b915091508273ffffffffffffffffffffffffffffffffffffffff1663495e4348838389896040518563ffffffff1660e01b8152600401808573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020018473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001806020018281038252848482818152602001925080828437600081840152601f19601f8201169050808301925050509550505050505060206040518083038186803b158015613be457600080fd5b505afa158015613bf8573d6000803e3d6000fd5b505050506040513d6020811015613c0e57600080fd5b5051979650505050505050565b80600081613c3b5750831515600090815260036020526040902054613d40565b84151560009081526005602090815260408083208584529091529020805473ffffffffffffffffffffffffffffffffffffffff16613cda57604080517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152600d60248201527f496e76616c696420696e64657800000000000000000000000000000000000000604482015290519081900360640190fd5b8481600101541015613d19576006810154925082613cf757613d19565b5084151560009081526005602090815260408083208584529091529020613cda565b8215613d29578060070154613d3c565b8515156000908152600360205260409020545b9150505b8015613da457841515600090815260056020908152604080832084845290915290205b80600101548511613da257600781015491925081613d8057613da2565b5084151560009081526005602090815260408083208484529091529020613d63565b505b935093915050565b600560208181526000938452604080852090915291835291208054600182015460028301546003840154600485015495850154600686015460079096015473ffffffffffffffffffffffffffffffffffffffff909516969395929491939260ff80831693610100840482169362010000900490911691908a565b6000600154600114613e9957604080517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152600660248201527f4c4f434b45440000000000000000000000000000000000000000000000000000604482015290519081900360640190fd5b6000600155825b8015801590613eaf5750600083115b15613f2657841515600090815260056020908152604080832084845290915290206004810154421115613ef357613ee68683614c38565b6001909301929150613efb565b806007015491505b507fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff90920191613ea0565b50600180559392505050565b60608060608060608567ffffffffffffffff81118015613f5157600080fd5b50604051908082528060200260200182016040528015613f7b578160200160208202803683370190505b5094508567ffffffffffffffff81118015613f9557600080fd5b50604051908082528060200260200182016040528015613fbf578160200160208202803683370190505b5093508567ffffffffffffffff81118015613fd957600080fd5b50604051908082528060200260200182016040528015614003578160200160208202803683370190505b5092508567ffffffffffffffff8111801561401d57600080fd5b50604051908082528060200260200182016040528015614047578160200160208202803683370190505b5091508567ffffffffffffffff8111801561406157600080fd5b5060405190808252806020026020018201604052801561408b578160200160208202803683370190505b5088151560009081526005602090815260408083208b8452909152812091925090885b88831080156140bc57508015155b156141c357808884815181106140ce57fe5b60209081029190910101528154875173ffffffffffffffffffffffffffffffffffffffff9091169088908590811061410257fe5b602002602001019073ffffffffffffffffffffffffffffffffffffffff16908173ffffffffffffffffffffffffffffffffffffffff1681525050816002015486848151811061414d57fe5b602002602001018181525050816001015485848151811061416a57fe5b602002602001018181525050816004015484848151811061418757fe5b6020908102919091018101919091528b1515600090815260058252604080822060079095015480835294909252206001909301929190506140ae565b505050939792965093509350565b60046020526000908152604090205481565b3373ffffffffffffffffffffffffffffffffffffffff7f0000000000000000000000000000000000000000000000000000000000000000161461428757604080517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152600960248201527f464f5242494444454e0000000000000000000000000000000000000000000000604482015290519081900360640190fd5b600080547fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff0016911515919091179055565b60015460011461432957604080517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152600660248201527f4c4f434b45440000000000000000000000000000000000000000000000000000604482015290519081900360640190fd5b6000600155614336614a53565b60018055565b3b151590565b600061438483836040518060400160405280601e81526020017f536166654d6174683a207375627472616374696f6e206f766572666c6f77000081525061599f565b90505b92915050565b60008060008060008060006143a48c8c8b8b614cd3565b939a509196509450925090508987101561441f57604080517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601360248201527f494e53554646494349454e545f414d4f554e5400000000000000000000000000604482015290519081900360640190fd5b8061442c578a945061446a565b6144556402540be400612fb8614448858563ffffffff6154a216565b8e9063ffffffff6154a216565b95506144678b8763ffffffff61434216565b94505b8b15158d73ffffffffffffffffffffffffffffffffffffffff167f0148b571d5049091b679cb2ccda30fb06d3aecaef641a0515a317498893d7da3868e8b888c604051808681526020018581526020018481526020018381526020018281526020019550505050505060405180910390a3505050508715156000908152600360205260408120548491805b60008411801561450457508215155b15614755578b15156000908152600560209081526040808320868452909152902060048101549092504211156145455761453e8c84614c38565b9250614750565b508a156000908152600560209081526040808320858452909152902060028201548085106146635761457d858263ffffffff61434216565b9450600061459589612fb8898563ffffffff6154a216565b60038401549091506145ad908263ffffffff6149df16565b8360030181905550600084600201819055508d15158460000160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff167f5a4c914458527a84b907dc0c2c69173c8d117acce38a2b58e316cdad2d3c6c228484600088600301546040518085815260200184815260200183815260200182815260200194505050505060405180910390a361465b8e86614c38565b94505061474e565b600061467989612fb8898963ffffffff6154a216565b6003840154909150614691908263ffffffff6149df16565b600384015560028401546146ab908763ffffffff61434216565b84600201819055508d15158460000160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff167f5a4c914458527a84b907dc0c2c69173c8d117acce38a2b58e316cdad2d3c6c228884886002015488600301546040518085815260200184815260200183815260200182815260200194505050505060405180910390a360009550505b505b6144f5565b83156147c257604080517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601d60248201527f416d6f756e74206578636565647320617661696c61626c652066756e64000000604482015290519081900360640190fd5b5050505050965096945050505050565b604080518082018252601981527f7472616e7366657228616464726573732c75696e743235362900000000000000602091820152815173ffffffffffffffffffffffffffffffffffffffff85811660248301526044808301869052845180840390910181526064909201845291810180517bffffffffffffffffffffffffffffffffffffffffffffffffffffffff167fa9059cbb000000000000000000000000000000000000000000000000000000001781529251815160009460609489169392918291908083835b602083106148d857805182527fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe0909201916020918201910161489b565b6001836020036101000a0380198251168184511680821785525050505050509050019150506000604051808303816000865af19150503d806000811461493a576040519150601f19603f3d011682016040523d82523d6000602084013e61493f565b606091505b509150915081801561496d57508051158061496d575080806020019051602081101561496a57600080fd5b50515b6149d857604080517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152600f60248201527f5452414e534645525f4641494c45440000000000000000000000000000000000604482015290519081900360640190fd5b5050505050565b60008282018381101561438457604080517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601b60248201527f536166654d6174683a206164646974696f6e206f766572666c6f770000000000604482015290519081900360640190fd5b614a5b610c86565b600d55600c55600b55565b861515600090815260056020908152604080832089845290915281206002810154909190614a9a908663ffffffff6149df16565b9050614aa5896151c7565b811015614b1357604080517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601760248201527f4d696e69756d206c6f742073697a65206e6f74206d6574000000000000000000604482015290519081900360640190fd5b6001820154600090614b2b908963ffffffff6149df16565b6005840180547fffffffffffffffffffffffffffffffffffffffffffffffffffffffffff00ffff16620100008715150217905590508515614b6e57600283018290555b8715614b7c57600183018190555b600483018590558315614c0e576005830154610100900460ff1615614bfb57600088118015614bd757508689141580614bd7575089151560009081526005602090815260408083206006870154845290915290206001015481115b15614bf657614be68a8a6152d4565b5050614bf68a8a838a868a615383565b614c09565b614c098a8a838a868a615383565b614c2c565b6005830154610100900460ff1615614c2c57614c2a8a8a614c38565b505b50505050505050505050565b6000614c4483836152d4565b84151560008181526005602081815260408084208985528252808420600681018590556007810185905592830180547fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff00ff16905593835260049052919020549193509150614cb890600163ffffffff61434216565b93151560009081526004602052604090209390935592915050565b600854600954604080517f069d188f00000000000000000000000000000000000000000000000000000000815273ffffffffffffffffffffffffffffffffffffffff9384166004820152918316602483015251600092839283928392839283927f00000000000000000000000000000000000000000000000000000000000000009092169163069d188f91604480820192606092909190829003018186803b158015614d7e57600080fd5b505afa158015614d92573d6000803e3d6000fd5b505050506040513d6060811015614da857600080fd5b50805160208201516040909201519194509092509050614dd5620186a0612fb88b8663ffffffff6154a216565b9350614de7898563ffffffff61434216565b98506000808273ffffffffffffffffffffffffffffffffffffffff1663d9da4fe68d614e2b5760095473ffffffffffffffffffffffffffffffffffffffff16614e45565b60085473ffffffffffffffffffffffffffffffffffffffff165b8e614e685760085473ffffffffffffffffffffffffffffffffffffffff16614e82565b60095473ffffffffffffffffffffffffffffffffffffffff165b8e60008f8f6040518763ffffffff1660e01b8152600401808773ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020018673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001858152602001848152602001806020018281038252848482818152602001925080828437600081840152601f19601f820116905080830192505050975050505050505050604080518083038186803b158015614f5957600080fd5b505afa158015614f6d573d6000803e3d6000fd5b505050506040513d6040811015614f8357600080fd5b5080516020909101519092509050614fa18b8363ffffffff6154a216565b97506001600a541115614ff857600960149054906101000a900460ff1615158c151514614fe157600a54614fdc90899063ffffffff61551516565b614ff5565b600a54614ff590899063ffffffff6154a216565b97505b615008888263ffffffff61551516565b975061502681612fb884670de0b6b3a764000063ffffffff6154a216565b9650505050945094509450945094565b61503f876151c7565b8310156150ad57604080517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601760248201527f4d696e69756d206c6f742073697a65206e6f74206d6574000000000000000000604482015290519081900360640190fd5b80156150c1576150c1878787878787615383565b9515801560009081526005602081815260408084208a85528252808420805473ffffffffffffffffffffffffffffffffffffffff909d167fffffffffffffffffffffffff00000000000000000000000000000000000000009d8e168117825560018083019b909b556002820198909855600481019690965594820180549a151562010000027fffffffffffffffffffffffffffffffffffffffffffffffffffffffffff00ffff7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff009c8d168b178116821790925594845282825285842099845298905292902080549098169092178755959095018054909416909117909116909217905550565b60007f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff1663f98126f9836152285760085473ffffffffffffffffffffffffffffffffffffffff16615242565b60095473ffffffffffffffffffffffffffffffffffffffff165b6040518263ffffffff1660e01b8152600401808273ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200191505060206040518083038186803b1580156152a257600080fd5b505afa1580156152b6573d6000803e3d6000fd5b505050506040513d60208110156152cc57600080fd5b505192915050565b811515600090815260056020908152604080832084845290915290206007810154600682015491821561532457841515600090815260056020908152604080832086845290915290206007018290555b811561534d57841515600090815260056020908152604080832085845290915290206006018390555b84151560009081526003602052604090205484141561537b5784151560009081526003602052604090208290555b509250929050565b60008211801561539257504281115b1561549a5760006153a4878686613c1b565b909450905083156153d257861515600090815260056020908152604080832087845290915290206007018690555b80156153fb57861515600090815260056020908152604080832084845290915290206006018690555b8615156000908152600560209081526040808320898452909152902060068101859055600781018290558461543f5787151560009081526003602052604090208790555b6005810154610100900460ff16615497576005810180547fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff00ff166101001790558715156000908152600460205260409020805460010190555b50505b505050505050565b6000826154b157506000614387565b828202828482816154be57fe5b0414614384576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401808060200182810382526021815260200180615ad06021913960400191505060405180910390fd5b600061438483836040518060400160405280601a81526020017f536166654d6174683a206469766973696f6e206279207a65726f000000000000815250615a50565b73ffffffffffffffffffffffffffffffffffffffff821660009081526006602052604081205481908190806155ed57604080517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601c60248201527f50726f7669646572206c6971756964697479206e6f7420666f756e6400000000604482015290519081900360640190fd5b84151560009081526005602090815260408083208484529091529020805473ffffffffffffffffffffffffffffffffffffffff88811691161461569157604080517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152600960248201527f466f7262696464656e0000000000000000000000000000000000000000000000604482015290519081900360640190fd5b60018101805460028301805460038501805460009586905592859055939093556005840154919750919550909350610100900460ff16156156d8576156d68683614c38565b505b615729866156fe5760085473ffffffffffffffffffffffffffffffffffffffff16615718565b60095473ffffffffffffffffffffffffffffffffffffffff165b336129f1878763ffffffff6149df16565b600581015460408051878152602081018790528082018690526000606082018190526080820181905260a0820181905260c08201526201000090920460ff16151560e0830152518715159173ffffffffffffffffffffffffffffffffffffffff8a16917f3349af395fb66f8dc0da9c7cb36de02b3ba8f46b9299c8db3ffb91658643228991610100908290030190a350509250925092565b6040805173ffffffffffffffffffffffffffffffffffffffff85811660248301528481166044830152606480830185905283518084039091018152608490920183526020820180517bffffffffffffffffffffffffffffffffffffffffffffffffffffffff167f23b872dd0000000000000000000000000000000000000000000000000000000017815292518251600094606094938a169392918291908083835b6020831061589f57805182527fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe09092019160209182019101615862565b6001836020036101000a0380198251168184511680821785525050505050509050019150506000604051808303816000865af19150503d8060008114615901576040519150601f19603f3d011682016040523d82523d6000602084013e615906565b606091505b5091509150818015615934575080511580615934575080806020019051602081101561593157600080fd5b50515b61549a57604080517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601460248201527f5452414e534645525f46524f4d5f4641494c4544000000000000000000000000604482015290519081900360640190fd5b60008184841115615a48576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004018080602001828103825283818151815260200191508051906020019080838360005b83811015615a0d5781810151838201526020016159f5565b50505050905090810190601f168015615a3a5780820380516001836020036101000a031916815260200191505b509250505060405180910390fd5b505050900390565b60008183615ab9576040517f08c379a0000000000000000000000000000000000000000000000000000000008152602060048201818152835160248401528351909283926044909101919085019080838360008315615a0d5781810151838201526020016159f5565b506000838581615ac557fe5b049594505050505056fe536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f77a2646970667358221220ef724b7ba8389ddbb0d71d8b32fb1ab8befb8232f478e1bac3a14d5aa179fe5764736f6c634300060b0033a2646970667358221220cb1985cd5e4d1e54a038a369d0ae5d2815ac8120c1cd3f7a51ab0e793a92472e64736f6c634300060b0033"
    };
});
define("@scom/scom-swap/contracts/oswap-openswap-contract/contracts/oracle/OSWAP_OraclePairCreator.ts", ["require", "exports", "@ijstech/eth-contract", "@scom/scom-swap/contracts/oswap-openswap-contract/contracts/oracle/OSWAP_OraclePairCreator.json.ts"], function (require, exports, eth_contract_21, OSWAP_OraclePairCreator_json_1) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.OSWAP_OraclePairCreator = void 0;
    class OSWAP_OraclePairCreator extends eth_contract_21.Contract {
        constructor(wallet, address) {
            super(wallet, address, OSWAP_OraclePairCreator_json_1.default.abi, OSWAP_OraclePairCreator_json_1.default.bytecode);
            this.assign();
        }
        deploy(options) {
            return this.__deploy([], options);
        }
        assign() {
            let createPair_send = async (salt, options) => {
                let result = await this.send('createPair', [this.wallet.utils.stringToBytes32(salt)], options);
                return result;
            };
            let createPair_call = async (salt, options) => {
                let result = await this.call('createPair', [this.wallet.utils.stringToBytes32(salt)], options);
                return result;
            };
            let createPair_txData = async (salt, options) => {
                let result = await this.txData('createPair', [this.wallet.utils.stringToBytes32(salt)], options);
                return result;
            };
            this.createPair = Object.assign(createPair_send, {
                call: createPair_call,
                txData: createPair_txData
            });
        }
    }
    OSWAP_OraclePairCreator._abi = OSWAP_OraclePairCreator_json_1.default.abi;
    exports.OSWAP_OraclePairCreator = OSWAP_OraclePairCreator;
});
define("@scom/scom-swap/contracts/oswap-openswap-contract/contracts/oracle/OSWAP_VotingExecutor2.json.ts", ["require", "exports"], function (require, exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    ///<amd-module name='@scom/scom-swap/contracts/oswap-openswap-contract/contracts/oracle/OSWAP_VotingExecutor2.json.ts'/> 
    exports.default = {
        "abi": [
            { "inputs": [{ "internalType": "address", "name": "_factory", "type": "address" }], "stateMutability": "nonpayable", "type": "constructor" },
            { "inputs": [{ "internalType": "bytes32[]", "name": "params", "type": "bytes32[]" }], "name": "execute", "outputs": [], "stateMutability": "nonpayable", "type": "function" },
            { "inputs": [], "name": "factory", "outputs": [{ "internalType": "address", "name": "", "type": "address" }], "stateMutability": "view", "type": "function" },
            { "inputs": [], "name": "governance", "outputs": [{ "internalType": "address", "name": "", "type": "address" }], "stateMutability": "view", "type": "function" }
        ],
        "bytecode": "60c060405234801561001057600080fd5b50604051610c98380380610c988339818101604052602081101561003357600080fd5b50516001600160601b0319606082901b1660a05260408051635aa6e67560e01b815290516001600160a01b03831691635aa6e675916004808301926020929190829003018186803b15801561008757600080fd5b505afa15801561009b573d6000803e3d6000fd5b505050506040513d60208110156100b157600080fd5b5051606081811b6001600160601b03191660805260a0516001600160a01b0390921692501c610b6a61012e6000398061029d52806103cc52806104b6528061055452806105f252806106d8528061078f528061080952806108f152806109665280610a585280610b1252508060f3528061015b5250610b6a6000f3fe608060405234801561001057600080fd5b50600436106100415760003560e01c80635aa6e675146100465780638af7c64914610077578063c45a0155146100e9575b600080fd5b61004e6100f1565b6040805173ffffffffffffffffffffffffffffffffffffffff9092168252519081900360200190f35b6100e76004803603602081101561008d57600080fd5b8101906020810181356401000000008111156100a857600080fd5b8201836020820111156100ba57600080fd5b803590602001918460208302840111640100000000831117156100dc57600080fd5b509092509050610115565b005b61004e610b10565b7f000000000000000000000000000000000000000000000000000000000000000081565b604080517fb15866e6000000000000000000000000000000000000000000000000000000008152336004820152905173ffffffffffffffffffffffffffffffffffffffff7f0000000000000000000000000000000000000000000000000000000000000000169163b15866e6916024808301926020929190829003018186803b1580156101a157600080fd5b505afa1580156101b5573d6000803e3d6000fd5b505050506040513d60208110156101cb57600080fd5b505161023857604080517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152600f60248201527f4e6f742066726f6d20766f74696e670000000000000000000000000000000000604482015290519081900360640190fd5b60008282600081811061024757fe5b90506020020135905060008383600181811061025f57fe5b6020029190910135915050600483141561048357817f7365744f7261636c65000000000000000000000000000000000000000000000014156103a2577f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff16630c1445818260601c868660028181106102e857fe5b9050602002013560601c878760038181106102ff57fe5b604080517fffffffff0000000000000000000000000000000000000000000000000000000060e089901b16815273ffffffffffffffffffffffffffffffffffffffff9687166004820152949095166024850152602002919091013560601c6044830152509051606480830192600092919082900301818387803b15801561038557600080fd5b505af1158015610399573d6000803e3d6000fd5b5050505061047e565b817f6164644f6c644f7261636c65546f4e65775061697200000000000000000000001415610417577f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff1663399762478260601c868660028181106102e857fe5b604080517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152600f60248201527f556e6b6e6f776e20636f6d6d616e640000000000000000000000000000000000604482015290519081900360640190fd5b610b0a565b60028314156107d657817f7365745472616465466565000000000000000000000000000000000000000000141561052a577f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff1663106030238260001c6040518263ffffffff1660e01b815260040180828152602001915050600060405180830381600087803b15801561038557600080fd5b817f73657450726f746f636f6c46656500000000000000000000000000000000000014156105c8577f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff1663787dce3d8260001c6040518263ffffffff1660e01b815260040180828152602001915050600060405180830381600087803b15801561038557600080fd5b817f73657446656550657244656c656761746f7200000000000000000000000000001415610666577f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff1663636b0d1a8260001c6040518263ffffffff1660e01b815260040180828152602001915050600060405180830381600087803b15801561038557600080fd5b817f73657450726f746f636f6c466565546f00000000000000000000000000000000141561071f57604080517fe0e6799f000000000000000000000000000000000000000000000000000000008152606083901c6004820152905173ffffffffffffffffffffffffffffffffffffffff7f0000000000000000000000000000000000000000000000000000000000000000169163e0e6799f91602480830192600092919082900301818387803b15801561038557600080fd5b817f7365744c69766500000000000000000000000000000000000000000000000000141561041757604080517ff5ee33480000000000000000000000000000000000000000000000000000000081528215156004820152905173ffffffffffffffffffffffffffffffffffffffff7f0000000000000000000000000000000000000000000000000000000000000000169163f5ee334891602480830192600092919082900301818387803b15801561038557600080fd5b6003831415610aa357817f7365744d696e4c6f7453697a650000000000000000000000000000000000000014156108c7577f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff1663130a0b408260601c8686600281811061085457fe5b9050602002013560001c6040518363ffffffff1660e01b8152600401808373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200182815260200192505050600060405180830381600087803b15801561038557600080fd5b817f736574536563757269747953636f72654f7261636c6500000000000000000000141561093c577f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff16632288f2ff8260601c8686600281811061085457fe5b817f7365744c697665466f72506169720000000000000000000000000000000000001415610a2e577f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff16636883618a8260601c868660028181106109b157fe5b604080517fffffffff0000000000000000000000000000000000000000000000000000000060e088901b16815273ffffffffffffffffffffffffffffffffffffffff909516600486015260209091029290920135151560248401525051604480830192600092919082900301818387803b15801561038557600080fd5b817f73657457686974654c69737400000000000000000000000000000000000000001415610417577f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff16638d14e1278260601c868660028181106109b157fe5b604080517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601260248201527f496e76616c696420706172616d65746572730000000000000000000000000000604482015290519081900360640190fd5b50505050565b7f00000000000000000000000000000000000000000000000000000000000000008156fea2646970667358221220d76d6028e6fa6925b283d1cebcf93c71dc2666e462fee3c145644197a6d4696964736f6c634300060b0033"
    };
});
define("@scom/scom-swap/contracts/oswap-openswap-contract/contracts/oracle/OSWAP_VotingExecutor2.ts", ["require", "exports", "@ijstech/eth-contract", "@scom/scom-swap/contracts/oswap-openswap-contract/contracts/oracle/OSWAP_VotingExecutor2.json.ts"], function (require, exports, eth_contract_22, OSWAP_VotingExecutor2_json_1) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.OSWAP_VotingExecutor2 = void 0;
    class OSWAP_VotingExecutor2 extends eth_contract_22.Contract {
        constructor(wallet, address) {
            super(wallet, address, OSWAP_VotingExecutor2_json_1.default.abi, OSWAP_VotingExecutor2_json_1.default.bytecode);
            this.assign();
        }
        deploy(factory, options) {
            return this.__deploy([factory], options);
        }
        assign() {
            let factory_call = async (options) => {
                let result = await this.call('factory', [], options);
                return result;
            };
            this.factory = factory_call;
            let governance_call = async (options) => {
                let result = await this.call('governance', [], options);
                return result;
            };
            this.governance = governance_call;
            let execute_send = async (params, options) => {
                let result = await this.send('execute', [this.wallet.utils.stringToBytes32(params)], options);
                return result;
            };
            let execute_call = async (params, options) => {
                let result = await this.call('execute', [this.wallet.utils.stringToBytes32(params)], options);
                return;
            };
            let execute_txData = async (params, options) => {
                let result = await this.txData('execute', [this.wallet.utils.stringToBytes32(params)], options);
                return result;
            };
            this.execute = Object.assign(execute_send, {
                call: execute_call,
                txData: execute_txData
            });
        }
    }
    OSWAP_VotingExecutor2._abi = OSWAP_VotingExecutor2_json_1.default.abi;
    exports.OSWAP_VotingExecutor2 = OSWAP_VotingExecutor2;
});
define("@scom/scom-swap/contracts/oswap-openswap-contract/contracts/range/OSWAP_RangeFactory.json.ts", ["require", "exports"], function (require, exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    ///<amd-module name='@scom/scom-swap/contracts/oswap-openswap-contract/contracts/range/OSWAP_RangeFactory.json.ts'/> 
    exports.default = {
        "abi": [
            { "inputs": [{ "internalType": "address", "name": "_governance", "type": "address" }, { "internalType": "address", "name": "_oracleFactory", "type": "address" }, { "internalType": "address", "name": "_pairCreator", "type": "address" }, { "internalType": "uint256", "name": "_tradeFee", "type": "uint256" }, { "internalType": "uint256[]", "name": "_stakeAmount", "type": "uint256[]" }, { "internalType": "uint256[]", "name": "_liquidityProviderShare", "type": "uint256[]" }, { "internalType": "address", "name": "_protocolFeeTo", "type": "address" }], "stateMutability": "nonpayable", "type": "constructor" },
            { "anonymous": false, "inputs": [{ "indexed": true, "internalType": "address", "name": "previousOwner", "type": "address" }, { "indexed": true, "internalType": "address", "name": "newOwner", "type": "address" }], "name": "OwnershipTransferred", "type": "event" },
            { "anonymous": false, "inputs": [{ "indexed": true, "internalType": "address", "name": "token0", "type": "address" }, { "indexed": true, "internalType": "address", "name": "token1", "type": "address" }, { "indexed": false, "internalType": "address", "name": "pair", "type": "address" }, { "indexed": false, "internalType": "uint256", "name": "newSize", "type": "uint256" }], "name": "PairCreated", "type": "event" },
            { "anonymous": false, "inputs": [{ "indexed": true, "internalType": "address", "name": "pair", "type": "address" }], "name": "PairRestarted", "type": "event" },
            { "anonymous": false, "inputs": [{ "indexed": true, "internalType": "address", "name": "pair", "type": "address" }], "name": "PairShutdowned", "type": "event" },
            { "anonymous": false, "inputs": [{ "indexed": false, "internalType": "bytes32", "name": "name", "type": "bytes32" }, { "indexed": false, "internalType": "bytes32", "name": "value", "type": "bytes32" }], "name": "ParamSet", "type": "event" },
            { "anonymous": false, "inputs": [{ "indexed": false, "internalType": "bytes32", "name": "name", "type": "bytes32" }, { "indexed": false, "internalType": "bytes32", "name": "value1", "type": "bytes32" }, { "indexed": false, "internalType": "bytes32", "name": "value2", "type": "bytes32" }], "name": "ParamSet2", "type": "event" },
            { "anonymous": false, "inputs": [], "name": "Restarted", "type": "event" },
            { "anonymous": false, "inputs": [], "name": "Shutdowned", "type": "event" },
            { "inputs": [{ "internalType": "uint256", "name": "", "type": "uint256" }], "name": "allPairs", "outputs": [{ "internalType": "address", "name": "", "type": "address" }], "stateMutability": "view", "type": "function" },
            { "inputs": [], "name": "allPairsLength", "outputs": [{ "internalType": "uint256", "name": "", "type": "uint256" }], "stateMutability": "view", "type": "function" },
            { "inputs": [], "name": "checkAndGetSwapParams", "outputs": [{ "internalType": "uint256", "name": "_tradeFee", "type": "uint256" }], "stateMutability": "view", "type": "function" },
            { "inputs": [{ "internalType": "address", "name": "tokenA", "type": "address" }, { "internalType": "address", "name": "tokenB", "type": "address" }], "name": "createPair", "outputs": [{ "internalType": "address", "name": "pair", "type": "address" }], "stateMutability": "nonpayable", "type": "function" },
            { "inputs": [], "name": "getAllLiquidityProviderShare", "outputs": [{ "internalType": "uint256[]", "name": "_stakeAmount", "type": "uint256[]" }, { "internalType": "uint256[]", "name": "_liquidityProviderShare", "type": "uint256[]" }], "stateMutability": "view", "type": "function" },
            { "inputs": [], "name": "getCreateAddresses", "outputs": [{ "internalType": "address", "name": "_governance", "type": "address" }, { "internalType": "address", "name": "_rangeLiquidityProvider", "type": "address" }, { "internalType": "address", "name": "_oracleFactory", "type": "address" }], "stateMutability": "view", "type": "function" },
            { "inputs": [{ "internalType": "uint256", "name": "stake", "type": "uint256" }], "name": "getLiquidityProviderShare", "outputs": [{ "internalType": "uint256", "name": "_liquidityProviderShare", "type": "uint256" }], "stateMutability": "view", "type": "function" },
            { "inputs": [{ "internalType": "address", "name": "", "type": "address" }, { "internalType": "address", "name": "", "type": "address" }], "name": "getPair", "outputs": [{ "internalType": "address", "name": "", "type": "address" }], "stateMutability": "view", "type": "function" },
            { "inputs": [], "name": "governance", "outputs": [{ "internalType": "address", "name": "", "type": "address" }], "stateMutability": "view", "type": "function" },
            { "inputs": [], "name": "isLive", "outputs": [{ "internalType": "bool", "name": "", "type": "bool" }], "stateMutability": "view", "type": "function" },
            { "inputs": [{ "internalType": "uint256", "name": "", "type": "uint256" }], "name": "liquidityProviderShare", "outputs": [{ "internalType": "uint256", "name": "", "type": "uint256" }], "stateMutability": "view", "type": "function" },
            { "inputs": [], "name": "oracleFactory", "outputs": [{ "internalType": "address", "name": "", "type": "address" }], "stateMutability": "view", "type": "function" },
            { "inputs": [], "name": "owner", "outputs": [{ "internalType": "address", "name": "", "type": "address" }], "stateMutability": "view", "type": "function" },
            { "inputs": [], "name": "pairCreator", "outputs": [{ "internalType": "address", "name": "", "type": "address" }], "stateMutability": "view", "type": "function" },
            { "inputs": [], "name": "protocolFeeTo", "outputs": [{ "internalType": "address", "name": "", "type": "address" }], "stateMutability": "view", "type": "function" },
            { "inputs": [], "name": "rangeLiquidityProvider", "outputs": [{ "internalType": "address", "name": "", "type": "address" }], "stateMutability": "view", "type": "function" },
            { "inputs": [], "name": "renounceOwnership", "outputs": [], "stateMutability": "nonpayable", "type": "function" },
            { "inputs": [{ "internalType": "uint256[]", "name": "_stakeAmount", "type": "uint256[]" }, { "internalType": "uint256[]", "name": "_liquidityProviderShare", "type": "uint256[]" }], "name": "setLiquidityProviderShare", "outputs": [], "stateMutability": "nonpayable", "type": "function" },
            { "inputs": [{ "internalType": "bool", "name": "_isLive", "type": "bool" }], "name": "setLive", "outputs": [], "stateMutability": "nonpayable", "type": "function" },
            { "inputs": [{ "internalType": "address", "name": "pair", "type": "address" }, { "internalType": "bool", "name": "live", "type": "bool" }], "name": "setLiveForPair", "outputs": [], "stateMutability": "nonpayable", "type": "function" },
            { "inputs": [{ "internalType": "address", "name": "_protocolFeeTo", "type": "address" }], "name": "setProtocolFeeTo", "outputs": [], "stateMutability": "nonpayable", "type": "function" },
            { "inputs": [{ "internalType": "address", "name": "_rangeLiquidityProvider", "type": "address" }], "name": "setRangeLiquidityProvider", "outputs": [], "stateMutability": "nonpayable", "type": "function" },
            { "inputs": [{ "internalType": "uint256", "name": "_tradeFee", "type": "uint256" }], "name": "setTradeFee", "outputs": [], "stateMutability": "nonpayable", "type": "function" },
            { "inputs": [{ "internalType": "uint256", "name": "", "type": "uint256" }], "name": "stakeAmount", "outputs": [{ "internalType": "uint256", "name": "", "type": "uint256" }], "stateMutability": "view", "type": "function" },
            { "inputs": [], "name": "tradeFee", "outputs": [{ "internalType": "uint256", "name": "", "type": "uint256" }], "stateMutability": "view", "type": "function" },
            { "inputs": [{ "internalType": "address", "name": "newOwner", "type": "address" }], "name": "transferOwnership", "outputs": [], "stateMutability": "nonpayable", "type": "function" }
        ],
        "bytecode": "60c06040523480156200001157600080fd5b50604051620027b0380380620027b0833981810160405260e08110156200003757600080fd5b81516020830151604080850151606086015160808701805193519597949692959194919392820192846401000000008211156200007357600080fd5b9083019060208201858111156200008957600080fd5b8251866020820283011164010000000082111715620000a757600080fd5b82525081516020918201928201910280838360005b83811015620000d6578181015183820152602001620000bc565b50505050905001604052602001805160405193929190846401000000008211156200010057600080fd5b9083019060208201858111156200011657600080fd5b82518660208202830111640100000000821117156200013457600080fd5b82525081516020918201928201910280838360005b838110156200016357818101518382015260200162000149565b50505050919091016040525060200151606089901b6001600160601b03191660805260008054600160ff1990911617610100600160a81b0319166101006001600160a01b038a16021781559092509050620001bd62000267565b600380546001600160a01b0319166001600160a01b038316908117909155604051919250906000907f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e0908290a3506001600160601b0319606087901b1660a05262000231846001600160e01b036200026c16565b6200024683836001600160e01b03620002f616565b6200025a816001600160e01b03620004f616565b50505050505050620005ca565b335b90565b620186a0811115620002b9576040805162461bcd60e51b8152602060048201526011602482015270494e56414c49445f54524144455f46454560781b604482015290519081900360640190fd5b60058190556040805167747261646546656560c01b815260208101839052815160008051602062002790833981519152929181900390910190a150565b81518151811462000341576040805162461bcd60e51b815260206004820152601060248201526f0988a9c8ea890409c9ea8409a82a886960831b604482015290519081900360640190fd5b8251620003569060069060208601906200055d565b5081516200036c9060079060208501906200055d565b5060005b81811015620004f057620186a08382815181106200038a57fe5b60200260200101511115620003e6576040805162461bcd60e51b815260206004820152601760248201527f494e56414c4944204c4951554944495459205348415245000000000000000000604482015290519081900360640190fd5b80156200045857838181518110620003fa57fe5b60200260200101518460018303815181106200041257fe5b602002602001015110620004585760405162461bcd60e51b81526004018080602001828103825260238152602001806200276d6023913960400191505060405180910390fd5b7f410bdf2fedecd51e396bd4e5ca41880366c00ff01f4df34d7cc46faef60eb7068482815181106200048657fe5b602002602001015160001b8483815181106200049e57fe5b602090810291909101810151604080517f6c697175696469747950726f76696465725368617265000000000000000000008152928301939093528183015290519081900360600190a160010162000370565b50505050565b600880546001600160a01b0319166001600160a01b0383161790819055604080516c70726f746f636f6c466565546f60981b815260609290921b6001600160601b03191660208301528051600080516020620027908339815191529281900390910190a150565b8280548282559060005260206000209081019282156200059b579160200282015b828111156200059b5782518255916020019190600101906200057e565b50620005a9929150620005ad565b5090565b6200026991905b80821115620005a95760008155600101620005b4565b60805160601c60a05160601c61214c6200062160003980610ecb528061177352508061063f52806108f05280610a495280610a845280610b77528061161d528061173b52806119f75280611aea525061214c6000f3fe608060405234801561001057600080fd5b50600436106101ae5760003560e01c80638da5cb5b116100ee578063e0e6799f11610097578063ed3b638c11610071578063ed3b638c14610582578063ef3692521461059f578063f2fde38b146105a7578063f5ee3348146105da576101ae565b8063e0e6799f146104d4578063e6a4390514610507578063ea2ed2c114610542576101ae565b8063c7f7fb90116100c8578063c7f7fb901461045e578063c9c6539614610466578063e0dd38d1146104a1576101ae565b80638da5cb5b14610432578063b8f7a6651461043a578063c538b5d614610456576101ae565b8063502180481161015b5780636883618a116101355780636883618a146103b55780636c57f602146103f0578063715018a61461040d5780638519573e14610415576101ae565b806350218048146102e3578063574f2ba3146103a55780635aa6e675146103ad576101ae565b80632c6ced381161018c5780632c6ced3814610232578063420328561461023a5780634af4bde814610242576101ae565b806310603023146101b35780631e3dd18b146101d257806324bcdfbd14610218575b600080fd5b6101d0600480360360208110156101c957600080fd5b50356105f9565b005b6101ef600480360360208110156101e857600080fd5b5035610728565b6040805173ffffffffffffffffffffffffffffffffffffffff9092168252519081900360200190f35b61022061075c565b60408051918252519081900360200190f35b6101ef610762565b61022061077e565b61024a6107f7565b604051808060200180602001838103835285818151815260200191508051906020019060200280838360005b8381101561028e578181015183820152602001610276565b50505050905001838103825284818151815260200191508051906020019060200280838360005b838110156102cd5781810151838201526020016102b5565b5050505090500194505050505060405180910390f35b6101d0600480360360408110156102f957600080fd5b81019060208101813564010000000081111561031457600080fd5b82018360208201111561032657600080fd5b8035906020019184602083028401116401000000008311171561034857600080fd5b91939092909160208101903564010000000081111561036657600080fd5b82018360208201111561037857600080fd5b8035906020019184602083028401116401000000008311171561039a57600080fd5b5090925090506108aa565b610220610a40565b6101ef610a47565b6101d0600480360360408110156103cb57600080fd5b5073ffffffffffffffffffffffffffffffffffffffff81351690602001351515610a6b565b6102206004803603602081101561040657600080fd5b5035610d58565b6101d0610d76565b6102206004803603602081101561042b57600080fd5b5035610e76565b6101ef610e83565b610442610e9f565b604080519115158252519081900360200190f35b6101ef610ea8565b6101ef610ec9565b6101ef6004803603604081101561047c57600080fd5b5073ffffffffffffffffffffffffffffffffffffffff81358116916020013516610eed565b6101d0600480360360208110156104b757600080fd5b503573ffffffffffffffffffffffffffffffffffffffff16611490565b6101d0600480360360208110156104ea57600080fd5b503573ffffffffffffffffffffffffffffffffffffffff166115d7565b6101ef6004803603604081101561051d57600080fd5b5073ffffffffffffffffffffffffffffffffffffffff81358116916020013516611703565b61054a611736565b6040805173ffffffffffffffffffffffffffffffffffffffff9485168152928416602084015292168183015290519081900360600190f35b6102206004803603602081101561059857600080fd5b5035611797565b6101ef611837565b6101d0600480360360208110156105bd57600080fd5b503573ffffffffffffffffffffffffffffffffffffffff16611853565b6101d0600480360360208110156105f057600080fd5b503515156119de565b604080517fa3818b3b000000000000000000000000000000000000000000000000000000008152336004820152905173ffffffffffffffffffffffffffffffffffffffff7f0000000000000000000000000000000000000000000000000000000000000000169163a3818b3b916024808301926020929190829003018186803b15801561068557600080fd5b505afa158015610699573d6000803e3d6000fd5b505050506040513d60208110156106af57600080fd5b505161071c57604080517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152600f60248201527f4e6f742066726f6d20766f74696e670000000000000000000000000000000000604482015290519081900360640190fd5b61072581611c42565b50565b6002818154811061073557fe5b60009182526020909120015473ffffffffffffffffffffffffffffffffffffffff16905081565b60055481565b60045473ffffffffffffffffffffffffffffffffffffffff1681565b6000805460ff166107f057604080517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152600f60248201527f474c4f42414c4c59205041555345440000000000000000000000000000000000604482015290519081900360640190fd5b5060055490565b606080600660078180548060200260200160405190810160405280929190818152602001828054801561084957602002820191906000526020600020905b815481526020019060010190808311610835575b505050505091508080548060200260200160405190810160405280929190818152602001828054801561089b57602002820191906000526020600020905b815481526020019060010190808311610887575b50505050509050915091509091565b604080517fa3818b3b000000000000000000000000000000000000000000000000000000008152336004820152905173ffffffffffffffffffffffffffffffffffffffff7f0000000000000000000000000000000000000000000000000000000000000000169163a3818b3b916024808301926020929190829003018186803b15801561093657600080fd5b505afa15801561094a573d6000803e3d6000fd5b505050506040513d602081101561096057600080fd5b50516109cd57604080517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152600f60248201527f4e6f742066726f6d20766f74696e670000000000000000000000000000000000604482015290519081900360640190fd5b610a3a84848080602002602001604051908101604052809392919081815260200183836020028082843760009201919091525050604080516020808802828101820190935287825290935087925086918291850190849080828437600092019190915250611d1792505050565b50505050565b6002545b90565b7f000000000000000000000000000000000000000000000000000000000000000081565b3373ffffffffffffffffffffffffffffffffffffffff167f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff1663f851a4406040518163ffffffff1660e01b815260040160206040518083038186803b158015610ae857600080fd5b505afa158015610afc573d6000803e3d6000fd5b505050506040513d6020811015610b1257600080fd5b505173ffffffffffffffffffffffffffffffffffffffff161480610bea5750604080517fa3818b3b000000000000000000000000000000000000000000000000000000008152336004820152905173ffffffffffffffffffffffffffffffffffffffff7f0000000000000000000000000000000000000000000000000000000000000000169163a3818b3b916024808301926020929190829003018186803b158015610bbd57600080fd5b505afa158015610bd1573d6000803e3d6000fd5b505050506040513d6020811015610be757600080fd5b50515b610c3f576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004018080602001828103825260218152602001806120f66021913960400191505060405180910390fd5b604080517ff5ee33480000000000000000000000000000000000000000000000000000000081528215156004820152905173ffffffffffffffffffffffffffffffffffffffff84169163f5ee334891602480830192600092919082900301818387803b158015610cae57600080fd5b505af1158015610cc2573d6000803e3d6000fd5b505050508015610d125760405173ffffffffffffffffffffffffffffffffffffffff8316907fc96ebf6dcdf5c5e56ad8961009b9d49aa6f2d53d5ffe374048f1d603e3b2908a90600090a2610d54565b60405173ffffffffffffffffffffffffffffffffffffffff8316907f7dc5983a5f99179c76b5bbff56fcf9e8373f1a7078dcef4537a5176b333c2bfe90600090a25b5050565b60068181548110610d6557fe5b600091825260209091200154905081565b610d7e611f5c565b60035473ffffffffffffffffffffffffffffffffffffffff908116911614610e0757604080517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820181905260248201527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e6572604482015290519081900360640190fd5b60035460405160009173ffffffffffffffffffffffffffffffffffffffff16907f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e0908390a3600380547fffffffffffffffffffffffff0000000000000000000000000000000000000000169055565b60078181548110610d6557fe5b60035473ffffffffffffffffffffffffffffffffffffffff1690565b60005460ff1681565b600054610100900473ffffffffffffffffffffffffffffffffffffffff1681565b7f000000000000000000000000000000000000000000000000000000000000000081565b60008173ffffffffffffffffffffffffffffffffffffffff168373ffffffffffffffffffffffffffffffffffffffff161415610f8a57604080517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601360248201527f4944454e544943414c5f41444452455353455300000000000000000000000000604482015290519081900360640190fd5b6000808373ffffffffffffffffffffffffffffffffffffffff168573ffffffffffffffffffffffffffffffffffffffff1610610fc7578385610fca565b84845b909250905073ffffffffffffffffffffffffffffffffffffffff821661105157604080517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152600c60248201527f5a45524f5f414444524553530000000000000000000000000000000000000000604482015290519081900360640190fd5b73ffffffffffffffffffffffffffffffffffffffff8281166000908152600160209081526040808320858516845290915290205416156110f257604080517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152600b60248201527f504149525f455849535453000000000000000000000000000000000000000000604482015290519081900360640190fd5b604080517fffffffffffffffffffffffffffffffffffffffff000000000000000000000000606085811b821660208085019190915285821b90921660348401528351602881850301815260488401855280519083012060008054606c80870184905287518088039091018152608c909601875293850180517bffffffffffffffffffffffffffffffffffffffffffffffffffffffff167fed25a5a20000000000000000000000000000000000000000000000000000000017815295518551929691959394610100900473ffffffffffffffffffffffffffffffffffffffff169392909182918083835b6020831061121857805182527fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe090920191602091820191016111db565b6001836020036101000a038019825116818451168082178552505050505050905001915050600060405180830381855af49150503d8060008114611278576040519150601f19603f3d011682016040523d82523d6000602084013e61127d565b606091505b5091509150816112ee57604080517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601560248201527f4661696c656420746f2063726561746520706169720000000000000000000000604482015290519081900360640190fd5b80806020019051602081101561130357600080fd5b5051604080517f485cc95500000000000000000000000000000000000000000000000000000000815273ffffffffffffffffffffffffffffffffffffffff8881166004830152878116602483015291519298509088169163485cc9559160448082019260009290919082900301818387803b15801561138157600080fd5b505af1158015611395573d6000803e3d6000fd5b5050505073ffffffffffffffffffffffffffffffffffffffff85811660008181526001602081815260408084208a87168086529083528185208054978e167fffffffffffffffffffffffff0000000000000000000000000000000000000000988916811790915584845282862087875284528286208054891682179055600280549586018155958690527f405787fa12a823e0f2b7631cc41b3ba8828b3321ca811111fa75cd3aa3bb5ace90940180549097168417909655925483519283529082015281517f0d3648bd0f6ba80134a33ba9275ac585d9d315f0ad8355cddefde31afa28d0e9929181900390910190a3505050505092915050565b611498611f5c565b60035473ffffffffffffffffffffffffffffffffffffffff90811691161461152157604080517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820181905260248201527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e6572604482015290519081900360640190fd5b60045473ffffffffffffffffffffffffffffffffffffffff1615611590576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004018080602001828103825260228152602001806120ae6022913960400191505060405180910390fd5b600480547fffffffffffffffffffffffff00000000000000000000000000000000000000001673ffffffffffffffffffffffffffffffffffffffff92909216919091179055565b604080517fa3818b3b000000000000000000000000000000000000000000000000000000008152336004820152905173ffffffffffffffffffffffffffffffffffffffff7f0000000000000000000000000000000000000000000000000000000000000000169163a3818b3b916024808301926020929190829003018186803b15801561166357600080fd5b505afa158015611677573d6000803e3d6000fd5b505050506040513d602081101561168d57600080fd5b50516116fa57604080517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152600f60248201527f4e6f742066726f6d20766f74696e670000000000000000000000000000000000604482015290519081900360640190fd5b61072581611f60565b600160209081526000928352604080842090915290825290205473ffffffffffffffffffffffffffffffffffffffff1681565b6004547f00000000000000000000000000000000000000000000000000000000000000009073ffffffffffffffffffffffffffffffffffffffff167f0000000000000000000000000000000000000000000000000000000000000000909192565b6006546000907fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff81015b8181101561182f5783600682815481106117d757fe5b90600052602060002001541161180857600781815481106117f457fe5b906000526020600020015492505050611832565b7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff016117c1565b50505b919050565b60085473ffffffffffffffffffffffffffffffffffffffff1681565b61185b611f5c565b60035473ffffffffffffffffffffffffffffffffffffffff9081169116146118e457604080517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820181905260248201527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e6572604482015290519081900360640190fd5b73ffffffffffffffffffffffffffffffffffffffff8116611950576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004018080602001828103825260268152602001806120d06026913960400191505060405180910390fd5b60035460405173ffffffffffffffffffffffffffffffffffffffff8084169216907f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e090600090a3600380547fffffffffffffffffffffffff00000000000000000000000000000000000000001673ffffffffffffffffffffffffffffffffffffffff92909216919091179055565b3373ffffffffffffffffffffffffffffffffffffffff167f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff1663f851a4406040518163ffffffff1660e01b815260040160206040518083038186803b158015611a5b57600080fd5b505afa158015611a6f573d6000803e3d6000fd5b505050506040513d6020811015611a8557600080fd5b505173ffffffffffffffffffffffffffffffffffffffff161480611b5d5750604080517fa3818b3b000000000000000000000000000000000000000000000000000000008152336004820152905173ffffffffffffffffffffffffffffffffffffffff7f0000000000000000000000000000000000000000000000000000000000000000169163a3818b3b916024808301926020929190829003018186803b158015611b3057600080fd5b505afa158015611b44573d6000803e3d6000fd5b505050506040513d6020811015611b5a57600080fd5b50515b611bb2576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004018080602001828103825260218152602001806120f66021913960400191505060405180910390fd5b600080547fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff0016821515179081905560ff1615611c16576040517f71d46a587e8ae446d9442949c41f57019d17b5b4f3610941960517c9c230304790600090a1610725565b6040517fb821dc27f036017c075c6746b9e8608a15f78f90a8c03acbce13e9438ca76e1b90600090a150565b620186a0811115611cb457604080517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601160248201527f494e56414c49445f54524144455f464545000000000000000000000000000000604482015290519081900360640190fd5b6005819055604080517f747261646546656500000000000000000000000000000000000000000000000081526020810183905281517f22ea5a9dcc7fb5bc447fcb472061adc51caa147724a67a6695d49a9dff162509929181900390910190a150565b815181518114611d8857604080517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601060248201527f4c454e475448204e4f54204d4154434800000000000000000000000000000000604482015290519081900360640190fd5b8251611d9b906006906020860190612025565b508151611daf906007906020850190612025565b5060005b81811015610a3a57620186a0838281518110611dcb57fe5b60200260200101511115611e4057604080517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601760248201527f494e56414c4944204c4951554944495459205348415245000000000000000000604482015290519081900360640190fd5b8015611ec757838181518110611e5257fe5b6020026020010151846001830381518110611e6957fe5b602002602001015110611ec7576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040180806020018281038252602381526020018061208b6023913960400191505060405180910390fd5b7f410bdf2fedecd51e396bd4e5ca41880366c00ff01f4df34d7cc46faef60eb706848281518110611ef457fe5b602002602001015160001b848381518110611f0b57fe5b602090810291909101810151604080517f6c697175696469747950726f76696465725368617265000000000000000000008152928301939093528183015290519081900360600190a1600101611db3565b3390565b600880547fffffffffffffffffffffffff00000000000000000000000000000000000000001673ffffffffffffffffffffffffffffffffffffffff83161790819055604080517f70726f746f636f6c466565546f00000000000000000000000000000000000000815260609290921b7fffffffffffffffffffffffffffffffffffffffff00000000000000000000000016602083015280517f22ea5a9dcc7fb5bc447fcb472061adc51caa147724a67a6695d49a9dff1625099281900390910190a150565b828054828255906000526020600020908101928215612060579160200282015b82811115612060578251825591602001919060010190612045565b5061206c929150612070565b5090565b610a4491905b8082111561206c576000815560010161207656fe5354414b4520414d4f554e54204e4f5420494e20415343454e44494e47204f5244455252616e67654c697175696469747950726f766964657220616c7265616479207365744f776e61626c653a206e6577206f776e657220697320746865207a65726f20616464726573734e6f742066726f6d2073687574646f776e2061646d696e206f7220766f74696e67a2646970667358221220dd90142a5de6ebf84d24792f496f612a0d5c00acbbf98f799d2f7a946a6761fc64736f6c634300060b00335354414b4520414d4f554e54204e4f5420494e20415343454e44494e47204f5244455222ea5a9dcc7fb5bc447fcb472061adc51caa147724a67a6695d49a9dff162509"
    };
});
define("@scom/scom-swap/contracts/oswap-openswap-contract/contracts/range/OSWAP_RangeFactory.ts", ["require", "exports", "@ijstech/eth-contract", "@scom/scom-swap/contracts/oswap-openswap-contract/contracts/range/OSWAP_RangeFactory.json.ts"], function (require, exports, eth_contract_23, OSWAP_RangeFactory_json_1) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.OSWAP_RangeFactory = void 0;
    class OSWAP_RangeFactory extends eth_contract_23.Contract {
        constructor(wallet, address) {
            super(wallet, address, OSWAP_RangeFactory_json_1.default.abi, OSWAP_RangeFactory_json_1.default.bytecode);
            this.assign();
        }
        deploy(params, options) {
            return this.__deploy([params.governance, params.oracleFactory, params.pairCreator, this.wallet.utils.toString(params.tradeFee), this.wallet.utils.toString(params.stakeAmount), this.wallet.utils.toString(params.liquidityProviderShare), params.protocolFeeTo], options);
        }
        parseOwnershipTransferredEvent(receipt) {
            return this.parseEvents(receipt, "OwnershipTransferred").map(e => this.decodeOwnershipTransferredEvent(e));
        }
        decodeOwnershipTransferredEvent(event) {
            let result = event.data;
            return {
                previousOwner: result.previousOwner,
                newOwner: result.newOwner,
                _event: event
            };
        }
        parsePairCreatedEvent(receipt) {
            return this.parseEvents(receipt, "PairCreated").map(e => this.decodePairCreatedEvent(e));
        }
        decodePairCreatedEvent(event) {
            let result = event.data;
            return {
                token0: result.token0,
                token1: result.token1,
                pair: result.pair,
                newSize: new eth_contract_23.BigNumber(result.newSize),
                _event: event
            };
        }
        parsePairRestartedEvent(receipt) {
            return this.parseEvents(receipt, "PairRestarted").map(e => this.decodePairRestartedEvent(e));
        }
        decodePairRestartedEvent(event) {
            let result = event.data;
            return {
                pair: result.pair,
                _event: event
            };
        }
        parsePairShutdownedEvent(receipt) {
            return this.parseEvents(receipt, "PairShutdowned").map(e => this.decodePairShutdownedEvent(e));
        }
        decodePairShutdownedEvent(event) {
            let result = event.data;
            return {
                pair: result.pair,
                _event: event
            };
        }
        parseParamSetEvent(receipt) {
            return this.parseEvents(receipt, "ParamSet").map(e => this.decodeParamSetEvent(e));
        }
        decodeParamSetEvent(event) {
            let result = event.data;
            return {
                name: result.name,
                value: result.value,
                _event: event
            };
        }
        parseParamSet2Event(receipt) {
            return this.parseEvents(receipt, "ParamSet2").map(e => this.decodeParamSet2Event(e));
        }
        decodeParamSet2Event(event) {
            let result = event.data;
            return {
                name: result.name,
                value1: result.value1,
                value2: result.value2,
                _event: event
            };
        }
        parseRestartedEvent(receipt) {
            return this.parseEvents(receipt, "Restarted").map(e => this.decodeRestartedEvent(e));
        }
        decodeRestartedEvent(event) {
            let result = event.data;
            return {
                _event: event
            };
        }
        parseShutdownedEvent(receipt) {
            return this.parseEvents(receipt, "Shutdowned").map(e => this.decodeShutdownedEvent(e));
        }
        decodeShutdownedEvent(event) {
            let result = event.data;
            return {
                _event: event
            };
        }
        assign() {
            let allPairs_call = async (param1, options) => {
                let result = await this.call('allPairs', [this.wallet.utils.toString(param1)], options);
                return result;
            };
            this.allPairs = allPairs_call;
            let allPairsLength_call = async (options) => {
                let result = await this.call('allPairsLength', [], options);
                return new eth_contract_23.BigNumber(result);
            };
            this.allPairsLength = allPairsLength_call;
            let checkAndGetSwapParams_call = async (options) => {
                let result = await this.call('checkAndGetSwapParams', [], options);
                return new eth_contract_23.BigNumber(result);
            };
            this.checkAndGetSwapParams = checkAndGetSwapParams_call;
            let getAllLiquidityProviderShare_call = async (options) => {
                let result = await this.call('getAllLiquidityProviderShare', [], options);
                return {
                    _stakeAmount: result._stakeAmount.map(e => new eth_contract_23.BigNumber(e)),
                    _liquidityProviderShare: result._liquidityProviderShare.map(e => new eth_contract_23.BigNumber(e))
                };
            };
            this.getAllLiquidityProviderShare = getAllLiquidityProviderShare_call;
            let getCreateAddresses_call = async (options) => {
                let result = await this.call('getCreateAddresses', [], options);
                return {
                    _governance: result._governance,
                    _rangeLiquidityProvider: result._rangeLiquidityProvider,
                    _oracleFactory: result._oracleFactory
                };
            };
            this.getCreateAddresses = getCreateAddresses_call;
            let getLiquidityProviderShare_call = async (stake, options) => {
                let result = await this.call('getLiquidityProviderShare', [this.wallet.utils.toString(stake)], options);
                return new eth_contract_23.BigNumber(result);
            };
            this.getLiquidityProviderShare = getLiquidityProviderShare_call;
            let getPairParams = (params) => [params.param1, params.param2];
            let getPair_call = async (params, options) => {
                let result = await this.call('getPair', getPairParams(params), options);
                return result;
            };
            this.getPair = getPair_call;
            let governance_call = async (options) => {
                let result = await this.call('governance', [], options);
                return result;
            };
            this.governance = governance_call;
            let isLive_call = async (options) => {
                let result = await this.call('isLive', [], options);
                return result;
            };
            this.isLive = isLive_call;
            let liquidityProviderShare_call = async (param1, options) => {
                let result = await this.call('liquidityProviderShare', [this.wallet.utils.toString(param1)], options);
                return new eth_contract_23.BigNumber(result);
            };
            this.liquidityProviderShare = liquidityProviderShare_call;
            let oracleFactory_call = async (options) => {
                let result = await this.call('oracleFactory', [], options);
                return result;
            };
            this.oracleFactory = oracleFactory_call;
            let owner_call = async (options) => {
                let result = await this.call('owner', [], options);
                return result;
            };
            this.owner = owner_call;
            let pairCreator_call = async (options) => {
                let result = await this.call('pairCreator', [], options);
                return result;
            };
            this.pairCreator = pairCreator_call;
            let protocolFeeTo_call = async (options) => {
                let result = await this.call('protocolFeeTo', [], options);
                return result;
            };
            this.protocolFeeTo = protocolFeeTo_call;
            let rangeLiquidityProvider_call = async (options) => {
                let result = await this.call('rangeLiquidityProvider', [], options);
                return result;
            };
            this.rangeLiquidityProvider = rangeLiquidityProvider_call;
            let stakeAmount_call = async (param1, options) => {
                let result = await this.call('stakeAmount', [this.wallet.utils.toString(param1)], options);
                return new eth_contract_23.BigNumber(result);
            };
            this.stakeAmount = stakeAmount_call;
            let tradeFee_call = async (options) => {
                let result = await this.call('tradeFee', [], options);
                return new eth_contract_23.BigNumber(result);
            };
            this.tradeFee = tradeFee_call;
            let createPairParams = (params) => [params.tokenA, params.tokenB];
            let createPair_send = async (params, options) => {
                let result = await this.send('createPair', createPairParams(params), options);
                return result;
            };
            let createPair_call = async (params, options) => {
                let result = await this.call('createPair', createPairParams(params), options);
                return result;
            };
            let createPair_txData = async (params, options) => {
                let result = await this.txData('createPair', createPairParams(params), options);
                return result;
            };
            this.createPair = Object.assign(createPair_send, {
                call: createPair_call,
                txData: createPair_txData
            });
            let renounceOwnership_send = async (options) => {
                let result = await this.send('renounceOwnership', [], options);
                return result;
            };
            let renounceOwnership_call = async (options) => {
                let result = await this.call('renounceOwnership', [], options);
                return;
            };
            let renounceOwnership_txData = async (options) => {
                let result = await this.txData('renounceOwnership', [], options);
                return result;
            };
            this.renounceOwnership = Object.assign(renounceOwnership_send, {
                call: renounceOwnership_call,
                txData: renounceOwnership_txData
            });
            let setLiquidityProviderShareParams = (params) => [this.wallet.utils.toString(params.stakeAmount), this.wallet.utils.toString(params.liquidityProviderShare)];
            let setLiquidityProviderShare_send = async (params, options) => {
                let result = await this.send('setLiquidityProviderShare', setLiquidityProviderShareParams(params), options);
                return result;
            };
            let setLiquidityProviderShare_call = async (params, options) => {
                let result = await this.call('setLiquidityProviderShare', setLiquidityProviderShareParams(params), options);
                return;
            };
            let setLiquidityProviderShare_txData = async (params, options) => {
                let result = await this.txData('setLiquidityProviderShare', setLiquidityProviderShareParams(params), options);
                return result;
            };
            this.setLiquidityProviderShare = Object.assign(setLiquidityProviderShare_send, {
                call: setLiquidityProviderShare_call,
                txData: setLiquidityProviderShare_txData
            });
            let setLive_send = async (isLive, options) => {
                let result = await this.send('setLive', [isLive], options);
                return result;
            };
            let setLive_call = async (isLive, options) => {
                let result = await this.call('setLive', [isLive], options);
                return;
            };
            let setLive_txData = async (isLive, options) => {
                let result = await this.txData('setLive', [isLive], options);
                return result;
            };
            this.setLive = Object.assign(setLive_send, {
                call: setLive_call,
                txData: setLive_txData
            });
            let setLiveForPairParams = (params) => [params.pair, params.live];
            let setLiveForPair_send = async (params, options) => {
                let result = await this.send('setLiveForPair', setLiveForPairParams(params), options);
                return result;
            };
            let setLiveForPair_call = async (params, options) => {
                let result = await this.call('setLiveForPair', setLiveForPairParams(params), options);
                return;
            };
            let setLiveForPair_txData = async (params, options) => {
                let result = await this.txData('setLiveForPair', setLiveForPairParams(params), options);
                return result;
            };
            this.setLiveForPair = Object.assign(setLiveForPair_send, {
                call: setLiveForPair_call,
                txData: setLiveForPair_txData
            });
            let setProtocolFeeTo_send = async (protocolFeeTo, options) => {
                let result = await this.send('setProtocolFeeTo', [protocolFeeTo], options);
                return result;
            };
            let setProtocolFeeTo_call = async (protocolFeeTo, options) => {
                let result = await this.call('setProtocolFeeTo', [protocolFeeTo], options);
                return;
            };
            let setProtocolFeeTo_txData = async (protocolFeeTo, options) => {
                let result = await this.txData('setProtocolFeeTo', [protocolFeeTo], options);
                return result;
            };
            this.setProtocolFeeTo = Object.assign(setProtocolFeeTo_send, {
                call: setProtocolFeeTo_call,
                txData: setProtocolFeeTo_txData
            });
            let setRangeLiquidityProvider_send = async (rangeLiquidityProvider, options) => {
                let result = await this.send('setRangeLiquidityProvider', [rangeLiquidityProvider], options);
                return result;
            };
            let setRangeLiquidityProvider_call = async (rangeLiquidityProvider, options) => {
                let result = await this.call('setRangeLiquidityProvider', [rangeLiquidityProvider], options);
                return;
            };
            let setRangeLiquidityProvider_txData = async (rangeLiquidityProvider, options) => {
                let result = await this.txData('setRangeLiquidityProvider', [rangeLiquidityProvider], options);
                return result;
            };
            this.setRangeLiquidityProvider = Object.assign(setRangeLiquidityProvider_send, {
                call: setRangeLiquidityProvider_call,
                txData: setRangeLiquidityProvider_txData
            });
            let setTradeFee_send = async (tradeFee, options) => {
                let result = await this.send('setTradeFee', [this.wallet.utils.toString(tradeFee)], options);
                return result;
            };
            let setTradeFee_call = async (tradeFee, options) => {
                let result = await this.call('setTradeFee', [this.wallet.utils.toString(tradeFee)], options);
                return;
            };
            let setTradeFee_txData = async (tradeFee, options) => {
                let result = await this.txData('setTradeFee', [this.wallet.utils.toString(tradeFee)], options);
                return result;
            };
            this.setTradeFee = Object.assign(setTradeFee_send, {
                call: setTradeFee_call,
                txData: setTradeFee_txData
            });
            let transferOwnership_send = async (newOwner, options) => {
                let result = await this.send('transferOwnership', [newOwner], options);
                return result;
            };
            let transferOwnership_call = async (newOwner, options) => {
                let result = await this.call('transferOwnership', [newOwner], options);
                return;
            };
            let transferOwnership_txData = async (newOwner, options) => {
                let result = await this.txData('transferOwnership', [newOwner], options);
                return result;
            };
            this.transferOwnership = Object.assign(transferOwnership_send, {
                call: transferOwnership_call,
                txData: transferOwnership_txData
            });
        }
    }
    OSWAP_RangeFactory._abi = OSWAP_RangeFactory_json_1.default.abi;
    exports.OSWAP_RangeFactory = OSWAP_RangeFactory;
});
define("@scom/scom-swap/contracts/oswap-openswap-contract/contracts/range/OSWAP_RangeLiquidityProvider.json.ts", ["require", "exports"], function (require, exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    ///<amd-module name='@scom/scom-swap/contracts/oswap-openswap-contract/contracts/range/OSWAP_RangeLiquidityProvider.json.ts'/> 
    exports.default = {
        "abi": [
            { "inputs": [{ "internalType": "address", "name": "_factory", "type": "address" }, { "internalType": "address", "name": "_WETH", "type": "address" }], "stateMutability": "nonpayable", "type": "constructor" },
            { "inputs": [], "name": "WETH", "outputs": [{ "internalType": "address", "name": "", "type": "address" }], "stateMutability": "view", "type": "function" },
            { "inputs": [{ "internalType": "address", "name": "tokenA", "type": "address" }, { "internalType": "address", "name": "tokenB", "type": "address" }, { "internalType": "bool", "name": "addingTokenA", "type": "bool" }, { "internalType": "uint256", "name": "staked", "type": "uint256" }, { "internalType": "uint256", "name": "amountIn", "type": "uint256" }, { "internalType": "uint256", "name": "lowerLimit", "type": "uint256" }, { "internalType": "uint256", "name": "upperLimit", "type": "uint256" }, { "internalType": "uint256", "name": "startDate", "type": "uint256" }, { "internalType": "uint256", "name": "expire", "type": "uint256" }, { "internalType": "uint256", "name": "deadline", "type": "uint256" }], "name": "addLiquidity", "outputs": [{ "internalType": "uint256", "name": "index", "type": "uint256" }], "stateMutability": "nonpayable", "type": "function" },
            { "inputs": [{ "internalType": "address", "name": "tokenA", "type": "address" }, { "internalType": "bool", "name": "addingTokenA", "type": "bool" }, { "internalType": "uint256", "name": "staked", "type": "uint256" }, { "internalType": "uint256", "name": "amountAIn", "type": "uint256" }, { "internalType": "uint256", "name": "lowerLimit", "type": "uint256" }, { "internalType": "uint256", "name": "upperLimit", "type": "uint256" }, { "internalType": "uint256", "name": "startDate", "type": "uint256" }, { "internalType": "uint256", "name": "expire", "type": "uint256" }, { "internalType": "uint256", "name": "deadline", "type": "uint256" }], "name": "addLiquidityETH", "outputs": [{ "internalType": "uint256", "name": "index", "type": "uint256" }], "stateMutability": "payable", "type": "function" },
            { "inputs": [], "name": "factory", "outputs": [{ "internalType": "address", "name": "", "type": "address" }], "stateMutability": "view", "type": "function" },
            { "inputs": [], "name": "govToken", "outputs": [{ "internalType": "address", "name": "", "type": "address" }], "stateMutability": "view", "type": "function" },
            { "inputs": [{ "internalType": "address", "name": "tokenA", "type": "address" }, { "internalType": "address", "name": "tokenB", "type": "address" }, { "internalType": "address", "name": "to", "type": "address" }, { "internalType": "uint256", "name": "deadline", "type": "uint256" }], "name": "removeAllLiquidity", "outputs": [{ "internalType": "uint256", "name": "amountA", "type": "uint256" }, { "internalType": "uint256", "name": "amountB", "type": "uint256" }], "stateMutability": "nonpayable", "type": "function" },
            { "inputs": [{ "internalType": "address", "name": "tokenA", "type": "address" }, { "internalType": "address", "name": "to", "type": "address" }, { "internalType": "uint256", "name": "deadline", "type": "uint256" }], "name": "removeAllLiquidityETH", "outputs": [{ "internalType": "uint256", "name": "amountToken", "type": "uint256" }, { "internalType": "uint256", "name": "amountETH", "type": "uint256" }], "stateMutability": "nonpayable", "type": "function" },
            { "inputs": [{ "internalType": "address", "name": "tokenA", "type": "address" }, { "internalType": "address", "name": "tokenB", "type": "address" }, { "internalType": "bool", "name": "removingTokenA", "type": "bool" }, { "internalType": "address", "name": "to", "type": "address" }, { "internalType": "uint256", "name": "unstake", "type": "uint256" }, { "internalType": "uint256", "name": "amountOut", "type": "uint256" }, { "internalType": "uint256", "name": "reserveOut", "type": "uint256" }, { "internalType": "uint256", "name": "lowerLimit", "type": "uint256" }, { "internalType": "uint256", "name": "upperLimit", "type": "uint256" }, { "internalType": "uint256", "name": "startDate", "type": "uint256" }, { "internalType": "uint256", "name": "expire", "type": "uint256" }, { "internalType": "uint256", "name": "deadline", "type": "uint256" }], "name": "removeLiquidity", "outputs": [], "stateMutability": "nonpayable", "type": "function" },
            { "inputs": [{ "internalType": "address", "name": "tokenA", "type": "address" }, { "internalType": "bool", "name": "removingTokenA", "type": "bool" }, { "internalType": "address", "name": "to", "type": "address" }, { "internalType": "uint256", "name": "unstake", "type": "uint256" }, { "internalType": "uint256", "name": "amountOut", "type": "uint256" }, { "internalType": "uint256", "name": "reserveOut", "type": "uint256" }, { "internalType": "uint256", "name": "lowerLimit", "type": "uint256" }, { "internalType": "uint256", "name": "upperLimit", "type": "uint256" }, { "internalType": "uint256", "name": "startDate", "type": "uint256" }, { "internalType": "uint256", "name": "expire", "type": "uint256" }, { "internalType": "uint256", "name": "deadline", "type": "uint256" }], "name": "removeLiquidityETH", "outputs": [], "stateMutability": "nonpayable", "type": "function" },
            { "inputs": [{ "internalType": "address", "name": "tokenA", "type": "address" }, { "internalType": "address", "name": "tokenB", "type": "address" }, { "internalType": "uint256", "name": "replenishAmount", "type": "uint256" }, { "internalType": "uint256", "name": "lowerLimit", "type": "uint256" }, { "internalType": "uint256", "name": "upperLimit", "type": "uint256" }, { "internalType": "uint256", "name": "startDate", "type": "uint256" }, { "internalType": "uint256", "name": "expire", "type": "uint256" }, { "internalType": "bool", "name": "privateReplenish", "type": "bool" }, { "internalType": "uint256", "name": "deadline", "type": "uint256" }], "name": "updateProviderOffer", "outputs": [], "stateMutability": "nonpayable", "type": "function" },
            { "stateMutability": "payable", "type": "receive" }
        ],
        "bytecode": ""
    };
});
define("@scom/scom-swap/contracts/oswap-openswap-contract/contracts/range/OSWAP_RangeLiquidityProvider.ts", ["require", "exports", "@ijstech/eth-contract", "@scom/scom-swap/contracts/oswap-openswap-contract/contracts/range/OSWAP_RangeLiquidityProvider.json.ts"], function (require, exports, eth_contract_24, OSWAP_RangeLiquidityProvider_json_1) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.OSWAP_RangeLiquidityProvider = void 0;
    class OSWAP_RangeLiquidityProvider extends eth_contract_24.Contract {
        constructor(wallet, address) {
            super(wallet, address, OSWAP_RangeLiquidityProvider_json_1.default.abi, OSWAP_RangeLiquidityProvider_json_1.default.bytecode);
            this.assign();
        }
        deploy(params, options) {
            return this.__deploy([params.factory, params.WETH], options);
        }
        assign() {
            let WETH_call = async (options) => {
                let result = await this.call('WETH', [], options);
                return result;
            };
            this.WETH = WETH_call;
            let factory_call = async (options) => {
                let result = await this.call('factory', [], options);
                return result;
            };
            this.factory = factory_call;
            let govToken_call = async (options) => {
                let result = await this.call('govToken', [], options);
                return result;
            };
            this.govToken = govToken_call;
            let addLiquidityParams = (params) => [params.tokenA, params.tokenB, params.addingTokenA, this.wallet.utils.toString(params.staked), this.wallet.utils.toString(params.amountIn), this.wallet.utils.toString(params.lowerLimit), this.wallet.utils.toString(params.upperLimit), this.wallet.utils.toString(params.startDate), this.wallet.utils.toString(params.expire), this.wallet.utils.toString(params.deadline)];
            let addLiquidity_send = async (params, options) => {
                let result = await this.send('addLiquidity', addLiquidityParams(params), options);
                return result;
            };
            let addLiquidity_call = async (params, options) => {
                let result = await this.call('addLiquidity', addLiquidityParams(params), options);
                return new eth_contract_24.BigNumber(result);
            };
            let addLiquidity_txData = async (params, options) => {
                let result = await this.txData('addLiquidity', addLiquidityParams(params), options);
                return result;
            };
            this.addLiquidity = Object.assign(addLiquidity_send, {
                call: addLiquidity_call,
                txData: addLiquidity_txData
            });
            let addLiquidityETHParams = (params) => [params.tokenA, params.addingTokenA, this.wallet.utils.toString(params.staked), this.wallet.utils.toString(params.amountAIn), this.wallet.utils.toString(params.lowerLimit), this.wallet.utils.toString(params.upperLimit), this.wallet.utils.toString(params.startDate), this.wallet.utils.toString(params.expire), this.wallet.utils.toString(params.deadline)];
            let addLiquidityETH_send = async (params, options) => {
                let result = await this.send('addLiquidityETH', addLiquidityETHParams(params), options);
                return result;
            };
            let addLiquidityETH_call = async (params, options) => {
                let result = await this.call('addLiquidityETH', addLiquidityETHParams(params), options);
                return new eth_contract_24.BigNumber(result);
            };
            let addLiquidityETH_txData = async (params, options) => {
                let result = await this.txData('addLiquidityETH', addLiquidityETHParams(params), options);
                return result;
            };
            this.addLiquidityETH = Object.assign(addLiquidityETH_send, {
                call: addLiquidityETH_call,
                txData: addLiquidityETH_txData
            });
            let removeAllLiquidityParams = (params) => [params.tokenA, params.tokenB, params.to, this.wallet.utils.toString(params.deadline)];
            let removeAllLiquidity_send = async (params, options) => {
                let result = await this.send('removeAllLiquidity', removeAllLiquidityParams(params), options);
                return result;
            };
            let removeAllLiquidity_call = async (params, options) => {
                let result = await this.call('removeAllLiquidity', removeAllLiquidityParams(params), options);
                return {
                    amountA: new eth_contract_24.BigNumber(result.amountA),
                    amountB: new eth_contract_24.BigNumber(result.amountB)
                };
            };
            let removeAllLiquidity_txData = async (params, options) => {
                let result = await this.txData('removeAllLiquidity', removeAllLiquidityParams(params), options);
                return result;
            };
            this.removeAllLiquidity = Object.assign(removeAllLiquidity_send, {
                call: removeAllLiquidity_call,
                txData: removeAllLiquidity_txData
            });
            let removeAllLiquidityETHParams = (params) => [params.tokenA, params.to, this.wallet.utils.toString(params.deadline)];
            let removeAllLiquidityETH_send = async (params, options) => {
                let result = await this.send('removeAllLiquidityETH', removeAllLiquidityETHParams(params), options);
                return result;
            };
            let removeAllLiquidityETH_call = async (params, options) => {
                let result = await this.call('removeAllLiquidityETH', removeAllLiquidityETHParams(params), options);
                return {
                    amountToken: new eth_contract_24.BigNumber(result.amountToken),
                    amountETH: new eth_contract_24.BigNumber(result.amountETH)
                };
            };
            let removeAllLiquidityETH_txData = async (params, options) => {
                let result = await this.txData('removeAllLiquidityETH', removeAllLiquidityETHParams(params), options);
                return result;
            };
            this.removeAllLiquidityETH = Object.assign(removeAllLiquidityETH_send, {
                call: removeAllLiquidityETH_call,
                txData: removeAllLiquidityETH_txData
            });
            let removeLiquidityParams = (params) => [params.tokenA, params.tokenB, params.removingTokenA, params.to, this.wallet.utils.toString(params.unstake), this.wallet.utils.toString(params.amountOut), this.wallet.utils.toString(params.reserveOut), this.wallet.utils.toString(params.lowerLimit), this.wallet.utils.toString(params.upperLimit), this.wallet.utils.toString(params.startDate), this.wallet.utils.toString(params.expire), this.wallet.utils.toString(params.deadline)];
            let removeLiquidity_send = async (params, options) => {
                let result = await this.send('removeLiquidity', removeLiquidityParams(params), options);
                return result;
            };
            let removeLiquidity_call = async (params, options) => {
                let result = await this.call('removeLiquidity', removeLiquidityParams(params), options);
                return;
            };
            let removeLiquidity_txData = async (params, options) => {
                let result = await this.txData('removeLiquidity', removeLiquidityParams(params), options);
                return result;
            };
            this.removeLiquidity = Object.assign(removeLiquidity_send, {
                call: removeLiquidity_call,
                txData: removeLiquidity_txData
            });
            let removeLiquidityETHParams = (params) => [params.tokenA, params.removingTokenA, params.to, this.wallet.utils.toString(params.unstake), this.wallet.utils.toString(params.amountOut), this.wallet.utils.toString(params.reserveOut), this.wallet.utils.toString(params.lowerLimit), this.wallet.utils.toString(params.upperLimit), this.wallet.utils.toString(params.startDate), this.wallet.utils.toString(params.expire), this.wallet.utils.toString(params.deadline)];
            let removeLiquidityETH_send = async (params, options) => {
                let result = await this.send('removeLiquidityETH', removeLiquidityETHParams(params), options);
                return result;
            };
            let removeLiquidityETH_call = async (params, options) => {
                let result = await this.call('removeLiquidityETH', removeLiquidityETHParams(params), options);
                return;
            };
            let removeLiquidityETH_txData = async (params, options) => {
                let result = await this.txData('removeLiquidityETH', removeLiquidityETHParams(params), options);
                return result;
            };
            this.removeLiquidityETH = Object.assign(removeLiquidityETH_send, {
                call: removeLiquidityETH_call,
                txData: removeLiquidityETH_txData
            });
            let updateProviderOfferParams = (params) => [params.tokenA, params.tokenB, this.wallet.utils.toString(params.replenishAmount), this.wallet.utils.toString(params.lowerLimit), this.wallet.utils.toString(params.upperLimit), this.wallet.utils.toString(params.startDate), this.wallet.utils.toString(params.expire), params.privateReplenish, this.wallet.utils.toString(params.deadline)];
            let updateProviderOffer_send = async (params, options) => {
                let result = await this.send('updateProviderOffer', updateProviderOfferParams(params), options);
                return result;
            };
            let updateProviderOffer_call = async (params, options) => {
                let result = await this.call('updateProviderOffer', updateProviderOfferParams(params), options);
                return;
            };
            let updateProviderOffer_txData = async (params, options) => {
                let result = await this.txData('updateProviderOffer', updateProviderOfferParams(params), options);
                return result;
            };
            this.updateProviderOffer = Object.assign(updateProviderOffer_send, {
                call: updateProviderOffer_call,
                txData: updateProviderOffer_txData
            });
        }
    }
    OSWAP_RangeLiquidityProvider._abi = OSWAP_RangeLiquidityProvider_json_1.default.abi;
    exports.OSWAP_RangeLiquidityProvider = OSWAP_RangeLiquidityProvider;
});
define("@scom/scom-swap/contracts/oswap-openswap-contract/contracts/range/OSWAP_RangePair.json.ts", ["require", "exports"], function (require, exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    ///<amd-module name='@scom/scom-swap/contracts/oswap-openswap-contract/contracts/range/OSWAP_RangePair.json.ts'/> 
    exports.default = {
        "abi": [
            { "inputs": [], "stateMutability": "nonpayable", "type": "constructor" },
            { "anonymous": false, "inputs": [{ "indexed": true, "internalType": "address", "name": "provider", "type": "address" }, { "indexed": true, "internalType": "bool", "name": "direction", "type": "bool" }, { "indexed": false, "internalType": "uint256", "name": "staked", "type": "uint256" }, { "indexed": false, "internalType": "uint256", "name": "amount", "type": "uint256" }, { "indexed": false, "internalType": "uint256", "name": "newStakeBalance", "type": "uint256" }, { "indexed": false, "internalType": "uint256", "name": "newAmountBalance", "type": "uint256" }, { "indexed": false, "internalType": "uint256", "name": "lowerLimit", "type": "uint256" }, { "indexed": false, "internalType": "uint256", "name": "upperLimit", "type": "uint256" }, { "indexed": false, "internalType": "uint256", "name": "startDate", "type": "uint256" }, { "indexed": false, "internalType": "uint256", "name": "expire", "type": "uint256" }], "name": "AddLiquidity", "type": "event" },
            { "anonymous": false, "inputs": [{ "indexed": true, "internalType": "address", "name": "provider", "type": "address" }, { "indexed": false, "internalType": "uint256", "name": "index", "type": "uint256" }], "name": "NewProvider", "type": "event" },
            { "anonymous": false, "inputs": [{ "indexed": true, "internalType": "address", "name": "provider", "type": "address" }, { "indexed": false, "internalType": "uint256", "name": "unstake", "type": "uint256" }, { "indexed": false, "internalType": "uint256", "name": "amount0Out", "type": "uint256" }, { "indexed": false, "internalType": "uint256", "name": "amount1Out", "type": "uint256" }], "name": "RemoveAllLiquidity", "type": "event" },
            { "anonymous": false, "inputs": [{ "indexed": true, "internalType": "address", "name": "provider", "type": "address" }, { "indexed": true, "internalType": "bool", "name": "direction", "type": "bool" }, { "indexed": false, "internalType": "uint256", "name": "unstake", "type": "uint256" }, { "indexed": false, "internalType": "uint256", "name": "amountOut", "type": "uint256" }, { "indexed": false, "internalType": "uint256", "name": "reserveOut", "type": "uint256" }, { "indexed": false, "internalType": "uint256", "name": "newStakeBalance", "type": "uint256" }, { "indexed": false, "internalType": "uint256", "name": "newAmountBalance", "type": "uint256" }, { "indexed": false, "internalType": "uint256", "name": "newReserveBalance", "type": "uint256" }, { "indexed": false, "internalType": "uint256", "name": "lowerLimit", "type": "uint256" }, { "indexed": false, "internalType": "uint256", "name": "upperLimit", "type": "uint256" }, { "indexed": false, "internalType": "uint256", "name": "startDate", "type": "uint256" }, { "indexed": false, "internalType": "uint256", "name": "expire", "type": "uint256" }], "name": "RemoveLiquidity", "type": "event" },
            { "anonymous": false, "inputs": [{ "indexed": true, "internalType": "address", "name": "provider", "type": "address" }, { "indexed": true, "internalType": "bool", "name": "direction", "type": "bool" }, { "indexed": false, "internalType": "uint256", "name": "amountIn", "type": "uint256" }, { "indexed": false, "internalType": "uint256", "name": "newAmountBalance", "type": "uint256" }, { "indexed": false, "internalType": "uint256", "name": "newReserveBalance", "type": "uint256" }], "name": "Replenish", "type": "event" },
            { "anonymous": false, "inputs": [{ "indexed": true, "internalType": "address", "name": "to", "type": "address" }, { "indexed": true, "internalType": "bool", "name": "direction", "type": "bool" }, { "indexed": false, "internalType": "uint256", "name": "price", "type": "uint256" }, { "indexed": false, "internalType": "uint256", "name": "amountIn", "type": "uint256" }, { "indexed": false, "internalType": "uint256", "name": "amountOut", "type": "uint256" }, { "indexed": false, "internalType": "uint256", "name": "tradeFee", "type": "uint256" }, { "indexed": false, "internalType": "uint256", "name": "protocolFee", "type": "uint256" }], "name": "Swap", "type": "event" },
            { "anonymous": false, "inputs": [{ "indexed": true, "internalType": "address", "name": "provider", "type": "address" }, { "indexed": true, "internalType": "bool", "name": "direction", "type": "bool" }, { "indexed": false, "internalType": "uint256", "name": "amountOut", "type": "uint256" }, { "indexed": false, "internalType": "uint256", "name": "amountIn", "type": "uint256" }, { "indexed": false, "internalType": "uint256", "name": "newAmountBalance", "type": "uint256" }, { "indexed": false, "internalType": "uint256", "name": "newCounterReserveBalance", "type": "uint256" }], "name": "SwappedOneProvider", "type": "event" },
            { "anonymous": false, "inputs": [{ "indexed": true, "internalType": "address", "name": "provider", "type": "address" }, { "indexed": true, "internalType": "bool", "name": "direction", "type": "bool" }, { "indexed": false, "internalType": "uint256", "name": "replenish", "type": "uint256" }, { "indexed": false, "internalType": "uint256", "name": "newAmountBalance", "type": "uint256" }, { "indexed": false, "internalType": "uint256", "name": "newReserveBalance", "type": "uint256" }, { "indexed": false, "internalType": "uint256", "name": "lowerLimit", "type": "uint256" }, { "indexed": false, "internalType": "uint256", "name": "upperLimit", "type": "uint256" }, { "indexed": false, "internalType": "uint256", "name": "startDate", "type": "uint256" }, { "indexed": false, "internalType": "uint256", "name": "expire", "type": "uint256" }, { "indexed": false, "internalType": "bool", "name": "privateReplenish", "type": "bool" }], "name": "UpdateProviderOffer", "type": "event" },
            { "inputs": [{ "internalType": "address", "name": "provider", "type": "address" }, { "internalType": "bool", "name": "direction", "type": "bool" }, { "internalType": "uint256", "name": "staked", "type": "uint256" }, { "internalType": "uint256", "name": "lowerLimit", "type": "uint256" }, { "internalType": "uint256", "name": "upperLimit", "type": "uint256" }, { "internalType": "uint256", "name": "startDate", "type": "uint256" }, { "internalType": "uint256", "name": "expire", "type": "uint256" }], "name": "addLiquidity", "outputs": [{ "internalType": "uint256", "name": "index", "type": "uint256" }], "stateMutability": "nonpayable", "type": "function" },
            { "inputs": [], "name": "counter", "outputs": [{ "internalType": "uint256", "name": "", "type": "uint256" }], "stateMutability": "view", "type": "function" },
            { "inputs": [], "name": "factory", "outputs": [{ "internalType": "address", "name": "", "type": "address" }], "stateMutability": "view", "type": "function" },
            { "inputs": [{ "internalType": "address", "name": "tokenOut", "type": "address" }, { "internalType": "uint256", "name": "amountOut", "type": "uint256" }, { "internalType": "bytes", "name": "data", "type": "bytes" }], "name": "getAmountIn", "outputs": [{ "internalType": "uint256", "name": "amountIn", "type": "uint256" }], "stateMutability": "view", "type": "function" },
            { "inputs": [{ "internalType": "address", "name": "tokenIn", "type": "address" }, { "internalType": "uint256", "name": "amountIn", "type": "uint256" }, { "internalType": "bytes", "name": "data", "type": "bytes" }], "name": "getAmountOut", "outputs": [{ "internalType": "uint256", "name": "amountOut", "type": "uint256" }], "stateMutability": "view", "type": "function" },
            { "inputs": [], "name": "getBalances", "outputs": [{ "internalType": "uint256", "name": "", "type": "uint256" }, { "internalType": "uint256", "name": "", "type": "uint256" }, { "internalType": "uint256", "name": "", "type": "uint256" }], "stateMutability": "view", "type": "function" },
            { "inputs": [], "name": "getLastBalances", "outputs": [{ "internalType": "uint256", "name": "", "type": "uint256" }, { "internalType": "uint256", "name": "", "type": "uint256" }], "stateMutability": "view", "type": "function" },
            { "inputs": [{ "internalType": "bool", "name": "direction", "type": "bool" }, { "internalType": "bytes", "name": "payload", "type": "bytes" }], "name": "getLatestPrice", "outputs": [{ "internalType": "uint256", "name": "", "type": "uint256" }], "stateMutability": "view", "type": "function" },
            { "inputs": [{ "internalType": "bool", "name": "direction", "type": "bool" }, { "internalType": "uint256", "name": "start", "type": "uint256" }, { "internalType": "uint256", "name": "end", "type": "uint256" }], "name": "getOffers", "outputs": [{ "internalType": "address[]", "name": "provider", "type": "address[]" }, { "internalType": "uint256[]", "name": "amountAndReserve", "type": "uint256[]" }, { "internalType": "uint256[]", "name": "lowerLimitAndUpperLimit", "type": "uint256[]" }, { "internalType": "uint256[]", "name": "startDateAndExpire", "type": "uint256[]" }, { "internalType": "bool[]", "name": "privateReplenish", "type": "bool[]" }], "stateMutability": "view", "type": "function" },
            { "inputs": [{ "internalType": "address", "name": "provider", "type": "address" }, { "internalType": "bool", "name": "direction", "type": "bool" }], "name": "getProviderOffer", "outputs": [{ "internalType": "uint256", "name": "index", "type": "uint256" }, { "internalType": "uint256", "name": "staked", "type": "uint256" }, { "internalType": "uint256", "name": "amount", "type": "uint256" }, { "internalType": "uint256", "name": "reserve", "type": "uint256" }, { "internalType": "uint256", "name": "lowerLimit", "type": "uint256" }, { "internalType": "uint256", "name": "upperLimit", "type": "uint256" }, { "internalType": "uint256", "name": "startDate", "type": "uint256" }, { "internalType": "uint256", "name": "expire", "type": "uint256" }, { "internalType": "bool", "name": "privateReplenish", "type": "bool" }], "stateMutability": "view", "type": "function" },
            { "inputs": [], "name": "govToken", "outputs": [{ "internalType": "address", "name": "", "type": "address" }], "stateMutability": "view", "type": "function" },
            { "inputs": [], "name": "governance", "outputs": [{ "internalType": "address", "name": "", "type": "address" }], "stateMutability": "view", "type": "function" },
            { "inputs": [{ "internalType": "address", "name": "_token0", "type": "address" }, { "internalType": "address", "name": "_token1", "type": "address" }], "name": "initialize", "outputs": [], "stateMutability": "nonpayable", "type": "function" },
            { "inputs": [], "name": "isLive", "outputs": [{ "internalType": "bool", "name": "", "type": "bool" }], "stateMutability": "view", "type": "function" },
            { "inputs": [], "name": "lastGovBalance", "outputs": [{ "internalType": "uint256", "name": "", "type": "uint256" }], "stateMutability": "view", "type": "function" },
            { "inputs": [], "name": "lastToken0Balance", "outputs": [{ "internalType": "uint256", "name": "", "type": "uint256" }], "stateMutability": "view", "type": "function" },
            { "inputs": [], "name": "lastToken1Balance", "outputs": [{ "internalType": "uint256", "name": "", "type": "uint256" }], "stateMutability": "view", "type": "function" },
            { "inputs": [{ "internalType": "bool", "name": "", "type": "bool" }, { "internalType": "uint256", "name": "", "type": "uint256" }], "name": "offers", "outputs": [{ "internalType": "address", "name": "provider", "type": "address" }, { "internalType": "uint256", "name": "amount", "type": "uint256" }, { "internalType": "uint256", "name": "reserve", "type": "uint256" }, { "internalType": "uint256", "name": "lowerLimit", "type": "uint256" }, { "internalType": "uint256", "name": "upperLimit", "type": "uint256" }, { "internalType": "uint256", "name": "startDate", "type": "uint256" }, { "internalType": "uint256", "name": "expire", "type": "uint256" }, { "internalType": "bool", "name": "privateReplenish", "type": "bool" }], "stateMutability": "view", "type": "function" },
            { "inputs": [], "name": "oracleFactory", "outputs": [{ "internalType": "address", "name": "", "type": "address" }], "stateMutability": "view", "type": "function" },
            { "inputs": [], "name": "protocolFeeBalance0", "outputs": [{ "internalType": "uint256", "name": "", "type": "uint256" }], "stateMutability": "view", "type": "function" },
            { "inputs": [], "name": "protocolFeeBalance1", "outputs": [{ "internalType": "uint256", "name": "", "type": "uint256" }], "stateMutability": "view", "type": "function" },
            { "inputs": [{ "internalType": "address", "name": "", "type": "address" }], "name": "providerOfferIndex", "outputs": [{ "internalType": "uint256", "name": "", "type": "uint256" }], "stateMutability": "view", "type": "function" },
            { "inputs": [{ "internalType": "address", "name": "", "type": "address" }], "name": "providerStaking", "outputs": [{ "internalType": "uint256", "name": "", "type": "uint256" }], "stateMutability": "view", "type": "function" },
            { "inputs": [], "name": "rangeLiquidityProvider", "outputs": [{ "internalType": "address", "name": "", "type": "address" }], "stateMutability": "view", "type": "function" },
            { "inputs": [], "name": "redeemProtocolFee", "outputs": [], "stateMutability": "nonpayable", "type": "function" },
            { "inputs": [{ "internalType": "address", "name": "provider", "type": "address" }], "name": "removeAllLiquidity", "outputs": [{ "internalType": "uint256", "name": "amount0", "type": "uint256" }, { "internalType": "uint256", "name": "amount1", "type": "uint256" }, { "internalType": "uint256", "name": "staked", "type": "uint256" }], "stateMutability": "nonpayable", "type": "function" },
            { "inputs": [{ "internalType": "address", "name": "provider", "type": "address" }, { "internalType": "bool", "name": "direction", "type": "bool" }, { "internalType": "uint256", "name": "unstake", "type": "uint256" }, { "internalType": "uint256", "name": "amountOut", "type": "uint256" }, { "internalType": "uint256", "name": "reserveOut", "type": "uint256" }, { "internalType": "uint256", "name": "lowerLimit", "type": "uint256" }, { "internalType": "uint256", "name": "upperLimit", "type": "uint256" }, { "internalType": "uint256", "name": "startDate", "type": "uint256" }, { "internalType": "uint256", "name": "expire", "type": "uint256" }], "name": "removeLiquidity", "outputs": [], "stateMutability": "nonpayable", "type": "function" },
            { "inputs": [{ "internalType": "address", "name": "provider", "type": "address" }, { "internalType": "bool", "name": "direction", "type": "bool" }, { "internalType": "uint256", "name": "amountIn", "type": "uint256" }], "name": "replenish", "outputs": [], "stateMutability": "nonpayable", "type": "function" },
            { "inputs": [], "name": "scaleDirection", "outputs": [{ "internalType": "bool", "name": "", "type": "bool" }], "stateMutability": "view", "type": "function" },
            { "inputs": [], "name": "scaler", "outputs": [{ "internalType": "uint256", "name": "", "type": "uint256" }], "stateMutability": "view", "type": "function" },
            { "inputs": [{ "internalType": "bool", "name": "_isLive", "type": "bool" }], "name": "setLive", "outputs": [], "stateMutability": "nonpayable", "type": "function" },
            { "inputs": [], "name": "stakeBalance", "outputs": [{ "internalType": "uint256", "name": "", "type": "uint256" }], "stateMutability": "view", "type": "function" },
            { "inputs": [{ "internalType": "uint256", "name": "amount0Out", "type": "uint256" }, { "internalType": "uint256", "name": "amount1Out", "type": "uint256" }, { "internalType": "address", "name": "to", "type": "address" }, { "internalType": "bytes", "name": "data", "type": "bytes" }], "name": "swap", "outputs": [], "stateMutability": "nonpayable", "type": "function" },
            { "inputs": [], "name": "sync", "outputs": [], "stateMutability": "nonpayable", "type": "function" },
            { "inputs": [], "name": "token0", "outputs": [{ "internalType": "address", "name": "", "type": "address" }], "stateMutability": "view", "type": "function" },
            { "inputs": [], "name": "token1", "outputs": [{ "internalType": "address", "name": "", "type": "address" }], "stateMutability": "view", "type": "function" },
            { "inputs": [{ "internalType": "address", "name": "provider", "type": "address" }, { "internalType": "bool", "name": "direction", "type": "bool" }, { "internalType": "uint256", "name": "replenishAmount", "type": "uint256" }, { "internalType": "uint256", "name": "lowerLimit", "type": "uint256" }, { "internalType": "uint256", "name": "upperLimit", "type": "uint256" }, { "internalType": "uint256", "name": "startDate", "type": "uint256" }, { "internalType": "uint256", "name": "expire", "type": "uint256" }, { "internalType": "bool", "name": "privateReplenish", "type": "bool" }], "name": "updateProviderOffer", "outputs": [], "stateMutability": "nonpayable", "type": "function" }
        ],
        "bytecode": "610120604052600180553480156200001657600080fd5b5033606081811b6080526000805460ff191660011781556040805163ea2ed2c160e01b81529051919384938493919263ea2ed2c19260048083019392829003018186803b1580156200006757600080fd5b505afa1580156200007c573d6000803e3d6000fd5b505050506040513d60608110156200009357600080fd5b5080516020808301516040938401516001600160601b0319606085901b1660c052845163b716d46360e01b8152945193975090955093506001600160a01b0386169263b716d4639260048083019392829003018186803b158015620000f757600080fd5b505afa1580156200010c573d6000803e3d6000fd5b505050506040513d60208110156200012357600080fd5b81019080805190602001909291905050506001600160a01b0316610100816001600160a01b031660601b81525050816001600160a01b031660e0816001600160a01b031660601b81525050806001600160a01b031660a0816001600160a01b031660601b81525050600360006001151515158152602001908152602001600020604051806101000160405280306001600160a01b0316815260200160008152602001600081526020016000815260200160008152602001600081526020016000815260200160001515815250908060018154018082558091505060019003906000526020600020906008020160009091909190915060008201518160000160006101000a8154816001600160a01b0302191690836001600160a01b031602179055506020820151816001015560408201518160020155606082015181600301556080820151816004015560a0820151816005015560c0820151816006015560e08201518160070160006101000a81548160ff02191690831515021790555050506003600080151515158152602001908152602001600020604051806101000160405280306001600160a01b0316815260200160008152602001600081526020016000815260200160008152602001600081526020016000815260200160001515815250908060018154018082558091505060019003906000526020600020906008020160009091909190915060008201518160000160006101000a8154816001600160a01b0302191690836001600160a01b031602179055506020820151816001015560408201518160020155606082015181600301556080820151816004015560a0820151816005015560c0820151816006015560e08201518160070160006101000a81548160ff021916908315150217905550505050505060805160601c60a05160601c60c05160601c60e05160601c6101005160601c6153766200047f60003980610ad452806112655280612206528061321552806132885280613b6152806149595250806112a552806120c452806122b25280612e5a52806138c9525080611b87525080610db852806118c15280611c7752806138195280613dc15280614b705250806117165280611d2f52806123605280612ad55280612d4552806137f5528061403752806144065280614c2852506153766000f3fe608060405234801561001057600080fd5b50600436106102765760003560e01c80637a6a5e1b11610160578063b8f7a665116100d8578063d21220a71161008c578063db13653c11610071578063db13653c14610a27578063f5ee334814610aa6578063fff6cae914610ac557610276565b8063d21220a7146109a6578063d519f64d146109ae57610276565b8063c45a0155116100bd578063c45a01551461092f578063c7f7fb9014610937578063d1b876cb1461093f57610276565b8063b8f7a6651461090b578063bebf7a611461092757610276565b806393bc9dfe1161012f578063a26651e711610114578063a26651e714610826578063a27c17f1146108aa578063b2901aa31461090357610276565b806393bc9dfe146108165780639749d2131461081e57610276565b80637a6a5e1b1461073857806380dffd7e1461076b578063835daf6c146107cd57806388952339146107d557610276565b8063485cc955116101f357806361bc221a116101c25780636b4afee1116101a75780636b4afee1146106ca5780636d813c3c146106d25780636fec7dd71461070557610276565b806361bc221a14610630578063685639a91461063857610276565b8063485cc955146105dd578063577e6d08146106185780635a6af09d146106205780635aa6e6751461062857610276565b80632c6ced381161024a5780633c1e6ff51161022f5780633c1e6ff5146104215780633c6d5c72146104295780633d0d81d61461044a57610276565b80632c6ced38146103755780633b19103b1461037d57610276565b8062113e081461027b578063022c0d9f146102a157806305268cff1461033c5780630dfe16811461036d575b600080fd5b610283610acd565b60408051938452602084019290925282820152519081900360600190f35b61033a600480360360808110156102b757600080fd5b81359160208101359173ffffffffffffffffffffffffffffffffffffffff60408301351691908101906080810160608201356401000000008111156102fb57600080fd5b82018360208201111561030d57600080fd5b8035906020019184600183028401116401000000008311171561032f57600080fd5b509092509050610ce1565b005b610344611263565b6040805173ffffffffffffffffffffffffffffffffffffffff9092168252519081900360200190f35b610344611287565b6103446112a3565b61040f6004803603606081101561039357600080fd5b73ffffffffffffffffffffffffffffffffffffffff823516916020810135918101906060810160408201356401000000008111156103d057600080fd5b8201836020820111156103e257600080fd5b8035906020019184600183028401116401000000008311171561040457600080fd5b5090925090506112c7565b60408051918252519081900360200190f35b61040f61136e565b610431611374565b6040805192835260208301919091528051918290030190f35b6104756004803603606081101561046057600080fd5b5080351515906020810135906040013561137e565b60405180806020018060200180602001806020018060200186810386528b818151815260200191508051906020019060200280838360005b838110156104c55781810151838201526020016104ad565b5050505090500186810385528a818151815260200191508051906020019060200280838360005b838110156105045781810151838201526020016104ec565b50505050905001868103845289818151815260200191508051906020019060200280838360005b8381101561054357818101518382015260200161052b565b50505050905001868103835288818151815260200191508051906020019060200280838360005b8381101561058257818101518382015260200161056a565b50505050905001868103825287818151815260200191508051906020019060200280838360005b838110156105c15781810151838201526020016105a9565b505050509050019a505050505050505050505060405180910390f35b61033a600480360360408110156105f357600080fd5b5073ffffffffffffffffffffffffffffffffffffffff813581169160200135166116fe565b61040f611b79565b61040f611b7f565b610344611b85565b61040f611ba9565b61040f6004803603606081101561064e57600080fd5b73ffffffffffffffffffffffffffffffffffffffff8235169160208101359181019060608101604082013564010000000081111561068b57600080fd5b82018360208201111561069d57600080fd5b803590602001918460018302840111640100000000831117156106bf57600080fd5b509092509050611baf565b61040f612007565b61040f600480360360208110156106e857600080fd5b503573ffffffffffffffffffffffffffffffffffffffff1661200d565b61040f6004803603602081101561071b57600080fd5b503573ffffffffffffffffffffffffffffffffffffffff1661201f565b6102836004803603602081101561074e57600080fd5b503573ffffffffffffffffffffffffffffffffffffffff16612031565b61033a600480360361010081101561078257600080fd5b5073ffffffffffffffffffffffffffffffffffffffff81351690602081013515159060408101359060608101359060808101359060a08101359060c08101359060e00135151561229a565b61040f6127dd565b61033a600480360360608110156107eb57600080fd5b5073ffffffffffffffffffffffffffffffffffffffff813516906020810135151590604001356127e3565b61040f612a52565b61033a612a58565b6108616004803603604081101561083c57600080fd5b5073ffffffffffffffffffffffffffffffffffffffff81351690602001351515612bd3565b60408051998a5260208a0198909852888801969096526060880194909452608087019290925260a086015260c085015260e0840152151561010083015251908190036101200190f35b61040f600480360360e08110156108c057600080fd5b5073ffffffffffffffffffffffffffffffffffffffff81351690602081013515159060408101359060608101359060808101359060a08101359060c00135612cc8565b61040f6137c3565b6109136137c9565b604080519115158252519081900360200190f35b6109136137d2565b6103446137f3565b610344613817565b61033a600480360361012081101561095657600080fd5b5073ffffffffffffffffffffffffffffffffffffffff81351690602081013515159060408101359060608101359060808101359060a08101359060c08101359060e081013590610100013561383b565b610344613d4b565b61040f600480360360408110156109c457600080fd5b8135151591908101906040810160208201356401000000008111156109e857600080fd5b8201836020820111156109fa57600080fd5b80359060200191846001830284011164010000000083111715610a1c57600080fd5b509092509050613d67565b610a4c60048036036040811015610a3d57600080fd5b50803515159060200135613fa6565b6040805173ffffffffffffffffffffffffffffffffffffffff90991689526020890197909752878701959095526060870193909352608086019190915260a085015260c0840152151560e083015251908190036101000190f35b61033a60048036036020811015610abc57600080fd5b5035151561401f565b61033a6140f4565b60008060007f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff166370a08231306040518263ffffffff1660e01b8152600401808273ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200191505060206040518083038186803b158015610b6f57600080fd5b505afa158015610b83573d6000803e3d6000fd5b505050506040513d6020811015610b9957600080fd5b5051600654604080517f70a08231000000000000000000000000000000000000000000000000000000008152306004820152905173ffffffffffffffffffffffffffffffffffffffff909216916370a0823191602480820192602092909190829003018186803b158015610c0c57600080fd5b505afa158015610c20573d6000803e3d6000fd5b505050506040513d6020811015610c3657600080fd5b5051600754604080517f70a08231000000000000000000000000000000000000000000000000000000008152306004820152905173ffffffffffffffffffffffffffffffffffffffff909216916370a0823191602480820192602092909190829003018186803b158015610ca957600080fd5b505afa158015610cbd573d6000803e3d6000fd5b505050506040513d6020811015610cd357600080fd5b505191945092509050909192565b600154600114610d5257604080517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152600660248201527f4c4f434b45440000000000000000000000000000000000000000000000000000604482015290519081900360640190fd5b60006001553233148015610d6c5750610d6a33614178565b155b80610e2d5750604080517f3af32abf000000000000000000000000000000000000000000000000000000008152336004820152905173ffffffffffffffffffffffffffffffffffffffff7f00000000000000000000000000000000000000000000000000000000000000001691633af32abf9160248083019260209291908290030181600087803b158015610e0057600080fd5b505af1158015610e14573d6000803e3d6000fd5b505050506040513d6020811015610e2a57600080fd5b50515b610e9857604080517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601c60248201527f4e6f742066726f6d2075736572206f722077686974656c697374656400000000604482015290519081900360640190fd5b60005460ff16610f0957604080517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152600660248201527f5041555345440000000000000000000000000000000000000000000000000000604482015290519081900360640190fd5b600a54600654604080517f70a082310000000000000000000000000000000000000000000000000000000081523060048201529051600093610fbe93909273ffffffffffffffffffffffffffffffffffffffff909116916370a0823191602480820192602092909190829003018186803b158015610f8657600080fd5b505afa158015610f9a573d6000803e3d6000fd5b505050506040513d6020811015610fb057600080fd5b50519063ffffffff61417e16565b600b54600754604080517f70a08231000000000000000000000000000000000000000000000000000000008152306004820152905193945060009361103a939273ffffffffffffffffffffffffffffffffffffffff16916370a08231916024808301926020929190829003018186803b158015610f8657600080fd5b90506000808815801561104c57508715155b156111125761105f8760018689896141c9565b9092509050878210156110d357604080517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601360248201527f494e53554646494349454e545f414d4f554e5400000000000000000000000000604482015290519081900360640190fd5b6007546110f79073ffffffffffffffffffffffffffffffffffffffff168884614699565b600c5461110a908263ffffffff61489f16565b600c5561124c565b881580159061111f575087155b156111e5576111328760008589896141c9565b9092509050888210156111a657604080517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601360248201527f494e53554646494349454e545f414d4f554e5400000000000000000000000000604482015290519081900360640190fd5b6006546111ca9073ffffffffffffffffffffffffffffffffffffffff168884614699565b600d546111dd908263ffffffff61489f16565b600d5561124c565b604080517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152600d60248201527f4e6f7420737570706f7274656400000000000000000000000000000000000000604482015290519081900360640190fd5b611254614913565b50506001805550505050505050565b7f000000000000000000000000000000000000000000000000000000000000000081565b60065473ffffffffffffffffffffffffffffffffffffffff1681565b7f000000000000000000000000000000000000000000000000000000000000000081565b600080841161133757604080517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601960248201527f494e53554646494349454e545f494e5055545f414d4f554e5400000000000000604482015290519081900360640190fd5b6006546113619073ffffffffffffffffffffffffffffffffffffffff878116911614858585614b10565b5091979650505050505050565b60085481565b600a54600b549091565b606080606080606060025487116116c85760025486111561139f5760025495505b60006113c2886113b689600163ffffffff61489f16565b9063ffffffff61417e16565b90508067ffffffffffffffff811180156113db57600080fd5b50604051908082528060200260200182016040528015611405578160200160208202803683370190505b5095508060020267ffffffffffffffff8111801561142257600080fd5b5060405190808252806020026020018201604052801561144c578160200160208202803683370190505b5094508060020267ffffffffffffffff8111801561146957600080fd5b50604051908082528060200260200182016040528015611493578160200160208202803683370190505b5093508060020267ffffffffffffffff811180156114b057600080fd5b506040519080825280602002602001820160405280156114da578160200160208202803683370190505b5092508067ffffffffffffffff811180156114f457600080fd5b5060405190808252806020026020018201604052801561151e578160200160208202803683370190505b50915060005b818110156116c157600061153e828463ffffffff61489f16565b8b1515600090815260036020526040812091925090611563848d63ffffffff61489f16565b8154811061156d57fe5b6000918252602090912060089091020180548a5191925073ffffffffffffffffffffffffffffffffffffffff16908a90859081106115a757fe5b602002602001019073ffffffffffffffffffffffffffffffffffffffff16908173ffffffffffffffffffffffffffffffffffffffff168152505080600101548884815181106115f257fe5b602002602001018181525050806002015488838151811061160f57fe5b602002602001018181525050806003015487848151811061162c57fe5b602002602001018181525050806004015487838151811061164957fe5b602002602001018181525050806005015486848151811061166657fe5b602002602001018181525050806006015486838151811061168357fe5b60209081029190910101526007810154855160ff909116908690859081106116a757fe5b911515602092830291909101909101525050600101611524565b50506116f3565b5050604080516000808252602082018181528284019182526060830190935290945090925082915081905b939792965093509350565b3373ffffffffffffffffffffffffffffffffffffffff7f000000000000000000000000000000000000000000000000000000000000000016146117a257604080517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152600960248201527f464f5242494444454e0000000000000000000000000000000000000000000000604482015290519081900360640190fd5b6006805473ffffffffffffffffffffffffffffffffffffffff8085167fffffffffffffffffffffffff00000000000000000000000000000000000000009283161792839055600780548583169316929092179182905590811691161061186957604080517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601860248201527f496e76616c696420746f6b656e2070616972206f726465720000000000000000604482015290519081900360640190fd5b600654600754604080517f52a03c0300000000000000000000000000000000000000000000000000000000815273ffffffffffffffffffffffffffffffffffffffff93841660048201529183166024830152516000927f000000000000000000000000000000000000000000000000000000000000000016916352a03c03916044808301926020929190829003018186803b15801561190757600080fd5b505afa15801561191b573d6000803e3d6000fd5b505050506040513d602081101561193157600080fd5b5051905073ffffffffffffffffffffffffffffffffffffffff81166119b757604080517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152600f60248201527f4e6f206f7261636c6520666f756e640000000000000000000000000000000000604482015290519081900360640190fd5b600654604080517f313ce567000000000000000000000000000000000000000000000000000000008152905160009273ffffffffffffffffffffffffffffffffffffffff169163313ce567916004808301926020929190829003018186803b158015611a2257600080fd5b505afa158015611a36573d6000803e3d6000fd5b505050506040513d6020811015611a4c57600080fd5b5051600754604080517f313ce567000000000000000000000000000000000000000000000000000000008152905192935060009273ffffffffffffffffffffffffffffffffffffffff9092169163313ce56791600480820192602092909190829003018186803b158015611abf57600080fd5b505afa158015611ad3573d6000803e3d6000fd5b505050506040513d6020811015611ae957600080fd5b5051905060ff8281169082161415611b05576001600855611b72565b600780547fffffffffffffffffffffff00ffffffffffffffffffffffffffffffffffffffff1660ff84811684821611740100000000000000000000000000000000000000009081029290921792839055910416611b6457808203611b68565b8181035b60ff16600a0a6008555b5050505050565b600d5481565b600a5481565b7f000000000000000000000000000000000000000000000000000000000000000081565b60025481565b6000808411611c1f57604080517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601a60248201527f494e53554646494349454e545f4f55545055545f414d4f554e54000000000000604482015290519081900360640190fd5b600654600754604080517f95277f3900000000000000000000000000000000000000000000000000000000815273ffffffffffffffffffffffffffffffffffffffff93841660048201529183166024830152516000927f000000000000000000000000000000000000000000000000000000000000000016916395277f39916044808301926020929190829003018186803b158015611cbd57600080fd5b505afa158015611cd1573d6000803e3d6000fd5b505050506040513d6020811015611ce757600080fd5b5051604080517f42032856000000000000000000000000000000000000000000000000000000008152905191925060009173ffffffffffffffffffffffffffffffffffffffff7f000000000000000000000000000000000000000000000000000000000000000016916342032856916004808301926020929190829003018186803b158015611d7557600080fd5b505afa158015611d89573d6000803e3d6000fd5b505050506040513d6020811015611d9f57600080fd5b505160075490915073ffffffffffffffffffffffffffffffffffffffff888116911614600081611de75760075473ffffffffffffffffffffffffffffffffffffffff16611e01565b60065473ffffffffffffffffffffffffffffffffffffffff165b90506000808573ffffffffffffffffffffffffffffffffffffffff1663d9da4fe6848d60008e8e8e6040518763ffffffff1660e01b8152600401808773ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020018673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001858152602001848152602001806020018281038252848482818152602001925080828437600081840152601f19601f820116905080830192505050975050505050505050604080518083038186803b158015611efb57600080fd5b505afa158015611f0f573d6000803e3d6000fd5b505050506040513d6040811015611f2557600080fd5b5080516020909101519092509050611f438a8263ffffffff614f1516565b965060016008541115611f9b57600760149054906101000a900460ff1615158415151415611f8457600854611f7f90889063ffffffff614f8816565b611f98565b600854611f9890889063ffffffff614f1516565b96505b611fbc6001611fb0898563ffffffff614f8816565b9063ffffffff61489f16565b9650611ff86001611fb0611fd9620186a08963ffffffff61417e16565b611fec8b620186a063ffffffff614f1516565b9063ffffffff614f8816565b9b9a5050505050505050505050565b600b5481565b60046020526000908152604090205481565b60056020526000908152604090205481565b60008060006001546001146120a757604080517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152600660248201527f4c4f434b45440000000000000000000000000000000000000000000000000000604482015290519081900360640190fd5b60006001553373ffffffffffffffffffffffffffffffffffffffff7f000000000000000000000000000000000000000000000000000000000000000016148061210557503373ffffffffffffffffffffffffffffffffffffffff8516145b61217057604080517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601860248201527f4e6f742066726f6d20726f75746572206f72206f776e65720000000000000000604482015290519081900360640190fd5b600061217d856000614fca565b9094509050612192848263ffffffff61489f16565b935060006121a1866001614fca565b90945090506121b6848263ffffffff61489f16565b73ffffffffffffffffffffffffffffffffffffffff8716600090815260056020526040812080549190559094509250821561222c57600e546121fe908463ffffffff61417e16565b600e5561222c7f00000000000000000000000000000000000000000000000000000000000000003385614699565b6040805184815260208101879052808201869052905173ffffffffffffffffffffffffffffffffffffffff8816917f3f9e361045fcac63ab779647d804207abc088499d6bc0e6983675cb509130647919081900360600190a261228d614913565b5050600180559193909250565b3373ffffffffffffffffffffffffffffffffffffffff7f00000000000000000000000000000000000000000000000000000000000000001614806122f357503373ffffffffffffffffffffffffffffffffffffffff8916145b61235e57604080517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601860248201527f4e6f742066726f6d20726f75746572206f72206f776e65720000000000000000604482015290519081900360640190fd5b7f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff1663b8f7a6656040518163ffffffff1660e01b8152600401602060405180830381600087803b1580156123c657600080fd5b505af11580156123da573d6000803e3d6000fd5b505050506040513d60208110156123f057600080fd5b505161245d57604080517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152600f60248201527f474c4f42414c4c59205041555345440000000000000000000000000000000000604482015290519081900360640190fd5b60005460ff166124ce57604080517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152600660248201527f5041555345440000000000000000000000000000000000000000000000000000604482015290519081900360640190fd5b8385111561253d57604080517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152600d60248201527f496e76616c6964206c696d697400000000000000000000000000000000000000604482015290519081900360640190fd5b828210156125ac57604080517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152600f60248201527f416c726561647920657870697265640000000000000000000000000000000000604482015290519081900360640190fd5b42821161261a57604080517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152600f60248201527f416c726561647920657870697265640000000000000000000000000000000000604482015290519081900360640190fd5b73ffffffffffffffffffffffffffffffffffffffff8816600090815260046020526040902054806126ac57604080517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601c60248201527f50726f7669646572206c6971756964697479206e6f7420666f756e6400000000604482015290519081900360640190fd5b87151560009081526003602052604081208054839081106126c957fe5b906000526020600020906008020190506126f088826001015461489f90919063ffffffff16565b6001820155600281015461270a908963ffffffff61417e16565b60028201819055600382018890556004820187905560058201869055600682018590556007820180548515157fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff0090911681179091556001830154604080518c8152602081019290925281810193909352606081018a90526080810189905260a0810188905260c0810187905260e081019190915290518a15159133917f9766c42cdf43f771566bbf4c8146febf4292a400b0aea37b03f838f4523cc5b7918190036101000190a350505050505050505050565b600c5481565b60015460011461285457604080517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152600660248201527f4c4f434b45440000000000000000000000000000000000000000000000000000604482015290519081900360640190fd5b6000600181905573ffffffffffffffffffffffffffffffffffffffff8416815260046020526040902054806128ea57604080517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601260248201527f50726f7669646572206e6f7420666f756e640000000000000000000000000000604482015290519081900360640190fd5b821515600090815260036020526040812080548390811061290757fe5b60009182526020909120600890910201600781015490915060ff161580612943575073ffffffffffffffffffffffffffffffffffffffff851633145b6129ae57604080517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601160248201527f4e6f742066726f6d2070726f7669646572000000000000000000000000000000604482015290519081900360640190fd5b60018101546129c3908463ffffffff61489f16565b600182015560028101546129dd908463ffffffff61417e16565b6002820181905560018201546040805186815260208101929092528181019290925290518515159173ffffffffffffffffffffffffffffffffffffffff8816917f5d29877443ff1bf07abe0c891fe18d5ab9f14dab242f13ff6482995763473ed29181900360600190a3505060018055505050565b600e5481565b600154600114612ac957604080517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152600660248201527f4c4f434b45440000000000000000000000000000000000000000000000000000604482015290519081900360640190fd5b600060018190555060007f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff1663ef3692526040518163ffffffff1660e01b815260040160206040518083038186803b158015612b3957600080fd5b505afa158015612b4d573d6000803e3d6000fd5b505050506040513d6020811015612b6357600080fd5b5051600654600c54919250612b929173ffffffffffffffffffffffffffffffffffffffff909116908390614699565b600754600d54612bba9173ffffffffffffffffffffffffffffffffffffffff16908390614699565b6000600c819055600d55612bcc614913565b5060018055565b73ffffffffffffffffffffffffffffffffffffffff82166000908152600460209081526040808320548415158452600390925282208054919291829182918291829182918291829182918b908110612c2757fe5b9060005260206000209060080201905089600560008e73ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020548260010154836002015484600301548560040154866005015487600601548860070160009054906101000a900460ff16995099509950995099509950995099509950509295985092959850929598565b6000600154600114612d3b57604080517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152600660248201527f4c4f434b45440000000000000000000000000000000000000000000000000000604482015290519081900360640190fd5b60006001819055507f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff1663b8f7a6656040518163ffffffff1660e01b8152600401602060405180830381600087803b158015612dab57600080fd5b505af1158015612dbf573d6000803e3d6000fd5b505050506040513d6020811015612dd557600080fd5b5051612e4257604080517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152600f60248201527f474c4f42414c4c59205041555345440000000000000000000000000000000000604482015290519081900360640190fd5b3373ffffffffffffffffffffffffffffffffffffffff7f0000000000000000000000000000000000000000000000000000000000000000161480612e9b57503373ffffffffffffffffffffffffffffffffffffffff8916145b612f0657604080517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601860248201527f4e6f742066726f6d20726f75746572206f72206f776e65720000000000000000604482015290519081900360640190fd5b60005460ff16612f7757604080517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152600660248201527f5041555345440000000000000000000000000000000000000000000000000000604482015290519081900360640190fd5b73ffffffffffffffffffffffffffffffffffffffff8816612ff957604080517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152600c60248201527f4e756c6c20616464726573730000000000000000000000000000000000000000604482015290519081900360640190fd5b8385111561306857604080517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152600d60248201527f496e76616c6964206c696d697400000000000000000000000000000000000000604482015290519081900360640190fd5b828210156130d757604080517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152600f60248201527f416c726561647920657870697265640000000000000000000000000000000000604482015290519081900360640190fd5b4282101561314657604080517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152600f60248201527f416c726561647920657870697265640000000000000000000000000000000000604482015290519081900360640190fd5b600080600080613154610acd565b925092509250896131706009548561417e90919063ffffffff16565b10156131dd57604080517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152600d60248201527f496e76616c696420666565496e00000000000000000000000000000000000000604482015290519081900360640190fd5b600e546131f0908b63ffffffff61489f16565b600e558a1561326c57600b5461320d90829063ffffffff61417e16565b6007549094507f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff9081169116141561326757613264848b63ffffffff61417e16565b93505b6132da565b600a5461328090839063ffffffff61417e16565b6006549094507f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff908116911614156132da576132d7848b63ffffffff61417e16565b93505b600992909255600a55600b5573ffffffffffffffffffffffffffffffffffffffff891660009081526005602052604090205461331c908863ffffffff61489f16565b73ffffffffffffffffffffffffffffffffffffffff8a1660009081526005602090815260408083208490556004909152812054935083156133c657891515600090815260036020526040812080548690811061337457fe5b9060005260206000209060080201905061339b84826001015461489f90919063ffffffff16565b60018201819055600382018a9055600482018990556005820188905560069091018690559050613731565b600280546001019081905573ffffffffffffffffffffffffffffffffffffffff8c16600090815260046020526040902081905593508261346757604080517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152600c60248201527f4e6f20616d6f756e7420696e0000000000000000000000000000000000000000604482015290519081900360640190fd5b600360008b1515151581526020019081526020016000206040518061010001604052808d73ffffffffffffffffffffffffffffffffffffffff168152602001858152602001600081526020018a815260200189815260200188815260200187815260200160011515815250908060018154018082558091505060019003906000526020600020906008020160009091909190915060008201518160000160006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055506020820151816001015560408201518160020155606082015181600301556080820151816004015560a0820151816005015560c0820151816006015560e08201518160070160006101000a81548160ff0219169083151502179055505050600360008b151515151581526020019081526020016000206040518061010001604052808d73ffffffffffffffffffffffffffffffffffffffff16815260200160008152602001600081526020016000815260200160008152602001600081526020016000815260200160011515815250908060018154018082558091505060019003906000526020600020906008020160009091909190915060008201518160000160006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055506020820151816001015560408201518160020155606082015181600301556080820151816004015560a0820151816005015560c0820151816006015560e08201518160070160006101000a81548160ff02191690831515021790555050508290508a73ffffffffffffffffffffffffffffffffffffffff167f39944be52180e3811405a754586ce476cd9d34d40e98835c2b4c77eb26426b5b856040518082815260200191505060405180910390a25b604080518a81526020810185905280820184905260608101839052608081018a905260a0810189905260c0810188905260e0810187905290518b15159173ffffffffffffffffffffffffffffffffffffffff8e16917ff77a3e29f24e88e282a2943ad511115dde07d25e5bade15adde6fcbed4c1b206918190036101000190a350506001805550979650505050505050565b60095481565b60005460ff1681565b60075474010000000000000000000000000000000000000000900460ff1681565b7f000000000000000000000000000000000000000000000000000000000000000081565b7f000000000000000000000000000000000000000000000000000000000000000081565b6001546001146138ac57604080517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152600660248201527f4c4f434b45440000000000000000000000000000000000000000000000000000604482015290519081900360640190fd5b60006001553373ffffffffffffffffffffffffffffffffffffffff7f000000000000000000000000000000000000000000000000000000000000000016148061390a57503373ffffffffffffffffffffffffffffffffffffffff8a16145b61397557604080517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601860248201527f4e6f742066726f6d20726f75746572206f72206f776e65720000000000000000604482015290519081900360640190fd5b818110156139e457604080517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152600f60248201527f416c726561647920657870697265640000000000000000000000000000000000604482015290519081900360640190fd5b428111613a5257604080517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152600f60248201527f416c726561647920657870697265640000000000000000000000000000000000604482015290519081900360640190fd5b73ffffffffffffffffffffffffffffffffffffffff891660009081526004602052604090205480613ae457604080517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601c60248201527f50726f7669646572206c6971756964697479206e6f7420666f756e6400000000604482015290519081900360640190fd5b8715613b875773ffffffffffffffffffffffffffffffffffffffff8a16600090815260056020526040902054613b20908963ffffffff61417e16565b73ffffffffffffffffffffffffffffffffffffffff8b16600090815260056020526040902055600e54613b59908963ffffffff61417e16565b600e55613b877f0000000000000000000000000000000000000000000000000000000000000000338a614699565b73ffffffffffffffffffffffffffffffffffffffff8a166000908152600560209081526040808320548c1515845260039092528220805491929184908110613bcb57fe5b90600052602060002090600802019050613bf289826001015461417e90919063ffffffff16565b60018201556002810154613c0c908963ffffffff61417e16565b60028201556003810187905560048101869055600581018590556006810184905588151580613c3b5750600088115b15613c9657613c968b613c665760065473ffffffffffffffffffffffffffffffffffffffff16613c80565b60075473ffffffffffffffffffffffffffffffffffffffff165b33613c918c8c63ffffffff61489f16565b614699565b60018101546002820154604080518d8152602081018d90528082018c905260608101869052608081019390935260a083019190915260c0820189905260e0820188905261010082018790526101208201869052518c15159173ffffffffffffffffffffffffffffffffffffffff8f16917f1f61f8b18e403ca0f2ba9c3ff8bda4d01f0fc5d33ae806841d02dde927728132918190036101400190a3613d39614913565b50506001805550505050505050505050565b60075473ffffffffffffffffffffffffffffffffffffffff1681565b600654600754604080517f95277f3900000000000000000000000000000000000000000000000000000000815273ffffffffffffffffffffffffffffffffffffffff938416600482015291831660248301525160009283927f0000000000000000000000000000000000000000000000000000000000000000909116916395277f3991604480820192602092909190829003018186803b158015613e0a57600080fd5b505afa158015613e1e573d6000803e3d6000fd5b505050506040513d6020811015613e3457600080fd5b5051905060008086613e655760075460065473ffffffffffffffffffffffffffffffffffffffff9182169116613e86565b60065460075473ffffffffffffffffffffffffffffffffffffffff91821691165b915091508273ffffffffffffffffffffffffffffffffffffffff1663495e4348838389896040518563ffffffff1660e01b8152600401808573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020018473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001806020018281038252848482818152602001925080828437600081840152601f19601f8201169050808301925050509550505050505060206040518083038186803b158015613f6f57600080fd5b505afa158015613f83573d6000803e3d6000fd5b505050506040513d6020811015613f9957600080fd5b5051979650505050505050565b60036020528160005260406000208181548110613fbf57fe5b60009182526020909120600890910201805460018201546002830154600384015460048501546005860154600687015460079097015473ffffffffffffffffffffffffffffffffffffffff90961698509396509194909391929160ff1688565b3373ffffffffffffffffffffffffffffffffffffffff7f000000000000000000000000000000000000000000000000000000000000000016146140c357604080517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152600960248201527f464f5242494444454e0000000000000000000000000000000000000000000000604482015290519081900360640190fd5b600080547fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff0016911515919091179055565b60015460011461416557604080517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152600660248201527f4c4f434b45440000000000000000000000000000000000000000000000000000604482015290519081900360640190fd5b6000600155614172614913565b60018055565b3b151590565b60006141c083836040518060400160405280601e81526020017f536166654d6174683a207375627472616374696f6e206f766572666c6f770000815250615101565b90505b92915050565b6000806000806000606060006141df60846151b2565b90925090506141fa8b8b6141f58b85818f6152f7565b614b10565b5091985090965094508592506142189050898363ffffffff61417e16565b9250858a60005b60008311801561422f5750835181105b156145b15760025484828151811061424357fe5b602002602001015111156142b857604080517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152600f60248201527f4f66666572206e6f742065786973740000000000000000000000000000000000604482015290519081900360640190fd5b811515600090815260036020526040812085518690849081106142d757fe5b6020026020010151815481106142e957fe5b9060005260206000209060080201905087816003015411158015614311575080600401548811155b8061432b5750600381015415801561432b57506004810154155b801561433b575080600501544210155b801561434b575080600601544211155b156145a85760018101546000908181871061438257614370878363ffffffff61417e16565b965060008460010181905590506143a8565b600184015487925061439a908363ffffffff61417e16565b846001018190559050600096505b835473ffffffffffffffffffffffffffffffffffffffff9081166000908152600560209081526040918290205482517fed3b638c000000000000000000000000000000000000000000000000000000008152600481019190915291517f00000000000000000000000000000000000000000000000000000000000000009093169263ed3b638c926024808201939291829003018186803b15801561444b57600080fd5b505afa15801561445f573d6000803e3d6000fd5b505050506040513d602081101561447557600080fd5b505192506144af61448f8e620186a063ffffffff614f1516565b611fec856144a38d8763ffffffff614f1516565b9063ffffffff614f1516565b92506144c18c8463ffffffff61417e16565b9b506144db83611fb08f611fec8e8763ffffffff614f1516565b861560009081526003602052604090208951919450908990879081106144fd57fe5b60200260200101518154811061450f57fe5b9060005260206000209060080201935061453683856002015461489f90919063ffffffff16565b60028501819055845460408051858152602081018790528082018590526060810193909352518815159273ffffffffffffffffffffffffffffffffffffffff909216917f5a4c914458527a84b907dc0c2c69173c8d117acce38a2b58e316cdad2d3c6c22919081900360800190a35050505b5060010161421f565b5050801561462057604080517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601d60248201527f416d6f756e74206578636565647320617661696c61626c652066756e64000000604482015290519081900360640190fd5b60408051868152602081018c9052808201899052606081018590526080810188905290518c15159173ffffffffffffffffffffffffffffffffffffffff8f16917f0148b571d5049091b679cb2ccda30fb06d3aecaef641a0515a317498893d7da39181900360a00190a350505050509550959350505050565b604080518082018252601981527f7472616e7366657228616464726573732c75696e743235362900000000000000602091820152815173ffffffffffffffffffffffffffffffffffffffff85811660248301526044808301869052845180840390910181526064909201845291810180517bffffffffffffffffffffffffffffffffffffffffffffffffffffffff167fa9059cbb000000000000000000000000000000000000000000000000000000001781529251815160009460609489169392918291908083835b6020831061479f57805182527fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe09092019160209182019101614762565b6001836020036101000a0380198251168184511680821785525050505050509050019150506000604051808303816000865af19150503d8060008114614801576040519150601f19603f3d011682016040523d82523d6000602084013e614806565b606091505b5091509150818015614834575080511580614834575080806020019051602081101561483157600080fd5b50515b611b7257604080517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152600f60248201527f5452414e534645525f4641494c45440000000000000000000000000000000000604482015290519081900360640190fd5b6000828201838110156141c057604080517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601b60248201527f536166654d6174683a206164646974696f6e206f766572666c6f770000000000604482015290519081900360640190fd5b604080517f70a08231000000000000000000000000000000000000000000000000000000008152306004820152905173ffffffffffffffffffffffffffffffffffffffff7f000000000000000000000000000000000000000000000000000000000000000016916370a08231916024808301926020929190829003018186803b15801561499f57600080fd5b505afa1580156149b3573d6000803e3d6000fd5b505050506040513d60208110156149c957600080fd5b5051600955600654604080517f70a08231000000000000000000000000000000000000000000000000000000008152306004820152905173ffffffffffffffffffffffffffffffffffffffff909216916370a0823191602480820192602092909190829003018186803b158015614a3f57600080fd5b505afa158015614a53573d6000803e3d6000fd5b505050506040513d6020811015614a6957600080fd5b5051600a55600754604080517f70a08231000000000000000000000000000000000000000000000000000000008152306004820152905173ffffffffffffffffffffffffffffffffffffffff909216916370a0823191602480820192602092909190829003018186803b158015614adf57600080fd5b505afa158015614af3573d6000803e3d6000fd5b505050506040513d6020811015614b0957600080fd5b5051600b55565b600654600754604080517f95277f3900000000000000000000000000000000000000000000000000000000815273ffffffffffffffffffffffffffffffffffffffff938416600482015291831660248301525160009283928392839283927f0000000000000000000000000000000000000000000000000000000000000000909116916395277f3991604480820192602092909190829003018186803b158015614bb957600080fd5b505afa158015614bcd573d6000803e3d6000fd5b505050506040513d6020811015614be357600080fd5b5051604080517f42032856000000000000000000000000000000000000000000000000000000008152905191925073ffffffffffffffffffffffffffffffffffffffff7f00000000000000000000000000000000000000000000000000000000000000001691634203285691600480820192602092909190829003018186803b158015614c6f57600080fd5b505afa158015614c83573d6000803e3d6000fd5b505050506040513d6020811015614c9957600080fd5b50519150614cb4620186a0611fec8a8563ffffffff614f1516565b9250614cc6888463ffffffff61417e16565b97506000808273ffffffffffffffffffffffffffffffffffffffff1663d9da4fe68c614d0a5760075473ffffffffffffffffffffffffffffffffffffffff16614d24565b60065473ffffffffffffffffffffffffffffffffffffffff165b8d614d475760065473ffffffffffffffffffffffffffffffffffffffff16614d61565b60075473ffffffffffffffffffffffffffffffffffffffff165b8d60008e8e6040518763ffffffff1660e01b8152600401808773ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020018673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001858152602001848152602001806020018281038252848482818152602001925080828437600081840152601f19601f820116905080830192505050975050505050505050604080518083038186803b158015614e3857600080fd5b505afa158015614e4c573d6000803e3d6000fd5b505050506040513d6040811015614e6257600080fd5b5080516020909101519092509050614e808a8363ffffffff614f1516565b965060016008541115614ed757600760149054906101000a900460ff1615158b151514614ec057600854614ebb90889063ffffffff614f8816565b614ed4565b600854614ed490889063ffffffff614f1516565b96505b614ee7878263ffffffff614f8816565b9650614f0581611fec84670de0b6b3a764000063ffffffff614f1516565b9550505050945094509450949050565b600082614f24575060006141c3565b82820282848281614f3157fe5b04146141c0576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004018080602001828103825260218152602001806153206021913960400191505060405180910390fd5b60006141c083836040518060400160405280601a81526020017f536166654d6174683a206469766973696f6e206279207a65726f000000000000815250615278565b73ffffffffffffffffffffffffffffffffffffffff821660009081526004602052604081205481908061505e57604080517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601c60248201527f50726f7669646572206c6971756964697479206e6f7420666f756e6400000000604482015290519081900360640190fd5b831515600090815260036020526040812080548390811061507b57fe5b60009182526020822060016008909202019081018054600283018054928590559390935591955090935090506150f8856150cd5760065473ffffffffffffffffffffffffffffffffffffffff166150e7565b60075473ffffffffffffffffffffffffffffffffffffffff165b33613c91878763ffffffff61489f16565b50509250929050565b600081848411156151aa576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004018080602001828103825283818151815260200191508051906020019080838360005b8381101561516f578181015183820152602001615157565b50505050905090810190601f16801561519c5780820380516001836020036101000a031916815260200191505b509250505060405180910390fd5b505050900390565b606060006151c783604063ffffffff61489f16565b36101561523557604080517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601260248201527f496e76616c6964206f66666572206c6973740000000000000000000000000000604482015290519081900360640190fd5b60208301356020810280604086010136101561525057600080fd5b6040516020820181016040528281528160408701602083013795602091909101945092505050565b600081836152e1576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820181815283516024840152835190928392604490910191908501908083836000831561516f578181015183820152602001615157565b5060008385816152ed57fe5b0495945050505050565b60008085851115615306578182fd5b83861115615312578182fd5b505082019391909203915056fe536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f77a26469706673582212202cd544383ecb72494d542775e93dcf375c6d972bf29ecedc786d171b78792eeb64736f6c634300060b0033"
    };
});
define("@scom/scom-swap/contracts/oswap-openswap-contract/contracts/range/OSWAP_RangePair.ts", ["require", "exports", "@ijstech/eth-contract", "@scom/scom-swap/contracts/oswap-openswap-contract/contracts/range/OSWAP_RangePair.json.ts"], function (require, exports, eth_contract_25, OSWAP_RangePair_json_1) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.OSWAP_RangePair = void 0;
    class OSWAP_RangePair extends eth_contract_25.Contract {
        constructor(wallet, address) {
            super(wallet, address, OSWAP_RangePair_json_1.default.abi, OSWAP_RangePair_json_1.default.bytecode);
            this.assign();
        }
        deploy(options) {
            return this.__deploy([], options);
        }
        parseAddLiquidityEvent(receipt) {
            return this.parseEvents(receipt, "AddLiquidity").map(e => this.decodeAddLiquidityEvent(e));
        }
        decodeAddLiquidityEvent(event) {
            let result = event.data;
            return {
                provider: result.provider,
                direction: result.direction,
                staked: new eth_contract_25.BigNumber(result.staked),
                amount: new eth_contract_25.BigNumber(result.amount),
                newStakeBalance: new eth_contract_25.BigNumber(result.newStakeBalance),
                newAmountBalance: new eth_contract_25.BigNumber(result.newAmountBalance),
                lowerLimit: new eth_contract_25.BigNumber(result.lowerLimit),
                upperLimit: new eth_contract_25.BigNumber(result.upperLimit),
                startDate: new eth_contract_25.BigNumber(result.startDate),
                expire: new eth_contract_25.BigNumber(result.expire),
                _event: event
            };
        }
        parseNewProviderEvent(receipt) {
            return this.parseEvents(receipt, "NewProvider").map(e => this.decodeNewProviderEvent(e));
        }
        decodeNewProviderEvent(event) {
            let result = event.data;
            return {
                provider: result.provider,
                index: new eth_contract_25.BigNumber(result.index),
                _event: event
            };
        }
        parseRemoveAllLiquidityEvent(receipt) {
            return this.parseEvents(receipt, "RemoveAllLiquidity").map(e => this.decodeRemoveAllLiquidityEvent(e));
        }
        decodeRemoveAllLiquidityEvent(event) {
            let result = event.data;
            return {
                provider: result.provider,
                unstake: new eth_contract_25.BigNumber(result.unstake),
                amount0Out: new eth_contract_25.BigNumber(result.amount0Out),
                amount1Out: new eth_contract_25.BigNumber(result.amount1Out),
                _event: event
            };
        }
        parseRemoveLiquidityEvent(receipt) {
            return this.parseEvents(receipt, "RemoveLiquidity").map(e => this.decodeRemoveLiquidityEvent(e));
        }
        decodeRemoveLiquidityEvent(event) {
            let result = event.data;
            return {
                provider: result.provider,
                direction: result.direction,
                unstake: new eth_contract_25.BigNumber(result.unstake),
                amountOut: new eth_contract_25.BigNumber(result.amountOut),
                reserveOut: new eth_contract_25.BigNumber(result.reserveOut),
                newStakeBalance: new eth_contract_25.BigNumber(result.newStakeBalance),
                newAmountBalance: new eth_contract_25.BigNumber(result.newAmountBalance),
                newReserveBalance: new eth_contract_25.BigNumber(result.newReserveBalance),
                lowerLimit: new eth_contract_25.BigNumber(result.lowerLimit),
                upperLimit: new eth_contract_25.BigNumber(result.upperLimit),
                startDate: new eth_contract_25.BigNumber(result.startDate),
                expire: new eth_contract_25.BigNumber(result.expire),
                _event: event
            };
        }
        parseReplenishEvent(receipt) {
            return this.parseEvents(receipt, "Replenish").map(e => this.decodeReplenishEvent(e));
        }
        decodeReplenishEvent(event) {
            let result = event.data;
            return {
                provider: result.provider,
                direction: result.direction,
                amountIn: new eth_contract_25.BigNumber(result.amountIn),
                newAmountBalance: new eth_contract_25.BigNumber(result.newAmountBalance),
                newReserveBalance: new eth_contract_25.BigNumber(result.newReserveBalance),
                _event: event
            };
        }
        parseSwapEvent(receipt) {
            return this.parseEvents(receipt, "Swap").map(e => this.decodeSwapEvent(e));
        }
        decodeSwapEvent(event) {
            let result = event.data;
            return {
                to: result.to,
                direction: result.direction,
                price: new eth_contract_25.BigNumber(result.price),
                amountIn: new eth_contract_25.BigNumber(result.amountIn),
                amountOut: new eth_contract_25.BigNumber(result.amountOut),
                tradeFee: new eth_contract_25.BigNumber(result.tradeFee),
                protocolFee: new eth_contract_25.BigNumber(result.protocolFee),
                _event: event
            };
        }
        parseSwappedOneProviderEvent(receipt) {
            return this.parseEvents(receipt, "SwappedOneProvider").map(e => this.decodeSwappedOneProviderEvent(e));
        }
        decodeSwappedOneProviderEvent(event) {
            let result = event.data;
            return {
                provider: result.provider,
                direction: result.direction,
                amountOut: new eth_contract_25.BigNumber(result.amountOut),
                amountIn: new eth_contract_25.BigNumber(result.amountIn),
                newAmountBalance: new eth_contract_25.BigNumber(result.newAmountBalance),
                newCounterReserveBalance: new eth_contract_25.BigNumber(result.newCounterReserveBalance),
                _event: event
            };
        }
        parseUpdateProviderOfferEvent(receipt) {
            return this.parseEvents(receipt, "UpdateProviderOffer").map(e => this.decodeUpdateProviderOfferEvent(e));
        }
        decodeUpdateProviderOfferEvent(event) {
            let result = event.data;
            return {
                provider: result.provider,
                direction: result.direction,
                replenish: new eth_contract_25.BigNumber(result.replenish),
                newAmountBalance: new eth_contract_25.BigNumber(result.newAmountBalance),
                newReserveBalance: new eth_contract_25.BigNumber(result.newReserveBalance),
                lowerLimit: new eth_contract_25.BigNumber(result.lowerLimit),
                upperLimit: new eth_contract_25.BigNumber(result.upperLimit),
                startDate: new eth_contract_25.BigNumber(result.startDate),
                expire: new eth_contract_25.BigNumber(result.expire),
                privateReplenish: result.privateReplenish,
                _event: event
            };
        }
        assign() {
            let counter_call = async (options) => {
                let result = await this.call('counter', [], options);
                return new eth_contract_25.BigNumber(result);
            };
            this.counter = counter_call;
            let factory_call = async (options) => {
                let result = await this.call('factory', [], options);
                return result;
            };
            this.factory = factory_call;
            let getAmountInParams = (params) => [params.tokenOut, this.wallet.utils.toString(params.amountOut), this.wallet.utils.stringToBytes(params.data)];
            let getAmountIn_call = async (params, options) => {
                let result = await this.call('getAmountIn', getAmountInParams(params), options);
                return new eth_contract_25.BigNumber(result);
            };
            this.getAmountIn = getAmountIn_call;
            let getAmountOutParams = (params) => [params.tokenIn, this.wallet.utils.toString(params.amountIn), this.wallet.utils.stringToBytes(params.data)];
            let getAmountOut_call = async (params, options) => {
                let result = await this.call('getAmountOut', getAmountOutParams(params), options);
                return new eth_contract_25.BigNumber(result);
            };
            this.getAmountOut = getAmountOut_call;
            let getBalances_call = async (options) => {
                let result = await this.call('getBalances', [], options);
                return {
                    param1: new eth_contract_25.BigNumber(result[0]),
                    param2: new eth_contract_25.BigNumber(result[1]),
                    param3: new eth_contract_25.BigNumber(result[2])
                };
            };
            this.getBalances = getBalances_call;
            let getLastBalances_call = async (options) => {
                let result = await this.call('getLastBalances', [], options);
                return {
                    param1: new eth_contract_25.BigNumber(result[0]),
                    param2: new eth_contract_25.BigNumber(result[1])
                };
            };
            this.getLastBalances = getLastBalances_call;
            let getLatestPriceParams = (params) => [params.direction, this.wallet.utils.stringToBytes(params.payload)];
            let getLatestPrice_call = async (params, options) => {
                let result = await this.call('getLatestPrice', getLatestPriceParams(params), options);
                return new eth_contract_25.BigNumber(result);
            };
            this.getLatestPrice = getLatestPrice_call;
            let getOffersParams = (params) => [params.direction, this.wallet.utils.toString(params.start), this.wallet.utils.toString(params.end)];
            let getOffers_call = async (params, options) => {
                let result = await this.call('getOffers', getOffersParams(params), options);
                return {
                    provider: result.provider,
                    amountAndReserve: result.amountAndReserve.map(e => new eth_contract_25.BigNumber(e)),
                    lowerLimitAndUpperLimit: result.lowerLimitAndUpperLimit.map(e => new eth_contract_25.BigNumber(e)),
                    startDateAndExpire: result.startDateAndExpire.map(e => new eth_contract_25.BigNumber(e)),
                    privateReplenish: result.privateReplenish
                };
            };
            this.getOffers = getOffers_call;
            let getProviderOfferParams = (params) => [params.provider, params.direction];
            let getProviderOffer_call = async (params, options) => {
                let result = await this.call('getProviderOffer', getProviderOfferParams(params), options);
                return {
                    index: new eth_contract_25.BigNumber(result.index),
                    staked: new eth_contract_25.BigNumber(result.staked),
                    amount: new eth_contract_25.BigNumber(result.amount),
                    reserve: new eth_contract_25.BigNumber(result.reserve),
                    lowerLimit: new eth_contract_25.BigNumber(result.lowerLimit),
                    upperLimit: new eth_contract_25.BigNumber(result.upperLimit),
                    startDate: new eth_contract_25.BigNumber(result.startDate),
                    expire: new eth_contract_25.BigNumber(result.expire),
                    privateReplenish: result.privateReplenish
                };
            };
            this.getProviderOffer = getProviderOffer_call;
            let govToken_call = async (options) => {
                let result = await this.call('govToken', [], options);
                return result;
            };
            this.govToken = govToken_call;
            let governance_call = async (options) => {
                let result = await this.call('governance', [], options);
                return result;
            };
            this.governance = governance_call;
            let isLive_call = async (options) => {
                let result = await this.call('isLive', [], options);
                return result;
            };
            this.isLive = isLive_call;
            let lastGovBalance_call = async (options) => {
                let result = await this.call('lastGovBalance', [], options);
                return new eth_contract_25.BigNumber(result);
            };
            this.lastGovBalance = lastGovBalance_call;
            let lastToken0Balance_call = async (options) => {
                let result = await this.call('lastToken0Balance', [], options);
                return new eth_contract_25.BigNumber(result);
            };
            this.lastToken0Balance = lastToken0Balance_call;
            let lastToken1Balance_call = async (options) => {
                let result = await this.call('lastToken1Balance', [], options);
                return new eth_contract_25.BigNumber(result);
            };
            this.lastToken1Balance = lastToken1Balance_call;
            let offersParams = (params) => [params.param1, this.wallet.utils.toString(params.param2)];
            let offers_call = async (params, options) => {
                let result = await this.call('offers', offersParams(params), options);
                return {
                    provider: result.provider,
                    amount: new eth_contract_25.BigNumber(result.amount),
                    reserve: new eth_contract_25.BigNumber(result.reserve),
                    lowerLimit: new eth_contract_25.BigNumber(result.lowerLimit),
                    upperLimit: new eth_contract_25.BigNumber(result.upperLimit),
                    startDate: new eth_contract_25.BigNumber(result.startDate),
                    expire: new eth_contract_25.BigNumber(result.expire),
                    privateReplenish: result.privateReplenish
                };
            };
            this.offers = offers_call;
            let oracleFactory_call = async (options) => {
                let result = await this.call('oracleFactory', [], options);
                return result;
            };
            this.oracleFactory = oracleFactory_call;
            let protocolFeeBalance0_call = async (options) => {
                let result = await this.call('protocolFeeBalance0', [], options);
                return new eth_contract_25.BigNumber(result);
            };
            this.protocolFeeBalance0 = protocolFeeBalance0_call;
            let protocolFeeBalance1_call = async (options) => {
                let result = await this.call('protocolFeeBalance1', [], options);
                return new eth_contract_25.BigNumber(result);
            };
            this.protocolFeeBalance1 = protocolFeeBalance1_call;
            let providerOfferIndex_call = async (param1, options) => {
                let result = await this.call('providerOfferIndex', [param1], options);
                return new eth_contract_25.BigNumber(result);
            };
            this.providerOfferIndex = providerOfferIndex_call;
            let providerStaking_call = async (param1, options) => {
                let result = await this.call('providerStaking', [param1], options);
                return new eth_contract_25.BigNumber(result);
            };
            this.providerStaking = providerStaking_call;
            let rangeLiquidityProvider_call = async (options) => {
                let result = await this.call('rangeLiquidityProvider', [], options);
                return result;
            };
            this.rangeLiquidityProvider = rangeLiquidityProvider_call;
            let scaleDirection_call = async (options) => {
                let result = await this.call('scaleDirection', [], options);
                return result;
            };
            this.scaleDirection = scaleDirection_call;
            let scaler_call = async (options) => {
                let result = await this.call('scaler', [], options);
                return new eth_contract_25.BigNumber(result);
            };
            this.scaler = scaler_call;
            let stakeBalance_call = async (options) => {
                let result = await this.call('stakeBalance', [], options);
                return new eth_contract_25.BigNumber(result);
            };
            this.stakeBalance = stakeBalance_call;
            let token0_call = async (options) => {
                let result = await this.call('token0', [], options);
                return result;
            };
            this.token0 = token0_call;
            let token1_call = async (options) => {
                let result = await this.call('token1', [], options);
                return result;
            };
            this.token1 = token1_call;
            let addLiquidityParams = (params) => [params.provider, params.direction, this.wallet.utils.toString(params.staked), this.wallet.utils.toString(params.lowerLimit), this.wallet.utils.toString(params.upperLimit), this.wallet.utils.toString(params.startDate), this.wallet.utils.toString(params.expire)];
            let addLiquidity_send = async (params, options) => {
                let result = await this.send('addLiquidity', addLiquidityParams(params), options);
                return result;
            };
            let addLiquidity_call = async (params, options) => {
                let result = await this.call('addLiquidity', addLiquidityParams(params), options);
                return new eth_contract_25.BigNumber(result);
            };
            let addLiquidity_txData = async (params, options) => {
                let result = await this.txData('addLiquidity', addLiquidityParams(params), options);
                return result;
            };
            this.addLiquidity = Object.assign(addLiquidity_send, {
                call: addLiquidity_call,
                txData: addLiquidity_txData
            });
            let initializeParams = (params) => [params.token0, params.token1];
            let initialize_send = async (params, options) => {
                let result = await this.send('initialize', initializeParams(params), options);
                return result;
            };
            let initialize_call = async (params, options) => {
                let result = await this.call('initialize', initializeParams(params), options);
                return;
            };
            let initialize_txData = async (params, options) => {
                let result = await this.txData('initialize', initializeParams(params), options);
                return result;
            };
            this.initialize = Object.assign(initialize_send, {
                call: initialize_call,
                txData: initialize_txData
            });
            let redeemProtocolFee_send = async (options) => {
                let result = await this.send('redeemProtocolFee', [], options);
                return result;
            };
            let redeemProtocolFee_call = async (options) => {
                let result = await this.call('redeemProtocolFee', [], options);
                return;
            };
            let redeemProtocolFee_txData = async (options) => {
                let result = await this.txData('redeemProtocolFee', [], options);
                return result;
            };
            this.redeemProtocolFee = Object.assign(redeemProtocolFee_send, {
                call: redeemProtocolFee_call,
                txData: redeemProtocolFee_txData
            });
            let removeAllLiquidity_send = async (provider, options) => {
                let result = await this.send('removeAllLiquidity', [provider], options);
                return result;
            };
            let removeAllLiquidity_call = async (provider, options) => {
                let result = await this.call('removeAllLiquidity', [provider], options);
                return {
                    amount0: new eth_contract_25.BigNumber(result.amount0),
                    amount1: new eth_contract_25.BigNumber(result.amount1),
                    staked: new eth_contract_25.BigNumber(result.staked)
                };
            };
            let removeAllLiquidity_txData = async (provider, options) => {
                let result = await this.txData('removeAllLiquidity', [provider], options);
                return result;
            };
            this.removeAllLiquidity = Object.assign(removeAllLiquidity_send, {
                call: removeAllLiquidity_call,
                txData: removeAllLiquidity_txData
            });
            let removeLiquidityParams = (params) => [params.provider, params.direction, this.wallet.utils.toString(params.unstake), this.wallet.utils.toString(params.amountOut), this.wallet.utils.toString(params.reserveOut), this.wallet.utils.toString(params.lowerLimit), this.wallet.utils.toString(params.upperLimit), this.wallet.utils.toString(params.startDate), this.wallet.utils.toString(params.expire)];
            let removeLiquidity_send = async (params, options) => {
                let result = await this.send('removeLiquidity', removeLiquidityParams(params), options);
                return result;
            };
            let removeLiquidity_call = async (params, options) => {
                let result = await this.call('removeLiquidity', removeLiquidityParams(params), options);
                return;
            };
            let removeLiquidity_txData = async (params, options) => {
                let result = await this.txData('removeLiquidity', removeLiquidityParams(params), options);
                return result;
            };
            this.removeLiquidity = Object.assign(removeLiquidity_send, {
                call: removeLiquidity_call,
                txData: removeLiquidity_txData
            });
            let replenishParams = (params) => [params.provider, params.direction, this.wallet.utils.toString(params.amountIn)];
            let replenish_send = async (params, options) => {
                let result = await this.send('replenish', replenishParams(params), options);
                return result;
            };
            let replenish_call = async (params, options) => {
                let result = await this.call('replenish', replenishParams(params), options);
                return;
            };
            let replenish_txData = async (params, options) => {
                let result = await this.txData('replenish', replenishParams(params), options);
                return result;
            };
            this.replenish = Object.assign(replenish_send, {
                call: replenish_call,
                txData: replenish_txData
            });
            let setLive_send = async (isLive, options) => {
                let result = await this.send('setLive', [isLive], options);
                return result;
            };
            let setLive_call = async (isLive, options) => {
                let result = await this.call('setLive', [isLive], options);
                return;
            };
            let setLive_txData = async (isLive, options) => {
                let result = await this.txData('setLive', [isLive], options);
                return result;
            };
            this.setLive = Object.assign(setLive_send, {
                call: setLive_call,
                txData: setLive_txData
            });
            let swapParams = (params) => [this.wallet.utils.toString(params.amount0Out), this.wallet.utils.toString(params.amount1Out), params.to, this.wallet.utils.stringToBytes(params.data)];
            let swap_send = async (params, options) => {
                let result = await this.send('swap', swapParams(params), options);
                return result;
            };
            let swap_call = async (params, options) => {
                let result = await this.call('swap', swapParams(params), options);
                return;
            };
            let swap_txData = async (params, options) => {
                let result = await this.txData('swap', swapParams(params), options);
                return result;
            };
            this.swap = Object.assign(swap_send, {
                call: swap_call,
                txData: swap_txData
            });
            let sync_send = async (options) => {
                let result = await this.send('sync', [], options);
                return result;
            };
            let sync_call = async (options) => {
                let result = await this.call('sync', [], options);
                return;
            };
            let sync_txData = async (options) => {
                let result = await this.txData('sync', [], options);
                return result;
            };
            this.sync = Object.assign(sync_send, {
                call: sync_call,
                txData: sync_txData
            });
            let updateProviderOfferParams = (params) => [params.provider, params.direction, this.wallet.utils.toString(params.replenishAmount), this.wallet.utils.toString(params.lowerLimit), this.wallet.utils.toString(params.upperLimit), this.wallet.utils.toString(params.startDate), this.wallet.utils.toString(params.expire), params.privateReplenish];
            let updateProviderOffer_send = async (params, options) => {
                let result = await this.send('updateProviderOffer', updateProviderOfferParams(params), options);
                return result;
            };
            let updateProviderOffer_call = async (params, options) => {
                let result = await this.call('updateProviderOffer', updateProviderOfferParams(params), options);
                return;
            };
            let updateProviderOffer_txData = async (params, options) => {
                let result = await this.txData('updateProviderOffer', updateProviderOfferParams(params), options);
                return result;
            };
            this.updateProviderOffer = Object.assign(updateProviderOffer_send, {
                call: updateProviderOffer_call,
                txData: updateProviderOffer_txData
            });
        }
    }
    OSWAP_RangePair._abi = OSWAP_RangePair_json_1.default.abi;
    exports.OSWAP_RangePair = OSWAP_RangePair;
});
define("@scom/scom-swap/contracts/oswap-openswap-contract/contracts/range/OSWAP_RangePairCreator.json.ts", ["require", "exports"], function (require, exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    ///<amd-module name='@scom/scom-swap/contracts/oswap-openswap-contract/contracts/range/OSWAP_RangePairCreator.json.ts'/> 
    exports.default = {
        "abi": [
            { "inputs": [{ "internalType": "bytes32", "name": "salt", "type": "bytes32" }], "name": "createPair", "outputs": [{ "internalType": "address", "name": "pair", "type": "address" }], "stateMutability": "nonpayable", "type": "function" }
        ],
        "bytecode": "608060405234801561001057600080fd5b506158e9806100206000396000f3fe608060405234801561001057600080fd5b506004361061002b5760003560e01c8063ed25a5a214610030575b600080fd5b61004d6004803603602081101561004657600080fd5b5035610076565b6040805173ffffffffffffffffffffffffffffffffffffffff9092168252519081900360200190f35b600060606040518060200161008a906100b1565b6020820181038252601f19601f820116604052509050828151602083016000f59392505050565b6157f5806100bf8339019056fe610120604052600180553480156200001657600080fd5b5033606081811b6080526000805460ff191660011781556040805163ea2ed2c160e01b81529051919384938493919263ea2ed2c19260048083019392829003018186803b1580156200006757600080fd5b505afa1580156200007c573d6000803e3d6000fd5b505050506040513d60608110156200009357600080fd5b5080516020808301516040938401516001600160601b0319606085901b1660c052845163b716d46360e01b8152945193975090955093506001600160a01b0386169263b716d4639260048083019392829003018186803b158015620000f757600080fd5b505afa1580156200010c573d6000803e3d6000fd5b505050506040513d60208110156200012357600080fd5b81019080805190602001909291905050506001600160a01b0316610100816001600160a01b031660601b81525050816001600160a01b031660e0816001600160a01b031660601b81525050806001600160a01b031660a0816001600160a01b031660601b81525050600360006001151515158152602001908152602001600020604051806101000160405280306001600160a01b0316815260200160008152602001600081526020016000815260200160008152602001600081526020016000815260200160001515815250908060018154018082558091505060019003906000526020600020906008020160009091909190915060008201518160000160006101000a8154816001600160a01b0302191690836001600160a01b031602179055506020820151816001015560408201518160020155606082015181600301556080820151816004015560a0820151816005015560c0820151816006015560e08201518160070160006101000a81548160ff02191690831515021790555050506003600080151515158152602001908152602001600020604051806101000160405280306001600160a01b0316815260200160008152602001600081526020016000815260200160008152602001600081526020016000815260200160001515815250908060018154018082558091505060019003906000526020600020906008020160009091909190915060008201518160000160006101000a8154816001600160a01b0302191690836001600160a01b031602179055506020820151816001015560408201518160020155606082015181600301556080820151816004015560a0820151816005015560c0820151816006015560e08201518160070160006101000a81548160ff021916908315150217905550505050505060805160601c60a05160601c60c05160601c60e05160601c6101005160601c6153766200047f60003980610ad452806112655280612206528061321552806132885280613b6152806149595250806112a552806120c452806122b25280612e5a52806138c9525080611b87525080610db852806118c15280611c7752806138195280613dc15280614b705250806117165280611d2f52806123605280612ad55280612d4552806137f5528061403752806144065280614c2852506153766000f3fe608060405234801561001057600080fd5b50600436106102765760003560e01c80637a6a5e1b11610160578063b8f7a665116100d8578063d21220a71161008c578063db13653c11610071578063db13653c14610a27578063f5ee334814610aa6578063fff6cae914610ac557610276565b8063d21220a7146109a6578063d519f64d146109ae57610276565b8063c45a0155116100bd578063c45a01551461092f578063c7f7fb9014610937578063d1b876cb1461093f57610276565b8063b8f7a6651461090b578063bebf7a611461092757610276565b806393bc9dfe1161012f578063a26651e711610114578063a26651e714610826578063a27c17f1146108aa578063b2901aa31461090357610276565b806393bc9dfe146108165780639749d2131461081e57610276565b80637a6a5e1b1461073857806380dffd7e1461076b578063835daf6c146107cd57806388952339146107d557610276565b8063485cc955116101f357806361bc221a116101c25780636b4afee1116101a75780636b4afee1146106ca5780636d813c3c146106d25780636fec7dd71461070557610276565b806361bc221a14610630578063685639a91461063857610276565b8063485cc955146105dd578063577e6d08146106185780635a6af09d146106205780635aa6e6751461062857610276565b80632c6ced381161024a5780633c1e6ff51161022f5780633c1e6ff5146104215780633c6d5c72146104295780633d0d81d61461044a57610276565b80632c6ced38146103755780633b19103b1461037d57610276565b8062113e081461027b578063022c0d9f146102a157806305268cff1461033c5780630dfe16811461036d575b600080fd5b610283610acd565b60408051938452602084019290925282820152519081900360600190f35b61033a600480360360808110156102b757600080fd5b81359160208101359173ffffffffffffffffffffffffffffffffffffffff60408301351691908101906080810160608201356401000000008111156102fb57600080fd5b82018360208201111561030d57600080fd5b8035906020019184600183028401116401000000008311171561032f57600080fd5b509092509050610ce1565b005b610344611263565b6040805173ffffffffffffffffffffffffffffffffffffffff9092168252519081900360200190f35b610344611287565b6103446112a3565b61040f6004803603606081101561039357600080fd5b73ffffffffffffffffffffffffffffffffffffffff823516916020810135918101906060810160408201356401000000008111156103d057600080fd5b8201836020820111156103e257600080fd5b8035906020019184600183028401116401000000008311171561040457600080fd5b5090925090506112c7565b60408051918252519081900360200190f35b61040f61136e565b610431611374565b6040805192835260208301919091528051918290030190f35b6104756004803603606081101561046057600080fd5b5080351515906020810135906040013561137e565b60405180806020018060200180602001806020018060200186810386528b818151815260200191508051906020019060200280838360005b838110156104c55781810151838201526020016104ad565b5050505090500186810385528a818151815260200191508051906020019060200280838360005b838110156105045781810151838201526020016104ec565b50505050905001868103845289818151815260200191508051906020019060200280838360005b8381101561054357818101518382015260200161052b565b50505050905001868103835288818151815260200191508051906020019060200280838360005b8381101561058257818101518382015260200161056a565b50505050905001868103825287818151815260200191508051906020019060200280838360005b838110156105c15781810151838201526020016105a9565b505050509050019a505050505050505050505060405180910390f35b61033a600480360360408110156105f357600080fd5b5073ffffffffffffffffffffffffffffffffffffffff813581169160200135166116fe565b61040f611b79565b61040f611b7f565b610344611b85565b61040f611ba9565b61040f6004803603606081101561064e57600080fd5b73ffffffffffffffffffffffffffffffffffffffff8235169160208101359181019060608101604082013564010000000081111561068b57600080fd5b82018360208201111561069d57600080fd5b803590602001918460018302840111640100000000831117156106bf57600080fd5b509092509050611baf565b61040f612007565b61040f600480360360208110156106e857600080fd5b503573ffffffffffffffffffffffffffffffffffffffff1661200d565b61040f6004803603602081101561071b57600080fd5b503573ffffffffffffffffffffffffffffffffffffffff1661201f565b6102836004803603602081101561074e57600080fd5b503573ffffffffffffffffffffffffffffffffffffffff16612031565b61033a600480360361010081101561078257600080fd5b5073ffffffffffffffffffffffffffffffffffffffff81351690602081013515159060408101359060608101359060808101359060a08101359060c08101359060e00135151561229a565b61040f6127dd565b61033a600480360360608110156107eb57600080fd5b5073ffffffffffffffffffffffffffffffffffffffff813516906020810135151590604001356127e3565b61040f612a52565b61033a612a58565b6108616004803603604081101561083c57600080fd5b5073ffffffffffffffffffffffffffffffffffffffff81351690602001351515612bd3565b60408051998a5260208a0198909852888801969096526060880194909452608087019290925260a086015260c085015260e0840152151561010083015251908190036101200190f35b61040f600480360360e08110156108c057600080fd5b5073ffffffffffffffffffffffffffffffffffffffff81351690602081013515159060408101359060608101359060808101359060a08101359060c00135612cc8565b61040f6137c3565b6109136137c9565b604080519115158252519081900360200190f35b6109136137d2565b6103446137f3565b610344613817565b61033a600480360361012081101561095657600080fd5b5073ffffffffffffffffffffffffffffffffffffffff81351690602081013515159060408101359060608101359060808101359060a08101359060c08101359060e081013590610100013561383b565b610344613d4b565b61040f600480360360408110156109c457600080fd5b8135151591908101906040810160208201356401000000008111156109e857600080fd5b8201836020820111156109fa57600080fd5b80359060200191846001830284011164010000000083111715610a1c57600080fd5b509092509050613d67565b610a4c60048036036040811015610a3d57600080fd5b50803515159060200135613fa6565b6040805173ffffffffffffffffffffffffffffffffffffffff90991689526020890197909752878701959095526060870193909352608086019190915260a085015260c0840152151560e083015251908190036101000190f35b61033a60048036036020811015610abc57600080fd5b5035151561401f565b61033a6140f4565b60008060007f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff166370a08231306040518263ffffffff1660e01b8152600401808273ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200191505060206040518083038186803b158015610b6f57600080fd5b505afa158015610b83573d6000803e3d6000fd5b505050506040513d6020811015610b9957600080fd5b5051600654604080517f70a08231000000000000000000000000000000000000000000000000000000008152306004820152905173ffffffffffffffffffffffffffffffffffffffff909216916370a0823191602480820192602092909190829003018186803b158015610c0c57600080fd5b505afa158015610c20573d6000803e3d6000fd5b505050506040513d6020811015610c3657600080fd5b5051600754604080517f70a08231000000000000000000000000000000000000000000000000000000008152306004820152905173ffffffffffffffffffffffffffffffffffffffff909216916370a0823191602480820192602092909190829003018186803b158015610ca957600080fd5b505afa158015610cbd573d6000803e3d6000fd5b505050506040513d6020811015610cd357600080fd5b505191945092509050909192565b600154600114610d5257604080517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152600660248201527f4c4f434b45440000000000000000000000000000000000000000000000000000604482015290519081900360640190fd5b60006001553233148015610d6c5750610d6a33614178565b155b80610e2d5750604080517f3af32abf000000000000000000000000000000000000000000000000000000008152336004820152905173ffffffffffffffffffffffffffffffffffffffff7f00000000000000000000000000000000000000000000000000000000000000001691633af32abf9160248083019260209291908290030181600087803b158015610e0057600080fd5b505af1158015610e14573d6000803e3d6000fd5b505050506040513d6020811015610e2a57600080fd5b50515b610e9857604080517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601c60248201527f4e6f742066726f6d2075736572206f722077686974656c697374656400000000604482015290519081900360640190fd5b60005460ff16610f0957604080517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152600660248201527f5041555345440000000000000000000000000000000000000000000000000000604482015290519081900360640190fd5b600a54600654604080517f70a082310000000000000000000000000000000000000000000000000000000081523060048201529051600093610fbe93909273ffffffffffffffffffffffffffffffffffffffff909116916370a0823191602480820192602092909190829003018186803b158015610f8657600080fd5b505afa158015610f9a573d6000803e3d6000fd5b505050506040513d6020811015610fb057600080fd5b50519063ffffffff61417e16565b600b54600754604080517f70a08231000000000000000000000000000000000000000000000000000000008152306004820152905193945060009361103a939273ffffffffffffffffffffffffffffffffffffffff16916370a08231916024808301926020929190829003018186803b158015610f8657600080fd5b90506000808815801561104c57508715155b156111125761105f8760018689896141c9565b9092509050878210156110d357604080517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601360248201527f494e53554646494349454e545f414d4f554e5400000000000000000000000000604482015290519081900360640190fd5b6007546110f79073ffffffffffffffffffffffffffffffffffffffff168884614699565b600c5461110a908263ffffffff61489f16565b600c5561124c565b881580159061111f575087155b156111e5576111328760008589896141c9565b9092509050888210156111a657604080517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601360248201527f494e53554646494349454e545f414d4f554e5400000000000000000000000000604482015290519081900360640190fd5b6006546111ca9073ffffffffffffffffffffffffffffffffffffffff168884614699565b600d546111dd908263ffffffff61489f16565b600d5561124c565b604080517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152600d60248201527f4e6f7420737570706f7274656400000000000000000000000000000000000000604482015290519081900360640190fd5b611254614913565b50506001805550505050505050565b7f000000000000000000000000000000000000000000000000000000000000000081565b60065473ffffffffffffffffffffffffffffffffffffffff1681565b7f000000000000000000000000000000000000000000000000000000000000000081565b600080841161133757604080517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601960248201527f494e53554646494349454e545f494e5055545f414d4f554e5400000000000000604482015290519081900360640190fd5b6006546113619073ffffffffffffffffffffffffffffffffffffffff878116911614858585614b10565b5091979650505050505050565b60085481565b600a54600b549091565b606080606080606060025487116116c85760025486111561139f5760025495505b60006113c2886113b689600163ffffffff61489f16565b9063ffffffff61417e16565b90508067ffffffffffffffff811180156113db57600080fd5b50604051908082528060200260200182016040528015611405578160200160208202803683370190505b5095508060020267ffffffffffffffff8111801561142257600080fd5b5060405190808252806020026020018201604052801561144c578160200160208202803683370190505b5094508060020267ffffffffffffffff8111801561146957600080fd5b50604051908082528060200260200182016040528015611493578160200160208202803683370190505b5093508060020267ffffffffffffffff811180156114b057600080fd5b506040519080825280602002602001820160405280156114da578160200160208202803683370190505b5092508067ffffffffffffffff811180156114f457600080fd5b5060405190808252806020026020018201604052801561151e578160200160208202803683370190505b50915060005b818110156116c157600061153e828463ffffffff61489f16565b8b1515600090815260036020526040812091925090611563848d63ffffffff61489f16565b8154811061156d57fe5b6000918252602090912060089091020180548a5191925073ffffffffffffffffffffffffffffffffffffffff16908a90859081106115a757fe5b602002602001019073ffffffffffffffffffffffffffffffffffffffff16908173ffffffffffffffffffffffffffffffffffffffff168152505080600101548884815181106115f257fe5b602002602001018181525050806002015488838151811061160f57fe5b602002602001018181525050806003015487848151811061162c57fe5b602002602001018181525050806004015487838151811061164957fe5b602002602001018181525050806005015486848151811061166657fe5b602002602001018181525050806006015486838151811061168357fe5b60209081029190910101526007810154855160ff909116908690859081106116a757fe5b911515602092830291909101909101525050600101611524565b50506116f3565b5050604080516000808252602082018181528284019182526060830190935290945090925082915081905b939792965093509350565b3373ffffffffffffffffffffffffffffffffffffffff7f000000000000000000000000000000000000000000000000000000000000000016146117a257604080517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152600960248201527f464f5242494444454e0000000000000000000000000000000000000000000000604482015290519081900360640190fd5b6006805473ffffffffffffffffffffffffffffffffffffffff8085167fffffffffffffffffffffffff00000000000000000000000000000000000000009283161792839055600780548583169316929092179182905590811691161061186957604080517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601860248201527f496e76616c696420746f6b656e2070616972206f726465720000000000000000604482015290519081900360640190fd5b600654600754604080517f52a03c0300000000000000000000000000000000000000000000000000000000815273ffffffffffffffffffffffffffffffffffffffff93841660048201529183166024830152516000927f000000000000000000000000000000000000000000000000000000000000000016916352a03c03916044808301926020929190829003018186803b15801561190757600080fd5b505afa15801561191b573d6000803e3d6000fd5b505050506040513d602081101561193157600080fd5b5051905073ffffffffffffffffffffffffffffffffffffffff81166119b757604080517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152600f60248201527f4e6f206f7261636c6520666f756e640000000000000000000000000000000000604482015290519081900360640190fd5b600654604080517f313ce567000000000000000000000000000000000000000000000000000000008152905160009273ffffffffffffffffffffffffffffffffffffffff169163313ce567916004808301926020929190829003018186803b158015611a2257600080fd5b505afa158015611a36573d6000803e3d6000fd5b505050506040513d6020811015611a4c57600080fd5b5051600754604080517f313ce567000000000000000000000000000000000000000000000000000000008152905192935060009273ffffffffffffffffffffffffffffffffffffffff9092169163313ce56791600480820192602092909190829003018186803b158015611abf57600080fd5b505afa158015611ad3573d6000803e3d6000fd5b505050506040513d6020811015611ae957600080fd5b5051905060ff8281169082161415611b05576001600855611b72565b600780547fffffffffffffffffffffff00ffffffffffffffffffffffffffffffffffffffff1660ff84811684821611740100000000000000000000000000000000000000009081029290921792839055910416611b6457808203611b68565b8181035b60ff16600a0a6008555b5050505050565b600d5481565b600a5481565b7f000000000000000000000000000000000000000000000000000000000000000081565b60025481565b6000808411611c1f57604080517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601a60248201527f494e53554646494349454e545f4f55545055545f414d4f554e54000000000000604482015290519081900360640190fd5b600654600754604080517f95277f3900000000000000000000000000000000000000000000000000000000815273ffffffffffffffffffffffffffffffffffffffff93841660048201529183166024830152516000927f000000000000000000000000000000000000000000000000000000000000000016916395277f39916044808301926020929190829003018186803b158015611cbd57600080fd5b505afa158015611cd1573d6000803e3d6000fd5b505050506040513d6020811015611ce757600080fd5b5051604080517f42032856000000000000000000000000000000000000000000000000000000008152905191925060009173ffffffffffffffffffffffffffffffffffffffff7f000000000000000000000000000000000000000000000000000000000000000016916342032856916004808301926020929190829003018186803b158015611d7557600080fd5b505afa158015611d89573d6000803e3d6000fd5b505050506040513d6020811015611d9f57600080fd5b505160075490915073ffffffffffffffffffffffffffffffffffffffff888116911614600081611de75760075473ffffffffffffffffffffffffffffffffffffffff16611e01565b60065473ffffffffffffffffffffffffffffffffffffffff165b90506000808573ffffffffffffffffffffffffffffffffffffffff1663d9da4fe6848d60008e8e8e6040518763ffffffff1660e01b8152600401808773ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020018673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001858152602001848152602001806020018281038252848482818152602001925080828437600081840152601f19601f820116905080830192505050975050505050505050604080518083038186803b158015611efb57600080fd5b505afa158015611f0f573d6000803e3d6000fd5b505050506040513d6040811015611f2557600080fd5b5080516020909101519092509050611f438a8263ffffffff614f1516565b965060016008541115611f9b57600760149054906101000a900460ff1615158415151415611f8457600854611f7f90889063ffffffff614f8816565b611f98565b600854611f9890889063ffffffff614f1516565b96505b611fbc6001611fb0898563ffffffff614f8816565b9063ffffffff61489f16565b9650611ff86001611fb0611fd9620186a08963ffffffff61417e16565b611fec8b620186a063ffffffff614f1516565b9063ffffffff614f8816565b9b9a5050505050505050505050565b600b5481565b60046020526000908152604090205481565b60056020526000908152604090205481565b60008060006001546001146120a757604080517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152600660248201527f4c4f434b45440000000000000000000000000000000000000000000000000000604482015290519081900360640190fd5b60006001553373ffffffffffffffffffffffffffffffffffffffff7f000000000000000000000000000000000000000000000000000000000000000016148061210557503373ffffffffffffffffffffffffffffffffffffffff8516145b61217057604080517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601860248201527f4e6f742066726f6d20726f75746572206f72206f776e65720000000000000000604482015290519081900360640190fd5b600061217d856000614fca565b9094509050612192848263ffffffff61489f16565b935060006121a1866001614fca565b90945090506121b6848263ffffffff61489f16565b73ffffffffffffffffffffffffffffffffffffffff8716600090815260056020526040812080549190559094509250821561222c57600e546121fe908463ffffffff61417e16565b600e5561222c7f00000000000000000000000000000000000000000000000000000000000000003385614699565b6040805184815260208101879052808201869052905173ffffffffffffffffffffffffffffffffffffffff8816917f3f9e361045fcac63ab779647d804207abc088499d6bc0e6983675cb509130647919081900360600190a261228d614913565b5050600180559193909250565b3373ffffffffffffffffffffffffffffffffffffffff7f00000000000000000000000000000000000000000000000000000000000000001614806122f357503373ffffffffffffffffffffffffffffffffffffffff8916145b61235e57604080517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601860248201527f4e6f742066726f6d20726f75746572206f72206f776e65720000000000000000604482015290519081900360640190fd5b7f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff1663b8f7a6656040518163ffffffff1660e01b8152600401602060405180830381600087803b1580156123c657600080fd5b505af11580156123da573d6000803e3d6000fd5b505050506040513d60208110156123f057600080fd5b505161245d57604080517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152600f60248201527f474c4f42414c4c59205041555345440000000000000000000000000000000000604482015290519081900360640190fd5b60005460ff166124ce57604080517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152600660248201527f5041555345440000000000000000000000000000000000000000000000000000604482015290519081900360640190fd5b8385111561253d57604080517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152600d60248201527f496e76616c6964206c696d697400000000000000000000000000000000000000604482015290519081900360640190fd5b828210156125ac57604080517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152600f60248201527f416c726561647920657870697265640000000000000000000000000000000000604482015290519081900360640190fd5b42821161261a57604080517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152600f60248201527f416c726561647920657870697265640000000000000000000000000000000000604482015290519081900360640190fd5b73ffffffffffffffffffffffffffffffffffffffff8816600090815260046020526040902054806126ac57604080517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601c60248201527f50726f7669646572206c6971756964697479206e6f7420666f756e6400000000604482015290519081900360640190fd5b87151560009081526003602052604081208054839081106126c957fe5b906000526020600020906008020190506126f088826001015461489f90919063ffffffff16565b6001820155600281015461270a908963ffffffff61417e16565b60028201819055600382018890556004820187905560058201869055600682018590556007820180548515157fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff0090911681179091556001830154604080518c8152602081019290925281810193909352606081018a90526080810189905260a0810188905260c0810187905260e081019190915290518a15159133917f9766c42cdf43f771566bbf4c8146febf4292a400b0aea37b03f838f4523cc5b7918190036101000190a350505050505050505050565b600c5481565b60015460011461285457604080517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152600660248201527f4c4f434b45440000000000000000000000000000000000000000000000000000604482015290519081900360640190fd5b6000600181905573ffffffffffffffffffffffffffffffffffffffff8416815260046020526040902054806128ea57604080517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601260248201527f50726f7669646572206e6f7420666f756e640000000000000000000000000000604482015290519081900360640190fd5b821515600090815260036020526040812080548390811061290757fe5b60009182526020909120600890910201600781015490915060ff161580612943575073ffffffffffffffffffffffffffffffffffffffff851633145b6129ae57604080517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601160248201527f4e6f742066726f6d2070726f7669646572000000000000000000000000000000604482015290519081900360640190fd5b60018101546129c3908463ffffffff61489f16565b600182015560028101546129dd908463ffffffff61417e16565b6002820181905560018201546040805186815260208101929092528181019290925290518515159173ffffffffffffffffffffffffffffffffffffffff8816917f5d29877443ff1bf07abe0c891fe18d5ab9f14dab242f13ff6482995763473ed29181900360600190a3505060018055505050565b600e5481565b600154600114612ac957604080517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152600660248201527f4c4f434b45440000000000000000000000000000000000000000000000000000604482015290519081900360640190fd5b600060018190555060007f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff1663ef3692526040518163ffffffff1660e01b815260040160206040518083038186803b158015612b3957600080fd5b505afa158015612b4d573d6000803e3d6000fd5b505050506040513d6020811015612b6357600080fd5b5051600654600c54919250612b929173ffffffffffffffffffffffffffffffffffffffff909116908390614699565b600754600d54612bba9173ffffffffffffffffffffffffffffffffffffffff16908390614699565b6000600c819055600d55612bcc614913565b5060018055565b73ffffffffffffffffffffffffffffffffffffffff82166000908152600460209081526040808320548415158452600390925282208054919291829182918291829182918291829182918b908110612c2757fe5b9060005260206000209060080201905089600560008e73ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020548260010154836002015484600301548560040154866005015487600601548860070160009054906101000a900460ff16995099509950995099509950995099509950509295985092959850929598565b6000600154600114612d3b57604080517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152600660248201527f4c4f434b45440000000000000000000000000000000000000000000000000000604482015290519081900360640190fd5b60006001819055507f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff1663b8f7a6656040518163ffffffff1660e01b8152600401602060405180830381600087803b158015612dab57600080fd5b505af1158015612dbf573d6000803e3d6000fd5b505050506040513d6020811015612dd557600080fd5b5051612e4257604080517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152600f60248201527f474c4f42414c4c59205041555345440000000000000000000000000000000000604482015290519081900360640190fd5b3373ffffffffffffffffffffffffffffffffffffffff7f0000000000000000000000000000000000000000000000000000000000000000161480612e9b57503373ffffffffffffffffffffffffffffffffffffffff8916145b612f0657604080517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601860248201527f4e6f742066726f6d20726f75746572206f72206f776e65720000000000000000604482015290519081900360640190fd5b60005460ff16612f7757604080517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152600660248201527f5041555345440000000000000000000000000000000000000000000000000000604482015290519081900360640190fd5b73ffffffffffffffffffffffffffffffffffffffff8816612ff957604080517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152600c60248201527f4e756c6c20616464726573730000000000000000000000000000000000000000604482015290519081900360640190fd5b8385111561306857604080517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152600d60248201527f496e76616c6964206c696d697400000000000000000000000000000000000000604482015290519081900360640190fd5b828210156130d757604080517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152600f60248201527f416c726561647920657870697265640000000000000000000000000000000000604482015290519081900360640190fd5b4282101561314657604080517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152600f60248201527f416c726561647920657870697265640000000000000000000000000000000000604482015290519081900360640190fd5b600080600080613154610acd565b925092509250896131706009548561417e90919063ffffffff16565b10156131dd57604080517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152600d60248201527f496e76616c696420666565496e00000000000000000000000000000000000000604482015290519081900360640190fd5b600e546131f0908b63ffffffff61489f16565b600e558a1561326c57600b5461320d90829063ffffffff61417e16565b6007549094507f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff9081169116141561326757613264848b63ffffffff61417e16565b93505b6132da565b600a5461328090839063ffffffff61417e16565b6006549094507f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff908116911614156132da576132d7848b63ffffffff61417e16565b93505b600992909255600a55600b5573ffffffffffffffffffffffffffffffffffffffff891660009081526005602052604090205461331c908863ffffffff61489f16565b73ffffffffffffffffffffffffffffffffffffffff8a1660009081526005602090815260408083208490556004909152812054935083156133c657891515600090815260036020526040812080548690811061337457fe5b9060005260206000209060080201905061339b84826001015461489f90919063ffffffff16565b60018201819055600382018a9055600482018990556005820188905560069091018690559050613731565b600280546001019081905573ffffffffffffffffffffffffffffffffffffffff8c16600090815260046020526040902081905593508261346757604080517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152600c60248201527f4e6f20616d6f756e7420696e0000000000000000000000000000000000000000604482015290519081900360640190fd5b600360008b1515151581526020019081526020016000206040518061010001604052808d73ffffffffffffffffffffffffffffffffffffffff168152602001858152602001600081526020018a815260200189815260200188815260200187815260200160011515815250908060018154018082558091505060019003906000526020600020906008020160009091909190915060008201518160000160006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055506020820151816001015560408201518160020155606082015181600301556080820151816004015560a0820151816005015560c0820151816006015560e08201518160070160006101000a81548160ff0219169083151502179055505050600360008b151515151581526020019081526020016000206040518061010001604052808d73ffffffffffffffffffffffffffffffffffffffff16815260200160008152602001600081526020016000815260200160008152602001600081526020016000815260200160011515815250908060018154018082558091505060019003906000526020600020906008020160009091909190915060008201518160000160006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055506020820151816001015560408201518160020155606082015181600301556080820151816004015560a0820151816005015560c0820151816006015560e08201518160070160006101000a81548160ff02191690831515021790555050508290508a73ffffffffffffffffffffffffffffffffffffffff167f39944be52180e3811405a754586ce476cd9d34d40e98835c2b4c77eb26426b5b856040518082815260200191505060405180910390a25b604080518a81526020810185905280820184905260608101839052608081018a905260a0810189905260c0810188905260e0810187905290518b15159173ffffffffffffffffffffffffffffffffffffffff8e16917ff77a3e29f24e88e282a2943ad511115dde07d25e5bade15adde6fcbed4c1b206918190036101000190a350506001805550979650505050505050565b60095481565b60005460ff1681565b60075474010000000000000000000000000000000000000000900460ff1681565b7f000000000000000000000000000000000000000000000000000000000000000081565b7f000000000000000000000000000000000000000000000000000000000000000081565b6001546001146138ac57604080517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152600660248201527f4c4f434b45440000000000000000000000000000000000000000000000000000604482015290519081900360640190fd5b60006001553373ffffffffffffffffffffffffffffffffffffffff7f000000000000000000000000000000000000000000000000000000000000000016148061390a57503373ffffffffffffffffffffffffffffffffffffffff8a16145b61397557604080517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601860248201527f4e6f742066726f6d20726f75746572206f72206f776e65720000000000000000604482015290519081900360640190fd5b818110156139e457604080517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152600f60248201527f416c726561647920657870697265640000000000000000000000000000000000604482015290519081900360640190fd5b428111613a5257604080517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152600f60248201527f416c726561647920657870697265640000000000000000000000000000000000604482015290519081900360640190fd5b73ffffffffffffffffffffffffffffffffffffffff891660009081526004602052604090205480613ae457604080517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601c60248201527f50726f7669646572206c6971756964697479206e6f7420666f756e6400000000604482015290519081900360640190fd5b8715613b875773ffffffffffffffffffffffffffffffffffffffff8a16600090815260056020526040902054613b20908963ffffffff61417e16565b73ffffffffffffffffffffffffffffffffffffffff8b16600090815260056020526040902055600e54613b59908963ffffffff61417e16565b600e55613b877f0000000000000000000000000000000000000000000000000000000000000000338a614699565b73ffffffffffffffffffffffffffffffffffffffff8a166000908152600560209081526040808320548c1515845260039092528220805491929184908110613bcb57fe5b90600052602060002090600802019050613bf289826001015461417e90919063ffffffff16565b60018201556002810154613c0c908963ffffffff61417e16565b60028201556003810187905560048101869055600581018590556006810184905588151580613c3b5750600088115b15613c9657613c968b613c665760065473ffffffffffffffffffffffffffffffffffffffff16613c80565b60075473ffffffffffffffffffffffffffffffffffffffff165b33613c918c8c63ffffffff61489f16565b614699565b60018101546002820154604080518d8152602081018d90528082018c905260608101869052608081019390935260a083019190915260c0820189905260e0820188905261010082018790526101208201869052518c15159173ffffffffffffffffffffffffffffffffffffffff8f16917f1f61f8b18e403ca0f2ba9c3ff8bda4d01f0fc5d33ae806841d02dde927728132918190036101400190a3613d39614913565b50506001805550505050505050505050565b60075473ffffffffffffffffffffffffffffffffffffffff1681565b600654600754604080517f95277f3900000000000000000000000000000000000000000000000000000000815273ffffffffffffffffffffffffffffffffffffffff938416600482015291831660248301525160009283927f0000000000000000000000000000000000000000000000000000000000000000909116916395277f3991604480820192602092909190829003018186803b158015613e0a57600080fd5b505afa158015613e1e573d6000803e3d6000fd5b505050506040513d6020811015613e3457600080fd5b5051905060008086613e655760075460065473ffffffffffffffffffffffffffffffffffffffff9182169116613e86565b60065460075473ffffffffffffffffffffffffffffffffffffffff91821691165b915091508273ffffffffffffffffffffffffffffffffffffffff1663495e4348838389896040518563ffffffff1660e01b8152600401808573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020018473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001806020018281038252848482818152602001925080828437600081840152601f19601f8201169050808301925050509550505050505060206040518083038186803b158015613f6f57600080fd5b505afa158015613f83573d6000803e3d6000fd5b505050506040513d6020811015613f9957600080fd5b5051979650505050505050565b60036020528160005260406000208181548110613fbf57fe5b60009182526020909120600890910201805460018201546002830154600384015460048501546005860154600687015460079097015473ffffffffffffffffffffffffffffffffffffffff90961698509396509194909391929160ff1688565b3373ffffffffffffffffffffffffffffffffffffffff7f000000000000000000000000000000000000000000000000000000000000000016146140c357604080517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152600960248201527f464f5242494444454e0000000000000000000000000000000000000000000000604482015290519081900360640190fd5b600080547fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff0016911515919091179055565b60015460011461416557604080517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152600660248201527f4c4f434b45440000000000000000000000000000000000000000000000000000604482015290519081900360640190fd5b6000600155614172614913565b60018055565b3b151590565b60006141c083836040518060400160405280601e81526020017f536166654d6174683a207375627472616374696f6e206f766572666c6f770000815250615101565b90505b92915050565b6000806000806000606060006141df60846151b2565b90925090506141fa8b8b6141f58b85818f6152f7565b614b10565b5091985090965094508592506142189050898363ffffffff61417e16565b9250858a60005b60008311801561422f5750835181105b156145b15760025484828151811061424357fe5b602002602001015111156142b857604080517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152600f60248201527f4f66666572206e6f742065786973740000000000000000000000000000000000604482015290519081900360640190fd5b811515600090815260036020526040812085518690849081106142d757fe5b6020026020010151815481106142e957fe5b9060005260206000209060080201905087816003015411158015614311575080600401548811155b8061432b5750600381015415801561432b57506004810154155b801561433b575080600501544210155b801561434b575080600601544211155b156145a85760018101546000908181871061438257614370878363ffffffff61417e16565b965060008460010181905590506143a8565b600184015487925061439a908363ffffffff61417e16565b846001018190559050600096505b835473ffffffffffffffffffffffffffffffffffffffff9081166000908152600560209081526040918290205482517fed3b638c000000000000000000000000000000000000000000000000000000008152600481019190915291517f00000000000000000000000000000000000000000000000000000000000000009093169263ed3b638c926024808201939291829003018186803b15801561444b57600080fd5b505afa15801561445f573d6000803e3d6000fd5b505050506040513d602081101561447557600080fd5b505192506144af61448f8e620186a063ffffffff614f1516565b611fec856144a38d8763ffffffff614f1516565b9063ffffffff614f1516565b92506144c18c8463ffffffff61417e16565b9b506144db83611fb08f611fec8e8763ffffffff614f1516565b861560009081526003602052604090208951919450908990879081106144fd57fe5b60200260200101518154811061450f57fe5b9060005260206000209060080201935061453683856002015461489f90919063ffffffff16565b60028501819055845460408051858152602081018790528082018590526060810193909352518815159273ffffffffffffffffffffffffffffffffffffffff909216917f5a4c914458527a84b907dc0c2c69173c8d117acce38a2b58e316cdad2d3c6c22919081900360800190a35050505b5060010161421f565b5050801561462057604080517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601d60248201527f416d6f756e74206578636565647320617661696c61626c652066756e64000000604482015290519081900360640190fd5b60408051868152602081018c9052808201899052606081018590526080810188905290518c15159173ffffffffffffffffffffffffffffffffffffffff8f16917f0148b571d5049091b679cb2ccda30fb06d3aecaef641a0515a317498893d7da39181900360a00190a350505050509550959350505050565b604080518082018252601981527f7472616e7366657228616464726573732c75696e743235362900000000000000602091820152815173ffffffffffffffffffffffffffffffffffffffff85811660248301526044808301869052845180840390910181526064909201845291810180517bffffffffffffffffffffffffffffffffffffffffffffffffffffffff167fa9059cbb000000000000000000000000000000000000000000000000000000001781529251815160009460609489169392918291908083835b6020831061479f57805182527fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe09092019160209182019101614762565b6001836020036101000a0380198251168184511680821785525050505050509050019150506000604051808303816000865af19150503d8060008114614801576040519150601f19603f3d011682016040523d82523d6000602084013e614806565b606091505b5091509150818015614834575080511580614834575080806020019051602081101561483157600080fd5b50515b611b7257604080517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152600f60248201527f5452414e534645525f4641494c45440000000000000000000000000000000000604482015290519081900360640190fd5b6000828201838110156141c057604080517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601b60248201527f536166654d6174683a206164646974696f6e206f766572666c6f770000000000604482015290519081900360640190fd5b604080517f70a08231000000000000000000000000000000000000000000000000000000008152306004820152905173ffffffffffffffffffffffffffffffffffffffff7f000000000000000000000000000000000000000000000000000000000000000016916370a08231916024808301926020929190829003018186803b15801561499f57600080fd5b505afa1580156149b3573d6000803e3d6000fd5b505050506040513d60208110156149c957600080fd5b5051600955600654604080517f70a08231000000000000000000000000000000000000000000000000000000008152306004820152905173ffffffffffffffffffffffffffffffffffffffff909216916370a0823191602480820192602092909190829003018186803b158015614a3f57600080fd5b505afa158015614a53573d6000803e3d6000fd5b505050506040513d6020811015614a6957600080fd5b5051600a55600754604080517f70a08231000000000000000000000000000000000000000000000000000000008152306004820152905173ffffffffffffffffffffffffffffffffffffffff909216916370a0823191602480820192602092909190829003018186803b158015614adf57600080fd5b505afa158015614af3573d6000803e3d6000fd5b505050506040513d6020811015614b0957600080fd5b5051600b55565b600654600754604080517f95277f3900000000000000000000000000000000000000000000000000000000815273ffffffffffffffffffffffffffffffffffffffff938416600482015291831660248301525160009283928392839283927f0000000000000000000000000000000000000000000000000000000000000000909116916395277f3991604480820192602092909190829003018186803b158015614bb957600080fd5b505afa158015614bcd573d6000803e3d6000fd5b505050506040513d6020811015614be357600080fd5b5051604080517f42032856000000000000000000000000000000000000000000000000000000008152905191925073ffffffffffffffffffffffffffffffffffffffff7f00000000000000000000000000000000000000000000000000000000000000001691634203285691600480820192602092909190829003018186803b158015614c6f57600080fd5b505afa158015614c83573d6000803e3d6000fd5b505050506040513d6020811015614c9957600080fd5b50519150614cb4620186a0611fec8a8563ffffffff614f1516565b9250614cc6888463ffffffff61417e16565b97506000808273ffffffffffffffffffffffffffffffffffffffff1663d9da4fe68c614d0a5760075473ffffffffffffffffffffffffffffffffffffffff16614d24565b60065473ffffffffffffffffffffffffffffffffffffffff165b8d614d475760065473ffffffffffffffffffffffffffffffffffffffff16614d61565b60075473ffffffffffffffffffffffffffffffffffffffff165b8d60008e8e6040518763ffffffff1660e01b8152600401808773ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020018673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001858152602001848152602001806020018281038252848482818152602001925080828437600081840152601f19601f820116905080830192505050975050505050505050604080518083038186803b158015614e3857600080fd5b505afa158015614e4c573d6000803e3d6000fd5b505050506040513d6040811015614e6257600080fd5b5080516020909101519092509050614e808a8363ffffffff614f1516565b965060016008541115614ed757600760149054906101000a900460ff1615158b151514614ec057600854614ebb90889063ffffffff614f8816565b614ed4565b600854614ed490889063ffffffff614f1516565b96505b614ee7878263ffffffff614f8816565b9650614f0581611fec84670de0b6b3a764000063ffffffff614f1516565b9550505050945094509450949050565b600082614f24575060006141c3565b82820282848281614f3157fe5b04146141c0576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004018080602001828103825260218152602001806153206021913960400191505060405180910390fd5b60006141c083836040518060400160405280601a81526020017f536166654d6174683a206469766973696f6e206279207a65726f000000000000815250615278565b73ffffffffffffffffffffffffffffffffffffffff821660009081526004602052604081205481908061505e57604080517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601c60248201527f50726f7669646572206c6971756964697479206e6f7420666f756e6400000000604482015290519081900360640190fd5b831515600090815260036020526040812080548390811061507b57fe5b60009182526020822060016008909202019081018054600283018054928590559390935591955090935090506150f8856150cd5760065473ffffffffffffffffffffffffffffffffffffffff166150e7565b60075473ffffffffffffffffffffffffffffffffffffffff165b33613c91878763ffffffff61489f16565b50509250929050565b600081848411156151aa576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004018080602001828103825283818151815260200191508051906020019080838360005b8381101561516f578181015183820152602001615157565b50505050905090810190601f16801561519c5780820380516001836020036101000a031916815260200191505b509250505060405180910390fd5b505050900390565b606060006151c783604063ffffffff61489f16565b36101561523557604080517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601260248201527f496e76616c6964206f66666572206c6973740000000000000000000000000000604482015290519081900360640190fd5b60208301356020810280604086010136101561525057600080fd5b6040516020820181016040528281528160408701602083013795602091909101945092505050565b600081836152e1576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820181815283516024840152835190928392604490910191908501908083836000831561516f578181015183820152602001615157565b5060008385816152ed57fe5b0495945050505050565b60008085851115615306578182fd5b83861115615312578182fd5b505082019391909203915056fe536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f77a26469706673582212202cd544383ecb72494d542775e93dcf375c6d972bf29ecedc786d171b78792eeb64736f6c634300060b0033a26469706673582212206a7fa57f8356cd6d37c4665c4ca64b463160c61a890d216d04ddd69f7a715a5c64736f6c634300060b0033"
    };
});
define("@scom/scom-swap/contracts/oswap-openswap-contract/contracts/range/OSWAP_RangePairCreator.ts", ["require", "exports", "@ijstech/eth-contract", "@scom/scom-swap/contracts/oswap-openswap-contract/contracts/range/OSWAP_RangePairCreator.json.ts"], function (require, exports, eth_contract_26, OSWAP_RangePairCreator_json_1) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.OSWAP_RangePairCreator = void 0;
    class OSWAP_RangePairCreator extends eth_contract_26.Contract {
        constructor(wallet, address) {
            super(wallet, address, OSWAP_RangePairCreator_json_1.default.abi, OSWAP_RangePairCreator_json_1.default.bytecode);
            this.assign();
        }
        deploy(options) {
            return this.__deploy([], options);
        }
        assign() {
            let createPair_send = async (salt, options) => {
                let result = await this.send('createPair', [this.wallet.utils.stringToBytes32(salt)], options);
                return result;
            };
            let createPair_call = async (salt, options) => {
                let result = await this.call('createPair', [this.wallet.utils.stringToBytes32(salt)], options);
                return result;
            };
            let createPair_txData = async (salt, options) => {
                let result = await this.txData('createPair', [this.wallet.utils.stringToBytes32(salt)], options);
                return result;
            };
            this.createPair = Object.assign(createPair_send, {
                call: createPair_call,
                txData: createPair_txData
            });
        }
    }
    OSWAP_RangePairCreator._abi = OSWAP_RangePairCreator_json_1.default.abi;
    exports.OSWAP_RangePairCreator = OSWAP_RangePairCreator;
});
define("@scom/scom-swap/contracts/oswap-openswap-contract/contracts/range/OSWAP_VotingExecutor3.json.ts", ["require", "exports"], function (require, exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    ///<amd-module name='@scom/scom-swap/contracts/oswap-openswap-contract/contracts/range/OSWAP_VotingExecutor3.json.ts'/> 
    exports.default = {
        "abi": [
            { "inputs": [{ "internalType": "address", "name": "_governance", "type": "address" }, { "internalType": "address", "name": "_factory", "type": "address" }, { "internalType": "address", "name": "_hybridRegistry", "type": "address" }], "stateMutability": "nonpayable", "type": "constructor" },
            { "inputs": [{ "internalType": "bytes32[]", "name": "params", "type": "bytes32[]" }], "name": "execute", "outputs": [], "stateMutability": "nonpayable", "type": "function" },
            { "inputs": [], "name": "factory", "outputs": [{ "internalType": "address", "name": "", "type": "address" }], "stateMutability": "view", "type": "function" },
            { "inputs": [], "name": "governance", "outputs": [{ "internalType": "address", "name": "", "type": "address" }], "stateMutability": "view", "type": "function" },
            { "inputs": [], "name": "hybridRegistry", "outputs": [{ "internalType": "address", "name": "", "type": "address" }], "stateMutability": "view", "type": "function" }
        ],
        "bytecode": "60e060405234801561001057600080fd5b50604051610b99380380610b998339818101604052606081101561003357600080fd5b50805160208201516040909201516001600160601b0319606084811b821660a05283811b821660805282901b1660c0526001600160a01b039182169282169116610ae06100b96000398061012a52806108f5525080610412528061055a528061065d528061071452806107fa5280610a8852508061010652806101925250610ae06000f3fe608060405234801561001057600080fd5b506004361061004c5760003560e01c80635aa6e675146100515780635c10cd27146100825780638af7c6491461008a578063c45a0155146100fc575b600080fd5b610059610104565b6040805173ffffffffffffffffffffffffffffffffffffffff9092168252519081900360200190f35b610059610128565b6100fa600480360360208110156100a057600080fd5b8101906020810181356401000000008111156100bb57600080fd5b8201836020820111156100cd57600080fd5b803590602001918460208302840111640100000000831117156100ef57600080fd5b50909250905061014c565b005b610059610a86565b7f000000000000000000000000000000000000000000000000000000000000000081565b7f000000000000000000000000000000000000000000000000000000000000000081565b604080517fb15866e6000000000000000000000000000000000000000000000000000000008152336004820152905173ffffffffffffffffffffffffffffffffffffffff7f0000000000000000000000000000000000000000000000000000000000000000169163b15866e6916024808301926020929190829003018186803b1580156101d857600080fd5b505afa1580156101ec573d6000803e3d6000fd5b505050506040513d602081101561020257600080fd5b505161026f57604080517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152600f60248201527f4e6f742066726f6d20766f74696e670000000000000000000000000000000000604482015290519081900360640190fd5b600181116102de57604080517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152600e60248201527f496e76616c6964206c656e677468000000000000000000000000000000000000604482015290519081900360640190fd5b6000828260008181106102ed57fe5b90506020020135905060008383600181811061030557fe5b905060200201359050817f73657450726f746f636f6c4665650000000000000000000000000000000000001415610527577fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff830160028106156103c957604080517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152600e60248201527f496e76616c6964206c656e677468000000000000000000000000000000000000604482015290519081900360640190fd5b60028104905060608060208302604051602082018101604052848152816064602083013780935060405190506020820181016040528481528182606401602083013780925050507f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff16635021804883836040518363ffffffff1660e01b8152600401808060200180602001838103835285818151815260200191508051906020019060200280838360005b838110156104a1578181015183820152602001610489565b50505050905001838103825284818151815260200191508051906020019060200280838360005b838110156104e05781810151838201526020016104c8565b50505050905001945050505050600060405180830381600087803b15801561050757600080fd5b505af115801561051b573d6000803e3d6000fd5b50505050505050610a80565b60028314156107c757817f736574547261646546656500000000000000000000000000000000000000000014156105eb577f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff1663106030238260001c6040518263ffffffff1660e01b815260040180828152602001915050600060405180830381600087803b1580156105ce57600080fd5b505af11580156105e2573d6000803e3d6000fd5b505050506107c2565b817f73657450726f746f636f6c466565546f0000000000000000000000000000000014156106a457604080517fe0e6799f000000000000000000000000000000000000000000000000000000008152606083901c6004820152905173ffffffffffffffffffffffffffffffffffffffff7f0000000000000000000000000000000000000000000000000000000000000000169163e0e6799f91602480830192600092919082900301818387803b1580156105ce57600080fd5b817f7365744c69766500000000000000000000000000000000000000000000000000141561075b57604080517ff5ee33480000000000000000000000000000000000000000000000000000000081528215156004820152905173ffffffffffffffffffffffffffffffffffffffff7f0000000000000000000000000000000000000000000000000000000000000000169163f5ee334891602480830192600092919082900301818387803b1580156105ce57600080fd5b604080517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152600f60248201527f556e6b6e6f776e20636f6d6d616e640000000000000000000000000000000000604482015290519081900360640190fd5b610a80565b60038314156108c257817f7365744c697665466f7250616972000000000000000000000000000000000000141561075b577f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff16636883618a8260601c8686600281811061084557fe5b604080517fffffffff0000000000000000000000000000000000000000000000000000000060e088901b16815273ffffffffffffffffffffffffffffffffffffffff909516600486015260209091029290920135151560248401525051604480830192600092919082900301818387803b1580156105ce57600080fd5b6006831415610a1957817f726567697374657250726f746f636f6c00000000000000000000000000000000141561075b577f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff16639c5eda84828686600281811061093d57fe5b9050602002013560601c8787600381811061095457fe5b9050602002013560001c8888600481811061096b57fe5b9050602002013560001c8989600581811061098257fe5b9050602002013560001c6040518663ffffffff1660e01b815260040180866bffffffffffffffffffffffff191681526020018573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200184815260200183815260200182815260200195505050505050600060405180830381600087803b1580156105ce57600080fd5b604080517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601260248201527f496e76616c696420706172616d65746572730000000000000000000000000000604482015290519081900360640190fd5b50505050565b7f00000000000000000000000000000000000000000000000000000000000000008156fea26469706673582212203f29b6b568098d65d4271646bb7fd6a4c2e8c71c063bf8a4dd9e2d7693979f4a64736f6c634300060b0033"
    };
});
define("@scom/scom-swap/contracts/oswap-openswap-contract/contracts/range/OSWAP_VotingExecutor3.ts", ["require", "exports", "@ijstech/eth-contract", "@scom/scom-swap/contracts/oswap-openswap-contract/contracts/range/OSWAP_VotingExecutor3.json.ts"], function (require, exports, eth_contract_27, OSWAP_VotingExecutor3_json_1) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.OSWAP_VotingExecutor3 = void 0;
    class OSWAP_VotingExecutor3 extends eth_contract_27.Contract {
        constructor(wallet, address) {
            super(wallet, address, OSWAP_VotingExecutor3_json_1.default.abi, OSWAP_VotingExecutor3_json_1.default.bytecode);
            this.assign();
        }
        deploy(params, options) {
            return this.__deploy([params.governance, params.factory, params.hybridRegistry], options);
        }
        assign() {
            let factory_call = async (options) => {
                let result = await this.call('factory', [], options);
                return result;
            };
            this.factory = factory_call;
            let governance_call = async (options) => {
                let result = await this.call('governance', [], options);
                return result;
            };
            this.governance = governance_call;
            let hybridRegistry_call = async (options) => {
                let result = await this.call('hybridRegistry', [], options);
                return result;
            };
            this.hybridRegistry = hybridRegistry_call;
            let execute_send = async (params, options) => {
                let result = await this.send('execute', [this.wallet.utils.stringToBytes32(params)], options);
                return result;
            };
            let execute_call = async (params, options) => {
                let result = await this.call('execute', [this.wallet.utils.stringToBytes32(params)], options);
                return;
            };
            let execute_txData = async (params, options) => {
                let result = await this.txData('execute', [this.wallet.utils.stringToBytes32(params)], options);
                return result;
            };
            this.execute = Object.assign(execute_send, {
                call: execute_call,
                txData: execute_txData
            });
        }
    }
    OSWAP_VotingExecutor3._abi = OSWAP_VotingExecutor3_json_1.default.abi;
    exports.OSWAP_VotingExecutor3 = OSWAP_VotingExecutor3;
});
define("@scom/scom-swap/contracts/oswap-openswap-contract/contracts/restricted/OSWAP_ConfigStore.json.ts", ["require", "exports"], function (require, exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    ///<amd-module name='@scom/scom-swap/contracts/oswap-openswap-contract/contracts/restricted/OSWAP_ConfigStore.json.ts'/> 
    exports.default = {
        "abi": [
            { "inputs": [{ "internalType": "address", "name": "_governance", "type": "address" }], "stateMutability": "nonpayable", "type": "constructor" },
            { "anonymous": false, "inputs": [{ "indexed": true, "internalType": "bytes32", "name": "name", "type": "bytes32" }, { "indexed": false, "internalType": "bytes32", "name": "value", "type": "bytes32" }], "name": "ParamSet", "type": "event" },
            { "inputs": [{ "internalType": "bytes32", "name": "", "type": "bytes32" }], "name": "customParam", "outputs": [{ "internalType": "bytes32", "name": "", "type": "bytes32" }], "stateMutability": "view", "type": "function" },
            { "inputs": [{ "internalType": "uint256", "name": "", "type": "uint256" }], "name": "customParamNames", "outputs": [{ "internalType": "bytes32", "name": "", "type": "bytes32" }], "stateMutability": "view", "type": "function" },
            { "inputs": [{ "internalType": "bytes32", "name": "", "type": "bytes32" }], "name": "customParamNamesIdx", "outputs": [{ "internalType": "uint256", "name": "", "type": "uint256" }], "stateMutability": "view", "type": "function" },
            { "inputs": [], "name": "customParamNamesLength", "outputs": [{ "internalType": "uint256", "name": "length", "type": "uint256" }], "stateMutability": "view", "type": "function" },
            { "inputs": [], "name": "governance", "outputs": [{ "internalType": "address", "name": "", "type": "address" }], "stateMutability": "view", "type": "function" },
            { "inputs": [{ "internalType": "bytes32", "name": "paramName", "type": "bytes32" }, { "internalType": "bytes32", "name": "paramValue", "type": "bytes32" }], "name": "setCustomParam", "outputs": [], "stateMutability": "nonpayable", "type": "function" },
            { "inputs": [{ "internalType": "bytes32[]", "name": "paramName", "type": "bytes32[]" }, { "internalType": "bytes32[]", "name": "paramValue", "type": "bytes32[]" }], "name": "setMultiCustomParam", "outputs": [], "stateMutability": "nonpayable", "type": "function" }
        ],
        "bytecode": "60a060405234801561001057600080fd5b506040516106f43803806106f48339818101604052602081101561003357600080fd5b5051606081901b6001600160601b0319166080526001600160a01b031661068361007160003980610251528061033e52806103a652506106836000f3fe608060405234801561001057600080fd5b506004361061007d5760003560e01c806395a57b1c1161005b57806395a57b1c1461019a578063bc14128f146101b4578063f28ea8fe146101d1578063f4a58b19146101ee5761007d565b80635332c414146100825780635aa6e675146100a75780637e9d2c31146100d8575b600080fd5b6100a56004803603604081101561009857600080fd5b508035906020013561020b565b005b6100af61033c565b6040805173ffffffffffffffffffffffffffffffffffffffff9092168252519081900360200190f35b6100a5600480360360408110156100ee57600080fd5b81019060208101813564010000000081111561010957600080fd5b82018360208201111561011b57600080fd5b8035906020019184602083028401116401000000008311171561013d57600080fd5b91939092909160208101903564010000000081111561015b57600080fd5b82018360208201111561016d57600080fd5b8035906020019184602083028401116401000000008311171561018f57600080fd5b509092509050610360565b6101a261053b565b60408051918252519081900360200190f35b6101a2600480360360208110156101ca57600080fd5b5035610541565b6101a2600480360360208110156101e757600080fd5b5035610553565b6101a26004803603602081101561020457600080fd5b5035610565565b604080517fa3818b3b000000000000000000000000000000000000000000000000000000008152336004820152905173ffffffffffffffffffffffffffffffffffffffff7f0000000000000000000000000000000000000000000000000000000000000000169163a3818b3b916024808301926020929190829003018186803b15801561029757600080fd5b505afa1580156102ab573d6000803e3d6000fd5b505050506040513d60208110156102c157600080fd5b505161032e57604080517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152600f60248201527f4e6f742066726f6d20766f74696e670000000000000000000000000000000000604482015290519081900360640190fd5b6103388282610583565b5050565b7f000000000000000000000000000000000000000000000000000000000000000081565b604080517fa3818b3b000000000000000000000000000000000000000000000000000000008152336004820152905173ffffffffffffffffffffffffffffffffffffffff7f0000000000000000000000000000000000000000000000000000000000000000169163a3818b3b916024808301926020929190829003018186803b1580156103ec57600080fd5b505afa158015610400573d6000803e3d6000fd5b505050506040513d602081101561041657600080fd5b505161048357604080517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152600f60248201527f4e6f742066726f6d20766f74696e670000000000000000000000000000000000604482015290519081900360640190fd5b828181146104f257604080517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601060248201527f6c656e677468206e6f74206d6174636800000000000000000000000000000000604482015290519081900360640190fd5b60005b818110156105335761052b86868381811061050c57fe5b9050602002013585858481811061051f57fe5b90506020020135610583565b6001016104f5565b505050505050565b60015490565b60006020819052908152604090205481565b60026020526000908152604090205481565b6001818154811061057257fe5b600091825260209091200154905081565b600082815260208190526040902081905560015415806105ca57506000828152600260205260409020546001805484929081106105bc57fe5b906000526020600020015414155b15610613576001805460008481526002602052604081208290558183018355919091527fb10e2d527612073b26eecdfd717e6a320cf44b4afac2b0732d9fcbe2b7fa0cf6018290555b60408051828152905183917f22ea5a9dcc7fb5bc447fcb472061adc51caa147724a67a6695d49a9dff162509919081900360200190a2505056fea2646970667358221220e9474db5abfeff54aca5cd1e7175987c5f3951450c1bbeacc0dc8da4150be36364736f6c634300060b0033"
    };
});
define("@scom/scom-swap/contracts/oswap-openswap-contract/contracts/restricted/OSWAP_ConfigStore.ts", ["require", "exports", "@ijstech/eth-contract", "@scom/scom-swap/contracts/oswap-openswap-contract/contracts/restricted/OSWAP_ConfigStore.json.ts"], function (require, exports, eth_contract_28, OSWAP_ConfigStore_json_1) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.OSWAP_ConfigStore = void 0;
    class OSWAP_ConfigStore extends eth_contract_28.Contract {
        constructor(wallet, address) {
            super(wallet, address, OSWAP_ConfigStore_json_1.default.abi, OSWAP_ConfigStore_json_1.default.bytecode);
            this.assign();
        }
        deploy(governance, options) {
            return this.__deploy([governance], options);
        }
        parseParamSetEvent(receipt) {
            return this.parseEvents(receipt, "ParamSet").map(e => this.decodeParamSetEvent(e));
        }
        decodeParamSetEvent(event) {
            let result = event.data;
            return {
                name: result.name,
                value: result.value,
                _event: event
            };
        }
        assign() {
            let customParam_call = async (param1, options) => {
                let result = await this.call('customParam', [this.wallet.utils.stringToBytes32(param1)], options);
                return result;
            };
            this.customParam = customParam_call;
            let customParamNames_call = async (param1, options) => {
                let result = await this.call('customParamNames', [this.wallet.utils.toString(param1)], options);
                return result;
            };
            this.customParamNames = customParamNames_call;
            let customParamNamesIdx_call = async (param1, options) => {
                let result = await this.call('customParamNamesIdx', [this.wallet.utils.stringToBytes32(param1)], options);
                return new eth_contract_28.BigNumber(result);
            };
            this.customParamNamesIdx = customParamNamesIdx_call;
            let customParamNamesLength_call = async (options) => {
                let result = await this.call('customParamNamesLength', [], options);
                return new eth_contract_28.BigNumber(result);
            };
            this.customParamNamesLength = customParamNamesLength_call;
            let governance_call = async (options) => {
                let result = await this.call('governance', [], options);
                return result;
            };
            this.governance = governance_call;
            let setCustomParamParams = (params) => [this.wallet.utils.stringToBytes32(params.paramName), this.wallet.utils.stringToBytes32(params.paramValue)];
            let setCustomParam_send = async (params, options) => {
                let result = await this.send('setCustomParam', setCustomParamParams(params), options);
                return result;
            };
            let setCustomParam_call = async (params, options) => {
                let result = await this.call('setCustomParam', setCustomParamParams(params), options);
                return;
            };
            let setCustomParam_txData = async (params, options) => {
                let result = await this.txData('setCustomParam', setCustomParamParams(params), options);
                return result;
            };
            this.setCustomParam = Object.assign(setCustomParam_send, {
                call: setCustomParam_call,
                txData: setCustomParam_txData
            });
            let setMultiCustomParamParams = (params) => [this.wallet.utils.stringToBytes32(params.paramName), this.wallet.utils.stringToBytes32(params.paramValue)];
            let setMultiCustomParam_send = async (params, options) => {
                let result = await this.send('setMultiCustomParam', setMultiCustomParamParams(params), options);
                return result;
            };
            let setMultiCustomParam_call = async (params, options) => {
                let result = await this.call('setMultiCustomParam', setMultiCustomParamParams(params), options);
                return;
            };
            let setMultiCustomParam_txData = async (params, options) => {
                let result = await this.txData('setMultiCustomParam', setMultiCustomParamParams(params), options);
                return result;
            };
            this.setMultiCustomParam = Object.assign(setMultiCustomParam_send, {
                call: setMultiCustomParam_call,
                txData: setMultiCustomParam_txData
            });
        }
    }
    OSWAP_ConfigStore._abi = OSWAP_ConfigStore_json_1.default.abi;
    exports.OSWAP_ConfigStore = OSWAP_ConfigStore;
});
define("@scom/scom-swap/contracts/oswap-openswap-contract/contracts/restricted/OSWAP_OtcLiquidityProvider.json.ts", ["require", "exports"], function (require, exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    ///<amd-module name='@scom/scom-swap/contracts/oswap-openswap-contract/contracts/restricted/OSWAP_OtcLiquidityProvider.json.ts'/> 
    exports.default = {
        "abi": [
            { "inputs": [{ "internalType": "address", "name": "_factory", "type": "address" }, { "internalType": "address", "name": "_WETH", "type": "address" }], "stateMutability": "nonpayable", "type": "constructor" },
            { "inputs": [], "name": "WETH", "outputs": [{ "internalType": "address", "name": "", "type": "address" }], "stateMutability": "view", "type": "function" },
            { "inputs": [{ "internalType": "address", "name": "tokenA", "type": "address" }, { "internalType": "address", "name": "tokenB", "type": "address" }, { "internalType": "bool", "name": "addingTokenA", "type": "bool" }, { "internalType": "uint256", "name": "pairIndex", "type": "uint256" }, { "internalType": "uint256", "name": "offerIndex", "type": "uint256" }, { "internalType": "uint256", "name": "amountIn", "type": "uint256" }, { "internalType": "bool", "name": "allowAll", "type": "bool" }, { "internalType": "uint256", "name": "restrictedPrice", "type": "uint256" }, { "internalType": "uint256", "name": "startDate", "type": "uint256" }, { "internalType": "uint256", "name": "expire", "type": "uint256" }, { "internalType": "uint256", "name": "deadline", "type": "uint256" }], "name": "addLiquidity", "outputs": [{ "internalType": "address", "name": "pair", "type": "address" }, { "internalType": "uint256", "name": "_offerIndex", "type": "uint256" }], "stateMutability": "nonpayable", "type": "function" },
            { "inputs": [{ "internalType": "uint256[11]", "name": "param", "type": "uint256[11]" }, { "internalType": "address[]", "name": "trader", "type": "address[]" }, { "internalType": "uint256[]", "name": "allocation", "type": "uint256[]" }], "name": "addLiquidityAndTrader", "outputs": [{ "internalType": "address", "name": "pair", "type": "address" }, { "internalType": "uint256", "name": "offerIndex", "type": "uint256" }], "stateMutability": "nonpayable", "type": "function" },
            { "inputs": [{ "internalType": "address", "name": "tokenA", "type": "address" }, { "internalType": "bool", "name": "addingTokenA", "type": "bool" }, { "internalType": "uint256", "name": "pairIndex", "type": "uint256" }, { "internalType": "uint256", "name": "offerIndex", "type": "uint256" }, { "internalType": "uint256", "name": "amountAIn", "type": "uint256" }, { "internalType": "bool", "name": "allowAll", "type": "bool" }, { "internalType": "uint256", "name": "restrictedPrice", "type": "uint256" }, { "internalType": "uint256", "name": "startDate", "type": "uint256" }, { "internalType": "uint256", "name": "expire", "type": "uint256" }, { "internalType": "uint256", "name": "deadline", "type": "uint256" }], "name": "addLiquidityETH", "outputs": [{ "internalType": "address", "name": "pair", "type": "address" }, { "internalType": "uint256", "name": "_offerIndex", "type": "uint256" }], "stateMutability": "payable", "type": "function" },
            { "inputs": [{ "internalType": "uint256[10]", "name": "param", "type": "uint256[10]" }, { "internalType": "address[]", "name": "trader", "type": "address[]" }, { "internalType": "uint256[]", "name": "allocation", "type": "uint256[]" }], "name": "addLiquidityETHAndTrader", "outputs": [{ "internalType": "address", "name": "pair", "type": "address" }, { "internalType": "uint256", "name": "offerIndex", "type": "uint256" }], "stateMutability": "payable", "type": "function" },
            { "inputs": [], "name": "configStore", "outputs": [{ "internalType": "address", "name": "", "type": "address" }], "stateMutability": "view", "type": "function" },
            { "inputs": [], "name": "factory", "outputs": [{ "internalType": "address", "name": "", "type": "address" }], "stateMutability": "view", "type": "function" },
            { "inputs": [], "name": "govToken", "outputs": [{ "internalType": "address", "name": "", "type": "address" }], "stateMutability": "view", "type": "function" },
            { "inputs": [{ "internalType": "address", "name": "tokenA", "type": "address" }, { "internalType": "address", "name": "tokenB", "type": "address" }, { "internalType": "address", "name": "to", "type": "address" }, { "internalType": "uint256", "name": "pairIndex", "type": "uint256" }, { "internalType": "uint256", "name": "deadline", "type": "uint256" }], "name": "removeAllLiquidity", "outputs": [{ "internalType": "uint256", "name": "amountA", "type": "uint256" }, { "internalType": "uint256", "name": "amountB", "type": "uint256" }], "stateMutability": "nonpayable", "type": "function" },
            { "inputs": [{ "internalType": "address", "name": "tokenA", "type": "address" }, { "internalType": "address", "name": "to", "type": "address" }, { "internalType": "uint256", "name": "pairIndex", "type": "uint256" }, { "internalType": "uint256", "name": "deadline", "type": "uint256" }], "name": "removeAllLiquidityETH", "outputs": [{ "internalType": "uint256", "name": "amountToken", "type": "uint256" }, { "internalType": "uint256", "name": "amountETH", "type": "uint256" }], "stateMutability": "nonpayable", "type": "function" },
            { "inputs": [{ "internalType": "address", "name": "tokenA", "type": "address" }, { "internalType": "address", "name": "tokenB", "type": "address" }, { "internalType": "bool", "name": "removingTokenA", "type": "bool" }, { "internalType": "address", "name": "to", "type": "address" }, { "internalType": "uint256", "name": "pairIndex", "type": "uint256" }, { "internalType": "uint256", "name": "offerIndex", "type": "uint256" }, { "internalType": "uint256", "name": "amountOut", "type": "uint256" }, { "internalType": "uint256", "name": "receivingOut", "type": "uint256" }, { "internalType": "uint256", "name": "deadline", "type": "uint256" }], "name": "removeLiquidity", "outputs": [], "stateMutability": "nonpayable", "type": "function" },
            { "inputs": [{ "internalType": "address", "name": "tokenA", "type": "address" }, { "internalType": "bool", "name": "removingTokenA", "type": "bool" }, { "internalType": "address", "name": "to", "type": "address" }, { "internalType": "uint256", "name": "pairIndex", "type": "uint256" }, { "internalType": "uint256", "name": "offerIndex", "type": "uint256" }, { "internalType": "uint256", "name": "amountOut", "type": "uint256" }, { "internalType": "uint256", "name": "receivingOut", "type": "uint256" }, { "internalType": "uint256", "name": "deadline", "type": "uint256" }], "name": "removeLiquidityETH", "outputs": [], "stateMutability": "nonpayable", "type": "function" },
            { "stateMutability": "payable", "type": "receive" }
        ],
        "bytecode": "6101006040523480156200001257600080fd5b5060405162002bcb38038062002bcb833981810160405260408110156200003857600080fd5b5080516020918201516001600160601b0319606083811b821660805282901b1660a05260408051635aa6e67560e01b81529051929391926001600160a01b03851692635aa6e6759260048082019391829003018186803b1580156200009c57600080fd5b505afa158015620000b1573d6000803e3d6000fd5b505050506040513d6020811015620000c857600080fd5b50516040805163b716d46360e01b815290516001600160a01b039092169163b716d46391600480820192602092909190829003018186803b1580156200010d57600080fd5b505afa15801562000122573d6000803e3d6000fd5b505050506040513d60208110156200013957600080fd5b505160601b6001600160601b03191660c05260408051634eb4ee2760e11b815290516001600160a01b03841691639d69dc4e9160048083019260209291908290030181600087803b1580156200018e57600080fd5b505af1158015620001a3573d6000803e3d6000fd5b505050506040513d6020811015620001ba57600080fd5b50516001600160601b031960609190911b1660e052505060805160601c60a05160601c60c05160601c60e05160601c61294662000285600039806106dc5280610bf9528061136452806114b352806119fa52508061079e52806108e05280610cbb52806115755280611abc52508060e8528061097a52806109a55280610ad55280610bc15280611198528061127d52806112c252806113885280611423528061144e5280611697528061171852508061190f5280611fa9528061238d52806124eb52506129466000f3fe6080604052600436106100cb5760003560e01c806398d201a411610074578063c15ab0cf1161004e578063c15ab0cf14610564578063c45a0155146105d4578063dc2e3def146105e957610176565b806398d201a4146104e45780639d69dc4e1461053a578063ad5c46481461054f57610176565b806323510927116100a5578063235109271461032d5780634b1804ee146103f55780636d025d221461046f57610176565b806301110a5d1461017b57806305268cff1461028057806309654a9b146102be57610176565b36610176573373ffffffffffffffffffffffffffffffffffffffff7f0000000000000000000000000000000000000000000000000000000000000000161461017457604080517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152600f60248201527f5472616e73666572206661696c65640000000000000000000000000000000000604482015290519081900360640190fd5b005b600080fd5b34801561018757600080fd5b5061025060048036036101a081101561019f57600080fd5b81018161018081016101608201356401000000008111156101bf57600080fd5b8201836020820111156101d157600080fd5b803590602001918460208302840111640100000000831117156101f357600080fd5b91939092909160208101903564010000000081111561021157600080fd5b82018360208201111561022357600080fd5b8035906020019184602083028401116401000000008311171561024557600080fd5b509092509050610671565b6040805173ffffffffffffffffffffffffffffffffffffffff909316835260208301919091528051918290030190f35b34801561028c57600080fd5b506102956108de565b6040805173ffffffffffffffffffffffffffffffffffffffff9092168252519081900360200190f35b3480156102ca57600080fd5b5061017460048036036101008110156102e257600080fd5b5073ffffffffffffffffffffffffffffffffffffffff813581169160208101351515916040820135169060608101359060808101359060a08101359060c08101359060e00135610902565b610250600480360361018081101561034457600080fd5b810181610160810161014082013564010000000081111561036457600080fd5b82018360208201111561037657600080fd5b8035906020019184602083028401116401000000008311171561039857600080fd5b9193909290916020810190356401000000008111156103b657600080fd5b8201836020820111156103c857600080fd5b803590602001918460208302840111640100000000831117156103ea57600080fd5b509092509050610b77565b34801561040157600080fd5b50610174600480360361012081101561041957600080fd5b5073ffffffffffffffffffffffffffffffffffffffff81358116916020810135821691604082013515159160608101359091169060808101359060a08101359060c08101359060e0810135906101000135610df5565b34801561047b57600080fd5b506104cb600480360360a081101561049257600080fd5b5073ffffffffffffffffffffffffffffffffffffffff813581169160208101358216916040820135169060608101359060800135610fa1565b6040805192835260208301919091528051918290030190f35b3480156104f057600080fd5b506104cb6004803603608081101561050757600080fd5b5073ffffffffffffffffffffffffffffffffffffffff81358116916020810135909116906040810135906060013561111d565b34801561054657600080fd5b50610295611362565b34801561055b57600080fd5b50610295611386565b610250600480360361014081101561057b57600080fd5b5073ffffffffffffffffffffffffffffffffffffffff81351690602081013515159060408101359060608101359060808101359060a081013515159060c08101359060e0810135906101008101359061012001356113aa565b3480156105e057600080fd5b5061029561190d565b3480156105f557600080fd5b50610250600480360361016081101561060d57600080fd5b5073ffffffffffffffffffffffffffffffffffffffff8135811691602081013590911690604081013515159060608101359060808101359060a08101359060c081013515159060e08101359061010081013590610120810135906101400135611931565b60008073ffffffffffffffffffffffffffffffffffffffff873581169060208901351660408901356001146106a88383838d611c7c565b909550935073ffffffffffffffffffffffffffffffffffffffff808316908416106106d357806106d6565b80155b905060007f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff1663bc14128f7f4f7463506169722e6665655065725472616465720000000000000000000000006040518263ffffffff1660e01b81526004018082815260200191505060206040518083038186803b15801561076b57600080fd5b505afa15801561077f573d6000803e3d6000fd5b505050506040513d602081101561079557600080fd5b505190506107d47f000000000000000000000000000000000000000000000000000000000000000033886107cf858e63ffffffff611cc516565b611d41565b8573ffffffffffffffffffffffffffffffffffffffff16636322fa3283878d8d8d8d6040518763ffffffff1660e01b8152600401808715151515815260200186815260200180602001806020018381038352878782818152602001925060200280828437600083820152601f017fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe0169091018481038352858152602090810191508690860280828437600081840152601f19601f82011690508083019250505098505050505050505050600060405180830381600087803b1580156108b857600080fd5b505af11580156108cc573d6000803e3d6000fd5b50505050505050509550959350505050565b7f000000000000000000000000000000000000000000000000000000000000000081565b804281101561097257604080517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152600760248201527f4558504952454400000000000000000000000000000000000000000000000000604482015290519081900360640190fd5b600061099f8a7f000000000000000000000000000000000000000000000000000000000000000089611f11565b905060007f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff168b73ffffffffffffffffffffffffffffffffffffffff16106109fc57896109ff565b89155b604080517ffa69ce2b0000000000000000000000000000000000000000000000000000000081523360048201528215156024820152604481018a90526064810189905260848101889052905191925073ffffffffffffffffffffffffffffffffffffffff84169163fa69ce2b9160a48082019260009290919082900301818387803b158015610a8d57600080fd5b505af1158015610aa1573d6000803e3d6000fd5b505050506000808b610ab4578688610ab7565b87875b90925090508115610acd57610acd8d8c84612028565b8015610b68577f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff16632e1a7d4d826040518263ffffffff1660e01b815260040180828152602001915050600060405180830381600087803b158015610b4657600080fd5b505af1158015610b5a573d6000803e3d6000fd5b50505050610b688b82612205565b50505050505050505050505050565b60008073ffffffffffffffffffffffffffffffffffffffff8735166020880135600114610ba582828b612342565b909450925073ffffffffffffffffffffffffffffffffffffffff7f0000000000000000000000000000000000000000000000000000000000000000811690831610610bf05780610bf3565b80155b905060007f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff1663bc14128f7f4f7463506169722e6665655065725472616465720000000000000000000000006040518263ffffffff1660e01b81526004018082815260200191505060206040518083038186803b158015610c8857600080fd5b505afa158015610c9c573d6000803e3d6000fd5b505050506040513d6020811015610cb257600080fd5b50519050610cec7f000000000000000000000000000000000000000000000000000000000000000033876107cf858d63ffffffff611cc516565b8473ffffffffffffffffffffffffffffffffffffffff16636322fa3283868c8c8c8c6040518763ffffffff1660e01b8152600401808715151515815260200186815260200180602001806020018381038352878782818152602001925060200280828437600083820152601f017fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe0169091018481038352858152602090810191508690860280828437600081840152601f19601f82011690508083019250505098505050505050505050600060405180830381600087803b158015610dd057600080fd5b505af1158015610de4573d6000803e3d6000fd5b505050505050509550959350505050565b8042811015610e6557604080517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152600760248201527f4558504952454400000000000000000000000000000000000000000000000000604482015290519081900360640190fd5b6000610e728b8b89611f11565b905060008a73ffffffffffffffffffffffffffffffffffffffff168c73ffffffffffffffffffffffffffffffffffffffff1610610eaf5789610eb2565b89155b604080517ffa69ce2b0000000000000000000000000000000000000000000000000000000081523360048201528215156024820152604481018a90526064810189905260848101889052905191925073ffffffffffffffffffffffffffffffffffffffff84169163fa69ce2b9160a48082019260009290919082900301818387803b158015610f4057600080fd5b505af1158015610f54573d6000803e3d6000fd5b505050506000808b610f67578688610f6a565b87875b90925090508115610f8057610f808e8c84612028565b8015610f9157610f918d8c83612028565b5050505050505050505050505050565b600080824281101561101457604080517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152600760248201527f4558504952454400000000000000000000000000000000000000000000000000604482015290519081900360640190fd5b6000611021898988611f11565b604080517f7a6a5e1b0000000000000000000000000000000000000000000000000000000081523360048201528151929350600092839273ffffffffffffffffffffffffffffffffffffffff861692637a6a5e1b926024808301939282900301818787803b15801561109257600080fd5b505af11580156110a6573d6000803e3d6000fd5b505050506040513d60408110156110bc57600080fd5b508051602090910151909250905073ffffffffffffffffffffffffffffffffffffffff808b16908c16106110f15780826110f4565b81815b90965094506111048b8a88612028565b61110f8a8a87612028565b505050509550959350505050565b600080824281101561119057604080517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152600760248201527f4558504952454400000000000000000000000000000000000000000000000000604482015290519081900360640190fd5b60006111bd887f000000000000000000000000000000000000000000000000000000000000000088611f11565b604080517f7a6a5e1b0000000000000000000000000000000000000000000000000000000081523360048201528151929350600092839273ffffffffffffffffffffffffffffffffffffffff861692637a6a5e1b926024808301939282900301818787803b15801561122e57600080fd5b505af1158015611242573d6000803e3d6000fd5b505050506040513d604081101561125857600080fd5b508051602090910151909250905073ffffffffffffffffffffffffffffffffffffffff7f00000000000000000000000000000000000000000000000000000000000000008116908b16106112ad5780826112b0565b81815b90965094506112c08a8a88612028565b7f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff16632e1a7d4d866040518263ffffffff1660e01b815260040180828152602001915050600060405180830381600087803b15801561133357600080fd5b505af1158015611347573d6000803e3d6000fd5b505050506113558986612205565b5050505094509492505050565b7f000000000000000000000000000000000000000000000000000000000000000081565b7f000000000000000000000000000000000000000000000000000000000000000081565b600080824281101561141d57604080517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152600760248201527f4558504952454400000000000000000000000000000000000000000000000000604482015290519081900360640190fd5b6114488d7f00000000000000000000000000000000000000000000000000000000000000008d612388565b925060007f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff168e73ffffffffffffffffffffffffffffffffffffffff16106114a5578c6114a8565b8c155b90508a6116645760007f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff1663bc14128f7f4f7463506169722e6665655065724f72646572000000000000000000000000006040518263ffffffff1660e01b81526004018082815260200191505060206040518083038186803b15801561154257600080fd5b505afa158015611556573d6000803e3d6000fd5b505050506040513d602081101561156c57600080fd5b5051905061159c7f0000000000000000000000000000000000000000000000000000000000000000338784611d41565b604080517f5fd5e2fc00000000000000000000000000000000000000000000000000000000815233600482015283151560248201528b15156044820152606481018b9052608481018a905260a48101899052905173ffffffffffffffffffffffffffffffffffffffff871691635fd5e2fc9160c48083019260209291908290030181600087803b15801561162f57600080fd5b505af1158015611643573d6000803e3d6000fd5b505050506040513d602081101561165957600080fd5b50519b506116739050565b61167384828d8c8c8c8c6125ee565b8c1561169057891561168b5761168b8e33868d611d41565b611856565b60003490507f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff1663d0e30db0826040518263ffffffff1660e01b81526004016000604051808303818588803b1580156116fd57600080fd5b505af1158015611711573d6000803e3d6000fd5b50505050507f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff1663a9059cbb86836040518363ffffffff1660e01b8152600401808373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200182815260200192505050602060405180830381600087803b1580156117bd57600080fd5b505af11580156117d1573d6000803e3d6000fd5b505050506040513d60208110156117e757600080fd5b505161185457604080517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152600f60248201527f5472616e73666572206661696c65640000000000000000000000000000000000604482015290519081900360640190fd5b505b60008a11806118655750600034115b156118f957604080517f767016360000000000000000000000000000000000000000000000000000000081528215156004820152602481018d9052905173ffffffffffffffffffffffffffffffffffffffff861691637670163691604480830192600092919082900301818387803b1580156118e057600080fd5b505af11580156118f4573d6000803e3d6000fd5b505050505b8a925050509a509a98505050505050505050565b7f000000000000000000000000000000000000000000000000000000000000000081565b60008082428110156119a457604080517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152600760248201527f4558504952454400000000000000000000000000000000000000000000000000604482015290519081900360640190fd5b6119af8e8e8d612388565b925060008d73ffffffffffffffffffffffffffffffffffffffff168f73ffffffffffffffffffffffffffffffffffffffff16106119ec578c6119ef565b8c155b90508a611bab5760007f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff1663bc14128f7f4f7463506169722e6665655065724f72646572000000000000000000000000006040518263ffffffff1660e01b81526004018082815260200191505060206040518083038186803b158015611a8957600080fd5b505afa158015611a9d573d6000803e3d6000fd5b505050506040513d6020811015611ab357600080fd5b50519050611ae37f0000000000000000000000000000000000000000000000000000000000000000338784611d41565b604080517f5fd5e2fc00000000000000000000000000000000000000000000000000000000815233600482015283151560248201528b15156044820152606481018b9052608481018a905260a48101899052905173ffffffffffffffffffffffffffffffffffffffff871691635fd5e2fc9160c48083019260209291908290030181600087803b158015611b7657600080fd5b505af1158015611b8a573d6000803e3d6000fd5b505050506040513d6020811015611ba057600080fd5b50519b50611bba9050565b611bba84828d8c8c8c8c6125ee565b8915611c6757611bd88d611bce578e611bd0565b8f5b33868d611d41565b604080517f767016360000000000000000000000000000000000000000000000000000000081528215156004820152602481018d9052905173ffffffffffffffffffffffffffffffffffffffff861691637670163691604480830192600092919082900301818387803b158015611c4e57600080fd5b505af1158015611c62573d6000803e3d6000fd5b505050505b8a925050509b509b9950505050505050505050565b600080611cb88686866060870135608088013560a089013560c08a013560011460e08b01356101008c01356101208d01356101408e0135611931565b9097909650945050505050565b600082611cd457506000611d3b565b82820282848281611ce157fe5b0414611d38576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004018080602001828103825260218152602001806128a96021913960400191505060405180910390fd5b90505b92915050565b6040805173ffffffffffffffffffffffffffffffffffffffff85811660248301528481166044830152606480830185905283518084039091018152608490920183526020820180517bffffffffffffffffffffffffffffffffffffffffffffffffffffffff167f23b872dd0000000000000000000000000000000000000000000000000000000017815292518251600094606094938a169392918291908083835b60208310611e1f57805182527fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe09092019160209182019101611de2565b6001836020036101000a0380198251168184511680821785525050505050509050019150506000604051808303816000865af19150503d8060008114611e81576040519150601f19603f3d011682016040523d82523d6000602084013e611e86565b606091505b5091509150818015611eb4575080511580611eb45750808060200190516020811015611eb157600080fd5b50515b611f09576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004018080602001828103825260248152602001806128ed6024913960400191505060405180910390fd5b505050505050565b6000806000611f20868661273f565b604080517fffffffffffffffffffffffffffffffffffffffff000000000000000000000000606094851b811660208084019190915293851b81166034830152604880830199909952825180830390990189526068820183528851988401989098207fff0000000000000000000000000000000000000000000000000000000000000060888301527f000000000000000000000000000000000000000000000000000000000000000090941b9097166089880152609d8701929092527f35bb042e5b5cf7284a42c18aa8eaaaa38843b3ed693f0987a9a347554f9028c960bd808801919091528251808803909101815260dd909601909152845194019390932095945050505050565b6040805173ffffffffffffffffffffffffffffffffffffffff8481166024830152604480830185905283518084039091018152606490920183526020820180517bffffffffffffffffffffffffffffffffffffffffffffffffffffffff167fa9059cbb00000000000000000000000000000000000000000000000000000000178152925182516000946060949389169392918291908083835b602083106120fe57805182527fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe090920191602091820191016120c1565b6001836020036101000a0380198251168184511680821785525050505050509050019150506000604051808303816000865af19150503d8060008114612160576040519150601f19603f3d011682016040523d82523d6000602084013e612165565b606091505b5091509150818015612193575080511580612193575080806020019051602081101561219057600080fd5b50515b6121fe57604080517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601f60248201527f5472616e7366657248656c7065723a205452414e534645525f4641494c454400604482015290519081900360640190fd5b5050505050565b6040805160008082526020820190925273ffffffffffffffffffffffffffffffffffffffff84169083906040518082805190602001908083835b6020831061227c57805182527fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe0909201916020918201910161223f565b6001836020036101000a03801982511681845116808217855250505050505090500191505060006040518083038185875af1925050503d80600081146122de576040519150601f19603f3d011682016040523d82523d6000602084013e6122e3565b606091505b505090508061233d576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004018080602001828103825260238152602001806128ca6023913960400191505060405180910390fd5b505050565b60008061237c858560408601356060870135608088013560a089013560011460c08a013560e08b01356101008c01356101208d01356113aa565b90969095509350505050565b6000807f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff1663fd3206d286866040518363ffffffff1660e01b8152600401808373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020018273ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019250505060206040518083038186803b15801561245c57600080fd5b505afa158015612470573d6000803e3d6000fd5b505050506040513d602081101561248657600080fd5b5051905082158015612496575080155b1561256957604080517fc9c6539600000000000000000000000000000000000000000000000000000000815273ffffffffffffffffffffffffffffffffffffffff8781166004830152868116602483015291517f00000000000000000000000000000000000000000000000000000000000000009092169163c9c65396916044808201926020929091908290030181600087803b15801561253657600080fd5b505af115801561254a573d6000803e3d6000fd5b505050506040513d602081101561256057600080fd5b505191506125e6565b808311156125d857604080517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601260248201527f496e76616c6964207061697220696e6465780000000000000000000000000000604482015290519081900360640190fd5b6125e3858585611f11565b91505b509392505050565b6000806000808a73ffffffffffffffffffffffffffffffffffffffff1663db13653c8b8b6040518363ffffffff1660e01b81526004018083151515158152602001828152602001925050506101406040518083038186803b15801561265257600080fd5b505afa158015612666573d6000803e3d6000fd5b505050506040513d61014081101561267d57600080fd5b50604081015160e082015161010083015161012090930151919650945090925090508715158415151480156126b157508287145b80156126bc57508186145b80156126c757508085145b61273257604080517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601660248201527f4f7264657220706172616d73206e6f74206d6174636800000000000000000000604482015290519081900360640190fd5b5050505050505050505050565b6000808273ffffffffffffffffffffffffffffffffffffffff168473ffffffffffffffffffffffffffffffffffffffff1614156127dd57604080517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601360248201527f4944454e544943414c5f41444452455353455300000000000000000000000000604482015290519081900360640190fd5b8273ffffffffffffffffffffffffffffffffffffffff168473ffffffffffffffffffffffffffffffffffffffff161061281757828461281a565b83835b909250905073ffffffffffffffffffffffffffffffffffffffff82166128a157604080517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152600c60248201527f5a45524f5f414444524553530000000000000000000000000000000000000000604482015290519081900360640190fd5b925092905056fe536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f775472616e7366657248656c7065723a204554485f5452414e534645525f4641494c45445472616e7366657248656c7065723a205452414e534645525f46524f4d5f4641494c4544a2646970667358221220ea3a91042e14ae63c712641c4a837d4b8b0f0114473beb25d1bf8062b3ac0b2264736f6c634300060b0033"
    };
});
define("@scom/scom-swap/contracts/oswap-openswap-contract/contracts/restricted/OSWAP_OtcLiquidityProvider.ts", ["require", "exports", "@ijstech/eth-contract", "@scom/scom-swap/contracts/oswap-openswap-contract/contracts/restricted/OSWAP_OtcLiquidityProvider.json.ts"], function (require, exports, eth_contract_29, OSWAP_OtcLiquidityProvider_json_1) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.OSWAP_OtcLiquidityProvider = void 0;
    class OSWAP_OtcLiquidityProvider extends eth_contract_29.Contract {
        constructor(wallet, address) {
            super(wallet, address, OSWAP_OtcLiquidityProvider_json_1.default.abi, OSWAP_OtcLiquidityProvider_json_1.default.bytecode);
            this.assign();
        }
        deploy(params, options) {
            return this.__deploy([params.factory, params.WETH], options);
        }
        assign() {
            let WETH_call = async (options) => {
                let result = await this.call('WETH', [], options);
                return result;
            };
            this.WETH = WETH_call;
            let configStore_call = async (options) => {
                let result = await this.call('configStore', [], options);
                return result;
            };
            this.configStore = configStore_call;
            let factory_call = async (options) => {
                let result = await this.call('factory', [], options);
                return result;
            };
            this.factory = factory_call;
            let govToken_call = async (options) => {
                let result = await this.call('govToken', [], options);
                return result;
            };
            this.govToken = govToken_call;
            let addLiquidityParams = (params) => [params.tokenA, params.tokenB, params.addingTokenA, this.wallet.utils.toString(params.pairIndex), this.wallet.utils.toString(params.offerIndex), this.wallet.utils.toString(params.amountIn), params.allowAll, this.wallet.utils.toString(params.restrictedPrice), this.wallet.utils.toString(params.startDate), this.wallet.utils.toString(params.expire), this.wallet.utils.toString(params.deadline)];
            let addLiquidity_send = async (params, options) => {
                let result = await this.send('addLiquidity', addLiquidityParams(params), options);
                return result;
            };
            let addLiquidity_call = async (params, options) => {
                let result = await this.call('addLiquidity', addLiquidityParams(params), options);
                return {
                    pair: result.pair,
                    _offerIndex: new eth_contract_29.BigNumber(result._offerIndex)
                };
            };
            let addLiquidity_txData = async (params, options) => {
                let result = await this.txData('addLiquidity', addLiquidityParams(params), options);
                return result;
            };
            this.addLiquidity = Object.assign(addLiquidity_send, {
                call: addLiquidity_call,
                txData: addLiquidity_txData
            });
            let addLiquidityAndTraderParams = (params) => [this.wallet.utils.toString(params.param), params.trader, this.wallet.utils.toString(params.allocation)];
            let addLiquidityAndTrader_send = async (params, options) => {
                let result = await this.send('addLiquidityAndTrader', addLiquidityAndTraderParams(params), options);
                return result;
            };
            let addLiquidityAndTrader_call = async (params, options) => {
                let result = await this.call('addLiquidityAndTrader', addLiquidityAndTraderParams(params), options);
                return {
                    pair: result.pair,
                    offerIndex: new eth_contract_29.BigNumber(result.offerIndex)
                };
            };
            let addLiquidityAndTrader_txData = async (params, options) => {
                let result = await this.txData('addLiquidityAndTrader', addLiquidityAndTraderParams(params), options);
                return result;
            };
            this.addLiquidityAndTrader = Object.assign(addLiquidityAndTrader_send, {
                call: addLiquidityAndTrader_call,
                txData: addLiquidityAndTrader_txData
            });
            let addLiquidityETHParams = (params) => [params.tokenA, params.addingTokenA, this.wallet.utils.toString(params.pairIndex), this.wallet.utils.toString(params.offerIndex), this.wallet.utils.toString(params.amountAIn), params.allowAll, this.wallet.utils.toString(params.restrictedPrice), this.wallet.utils.toString(params.startDate), this.wallet.utils.toString(params.expire), this.wallet.utils.toString(params.deadline)];
            let addLiquidityETH_send = async (params, options) => {
                let result = await this.send('addLiquidityETH', addLiquidityETHParams(params), options);
                return result;
            };
            let addLiquidityETH_call = async (params, options) => {
                let result = await this.call('addLiquidityETH', addLiquidityETHParams(params), options);
                return {
                    pair: result.pair,
                    _offerIndex: new eth_contract_29.BigNumber(result._offerIndex)
                };
            };
            let addLiquidityETH_txData = async (params, options) => {
                let result = await this.txData('addLiquidityETH', addLiquidityETHParams(params), options);
                return result;
            };
            this.addLiquidityETH = Object.assign(addLiquidityETH_send, {
                call: addLiquidityETH_call,
                txData: addLiquidityETH_txData
            });
            let addLiquidityETHAndTraderParams = (params) => [this.wallet.utils.toString(params.param), params.trader, this.wallet.utils.toString(params.allocation)];
            let addLiquidityETHAndTrader_send = async (params, options) => {
                let result = await this.send('addLiquidityETHAndTrader', addLiquidityETHAndTraderParams(params), options);
                return result;
            };
            let addLiquidityETHAndTrader_call = async (params, options) => {
                let result = await this.call('addLiquidityETHAndTrader', addLiquidityETHAndTraderParams(params), options);
                return {
                    pair: result.pair,
                    offerIndex: new eth_contract_29.BigNumber(result.offerIndex)
                };
            };
            let addLiquidityETHAndTrader_txData = async (params, options) => {
                let result = await this.txData('addLiquidityETHAndTrader', addLiquidityETHAndTraderParams(params), options);
                return result;
            };
            this.addLiquidityETHAndTrader = Object.assign(addLiquidityETHAndTrader_send, {
                call: addLiquidityETHAndTrader_call,
                txData: addLiquidityETHAndTrader_txData
            });
            let removeAllLiquidityParams = (params) => [params.tokenA, params.tokenB, params.to, this.wallet.utils.toString(params.pairIndex), this.wallet.utils.toString(params.deadline)];
            let removeAllLiquidity_send = async (params, options) => {
                let result = await this.send('removeAllLiquidity', removeAllLiquidityParams(params), options);
                return result;
            };
            let removeAllLiquidity_call = async (params, options) => {
                let result = await this.call('removeAllLiquidity', removeAllLiquidityParams(params), options);
                return {
                    amountA: new eth_contract_29.BigNumber(result.amountA),
                    amountB: new eth_contract_29.BigNumber(result.amountB)
                };
            };
            let removeAllLiquidity_txData = async (params, options) => {
                let result = await this.txData('removeAllLiquidity', removeAllLiquidityParams(params), options);
                return result;
            };
            this.removeAllLiquidity = Object.assign(removeAllLiquidity_send, {
                call: removeAllLiquidity_call,
                txData: removeAllLiquidity_txData
            });
            let removeAllLiquidityETHParams = (params) => [params.tokenA, params.to, this.wallet.utils.toString(params.pairIndex), this.wallet.utils.toString(params.deadline)];
            let removeAllLiquidityETH_send = async (params, options) => {
                let result = await this.send('removeAllLiquidityETH', removeAllLiquidityETHParams(params), options);
                return result;
            };
            let removeAllLiquidityETH_call = async (params, options) => {
                let result = await this.call('removeAllLiquidityETH', removeAllLiquidityETHParams(params), options);
                return {
                    amountToken: new eth_contract_29.BigNumber(result.amountToken),
                    amountETH: new eth_contract_29.BigNumber(result.amountETH)
                };
            };
            let removeAllLiquidityETH_txData = async (params, options) => {
                let result = await this.txData('removeAllLiquidityETH', removeAllLiquidityETHParams(params), options);
                return result;
            };
            this.removeAllLiquidityETH = Object.assign(removeAllLiquidityETH_send, {
                call: removeAllLiquidityETH_call,
                txData: removeAllLiquidityETH_txData
            });
            let removeLiquidityParams = (params) => [params.tokenA, params.tokenB, params.removingTokenA, params.to, this.wallet.utils.toString(params.pairIndex), this.wallet.utils.toString(params.offerIndex), this.wallet.utils.toString(params.amountOut), this.wallet.utils.toString(params.receivingOut), this.wallet.utils.toString(params.deadline)];
            let removeLiquidity_send = async (params, options) => {
                let result = await this.send('removeLiquidity', removeLiquidityParams(params), options);
                return result;
            };
            let removeLiquidity_call = async (params, options) => {
                let result = await this.call('removeLiquidity', removeLiquidityParams(params), options);
                return;
            };
            let removeLiquidity_txData = async (params, options) => {
                let result = await this.txData('removeLiquidity', removeLiquidityParams(params), options);
                return result;
            };
            this.removeLiquidity = Object.assign(removeLiquidity_send, {
                call: removeLiquidity_call,
                txData: removeLiquidity_txData
            });
            let removeLiquidityETHParams = (params) => [params.tokenA, params.removingTokenA, params.to, this.wallet.utils.toString(params.pairIndex), this.wallet.utils.toString(params.offerIndex), this.wallet.utils.toString(params.amountOut), this.wallet.utils.toString(params.receivingOut), this.wallet.utils.toString(params.deadline)];
            let removeLiquidityETH_send = async (params, options) => {
                let result = await this.send('removeLiquidityETH', removeLiquidityETHParams(params), options);
                return result;
            };
            let removeLiquidityETH_call = async (params, options) => {
                let result = await this.call('removeLiquidityETH', removeLiquidityETHParams(params), options);
                return;
            };
            let removeLiquidityETH_txData = async (params, options) => {
                let result = await this.txData('removeLiquidityETH', removeLiquidityETHParams(params), options);
                return result;
            };
            this.removeLiquidityETH = Object.assign(removeLiquidityETH_send, {
                call: removeLiquidityETH_call,
                txData: removeLiquidityETH_txData
            });
        }
    }
    OSWAP_OtcLiquidityProvider._abi = OSWAP_OtcLiquidityProvider_json_1.default.abi;
    exports.OSWAP_OtcLiquidityProvider = OSWAP_OtcLiquidityProvider;
});
define("@scom/scom-swap/contracts/oswap-openswap-contract/contracts/restricted/OSWAP_OtcPairOracle.json.ts", ["require", "exports"], function (require, exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    ///<amd-module name='@scom/scom-swap/contracts/oswap-openswap-contract/contracts/restricted/OSWAP_OtcPairOracle.json.ts'/> 
    exports.default = {
        "abi": [
            { "inputs": [], "stateMutability": "nonpayable", "type": "constructor" },
            { "inputs": [], "name": "WEI", "outputs": [{ "internalType": "uint256", "name": "", "type": "uint256" }], "stateMutability": "view", "type": "function" },
            { "inputs": [], "name": "decimals", "outputs": [{ "internalType": "uint8", "name": "", "type": "uint8" }], "stateMutability": "view", "type": "function" },
            { "inputs": [{ "internalType": "address", "name": "from", "type": "address" }, { "internalType": "address", "name": "to", "type": "address" }, { "internalType": "bytes", "name": "payload", "type": "bytes" }], "name": "getLatestPrice", "outputs": [{ "internalType": "uint256", "name": "price", "type": "uint256" }], "stateMutability": "view", "type": "function" },
            { "inputs": [{ "internalType": "address", "name": "from", "type": "address" }, { "internalType": "address", "name": "to", "type": "address" }, { "internalType": "uint256", "name": "", "type": "uint256" }, { "internalType": "uint256", "name": "", "type": "uint256" }, { "internalType": "address", "name": "", "type": "address" }, { "internalType": "bytes", "name": "payload", "type": "bytes" }], "name": "getRatio", "outputs": [{ "internalType": "uint256", "name": "numerator", "type": "uint256" }, { "internalType": "uint256", "name": "denominator", "type": "uint256" }], "stateMutability": "view", "type": "function" },
            { "inputs": [{ "internalType": "address", "name": "", "type": "address" }, { "internalType": "address", "name": "", "type": "address" }], "name": "isSupported", "outputs": [{ "internalType": "bool", "name": "supported", "type": "bool" }], "stateMutability": "view", "type": "function" }
        ],
        "bytecode": "608060405234801561001057600080fd5b506104a0806100206000396000f3fe608060405234801561001057600080fd5b50600436106100675760003560e01c806388462c8d1161005057806388462c8d14610168578063b80333ed146101b7578063b845c9a2146102b057610067565b8063313ce5671461006c578063495e43481461008a575b600080fd5b6100746102b8565b6040805160ff9092168252519081900360200190f35b610156600480360360608110156100a057600080fd5b73ffffffffffffffffffffffffffffffffffffffff82358116926020810135909116918101906060810160408201356401000000008111156100e157600080fd5b8201836020820111156100f357600080fd5b8035906020019184600183028401116401000000008311171561011557600080fd5b91908080601f0160208091040260200160405190810160405280939291908181526020018383808284376000920191909152509295506102bd945050505050565b60408051918252519081900360200190f35b6101a36004803603604081101561017e57600080fd5b5073ffffffffffffffffffffffffffffffffffffffff81358116916020013516610381565b604080519115158252519081900360200190f35b610297600480360360c08110156101cd57600080fd5b73ffffffffffffffffffffffffffffffffffffffff8235811692602081013582169260408201359260608301359260808101359091169181019060c0810160a082013564010000000081111561022257600080fd5b82018360208201111561023457600080fd5b8035906020019184600183028401116401000000008311171561025657600080fd5b91908080601f016020809104026020016040519081016040528093929190818152602001838380828437600092019190915250929550610389945050505050565b6040805192835260208301919091528051918290030190f35b61015661045e565b601290565b6020810151604080517fdb13653c00000000000000000000000000000000000000000000000000000000815273ffffffffffffffffffffffffffffffffffffffff8086169087161060048201819052602482018490529151600093339390929091849163db13653c91604480830192610140929190829003018186803b15801561034657600080fd5b505afa15801561035a573d6000803e3d6000fd5b505050506040513d61014081101561037157600080fd5b5060e00151979650505050505050565b600192915050565b6020810151604080517fdb13653c00000000000000000000000000000000000000000000000000000000815273ffffffffffffffffffffffffffffffffffffffff808916908a16106004820181905260248201849052915160009384939233928591849163db13653c9160448082019261014092909190829003018186803b15801561041457600080fd5b505afa158015610428573d6000803e3d6000fd5b505050506040513d61014081101561043f57600080fd5b5060e001519c670de0b6b3a76400009c509a5050505050505050505050565b670de0b6b3a76400008156fea2646970667358221220f93f47b0ecfaa3ac9322cb1d9b489bab2c38ffb2c940132fb9e714ce0643d25864736f6c634300060b0033"
    };
});
define("@scom/scom-swap/contracts/oswap-openswap-contract/contracts/restricted/OSWAP_OtcPairOracle.ts", ["require", "exports", "@ijstech/eth-contract", "@scom/scom-swap/contracts/oswap-openswap-contract/contracts/restricted/OSWAP_OtcPairOracle.json.ts"], function (require, exports, eth_contract_30, OSWAP_OtcPairOracle_json_1) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.OSWAP_OtcPairOracle = void 0;
    class OSWAP_OtcPairOracle extends eth_contract_30.Contract {
        constructor(wallet, address) {
            super(wallet, address, OSWAP_OtcPairOracle_json_1.default.abi, OSWAP_OtcPairOracle_json_1.default.bytecode);
            this.assign();
        }
        deploy(options) {
            return this.__deploy([], options);
        }
        assign() {
            let WEI_call = async (options) => {
                let result = await this.call('WEI', [], options);
                return new eth_contract_30.BigNumber(result);
            };
            this.WEI = WEI_call;
            let decimals_call = async (options) => {
                let result = await this.call('decimals', [], options);
                return new eth_contract_30.BigNumber(result);
            };
            this.decimals = decimals_call;
            let getLatestPriceParams = (params) => [params.from, params.to, this.wallet.utils.stringToBytes(params.payload)];
            let getLatestPrice_call = async (params, options) => {
                let result = await this.call('getLatestPrice', getLatestPriceParams(params), options);
                return new eth_contract_30.BigNumber(result);
            };
            this.getLatestPrice = getLatestPrice_call;
            let getRatioParams = (params) => [params.from, params.to, this.wallet.utils.toString(params.param3), this.wallet.utils.toString(params.param4), params.param5, this.wallet.utils.stringToBytes(params.payload)];
            let getRatio_call = async (params, options) => {
                let result = await this.call('getRatio', getRatioParams(params), options);
                return {
                    numerator: new eth_contract_30.BigNumber(result.numerator),
                    denominator: new eth_contract_30.BigNumber(result.denominator)
                };
            };
            this.getRatio = getRatio_call;
            let isSupportedParams = (params) => [params.param1, params.param2];
            let isSupported_call = async (params, options) => {
                let result = await this.call('isSupported', isSupportedParams(params), options);
                return result;
            };
            this.isSupported = isSupported_call;
        }
    }
    OSWAP_OtcPairOracle._abi = OSWAP_OtcPairOracle_json_1.default.abi;
    exports.OSWAP_OtcPairOracle = OSWAP_OtcPairOracle;
});
define("@scom/scom-swap/contracts/oswap-openswap-contract/contracts/restricted/OSWAP_RestrictedFactory.json.ts", ["require", "exports"], function (require, exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    ///<amd-module name='@scom/scom-swap/contracts/oswap-openswap-contract/contracts/restricted/OSWAP_RestrictedFactory.json.ts'/> 
    exports.default = {
        "abi": [
            { "inputs": [{ "internalType": "address", "name": "_governance", "type": "address" }, { "internalType": "address", "name": "_whitelistFactory", "type": "address" }, { "internalType": "address", "name": "_pairCreator", "type": "address" }, { "internalType": "address", "name": "_configStore", "type": "address" }, { "internalType": "uint256", "name": "_tradeFee", "type": "uint256" }, { "internalType": "uint256", "name": "_protocolFee", "type": "uint256" }, { "internalType": "address", "name": "_protocolFeeTo", "type": "address" }], "stateMutability": "nonpayable", "type": "constructor" },
            { "anonymous": false, "inputs": [{ "indexed": true, "internalType": "address", "name": "token0", "type": "address" }, { "indexed": true, "internalType": "address", "name": "token1", "type": "address" }, { "indexed": false, "internalType": "address", "name": "oracle", "type": "address" }], "name": "OracleAdded", "type": "event" },
            { "anonymous": false, "inputs": [{ "indexed": true, "internalType": "address", "name": "previousOwner", "type": "address" }, { "indexed": true, "internalType": "address", "name": "newOwner", "type": "address" }], "name": "OwnershipTransferred", "type": "event" },
            { "anonymous": false, "inputs": [{ "indexed": true, "internalType": "address", "name": "token0", "type": "address" }, { "indexed": true, "internalType": "address", "name": "token1", "type": "address" }, { "indexed": false, "internalType": "address", "name": "pair", "type": "address" }, { "indexed": false, "internalType": "uint256", "name": "newPairSize", "type": "uint256" }, { "indexed": false, "internalType": "uint256", "name": "newSize", "type": "uint256" }], "name": "PairCreated", "type": "event" },
            { "anonymous": false, "inputs": [{ "indexed": true, "internalType": "address", "name": "pair", "type": "address" }], "name": "PairRestarted", "type": "event" },
            { "anonymous": false, "inputs": [{ "indexed": true, "internalType": "address", "name": "pair", "type": "address" }], "name": "PairShutdowned", "type": "event" },
            { "anonymous": false, "inputs": [{ "indexed": false, "internalType": "bytes32", "name": "name", "type": "bytes32" }, { "indexed": false, "internalType": "bytes32", "name": "value", "type": "bytes32" }], "name": "ParamSet", "type": "event" },
            { "anonymous": false, "inputs": [{ "indexed": false, "internalType": "bytes32", "name": "name", "type": "bytes32" }, { "indexed": false, "internalType": "bytes32", "name": "value1", "type": "bytes32" }, { "indexed": false, "internalType": "bytes32", "name": "value2", "type": "bytes32" }], "name": "ParamSet2", "type": "event" },
            { "anonymous": false, "inputs": [], "name": "Restarted", "type": "event" },
            { "anonymous": false, "inputs": [], "name": "Shutdowned", "type": "event" },
            { "inputs": [{ "internalType": "address", "name": "tokenA", "type": "address" }, { "internalType": "address", "name": "tokenB", "type": "address" }, { "internalType": "address", "name": "oracle", "type": "address" }], "name": "addOldOracleToNewPair", "outputs": [], "stateMutability": "nonpayable", "type": "function" },
            { "inputs": [{ "internalType": "uint256", "name": "", "type": "uint256" }], "name": "allPairs", "outputs": [{ "internalType": "address", "name": "", "type": "address" }], "stateMutability": "view", "type": "function" },
            { "inputs": [], "name": "allPairsLength", "outputs": [{ "internalType": "uint256", "name": "", "type": "uint256" }], "stateMutability": "view", "type": "function" },
            { "inputs": [{ "internalType": "address", "name": "tokenA", "type": "address" }, { "internalType": "address", "name": "tokenB", "type": "address" }], "name": "checkAndGetOracle", "outputs": [{ "internalType": "address", "name": "oracle", "type": "address" }], "stateMutability": "view", "type": "function" },
            { "inputs": [{ "internalType": "address", "name": "tokenA", "type": "address" }, { "internalType": "address", "name": "tokenB", "type": "address" }], "name": "checkAndGetOracleSwapParams", "outputs": [{ "internalType": "address", "name": "oracle_", "type": "address" }, { "internalType": "uint256", "name": "tradeFee_", "type": "uint256" }, { "internalType": "uint256", "name": "protocolFee_", "type": "uint256" }], "stateMutability": "view", "type": "function" },
            { "inputs": [], "name": "configStore", "outputs": [{ "internalType": "address", "name": "", "type": "address" }], "stateMutability": "view", "type": "function" },
            { "inputs": [{ "internalType": "address", "name": "tokenA", "type": "address" }, { "internalType": "address", "name": "tokenB", "type": "address" }], "name": "createPair", "outputs": [{ "internalType": "address", "name": "pair", "type": "address" }], "stateMutability": "nonpayable", "type": "function" },
            { "inputs": [], "name": "getCreateAddresses", "outputs": [{ "internalType": "address", "name": "_governance", "type": "address" }, { "internalType": "address", "name": "_whitelistFactory", "type": "address" }, { "internalType": "address", "name": "_restrictedLiquidityProvider", "type": "address" }, { "internalType": "address", "name": "_configStore", "type": "address" }], "stateMutability": "view", "type": "function" },
            { "inputs": [{ "internalType": "address", "name": "", "type": "address" }, { "internalType": "address", "name": "", "type": "address" }, { "internalType": "uint256", "name": "", "type": "uint256" }], "name": "getPair", "outputs": [{ "internalType": "address", "name": "", "type": "address" }], "stateMutability": "view", "type": "function" },
            { "inputs": [], "name": "governance", "outputs": [{ "internalType": "address", "name": "", "type": "address" }], "stateMutability": "view", "type": "function" },
            { "inputs": [{ "internalType": "address", "name": "_restrictedLiquidityProvider", "type": "address" }], "name": "init", "outputs": [], "stateMutability": "nonpayable", "type": "function" },
            { "inputs": [], "name": "isLive", "outputs": [{ "internalType": "bool", "name": "", "type": "bool" }], "stateMutability": "view", "type": "function" },
            { "inputs": [{ "internalType": "address", "name": "", "type": "address" }], "name": "isOracle", "outputs": [{ "internalType": "bool", "name": "", "type": "bool" }], "stateMutability": "view", "type": "function" },
            { "inputs": [{ "internalType": "address", "name": "pair", "type": "address" }], "name": "isPair", "outputs": [{ "internalType": "bool", "name": "", "type": "bool" }], "stateMutability": "view", "type": "function" },
            { "inputs": [{ "internalType": "address", "name": "", "type": "address" }, { "internalType": "address", "name": "", "type": "address" }], "name": "oracles", "outputs": [{ "internalType": "address", "name": "", "type": "address" }], "stateMutability": "view", "type": "function" },
            { "inputs": [], "name": "owner", "outputs": [{ "internalType": "address", "name": "", "type": "address" }], "stateMutability": "view", "type": "function" },
            { "inputs": [], "name": "pairCreator", "outputs": [{ "internalType": "address", "name": "", "type": "address" }], "stateMutability": "view", "type": "function" },
            { "inputs": [{ "internalType": "address", "name": "", "type": "address" }], "name": "pairIdx", "outputs": [{ "internalType": "uint256", "name": "", "type": "uint256" }], "stateMutability": "view", "type": "function" },
            { "inputs": [{ "internalType": "address", "name": "tokenA", "type": "address" }, { "internalType": "address", "name": "tokenB", "type": "address" }], "name": "pairLength", "outputs": [{ "internalType": "uint256", "name": "", "type": "uint256" }], "stateMutability": "view", "type": "function" },
            { "inputs": [], "name": "protocolFee", "outputs": [{ "internalType": "uint256", "name": "", "type": "uint256" }], "stateMutability": "view", "type": "function" },
            { "inputs": [], "name": "protocolFeeTo", "outputs": [{ "internalType": "address", "name": "", "type": "address" }], "stateMutability": "view", "type": "function" },
            { "inputs": [], "name": "renounceOwnership", "outputs": [], "stateMutability": "nonpayable", "type": "function" },
            { "inputs": [], "name": "restrictedLiquidityProvider", "outputs": [{ "internalType": "address", "name": "", "type": "address" }], "stateMutability": "view", "type": "function" },
            { "inputs": [{ "internalType": "bool", "name": "_isLive", "type": "bool" }], "name": "setLive", "outputs": [], "stateMutability": "nonpayable", "type": "function" },
            { "inputs": [{ "internalType": "address", "name": "pair", "type": "address" }, { "internalType": "bool", "name": "live", "type": "bool" }], "name": "setLiveForPair", "outputs": [], "stateMutability": "nonpayable", "type": "function" },
            { "inputs": [{ "internalType": "address", "name": "tokenA", "type": "address" }, { "internalType": "address", "name": "tokenB", "type": "address" }, { "internalType": "address", "name": "oracle", "type": "address" }], "name": "setOracle", "outputs": [], "stateMutability": "nonpayable", "type": "function" },
            { "inputs": [{ "internalType": "uint256", "name": "_protocolFee", "type": "uint256" }], "name": "setProtocolFee", "outputs": [], "stateMutability": "nonpayable", "type": "function" },
            { "inputs": [{ "internalType": "address", "name": "_protocolFeeTo", "type": "address" }], "name": "setProtocolFeeTo", "outputs": [], "stateMutability": "nonpayable", "type": "function" },
            { "inputs": [{ "internalType": "uint256", "name": "_tradeFee", "type": "uint256" }], "name": "setTradeFee", "outputs": [], "stateMutability": "nonpayable", "type": "function" },
            { "inputs": [], "name": "tradeFee", "outputs": [{ "internalType": "uint256", "name": "", "type": "uint256" }], "stateMutability": "view", "type": "function" },
            { "inputs": [{ "internalType": "address", "name": "newOwner", "type": "address" }], "name": "transferOwnership", "outputs": [], "stateMutability": "nonpayable", "type": "function" },
            { "inputs": [], "name": "whitelistFactory", "outputs": [{ "internalType": "address", "name": "", "type": "address" }], "stateMutability": "view", "type": "function" }
        ],
        "bytecode": "61010060405234801561001157600080fd5b5060405162002a2b38038062002a2b833981810160405260e081101561003657600080fd5b5080516020820151604083015160608085015160808087015160a088015160c0909801519387901b6001600160601b03191690915260008054600160ff19909116178155959694959394919390929061008d610136565b60008054610100600160a81b0319166101006001600160a01b038416908102919091178255604051929350917f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e0908290a350606095861b6001600160601b031990811660a05294861b851660c0529290941b90921660e052600191909155600291909155600380546001600160a01b0319166001600160a01b039092169190911790555061013a565b3390565b60805160601c60a05160601c60c05160601c60e05160601c612873620001b8600039806114685280611f815250806114b0528061172f525080611f485280611fc15250806107e85280610ca25280610d2c5280610e1f528061114f5280611cf65280611f2652806121955280612288528061245f52506128736000f3fe608060405234801561001057600080fd5b50600436106101f05760003560e01c806395277f391161010f578063e5d36ff6116100a2578063f060d13911610071578063f060d13914610666578063f2fde38b1461066e578063f5ee3348146106a1578063fd3206d2146106c0576101f0565b8063e5d36ff6146105da578063e5e31b13146105e2578063ea2ed2c114610615578063ef3692521461065e576101f0565b8063b8f7a665116100de578063b8f7a6651461055c578063c538b5d614610564578063c9c653961461056c578063e0e6799f146105a7576101f0565b806395277f39146104ca5780639d69dc4e14610505578063a97e5c931461050d578063b0e21e8a14610554576101f0565b806352a03c03116101875780636883618a116101565780636883618a14610462578063715018a61461049d578063787dce3d146104a55780638da5cb5b146104c2576101f0565b806352a03c03146103d4578063574f2ba31461040f5780635aa6e675146104175780635eced4801461041f576101f0565b80631e3dd18b116101c35780631e3dd18b146102fc5780631ee85fd21461034257806324bcdfbd14610387578063399762471461038f576101f0565b8063069d188f146101f55780630c1445811461026557806310603023146102ac57806319ab453c146102c9575b600080fd5b6102306004803603604081101561020b57600080fd5b5073ffffffffffffffffffffffffffffffffffffffff813581169160200135166106fb565b6040805173ffffffffffffffffffffffffffffffffffffffff9094168452602084019290925282820152519081900360600190f35b6102aa6004803603606081101561027b57600080fd5b5073ffffffffffffffffffffffffffffffffffffffff8135811691602081013582169160409091013516610792565b005b6102aa600480360360208110156102c257600080fd5b50356107a2565b6102aa600480360360208110156102df57600080fd5b503573ffffffffffffffffffffffffffffffffffffffff1661099a565b6103196004803603602081101561031257600080fd5b5035610ae6565b6040805173ffffffffffffffffffffffffffffffffffffffff9092168252519081900360200190f35b6103756004803603602081101561035857600080fd5b503573ffffffffffffffffffffffffffffffffffffffff16610b1a565b60408051918252519081900360200190f35b610375610b2c565b6102aa600480360360608110156103a557600080fd5b5073ffffffffffffffffffffffffffffffffffffffff8135811691602081013582169160409091013516610b32565b610319600480360360408110156103ea57600080fd5b5073ffffffffffffffffffffffffffffffffffffffff81358116916020013516610c67565b610375610c9a565b610319610ca0565b6103196004803603606081101561043557600080fd5b5073ffffffffffffffffffffffffffffffffffffffff813581169160208101359091169060400135610cc4565b6102aa6004803603604081101561047857600080fd5b5073ffffffffffffffffffffffffffffffffffffffff81351690602001351515610d13565b6102aa611000565b6102aa600480360360208110156104bb57600080fd5b5035611109565b610319611301565b610319600480360360408110156104e057600080fd5b5073ffffffffffffffffffffffffffffffffffffffff81358116916020013516611322565b610319611466565b6105406004803603602081101561052357600080fd5b503573ffffffffffffffffffffffffffffffffffffffff1661148a565b604080519115158252519081900360200190f35b61037561149f565b6105406114a5565b6103196114ae565b6103196004803603604081101561058257600080fd5b5073ffffffffffffffffffffffffffffffffffffffff813581169160200135166114d2565b6102aa600480360360208110156105bd57600080fd5b503573ffffffffffffffffffffffffffffffffffffffff16611cb0565b610319611e98565b610540600480360360208110156105f857600080fd5b503573ffffffffffffffffffffffffffffffffffffffff16611eb4565b61061d611f21565b6040805173ffffffffffffffffffffffffffffffffffffffff9586168152938516602085015291841683830152909216606082015290519081900360800190f35b610319611fa3565b610319611fbf565b6102aa6004803603602081101561068457600080fd5b503573ffffffffffffffffffffffffffffffffffffffff16611fe3565b6102aa600480360360208110156106b757600080fd5b5035151561217c565b610375600480360360408110156106d657600080fd5b5073ffffffffffffffffffffffffffffffffffffffff813581169160200135166123e1565b600080548190819060ff1661077157604080517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152600f60248201527f474c4f42414c4c59205041555345440000000000000000000000000000000000604482015290519081900360640190fd5b600061077d8686611322565b60015460025491955093509150509250925092565b61079d838383612419565b505050565b604080517fa3818b3b000000000000000000000000000000000000000000000000000000008152336004820152905173ffffffffffffffffffffffffffffffffffffffff7f0000000000000000000000000000000000000000000000000000000000000000169163a3818b3b916024808301926020929190829003018186803b15801561082e57600080fd5b505afa158015610842573d6000803e3d6000fd5b505050506040513d602081101561085857600080fd5b50516108c557604080517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152600f60248201527f4e6f742066726f6d20766f74696e670000000000000000000000000000000000604482015290519081900360640190fd5b620186a081111561093757604080517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601160248201527f494e56414c49445f54524144455f464545000000000000000000000000000000604482015290519081900360640190fd5b6001819055604080517f747261646546656500000000000000000000000000000000000000000000000081526020810183905281517f22ea5a9dcc7fb5bc447fcb472061adc51caa147724a67a6695d49a9dff162509929181900390910190a150565b6109a26127cb565b600054610100900473ffffffffffffffffffffffffffffffffffffffff908116911614610a3057604080517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820181905260248201527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e6572604482015290519081900360640190fd5b60075473ffffffffffffffffffffffffffffffffffffffff1615610a9f576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004018080602001828103825260278152602001806128176027913960400191505060405180910390fd5b600780547fffffffffffffffffffffffff00000000000000000000000000000000000000001673ffffffffffffffffffffffffffffffffffffffff92909216919091179055565b60068181548110610af357fe5b60009182526020909120015473ffffffffffffffffffffffffffffffffffffffff16905081565b60056020526000908152604090205481565b60015481565b73ffffffffffffffffffffffffffffffffffffffff838116600090815260086020908152604080832086851684529091529020541615610bd357604080517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601260248201527f6f7261636c6520616c7265616479207365740000000000000000000000000000604482015290519081900360640190fd5b73ffffffffffffffffffffffffffffffffffffffff811660009081526009602052604090205460ff1661079257604080517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152600f60248201527f6f7261636c65206e6f74207365656e0000000000000000000000000000000000604482015290519081900360640190fd5b600860209081526000928352604080842090915290825290205473ffffffffffffffffffffffffffffffffffffffff1681565b60065490565b7f000000000000000000000000000000000000000000000000000000000000000081565b60046020528260005260406000206020528160005260406000208181548110610ce957fe5b60009182526020909120015473ffffffffffffffffffffffffffffffffffffffff16925083915050565b3373ffffffffffffffffffffffffffffffffffffffff167f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff1663f851a4406040518163ffffffff1660e01b815260040160206040518083038186803b158015610d9057600080fd5b505afa158015610da4573d6000803e3d6000fd5b505050506040513d6020811015610dba57600080fd5b505173ffffffffffffffffffffffffffffffffffffffff161480610e925750604080517fa3818b3b000000000000000000000000000000000000000000000000000000008152336004820152905173ffffffffffffffffffffffffffffffffffffffff7f0000000000000000000000000000000000000000000000000000000000000000169163a3818b3b916024808301926020929190829003018186803b158015610e6557600080fd5b505afa158015610e79573d6000803e3d6000fd5b505050506040513d6020811015610e8f57600080fd5b50515b610ee7576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004018080602001828103825260218152602001806127f66021913960400191505060405180910390fd5b604080517ff5ee33480000000000000000000000000000000000000000000000000000000081528215156004820152905173ffffffffffffffffffffffffffffffffffffffff84169163f5ee334891602480830192600092919082900301818387803b158015610f5657600080fd5b505af1158015610f6a573d6000803e3d6000fd5b505050508015610fba5760405173ffffffffffffffffffffffffffffffffffffffff8316907fc96ebf6dcdf5c5e56ad8961009b9d49aa6f2d53d5ffe374048f1d603e3b2908a90600090a2610ffc565b60405173ffffffffffffffffffffffffffffffffffffffff8316907f7dc5983a5f99179c76b5bbff56fcf9e8373f1a7078dcef4537a5176b333c2bfe90600090a25b5050565b6110086127cb565b600054610100900473ffffffffffffffffffffffffffffffffffffffff90811691161461109657604080517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820181905260248201527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e6572604482015290519081900360640190fd5b6000805460405161010090910473ffffffffffffffffffffffffffffffffffffffff16907f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e0908390a3600080547fffffffffffffffffffffff0000000000000000000000000000000000000000ff169055565b604080517fa3818b3b000000000000000000000000000000000000000000000000000000008152336004820152905173ffffffffffffffffffffffffffffffffffffffff7f0000000000000000000000000000000000000000000000000000000000000000169163a3818b3b916024808301926020929190829003018186803b15801561119557600080fd5b505afa1580156111a9573d6000803e3d6000fd5b505050506040513d60208110156111bf57600080fd5b505161122c57604080517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152600f60248201527f4e6f742066726f6d20766f74696e670000000000000000000000000000000000604482015290519081900360640190fd5b620186a081111561129e57604080517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601460248201527f494e56414c49445f50524f544f434f4c5f464545000000000000000000000000604482015290519081900360640190fd5b6002819055604080517f70726f746f636f6c46656500000000000000000000000000000000000000000081526020810183905281517f22ea5a9dcc7fb5bc447fcb472061adc51caa147724a67a6695d49a9dff162509929181900390910190a150565b600054610100900473ffffffffffffffffffffffffffffffffffffffff1690565b60008173ffffffffffffffffffffffffffffffffffffffff168373ffffffffffffffffffffffffffffffffffffffff16106113be57604080517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601660248201527f41646472657373206d75737420626520736f7274656400000000000000000000604482015290519081900360640190fd5b5073ffffffffffffffffffffffffffffffffffffffff80831660009081526008602090815260408083208585168452909152902054168061146057604080517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152600f60248201527f4e6f206f7261636c6520666f756e640000000000000000000000000000000000604482015290519081900360640190fd5b92915050565b7f000000000000000000000000000000000000000000000000000000000000000081565b60096020526000908152604090205460ff1681565b60025481565b60005460ff1681565b7f000000000000000000000000000000000000000000000000000000000000000081565b60008173ffffffffffffffffffffffffffffffffffffffff168373ffffffffffffffffffffffffffffffffffffffff16141561156f57604080517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601360248201527f4944454e544943414c5f41444452455353455300000000000000000000000000604482015290519081900360640190fd5b6000808373ffffffffffffffffffffffffffffffffffffffff168573ffffffffffffffffffffffffffffffffffffffff16106115ac5783856115af565b84845b909250905073ffffffffffffffffffffffffffffffffffffffff821661163657604080517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152600c60248201527f5a45524f5f414444524553530000000000000000000000000000000000000000604482015290519081900360640190fd5b73ffffffffffffffffffffffffffffffffffffffff8083166000908152600460209081526040808320848616845282528083205481517fffffffffffffffffffffffffffffffffffffffff000000000000000000000000606089811b82168387015288811b909116603483015260488083019390935283518083039093018352606882018452825192850192909220608c8083018290528451808403909101815260ac909201845293810180517bffffffffffffffffffffffffffffffffffffffffffffffffffffffff167fed25a5a20000000000000000000000000000000000000000000000000000000017815292518151949692947f0000000000000000000000000000000000000000000000000000000000000000909316939192909182918083835b6020831061179957805182527fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe0909201916020918201910161175c565b6001836020036101000a038019825116818451168082178552505050505050905001915050600060405180830381855af49150503d80600081146117f9576040519150601f19603f3d011682016040523d82523d6000602084013e6117fe565b606091505b50915091508161186f57604080517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601560248201527f4661696c656420746f2063726561746520706169720000000000000000000000604482015290519081900360640190fd5b80806020019051602081101561188457600080fd5b5051604080517f485cc95500000000000000000000000000000000000000000000000000000000815273ffffffffffffffffffffffffffffffffffffffff8881166004830152878116602483015291519298509088169163485cc9559160448082019260009290919082900301818387803b15801561190257600080fd5b505af1158015611916573d6000803e3d6000fd5b50505050600460008673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020869080600181540180825580915050600190039060005260206000200160009091909190916101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff160217905550600460008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020869080600181540180825580915050600190039060005260206000200160009091909190916101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff160217905550600680549050600560008873ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020819055506006869080600181540180825580915050600190039060005260206000200160009091909190916101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055508373ffffffffffffffffffffffffffffffffffffffff168573ffffffffffffffffffffffffffffffffffffffff167f02a388add05de2fde7b4703b9f0156d3da7cb4628368d9f98e0c1671698bbfa688600460008a73ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008973ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002080549050600680549050604051808473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001838152602001828152602001935050505060405180910390a3505050505092915050565b604080517fa3818b3b000000000000000000000000000000000000000000000000000000008152336004820152905173ffffffffffffffffffffffffffffffffffffffff7f0000000000000000000000000000000000000000000000000000000000000000169163a3818b3b916024808301926020929190829003018186803b158015611d3c57600080fd5b505afa158015611d50573d6000803e3d6000fd5b505050506040513d6020811015611d6657600080fd5b5051611dd357604080517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152600f60248201527f4e6f742066726f6d20766f74696e670000000000000000000000000000000000604482015290519081900360640190fd5b600380547fffffffffffffffffffffffff00000000000000000000000000000000000000001673ffffffffffffffffffffffffffffffffffffffff83161790819055604080517f70726f746f636f6c466565546f00000000000000000000000000000000000000815260609290921b7fffffffffffffffffffffffffffffffffffffffff00000000000000000000000016602083015280517f22ea5a9dcc7fb5bc447fcb472061adc51caa147724a67a6695d49a9dff1625099281900390910190a150565b60075473ffffffffffffffffffffffffffffffffffffffff1681565b60065460009015801590611460575073ffffffffffffffffffffffffffffffffffffffff8216600081815260056020526040902054600680549091908110611ef857fe5b60009182526020909120015473ffffffffffffffffffffffffffffffffffffffff161492915050565b6007547f0000000000000000000000000000000000000000000000000000000000000000917f00000000000000000000000000000000000000000000000000000000000000009173ffffffffffffffffffffffffffffffffffffffff16907f000000000000000000000000000000000000000000000000000000000000000090565b60035473ffffffffffffffffffffffffffffffffffffffff1681565b7f000000000000000000000000000000000000000000000000000000000000000081565b611feb6127cb565b600054610100900473ffffffffffffffffffffffffffffffffffffffff90811691161461207957604080517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820181905260248201527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e6572604482015290519081900360640190fd5b73ffffffffffffffffffffffffffffffffffffffff81166120e5576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004018080602001828103825260268152602001806127d06026913960400191505060405180910390fd5b6000805460405173ffffffffffffffffffffffffffffffffffffffff8085169361010090930416917f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e091a36000805473ffffffffffffffffffffffffffffffffffffffff909216610100027fffffffffffffffffffffff0000000000000000000000000000000000000000ff909216919091179055565b3373ffffffffffffffffffffffffffffffffffffffff167f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff1663f851a4406040518163ffffffff1660e01b815260040160206040518083038186803b1580156121f957600080fd5b505afa15801561220d573d6000803e3d6000fd5b505050506040513d602081101561222357600080fd5b505173ffffffffffffffffffffffffffffffffffffffff1614806122fb5750604080517fa3818b3b000000000000000000000000000000000000000000000000000000008152336004820152905173ffffffffffffffffffffffffffffffffffffffff7f0000000000000000000000000000000000000000000000000000000000000000169163a3818b3b916024808301926020929190829003018186803b1580156122ce57600080fd5b505afa1580156122e2573d6000803e3d6000fd5b505050506040513d60208110156122f857600080fd5b50515b612350576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004018080602001828103825260218152602001806127f66021913960400191505060405180910390fd5b600080547fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff0016821515179081905560ff16156123b4576040517f71d46a587e8ae446d9442949c41f57019d17b5b4f3610941960517c9c230304790600090a16123de565b6040517fb821dc27f036017c075c6746b9e8608a15f78f90a8c03acbce13e9438ca76e1b90600090a15b50565b73ffffffffffffffffffffffffffffffffffffffff918216600090815260046020908152604080832093909416825291909152205490565b604080517fa3818b3b000000000000000000000000000000000000000000000000000000008152336004820152905173ffffffffffffffffffffffffffffffffffffffff7f0000000000000000000000000000000000000000000000000000000000000000169163a3818b3b916024808301926020929190829003018186803b1580156124a557600080fd5b505afa1580156124b9573d6000803e3d6000fd5b505050506040513d60208110156124cf57600080fd5b505161253c57604080517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152600f60248201527f4e6f742066726f6d20766f74696e670000000000000000000000000000000000604482015290519081900360640190fd5b8173ffffffffffffffffffffffffffffffffffffffff168373ffffffffffffffffffffffffffffffffffffffff16106125d657604080517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601a60248201527f496e76616c696420616464726573732070616972206f72646572000000000000604482015290519081900360640190fd5b604080517f88462c8d00000000000000000000000000000000000000000000000000000000815273ffffffffffffffffffffffffffffffffffffffff858116600483015284811660248301529151918316916388462c8d91604480820192602092909190829003018186803b15801561264e57600080fd5b505afa158015612662573d6000803e3d6000fd5b505050506040513d602081101561267857600080fd5b50516126e557604080517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601c60248201527f50616972206e6f7420737570706f72746564206279206f7261636c6500000000604482015290519081900360640190fd5b73ffffffffffffffffffffffffffffffffffffffff808416600081815260086020818152604080842088871680865290835281852080549789167fffffffffffffffffffffffff00000000000000000000000000000000000000009889168117909155938352818520868652835281852080549097168417909655828452600982529283902080547fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff00166001179055825191825291517fb4af261139740f02bdfd600c83590a7b42e71fd7798891b2b39cc7203e3de147929181900390910190a3505050565b339056fe4f776e61626c653a206e6577206f776e657220697320746865207a65726f20616464726573734e6f742066726f6d2073687574646f776e2061646d696e206f7220766f74696e67526573747269637465644c697175696469747950726f766964657220616c726561647920736574a2646970667358221220ad49e209774e1cc7f3742e83ac73b0e0ed08ca52472f6003565202df7bfe85e764736f6c634300060b0033"
    };
});
define("@scom/scom-swap/contracts/oswap-openswap-contract/contracts/restricted/OSWAP_RestrictedFactory.ts", ["require", "exports", "@ijstech/eth-contract", "@scom/scom-swap/contracts/oswap-openswap-contract/contracts/restricted/OSWAP_RestrictedFactory.json.ts"], function (require, exports, eth_contract_31, OSWAP_RestrictedFactory_json_1) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.OSWAP_RestrictedFactory = void 0;
    class OSWAP_RestrictedFactory extends eth_contract_31.Contract {
        constructor(wallet, address) {
            super(wallet, address, OSWAP_RestrictedFactory_json_1.default.abi, OSWAP_RestrictedFactory_json_1.default.bytecode);
            this.assign();
        }
        deploy(params, options) {
            return this.__deploy([params.governance, params.whitelistFactory, params.pairCreator, params.configStore, this.wallet.utils.toString(params.tradeFee), this.wallet.utils.toString(params.protocolFee), params.protocolFeeTo], options);
        }
        parseOracleAddedEvent(receipt) {
            return this.parseEvents(receipt, "OracleAdded").map(e => this.decodeOracleAddedEvent(e));
        }
        decodeOracleAddedEvent(event) {
            let result = event.data;
            return {
                token0: result.token0,
                token1: result.token1,
                oracle: result.oracle,
                _event: event
            };
        }
        parseOwnershipTransferredEvent(receipt) {
            return this.parseEvents(receipt, "OwnershipTransferred").map(e => this.decodeOwnershipTransferredEvent(e));
        }
        decodeOwnershipTransferredEvent(event) {
            let result = event.data;
            return {
                previousOwner: result.previousOwner,
                newOwner: result.newOwner,
                _event: event
            };
        }
        parsePairCreatedEvent(receipt) {
            return this.parseEvents(receipt, "PairCreated").map(e => this.decodePairCreatedEvent(e));
        }
        decodePairCreatedEvent(event) {
            let result = event.data;
            return {
                token0: result.token0,
                token1: result.token1,
                pair: result.pair,
                newPairSize: new eth_contract_31.BigNumber(result.newPairSize),
                newSize: new eth_contract_31.BigNumber(result.newSize),
                _event: event
            };
        }
        parsePairRestartedEvent(receipt) {
            return this.parseEvents(receipt, "PairRestarted").map(e => this.decodePairRestartedEvent(e));
        }
        decodePairRestartedEvent(event) {
            let result = event.data;
            return {
                pair: result.pair,
                _event: event
            };
        }
        parsePairShutdownedEvent(receipt) {
            return this.parseEvents(receipt, "PairShutdowned").map(e => this.decodePairShutdownedEvent(e));
        }
        decodePairShutdownedEvent(event) {
            let result = event.data;
            return {
                pair: result.pair,
                _event: event
            };
        }
        parseParamSetEvent(receipt) {
            return this.parseEvents(receipt, "ParamSet").map(e => this.decodeParamSetEvent(e));
        }
        decodeParamSetEvent(event) {
            let result = event.data;
            return {
                name: result.name,
                value: result.value,
                _event: event
            };
        }
        parseParamSet2Event(receipt) {
            return this.parseEvents(receipt, "ParamSet2").map(e => this.decodeParamSet2Event(e));
        }
        decodeParamSet2Event(event) {
            let result = event.data;
            return {
                name: result.name,
                value1: result.value1,
                value2: result.value2,
                _event: event
            };
        }
        parseRestartedEvent(receipt) {
            return this.parseEvents(receipt, "Restarted").map(e => this.decodeRestartedEvent(e));
        }
        decodeRestartedEvent(event) {
            let result = event.data;
            return {
                _event: event
            };
        }
        parseShutdownedEvent(receipt) {
            return this.parseEvents(receipt, "Shutdowned").map(e => this.decodeShutdownedEvent(e));
        }
        decodeShutdownedEvent(event) {
            let result = event.data;
            return {
                _event: event
            };
        }
        assign() {
            let allPairs_call = async (param1, options) => {
                let result = await this.call('allPairs', [this.wallet.utils.toString(param1)], options);
                return result;
            };
            this.allPairs = allPairs_call;
            let allPairsLength_call = async (options) => {
                let result = await this.call('allPairsLength', [], options);
                return new eth_contract_31.BigNumber(result);
            };
            this.allPairsLength = allPairsLength_call;
            let checkAndGetOracleParams = (params) => [params.tokenA, params.tokenB];
            let checkAndGetOracle_call = async (params, options) => {
                let result = await this.call('checkAndGetOracle', checkAndGetOracleParams(params), options);
                return result;
            };
            this.checkAndGetOracle = checkAndGetOracle_call;
            let checkAndGetOracleSwapParamsParams = (params) => [params.tokenA, params.tokenB];
            let checkAndGetOracleSwapParams_call = async (params, options) => {
                let result = await this.call('checkAndGetOracleSwapParams', checkAndGetOracleSwapParamsParams(params), options);
                return {
                    oracle_: result.oracle_,
                    tradeFee_: new eth_contract_31.BigNumber(result.tradeFee_),
                    protocolFee_: new eth_contract_31.BigNumber(result.protocolFee_)
                };
            };
            this.checkAndGetOracleSwapParams = checkAndGetOracleSwapParams_call;
            let configStore_call = async (options) => {
                let result = await this.call('configStore', [], options);
                return result;
            };
            this.configStore = configStore_call;
            let getCreateAddresses_call = async (options) => {
                let result = await this.call('getCreateAddresses', [], options);
                return {
                    _governance: result._governance,
                    _whitelistFactory: result._whitelistFactory,
                    _restrictedLiquidityProvider: result._restrictedLiquidityProvider,
                    _configStore: result._configStore
                };
            };
            this.getCreateAddresses = getCreateAddresses_call;
            let getPairParams = (params) => [params.param1, params.param2, this.wallet.utils.toString(params.param3)];
            let getPair_call = async (params, options) => {
                let result = await this.call('getPair', getPairParams(params), options);
                return result;
            };
            this.getPair = getPair_call;
            let governance_call = async (options) => {
                let result = await this.call('governance', [], options);
                return result;
            };
            this.governance = governance_call;
            let isLive_call = async (options) => {
                let result = await this.call('isLive', [], options);
                return result;
            };
            this.isLive = isLive_call;
            let isOracle_call = async (param1, options) => {
                let result = await this.call('isOracle', [param1], options);
                return result;
            };
            this.isOracle = isOracle_call;
            let isPair_call = async (pair, options) => {
                let result = await this.call('isPair', [pair], options);
                return result;
            };
            this.isPair = isPair_call;
            let oraclesParams = (params) => [params.param1, params.param2];
            let oracles_call = async (params, options) => {
                let result = await this.call('oracles', oraclesParams(params), options);
                return result;
            };
            this.oracles = oracles_call;
            let owner_call = async (options) => {
                let result = await this.call('owner', [], options);
                return result;
            };
            this.owner = owner_call;
            let pairCreator_call = async (options) => {
                let result = await this.call('pairCreator', [], options);
                return result;
            };
            this.pairCreator = pairCreator_call;
            let pairIdx_call = async (param1, options) => {
                let result = await this.call('pairIdx', [param1], options);
                return new eth_contract_31.BigNumber(result);
            };
            this.pairIdx = pairIdx_call;
            let pairLengthParams = (params) => [params.tokenA, params.tokenB];
            let pairLength_call = async (params, options) => {
                let result = await this.call('pairLength', pairLengthParams(params), options);
                return new eth_contract_31.BigNumber(result);
            };
            this.pairLength = pairLength_call;
            let protocolFee_call = async (options) => {
                let result = await this.call('protocolFee', [], options);
                return new eth_contract_31.BigNumber(result);
            };
            this.protocolFee = protocolFee_call;
            let protocolFeeTo_call = async (options) => {
                let result = await this.call('protocolFeeTo', [], options);
                return result;
            };
            this.protocolFeeTo = protocolFeeTo_call;
            let restrictedLiquidityProvider_call = async (options) => {
                let result = await this.call('restrictedLiquidityProvider', [], options);
                return result;
            };
            this.restrictedLiquidityProvider = restrictedLiquidityProvider_call;
            let tradeFee_call = async (options) => {
                let result = await this.call('tradeFee', [], options);
                return new eth_contract_31.BigNumber(result);
            };
            this.tradeFee = tradeFee_call;
            let whitelistFactory_call = async (options) => {
                let result = await this.call('whitelistFactory', [], options);
                return result;
            };
            this.whitelistFactory = whitelistFactory_call;
            let addOldOracleToNewPairParams = (params) => [params.tokenA, params.tokenB, params.oracle];
            let addOldOracleToNewPair_send = async (params, options) => {
                let result = await this.send('addOldOracleToNewPair', addOldOracleToNewPairParams(params), options);
                return result;
            };
            let addOldOracleToNewPair_call = async (params, options) => {
                let result = await this.call('addOldOracleToNewPair', addOldOracleToNewPairParams(params), options);
                return;
            };
            let addOldOracleToNewPair_txData = async (params, options) => {
                let result = await this.txData('addOldOracleToNewPair', addOldOracleToNewPairParams(params), options);
                return result;
            };
            this.addOldOracleToNewPair = Object.assign(addOldOracleToNewPair_send, {
                call: addOldOracleToNewPair_call,
                txData: addOldOracleToNewPair_txData
            });
            let createPairParams = (params) => [params.tokenA, params.tokenB];
            let createPair_send = async (params, options) => {
                let result = await this.send('createPair', createPairParams(params), options);
                return result;
            };
            let createPair_call = async (params, options) => {
                let result = await this.call('createPair', createPairParams(params), options);
                return result;
            };
            let createPair_txData = async (params, options) => {
                let result = await this.txData('createPair', createPairParams(params), options);
                return result;
            };
            this.createPair = Object.assign(createPair_send, {
                call: createPair_call,
                txData: createPair_txData
            });
            let init_send = async (restrictedLiquidityProvider, options) => {
                let result = await this.send('init', [restrictedLiquidityProvider], options);
                return result;
            };
            let init_call = async (restrictedLiquidityProvider, options) => {
                let result = await this.call('init', [restrictedLiquidityProvider], options);
                return;
            };
            let init_txData = async (restrictedLiquidityProvider, options) => {
                let result = await this.txData('init', [restrictedLiquidityProvider], options);
                return result;
            };
            this.init = Object.assign(init_send, {
                call: init_call,
                txData: init_txData
            });
            let renounceOwnership_send = async (options) => {
                let result = await this.send('renounceOwnership', [], options);
                return result;
            };
            let renounceOwnership_call = async (options) => {
                let result = await this.call('renounceOwnership', [], options);
                return;
            };
            let renounceOwnership_txData = async (options) => {
                let result = await this.txData('renounceOwnership', [], options);
                return result;
            };
            this.renounceOwnership = Object.assign(renounceOwnership_send, {
                call: renounceOwnership_call,
                txData: renounceOwnership_txData
            });
            let setLive_send = async (isLive, options) => {
                let result = await this.send('setLive', [isLive], options);
                return result;
            };
            let setLive_call = async (isLive, options) => {
                let result = await this.call('setLive', [isLive], options);
                return;
            };
            let setLive_txData = async (isLive, options) => {
                let result = await this.txData('setLive', [isLive], options);
                return result;
            };
            this.setLive = Object.assign(setLive_send, {
                call: setLive_call,
                txData: setLive_txData
            });
            let setLiveForPairParams = (params) => [params.pair, params.live];
            let setLiveForPair_send = async (params, options) => {
                let result = await this.send('setLiveForPair', setLiveForPairParams(params), options);
                return result;
            };
            let setLiveForPair_call = async (params, options) => {
                let result = await this.call('setLiveForPair', setLiveForPairParams(params), options);
                return;
            };
            let setLiveForPair_txData = async (params, options) => {
                let result = await this.txData('setLiveForPair', setLiveForPairParams(params), options);
                return result;
            };
            this.setLiveForPair = Object.assign(setLiveForPair_send, {
                call: setLiveForPair_call,
                txData: setLiveForPair_txData
            });
            let setOracleParams = (params) => [params.tokenA, params.tokenB, params.oracle];
            let setOracle_send = async (params, options) => {
                let result = await this.send('setOracle', setOracleParams(params), options);
                return result;
            };
            let setOracle_call = async (params, options) => {
                let result = await this.call('setOracle', setOracleParams(params), options);
                return;
            };
            let setOracle_txData = async (params, options) => {
                let result = await this.txData('setOracle', setOracleParams(params), options);
                return result;
            };
            this.setOracle = Object.assign(setOracle_send, {
                call: setOracle_call,
                txData: setOracle_txData
            });
            let setProtocolFee_send = async (protocolFee, options) => {
                let result = await this.send('setProtocolFee', [this.wallet.utils.toString(protocolFee)], options);
                return result;
            };
            let setProtocolFee_call = async (protocolFee, options) => {
                let result = await this.call('setProtocolFee', [this.wallet.utils.toString(protocolFee)], options);
                return;
            };
            let setProtocolFee_txData = async (protocolFee, options) => {
                let result = await this.txData('setProtocolFee', [this.wallet.utils.toString(protocolFee)], options);
                return result;
            };
            this.setProtocolFee = Object.assign(setProtocolFee_send, {
                call: setProtocolFee_call,
                txData: setProtocolFee_txData
            });
            let setProtocolFeeTo_send = async (protocolFeeTo, options) => {
                let result = await this.send('setProtocolFeeTo', [protocolFeeTo], options);
                return result;
            };
            let setProtocolFeeTo_call = async (protocolFeeTo, options) => {
                let result = await this.call('setProtocolFeeTo', [protocolFeeTo], options);
                return;
            };
            let setProtocolFeeTo_txData = async (protocolFeeTo, options) => {
                let result = await this.txData('setProtocolFeeTo', [protocolFeeTo], options);
                return result;
            };
            this.setProtocolFeeTo = Object.assign(setProtocolFeeTo_send, {
                call: setProtocolFeeTo_call,
                txData: setProtocolFeeTo_txData
            });
            let setTradeFee_send = async (tradeFee, options) => {
                let result = await this.send('setTradeFee', [this.wallet.utils.toString(tradeFee)], options);
                return result;
            };
            let setTradeFee_call = async (tradeFee, options) => {
                let result = await this.call('setTradeFee', [this.wallet.utils.toString(tradeFee)], options);
                return;
            };
            let setTradeFee_txData = async (tradeFee, options) => {
                let result = await this.txData('setTradeFee', [this.wallet.utils.toString(tradeFee)], options);
                return result;
            };
            this.setTradeFee = Object.assign(setTradeFee_send, {
                call: setTradeFee_call,
                txData: setTradeFee_txData
            });
            let transferOwnership_send = async (newOwner, options) => {
                let result = await this.send('transferOwnership', [newOwner], options);
                return result;
            };
            let transferOwnership_call = async (newOwner, options) => {
                let result = await this.call('transferOwnership', [newOwner], options);
                return;
            };
            let transferOwnership_txData = async (newOwner, options) => {
                let result = await this.txData('transferOwnership', [newOwner], options);
                return result;
            };
            this.transferOwnership = Object.assign(transferOwnership_send, {
                call: transferOwnership_call,
                txData: transferOwnership_txData
            });
        }
    }
    OSWAP_RestrictedFactory._abi = OSWAP_RestrictedFactory_json_1.default.abi;
    exports.OSWAP_RestrictedFactory = OSWAP_RestrictedFactory;
});
define("@scom/scom-swap/contracts/oswap-openswap-contract/contracts/restricted/OSWAP_RestrictedLiquidityProvider1.json.ts", ["require", "exports"], function (require, exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    ///<amd-module name='@scom/scom-swap/contracts/oswap-openswap-contract/contracts/restricted/OSWAP_RestrictedLiquidityProvider1.json.ts'/> 
    exports.default = {
        "abi": [
            { "inputs": [{ "internalType": "address", "name": "_factory", "type": "address" }, { "internalType": "address", "name": "_WETH", "type": "address" }], "stateMutability": "nonpayable", "type": "constructor" },
            { "inputs": [], "name": "WETH", "outputs": [{ "internalType": "address", "name": "", "type": "address" }], "stateMutability": "view", "type": "function" },
            { "inputs": [{ "internalType": "address", "name": "tokenA", "type": "address" }, { "internalType": "address", "name": "tokenB", "type": "address" }, { "internalType": "bool", "name": "addingTokenA", "type": "bool" }, { "internalType": "uint256", "name": "pairIndex", "type": "uint256" }, { "internalType": "uint256", "name": "offerIndex", "type": "uint256" }, { "internalType": "uint256", "name": "amountIn", "type": "uint256" }, { "internalType": "bool", "name": "allowAll", "type": "bool" }, { "internalType": "uint256", "name": "restrictedPrice", "type": "uint256" }, { "internalType": "uint256", "name": "startDate", "type": "uint256" }, { "internalType": "uint256", "name": "expire", "type": "uint256" }, { "internalType": "uint256", "name": "deadline", "type": "uint256" }], "name": "addLiquidity", "outputs": [{ "internalType": "address", "name": "pair", "type": "address" }, { "internalType": "uint256", "name": "_offerIndex", "type": "uint256" }], "stateMutability": "nonpayable", "type": "function" },
            { "inputs": [{ "internalType": "uint256[11]", "name": "param", "type": "uint256[11]" }, { "internalType": "address[]", "name": "trader", "type": "address[]" }, { "internalType": "uint256[]", "name": "allocation", "type": "uint256[]" }], "name": "addLiquidityAndTrader", "outputs": [{ "internalType": "address", "name": "pair", "type": "address" }, { "internalType": "uint256", "name": "offerIndex", "type": "uint256" }], "stateMutability": "nonpayable", "type": "function" },
            { "inputs": [{ "internalType": "address", "name": "tokenA", "type": "address" }, { "internalType": "bool", "name": "addingTokenA", "type": "bool" }, { "internalType": "uint256", "name": "pairIndex", "type": "uint256" }, { "internalType": "uint256", "name": "offerIndex", "type": "uint256" }, { "internalType": "uint256", "name": "amountAIn", "type": "uint256" }, { "internalType": "bool", "name": "allowAll", "type": "bool" }, { "internalType": "uint256", "name": "restrictedPrice", "type": "uint256" }, { "internalType": "uint256", "name": "startDate", "type": "uint256" }, { "internalType": "uint256", "name": "expire", "type": "uint256" }, { "internalType": "uint256", "name": "deadline", "type": "uint256" }], "name": "addLiquidityETH", "outputs": [{ "internalType": "address", "name": "pair", "type": "address" }, { "internalType": "uint256", "name": "_offerIndex", "type": "uint256" }], "stateMutability": "payable", "type": "function" },
            { "inputs": [{ "internalType": "uint256[10]", "name": "param", "type": "uint256[10]" }, { "internalType": "address[]", "name": "trader", "type": "address[]" }, { "internalType": "uint256[]", "name": "allocation", "type": "uint256[]" }], "name": "addLiquidityETHAndTrader", "outputs": [{ "internalType": "address", "name": "pair", "type": "address" }, { "internalType": "uint256", "name": "offerIndex", "type": "uint256" }], "stateMutability": "payable", "type": "function" },
            { "inputs": [], "name": "configStore", "outputs": [{ "internalType": "address", "name": "", "type": "address" }], "stateMutability": "view", "type": "function" },
            { "inputs": [], "name": "factory", "outputs": [{ "internalType": "address", "name": "", "type": "address" }], "stateMutability": "view", "type": "function" },
            { "inputs": [], "name": "govToken", "outputs": [{ "internalType": "address", "name": "", "type": "address" }], "stateMutability": "view", "type": "function" },
            { "inputs": [{ "internalType": "address", "name": "tokenA", "type": "address" }, { "internalType": "address", "name": "tokenB", "type": "address" }, { "internalType": "address", "name": "to", "type": "address" }, { "internalType": "uint256", "name": "pairIndex", "type": "uint256" }, { "internalType": "uint256", "name": "deadline", "type": "uint256" }], "name": "removeAllLiquidity", "outputs": [{ "internalType": "uint256", "name": "amountA", "type": "uint256" }, { "internalType": "uint256", "name": "amountB", "type": "uint256" }], "stateMutability": "nonpayable", "type": "function" },
            { "inputs": [{ "internalType": "address", "name": "tokenA", "type": "address" }, { "internalType": "address", "name": "to", "type": "address" }, { "internalType": "uint256", "name": "pairIndex", "type": "uint256" }, { "internalType": "uint256", "name": "deadline", "type": "uint256" }], "name": "removeAllLiquidityETH", "outputs": [{ "internalType": "uint256", "name": "amountToken", "type": "uint256" }, { "internalType": "uint256", "name": "amountETH", "type": "uint256" }], "stateMutability": "nonpayable", "type": "function" },
            { "inputs": [{ "internalType": "address", "name": "tokenA", "type": "address" }, { "internalType": "address", "name": "tokenB", "type": "address" }, { "internalType": "bool", "name": "removingTokenA", "type": "bool" }, { "internalType": "address", "name": "to", "type": "address" }, { "internalType": "uint256", "name": "pairIndex", "type": "uint256" }, { "internalType": "uint256", "name": "offerIndex", "type": "uint256" }, { "internalType": "uint256", "name": "amountOut", "type": "uint256" }, { "internalType": "uint256", "name": "receivingOut", "type": "uint256" }, { "internalType": "uint256", "name": "deadline", "type": "uint256" }], "name": "removeLiquidity", "outputs": [], "stateMutability": "nonpayable", "type": "function" },
            { "inputs": [{ "internalType": "address", "name": "tokenA", "type": "address" }, { "internalType": "bool", "name": "removingTokenA", "type": "bool" }, { "internalType": "address", "name": "to", "type": "address" }, { "internalType": "uint256", "name": "pairIndex", "type": "uint256" }, { "internalType": "uint256", "name": "offerIndex", "type": "uint256" }, { "internalType": "uint256", "name": "amountOut", "type": "uint256" }, { "internalType": "uint256", "name": "receivingOut", "type": "uint256" }, { "internalType": "uint256", "name": "deadline", "type": "uint256" }], "name": "removeLiquidityETH", "outputs": [], "stateMutability": "nonpayable", "type": "function" },
            { "stateMutability": "payable", "type": "receive" }
        ],
        "bytecode": "6101006040523480156200001257600080fd5b5060405162002bc938038062002bc9833981810160405260408110156200003857600080fd5b5080516020918201516001600160601b0319606083811b821660805282901b1660a05260408051635aa6e67560e01b81529051929391926001600160a01b03851692635aa6e6759260048082019391829003018186803b1580156200009c57600080fd5b505afa158015620000b1573d6000803e3d6000fd5b505050506040513d6020811015620000c857600080fd5b50516040805163b716d46360e01b815290516001600160a01b039092169163b716d46391600480820192602092909190829003018186803b1580156200010d57600080fd5b505afa15801562000122573d6000803e3d6000fd5b505050506040513d60208110156200013957600080fd5b505160601b6001600160601b03191660c05260408051634eb4ee2760e11b815290516001600160a01b03841691639d69dc4e9160048083019260209291908290030181600087803b1580156200018e57600080fd5b505af1158015620001a3573d6000803e3d6000fd5b505050506040513d6020811015620001ba57600080fd5b50516001600160601b031960609190911b1660e052505060805160601c60a05160601c60c05160601c60e05160601c61294462000285600039806106dc5280610bf9528061136452806114b352806119fa52508061079e52806108e05280610cbb52806115755280611abc52508060e8528061097a52806109a55280610ad55280610bc15280611198528061127d52806112c252806113885280611423528061144e5280611697528061171852508061190f5280611fa9528061238d52806124eb52506129446000f3fe6080604052600436106100cb5760003560e01c806398d201a411610074578063c15ab0cf1161004e578063c15ab0cf14610564578063c45a0155146105d4578063dc2e3def146105e957610176565b806398d201a4146104e45780639d69dc4e1461053a578063ad5c46481461054f57610176565b806323510927116100a5578063235109271461032d5780634b1804ee146103f55780636d025d221461046f57610176565b806301110a5d1461017b57806305268cff1461028057806309654a9b146102be57610176565b36610176573373ffffffffffffffffffffffffffffffffffffffff7f0000000000000000000000000000000000000000000000000000000000000000161461017457604080517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152600f60248201527f5472616e73666572206661696c65640000000000000000000000000000000000604482015290519081900360640190fd5b005b600080fd5b34801561018757600080fd5b5061025060048036036101a081101561019f57600080fd5b81018161018081016101608201356401000000008111156101bf57600080fd5b8201836020820111156101d157600080fd5b803590602001918460208302840111640100000000831117156101f357600080fd5b91939092909160208101903564010000000081111561021157600080fd5b82018360208201111561022357600080fd5b8035906020019184602083028401116401000000008311171561024557600080fd5b509092509050610671565b6040805173ffffffffffffffffffffffffffffffffffffffff909316835260208301919091528051918290030190f35b34801561028c57600080fd5b506102956108de565b6040805173ffffffffffffffffffffffffffffffffffffffff9092168252519081900360200190f35b3480156102ca57600080fd5b5061017460048036036101008110156102e257600080fd5b5073ffffffffffffffffffffffffffffffffffffffff813581169160208101351515916040820135169060608101359060808101359060a08101359060c08101359060e00135610902565b610250600480360361018081101561034457600080fd5b810181610160810161014082013564010000000081111561036457600080fd5b82018360208201111561037657600080fd5b8035906020019184602083028401116401000000008311171561039857600080fd5b9193909290916020810190356401000000008111156103b657600080fd5b8201836020820111156103c857600080fd5b803590602001918460208302840111640100000000831117156103ea57600080fd5b509092509050610b77565b34801561040157600080fd5b50610174600480360361012081101561041957600080fd5b5073ffffffffffffffffffffffffffffffffffffffff81358116916020810135821691604082013515159160608101359091169060808101359060a08101359060c08101359060e0810135906101000135610df5565b34801561047b57600080fd5b506104cb600480360360a081101561049257600080fd5b5073ffffffffffffffffffffffffffffffffffffffff813581169160208101358216916040820135169060608101359060800135610fa1565b6040805192835260208301919091528051918290030190f35b3480156104f057600080fd5b506104cb6004803603608081101561050757600080fd5b5073ffffffffffffffffffffffffffffffffffffffff81358116916020810135909116906040810135906060013561111d565b34801561054657600080fd5b50610295611362565b34801561055b57600080fd5b50610295611386565b610250600480360361014081101561057b57600080fd5b5073ffffffffffffffffffffffffffffffffffffffff81351690602081013515159060408101359060608101359060808101359060a081013515159060c08101359060e0810135906101008101359061012001356113aa565b3480156105e057600080fd5b5061029561190d565b3480156105f557600080fd5b50610250600480360361016081101561060d57600080fd5b5073ffffffffffffffffffffffffffffffffffffffff8135811691602081013590911690604081013515159060608101359060808101359060a08101359060c081013515159060e08101359061010081013590610120810135906101400135611931565b60008073ffffffffffffffffffffffffffffffffffffffff873581169060208901351660408901356001146106a88383838d611c7c565b909550935073ffffffffffffffffffffffffffffffffffffffff808316908416106106d357806106d6565b80155b905060007f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff1663bc14128f7f52657374726963746564506169722e66656550657254726164657200000000006040518263ffffffff1660e01b81526004018082815260200191505060206040518083038186803b15801561076b57600080fd5b505afa15801561077f573d6000803e3d6000fd5b505050506040513d602081101561079557600080fd5b505190506107d47f000000000000000000000000000000000000000000000000000000000000000033886107cf858e63ffffffff611cc516565b611d41565b8573ffffffffffffffffffffffffffffffffffffffff16636322fa3283878d8d8d8d6040518763ffffffff1660e01b8152600401808715151515815260200186815260200180602001806020018381038352878782818152602001925060200280828437600083820152601f017fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe0169091018481038352858152602090810191508690860280828437600081840152601f19601f82011690508083019250505098505050505050505050600060405180830381600087803b1580156108b857600080fd5b505af11580156108cc573d6000803e3d6000fd5b50505050505050509550959350505050565b7f000000000000000000000000000000000000000000000000000000000000000081565b804281101561097257604080517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152600760248201527f4558504952454400000000000000000000000000000000000000000000000000604482015290519081900360640190fd5b600061099f8a7f000000000000000000000000000000000000000000000000000000000000000089611f11565b905060007f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff168b73ffffffffffffffffffffffffffffffffffffffff16106109fc57896109ff565b89155b604080517ffa69ce2b0000000000000000000000000000000000000000000000000000000081523360048201528215156024820152604481018a90526064810189905260848101889052905191925073ffffffffffffffffffffffffffffffffffffffff84169163fa69ce2b9160a48082019260009290919082900301818387803b158015610a8d57600080fd5b505af1158015610aa1573d6000803e3d6000fd5b505050506000808b610ab4578688610ab7565b87875b90925090508115610acd57610acd8d8c84612028565b8015610b68577f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff16632e1a7d4d826040518263ffffffff1660e01b815260040180828152602001915050600060405180830381600087803b158015610b4657600080fd5b505af1158015610b5a573d6000803e3d6000fd5b50505050610b688b82612205565b50505050505050505050505050565b60008073ffffffffffffffffffffffffffffffffffffffff8735166020880135600114610ba582828b612342565b909450925073ffffffffffffffffffffffffffffffffffffffff7f0000000000000000000000000000000000000000000000000000000000000000811690831610610bf05780610bf3565b80155b905060007f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff1663bc14128f7f52657374726963746564506169722e66656550657254726164657200000000006040518263ffffffff1660e01b81526004018082815260200191505060206040518083038186803b158015610c8857600080fd5b505afa158015610c9c573d6000803e3d6000fd5b505050506040513d6020811015610cb257600080fd5b50519050610cec7f000000000000000000000000000000000000000000000000000000000000000033876107cf858d63ffffffff611cc516565b8473ffffffffffffffffffffffffffffffffffffffff16636322fa3283868c8c8c8c6040518763ffffffff1660e01b8152600401808715151515815260200186815260200180602001806020018381038352878782818152602001925060200280828437600083820152601f017fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe0169091018481038352858152602090810191508690860280828437600081840152601f19601f82011690508083019250505098505050505050505050600060405180830381600087803b158015610dd057600080fd5b505af1158015610de4573d6000803e3d6000fd5b505050505050509550959350505050565b8042811015610e6557604080517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152600760248201527f4558504952454400000000000000000000000000000000000000000000000000604482015290519081900360640190fd5b6000610e728b8b89611f11565b905060008a73ffffffffffffffffffffffffffffffffffffffff168c73ffffffffffffffffffffffffffffffffffffffff1610610eaf5789610eb2565b89155b604080517ffa69ce2b0000000000000000000000000000000000000000000000000000000081523360048201528215156024820152604481018a90526064810189905260848101889052905191925073ffffffffffffffffffffffffffffffffffffffff84169163fa69ce2b9160a48082019260009290919082900301818387803b158015610f4057600080fd5b505af1158015610f54573d6000803e3d6000fd5b505050506000808b610f67578688610f6a565b87875b90925090508115610f8057610f808e8c84612028565b8015610f9157610f918d8c83612028565b5050505050505050505050505050565b600080824281101561101457604080517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152600760248201527f4558504952454400000000000000000000000000000000000000000000000000604482015290519081900360640190fd5b6000611021898988611f11565b604080517f7a6a5e1b0000000000000000000000000000000000000000000000000000000081523360048201528151929350600092839273ffffffffffffffffffffffffffffffffffffffff861692637a6a5e1b926024808301939282900301818787803b15801561109257600080fd5b505af11580156110a6573d6000803e3d6000fd5b505050506040513d60408110156110bc57600080fd5b508051602090910151909250905073ffffffffffffffffffffffffffffffffffffffff808b16908c16106110f15780826110f4565b81815b90965094506111048b8a88612028565b61110f8a8a87612028565b505050509550959350505050565b600080824281101561119057604080517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152600760248201527f4558504952454400000000000000000000000000000000000000000000000000604482015290519081900360640190fd5b60006111bd887f000000000000000000000000000000000000000000000000000000000000000088611f11565b604080517f7a6a5e1b0000000000000000000000000000000000000000000000000000000081523360048201528151929350600092839273ffffffffffffffffffffffffffffffffffffffff861692637a6a5e1b926024808301939282900301818787803b15801561122e57600080fd5b505af1158015611242573d6000803e3d6000fd5b505050506040513d604081101561125857600080fd5b508051602090910151909250905073ffffffffffffffffffffffffffffffffffffffff7f00000000000000000000000000000000000000000000000000000000000000008116908b16106112ad5780826112b0565b81815b90965094506112c08a8a88612028565b7f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff16632e1a7d4d866040518263ffffffff1660e01b815260040180828152602001915050600060405180830381600087803b15801561133357600080fd5b505af1158015611347573d6000803e3d6000fd5b505050506113558986612205565b5050505094509492505050565b7f000000000000000000000000000000000000000000000000000000000000000081565b7f000000000000000000000000000000000000000000000000000000000000000081565b600080824281101561141d57604080517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152600760248201527f4558504952454400000000000000000000000000000000000000000000000000604482015290519081900360640190fd5b6114488d7f00000000000000000000000000000000000000000000000000000000000000008d612388565b925060007f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff168e73ffffffffffffffffffffffffffffffffffffffff16106114a5578c6114a8565b8c155b90508a6116645760007f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff1663bc14128f7f52657374726963746564506169722e6665655065724f726465720000000000006040518263ffffffff1660e01b81526004018082815260200191505060206040518083038186803b15801561154257600080fd5b505afa158015611556573d6000803e3d6000fd5b505050506040513d602081101561156c57600080fd5b5051905061159c7f0000000000000000000000000000000000000000000000000000000000000000338784611d41565b604080517f5fd5e2fc00000000000000000000000000000000000000000000000000000000815233600482015283151560248201528b15156044820152606481018b9052608481018a905260a48101899052905173ffffffffffffffffffffffffffffffffffffffff871691635fd5e2fc9160c48083019260209291908290030181600087803b15801561162f57600080fd5b505af1158015611643573d6000803e3d6000fd5b505050506040513d602081101561165957600080fd5b50519b506116739050565b61167384828d8c8c8c8c6125ee565b8c1561169057891561168b5761168b8e33868d611d41565b611856565b60003490507f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff1663d0e30db0826040518263ffffffff1660e01b81526004016000604051808303818588803b1580156116fd57600080fd5b505af1158015611711573d6000803e3d6000fd5b50505050507f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff1663a9059cbb86836040518363ffffffff1660e01b8152600401808373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200182815260200192505050602060405180830381600087803b1580156117bd57600080fd5b505af11580156117d1573d6000803e3d6000fd5b505050506040513d60208110156117e757600080fd5b505161185457604080517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152600f60248201527f5472616e73666572206661696c65640000000000000000000000000000000000604482015290519081900360640190fd5b505b60008a11806118655750600034115b156118f957604080517f767016360000000000000000000000000000000000000000000000000000000081528215156004820152602481018d9052905173ffffffffffffffffffffffffffffffffffffffff861691637670163691604480830192600092919082900301818387803b1580156118e057600080fd5b505af11580156118f4573d6000803e3d6000fd5b505050505b8a925050509a509a98505050505050505050565b7f000000000000000000000000000000000000000000000000000000000000000081565b60008082428110156119a457604080517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152600760248201527f4558504952454400000000000000000000000000000000000000000000000000604482015290519081900360640190fd5b6119af8e8e8d612388565b925060008d73ffffffffffffffffffffffffffffffffffffffff168f73ffffffffffffffffffffffffffffffffffffffff16106119ec578c6119ef565b8c155b90508a611bab5760007f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff1663bc14128f7f52657374726963746564506169722e6665655065724f726465720000000000006040518263ffffffff1660e01b81526004018082815260200191505060206040518083038186803b158015611a8957600080fd5b505afa158015611a9d573d6000803e3d6000fd5b505050506040513d6020811015611ab357600080fd5b50519050611ae37f0000000000000000000000000000000000000000000000000000000000000000338784611d41565b604080517f5fd5e2fc00000000000000000000000000000000000000000000000000000000815233600482015283151560248201528b15156044820152606481018b9052608481018a905260a48101899052905173ffffffffffffffffffffffffffffffffffffffff871691635fd5e2fc9160c48083019260209291908290030181600087803b158015611b7657600080fd5b505af1158015611b8a573d6000803e3d6000fd5b505050506040513d6020811015611ba057600080fd5b50519b50611bba9050565b611bba84828d8c8c8c8c6125ee565b8915611c6757611bd88d611bce578e611bd0565b8f5b33868d611d41565b604080517f767016360000000000000000000000000000000000000000000000000000000081528215156004820152602481018d9052905173ffffffffffffffffffffffffffffffffffffffff861691637670163691604480830192600092919082900301818387803b158015611c4e57600080fd5b505af1158015611c62573d6000803e3d6000fd5b505050505b8a925050509b509b9950505050505050505050565b600080611cb88686866060870135608088013560a089013560c08a013560011460e08b01356101008c01356101208d01356101408e0135611931565b9097909650945050505050565b600082611cd457506000611d3b565b82820282848281611ce157fe5b0414611d38576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004018080602001828103825260218152602001806128a76021913960400191505060405180910390fd5b90505b92915050565b6040805173ffffffffffffffffffffffffffffffffffffffff85811660248301528481166044830152606480830185905283518084039091018152608490920183526020820180517bffffffffffffffffffffffffffffffffffffffffffffffffffffffff167f23b872dd0000000000000000000000000000000000000000000000000000000017815292518251600094606094938a169392918291908083835b60208310611e1f57805182527fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe09092019160209182019101611de2565b6001836020036101000a0380198251168184511680821785525050505050509050019150506000604051808303816000865af19150503d8060008114611e81576040519150601f19603f3d011682016040523d82523d6000602084013e611e86565b606091505b5091509150818015611eb4575080511580611eb45750808060200190516020811015611eb157600080fd5b50515b611f09576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004018080602001828103825260248152602001806128eb6024913960400191505060405180910390fd5b505050505050565b6000806000611f20868661273d565b604080517fffffffffffffffffffffffffffffffffffffffff000000000000000000000000606094851b811660208084019190915293851b81166034830152604880830199909952825180830390990189526068820183528851988401989098207fff0000000000000000000000000000000000000000000000000000000000000060888301527f000000000000000000000000000000000000000000000000000000000000000090941b9097166089880152609d8701929092527fc0d0e8b421201d3b1fb507267858ad5fc2f6fd3351546c6e4d87d4891410663860bd808801919091528251808803909101815260dd909601909152845194019390932095945050505050565b6040805173ffffffffffffffffffffffffffffffffffffffff8481166024830152604480830185905283518084039091018152606490920183526020820180517bffffffffffffffffffffffffffffffffffffffffffffffffffffffff167fa9059cbb00000000000000000000000000000000000000000000000000000000178152925182516000946060949389169392918291908083835b602083106120fe57805182527fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe090920191602091820191016120c1565b6001836020036101000a0380198251168184511680821785525050505050509050019150506000604051808303816000865af19150503d8060008114612160576040519150601f19603f3d011682016040523d82523d6000602084013e612165565b606091505b5091509150818015612193575080511580612193575080806020019051602081101561219057600080fd5b50515b6121fe57604080517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601f60248201527f5472616e7366657248656c7065723a205452414e534645525f4641494c454400604482015290519081900360640190fd5b5050505050565b6040805160008082526020820190925273ffffffffffffffffffffffffffffffffffffffff84169083906040518082805190602001908083835b6020831061227c57805182527fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe0909201916020918201910161223f565b6001836020036101000a03801982511681845116808217855250505050505090500191505060006040518083038185875af1925050503d80600081146122de576040519150601f19603f3d011682016040523d82523d6000602084013e6122e3565b606091505b505090508061233d576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004018080602001828103825260238152602001806128c86023913960400191505060405180910390fd5b505050565b60008061237c858560408601356060870135608088013560a089013560011460c08a013560e08b01356101008c01356101208d01356113aa565b90969095509350505050565b6000807f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff1663fd3206d286866040518363ffffffff1660e01b8152600401808373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020018273ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019250505060206040518083038186803b15801561245c57600080fd5b505afa158015612470573d6000803e3d6000fd5b505050506040513d602081101561248657600080fd5b5051905082158015612496575080155b1561256957604080517fc9c6539600000000000000000000000000000000000000000000000000000000815273ffffffffffffffffffffffffffffffffffffffff8781166004830152868116602483015291517f00000000000000000000000000000000000000000000000000000000000000009092169163c9c65396916044808201926020929091908290030181600087803b15801561253657600080fd5b505af115801561254a573d6000803e3d6000fd5b505050506040513d602081101561256057600080fd5b505191506125e6565b808311156125d857604080517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601260248201527f496e76616c6964207061697220696e6465780000000000000000000000000000604482015290519081900360640190fd5b6125e3858585611f11565b91505b509392505050565b6000806000808a73ffffffffffffffffffffffffffffffffffffffff1663db13653c8b8b6040518363ffffffff1660e01b81526004018083151515158152602001828152602001925050506101006040518083038186803b15801561265257600080fd5b505afa158015612666573d6000803e3d6000fd5b505050506040513d61010081101561267d57600080fd5b50604081015160a082015160c083015160e090930151919650945090925090508715158415151480156126af57508287145b80156126ba57508186145b80156126c557508085145b61273057604080517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601660248201527f4f7264657220706172616d73206e6f74206d6174636800000000000000000000604482015290519081900360640190fd5b5050505050505050505050565b6000808273ffffffffffffffffffffffffffffffffffffffff168473ffffffffffffffffffffffffffffffffffffffff1614156127db57604080517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601360248201527f4944454e544943414c5f41444452455353455300000000000000000000000000604482015290519081900360640190fd5b8273ffffffffffffffffffffffffffffffffffffffff168473ffffffffffffffffffffffffffffffffffffffff1610612815578284612818565b83835b909250905073ffffffffffffffffffffffffffffffffffffffff821661289f57604080517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152600c60248201527f5a45524f5f414444524553530000000000000000000000000000000000000000604482015290519081900360640190fd5b925092905056fe536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f775472616e7366657248656c7065723a204554485f5452414e534645525f4641494c45445472616e7366657248656c7065723a205452414e534645525f46524f4d5f4641494c4544a264697066735822122069d9614eb7dc9cb3fc054570bb852cf5ae428f164afd85e65cb26a967255c9bb64736f6c634300060b0033"
    };
});
define("@scom/scom-swap/contracts/oswap-openswap-contract/contracts/restricted/OSWAP_RestrictedLiquidityProvider1.ts", ["require", "exports", "@ijstech/eth-contract", "@scom/scom-swap/contracts/oswap-openswap-contract/contracts/restricted/OSWAP_RestrictedLiquidityProvider1.json.ts"], function (require, exports, eth_contract_32, OSWAP_RestrictedLiquidityProvider1_json_1) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.OSWAP_RestrictedLiquidityProvider1 = void 0;
    class OSWAP_RestrictedLiquidityProvider1 extends eth_contract_32.Contract {
        constructor(wallet, address) {
            super(wallet, address, OSWAP_RestrictedLiquidityProvider1_json_1.default.abi, OSWAP_RestrictedLiquidityProvider1_json_1.default.bytecode);
            this.assign();
        }
        deploy(params, options) {
            return this.__deploy([params.factory, params.WETH], options);
        }
        assign() {
            let WETH_call = async (options) => {
                let result = await this.call('WETH', [], options);
                return result;
            };
            this.WETH = WETH_call;
            let configStore_call = async (options) => {
                let result = await this.call('configStore', [], options);
                return result;
            };
            this.configStore = configStore_call;
            let factory_call = async (options) => {
                let result = await this.call('factory', [], options);
                return result;
            };
            this.factory = factory_call;
            let govToken_call = async (options) => {
                let result = await this.call('govToken', [], options);
                return result;
            };
            this.govToken = govToken_call;
            let addLiquidityParams = (params) => [params.tokenA, params.tokenB, params.addingTokenA, this.wallet.utils.toString(params.pairIndex), this.wallet.utils.toString(params.offerIndex), this.wallet.utils.toString(params.amountIn), params.allowAll, this.wallet.utils.toString(params.restrictedPrice), this.wallet.utils.toString(params.startDate), this.wallet.utils.toString(params.expire), this.wallet.utils.toString(params.deadline)];
            let addLiquidity_send = async (params, options) => {
                let result = await this.send('addLiquidity', addLiquidityParams(params), options);
                return result;
            };
            let addLiquidity_call = async (params, options) => {
                let result = await this.call('addLiquidity', addLiquidityParams(params), options);
                return {
                    pair: result.pair,
                    _offerIndex: new eth_contract_32.BigNumber(result._offerIndex)
                };
            };
            let addLiquidity_txData = async (params, options) => {
                let result = await this.txData('addLiquidity', addLiquidityParams(params), options);
                return result;
            };
            this.addLiquidity = Object.assign(addLiquidity_send, {
                call: addLiquidity_call,
                txData: addLiquidity_txData
            });
            let addLiquidityAndTraderParams = (params) => [this.wallet.utils.toString(params.param), params.trader, this.wallet.utils.toString(params.allocation)];
            let addLiquidityAndTrader_send = async (params, options) => {
                let result = await this.send('addLiquidityAndTrader', addLiquidityAndTraderParams(params), options);
                return result;
            };
            let addLiquidityAndTrader_call = async (params, options) => {
                let result = await this.call('addLiquidityAndTrader', addLiquidityAndTraderParams(params), options);
                return {
                    pair: result.pair,
                    offerIndex: new eth_contract_32.BigNumber(result.offerIndex)
                };
            };
            let addLiquidityAndTrader_txData = async (params, options) => {
                let result = await this.txData('addLiquidityAndTrader', addLiquidityAndTraderParams(params), options);
                return result;
            };
            this.addLiquidityAndTrader = Object.assign(addLiquidityAndTrader_send, {
                call: addLiquidityAndTrader_call,
                txData: addLiquidityAndTrader_txData
            });
            let addLiquidityETHParams = (params) => [params.tokenA, params.addingTokenA, this.wallet.utils.toString(params.pairIndex), this.wallet.utils.toString(params.offerIndex), this.wallet.utils.toString(params.amountAIn), params.allowAll, this.wallet.utils.toString(params.restrictedPrice), this.wallet.utils.toString(params.startDate), this.wallet.utils.toString(params.expire), this.wallet.utils.toString(params.deadline)];
            let addLiquidityETH_send = async (params, options) => {
                let result = await this.send('addLiquidityETH', addLiquidityETHParams(params), options);
                return result;
            };
            let addLiquidityETH_call = async (params, options) => {
                let result = await this.call('addLiquidityETH', addLiquidityETHParams(params), options);
                return {
                    pair: result.pair,
                    _offerIndex: new eth_contract_32.BigNumber(result._offerIndex)
                };
            };
            let addLiquidityETH_txData = async (params, options) => {
                let result = await this.txData('addLiquidityETH', addLiquidityETHParams(params), options);
                return result;
            };
            this.addLiquidityETH = Object.assign(addLiquidityETH_send, {
                call: addLiquidityETH_call,
                txData: addLiquidityETH_txData
            });
            let addLiquidityETHAndTraderParams = (params) => [this.wallet.utils.toString(params.param), params.trader, this.wallet.utils.toString(params.allocation)];
            let addLiquidityETHAndTrader_send = async (params, options) => {
                let result = await this.send('addLiquidityETHAndTrader', addLiquidityETHAndTraderParams(params), options);
                return result;
            };
            let addLiquidityETHAndTrader_call = async (params, options) => {
                let result = await this.call('addLiquidityETHAndTrader', addLiquidityETHAndTraderParams(params), options);
                return {
                    pair: result.pair,
                    offerIndex: new eth_contract_32.BigNumber(result.offerIndex)
                };
            };
            let addLiquidityETHAndTrader_txData = async (params, options) => {
                let result = await this.txData('addLiquidityETHAndTrader', addLiquidityETHAndTraderParams(params), options);
                return result;
            };
            this.addLiquidityETHAndTrader = Object.assign(addLiquidityETHAndTrader_send, {
                call: addLiquidityETHAndTrader_call,
                txData: addLiquidityETHAndTrader_txData
            });
            let removeAllLiquidityParams = (params) => [params.tokenA, params.tokenB, params.to, this.wallet.utils.toString(params.pairIndex), this.wallet.utils.toString(params.deadline)];
            let removeAllLiquidity_send = async (params, options) => {
                let result = await this.send('removeAllLiquidity', removeAllLiquidityParams(params), options);
                return result;
            };
            let removeAllLiquidity_call = async (params, options) => {
                let result = await this.call('removeAllLiquidity', removeAllLiquidityParams(params), options);
                return {
                    amountA: new eth_contract_32.BigNumber(result.amountA),
                    amountB: new eth_contract_32.BigNumber(result.amountB)
                };
            };
            let removeAllLiquidity_txData = async (params, options) => {
                let result = await this.txData('removeAllLiquidity', removeAllLiquidityParams(params), options);
                return result;
            };
            this.removeAllLiquidity = Object.assign(removeAllLiquidity_send, {
                call: removeAllLiquidity_call,
                txData: removeAllLiquidity_txData
            });
            let removeAllLiquidityETHParams = (params) => [params.tokenA, params.to, this.wallet.utils.toString(params.pairIndex), this.wallet.utils.toString(params.deadline)];
            let removeAllLiquidityETH_send = async (params, options) => {
                let result = await this.send('removeAllLiquidityETH', removeAllLiquidityETHParams(params), options);
                return result;
            };
            let removeAllLiquidityETH_call = async (params, options) => {
                let result = await this.call('removeAllLiquidityETH', removeAllLiquidityETHParams(params), options);
                return {
                    amountToken: new eth_contract_32.BigNumber(result.amountToken),
                    amountETH: new eth_contract_32.BigNumber(result.amountETH)
                };
            };
            let removeAllLiquidityETH_txData = async (params, options) => {
                let result = await this.txData('removeAllLiquidityETH', removeAllLiquidityETHParams(params), options);
                return result;
            };
            this.removeAllLiquidityETH = Object.assign(removeAllLiquidityETH_send, {
                call: removeAllLiquidityETH_call,
                txData: removeAllLiquidityETH_txData
            });
            let removeLiquidityParams = (params) => [params.tokenA, params.tokenB, params.removingTokenA, params.to, this.wallet.utils.toString(params.pairIndex), this.wallet.utils.toString(params.offerIndex), this.wallet.utils.toString(params.amountOut), this.wallet.utils.toString(params.receivingOut), this.wallet.utils.toString(params.deadline)];
            let removeLiquidity_send = async (params, options) => {
                let result = await this.send('removeLiquidity', removeLiquidityParams(params), options);
                return result;
            };
            let removeLiquidity_call = async (params, options) => {
                let result = await this.call('removeLiquidity', removeLiquidityParams(params), options);
                return;
            };
            let removeLiquidity_txData = async (params, options) => {
                let result = await this.txData('removeLiquidity', removeLiquidityParams(params), options);
                return result;
            };
            this.removeLiquidity = Object.assign(removeLiquidity_send, {
                call: removeLiquidity_call,
                txData: removeLiquidity_txData
            });
            let removeLiquidityETHParams = (params) => [params.tokenA, params.removingTokenA, params.to, this.wallet.utils.toString(params.pairIndex), this.wallet.utils.toString(params.offerIndex), this.wallet.utils.toString(params.amountOut), this.wallet.utils.toString(params.receivingOut), this.wallet.utils.toString(params.deadline)];
            let removeLiquidityETH_send = async (params, options) => {
                let result = await this.send('removeLiquidityETH', removeLiquidityETHParams(params), options);
                return result;
            };
            let removeLiquidityETH_call = async (params, options) => {
                let result = await this.call('removeLiquidityETH', removeLiquidityETHParams(params), options);
                return;
            };
            let removeLiquidityETH_txData = async (params, options) => {
                let result = await this.txData('removeLiquidityETH', removeLiquidityETHParams(params), options);
                return result;
            };
            this.removeLiquidityETH = Object.assign(removeLiquidityETH_send, {
                call: removeLiquidityETH_call,
                txData: removeLiquidityETH_txData
            });
        }
    }
    OSWAP_RestrictedLiquidityProvider1._abi = OSWAP_RestrictedLiquidityProvider1_json_1.default.abi;
    exports.OSWAP_RestrictedLiquidityProvider1 = OSWAP_RestrictedLiquidityProvider1;
});
define("@scom/scom-swap/contracts/oswap-openswap-contract/contracts/restricted/OSWAP_RestrictedLiquidityProvider3.json.ts", ["require", "exports"], function (require, exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    ///<amd-module name='@scom/scom-swap/contracts/oswap-openswap-contract/contracts/restricted/OSWAP_RestrictedLiquidityProvider3.json.ts'/> 
    exports.default = {
        "abi": [
            { "inputs": [{ "internalType": "address", "name": "_factory", "type": "address" }, { "internalType": "address", "name": "_WETH", "type": "address" }], "stateMutability": "nonpayable", "type": "constructor" },
            { "inputs": [], "name": "WETH", "outputs": [{ "internalType": "address", "name": "", "type": "address" }], "stateMutability": "view", "type": "function" },
            { "inputs": [{ "internalType": "address", "name": "tokenA", "type": "address" }, { "internalType": "address", "name": "tokenB", "type": "address" }, { "internalType": "bool", "name": "addingTokenA", "type": "bool" }, { "internalType": "uint256", "name": "pairIndex", "type": "uint256" }, { "internalType": "uint256", "name": "offerIndex", "type": "uint256" }, { "internalType": "uint256", "name": "amountIn", "type": "uint256" }, { "internalType": "bool", "name": "allowAll", "type": "bool" }, { "internalType": "uint256", "name": "restrictedPrice", "type": "uint256" }, { "internalType": "uint256", "name": "startDateAndExpire", "type": "uint256" }, { "internalType": "uint256", "name": "feeIn", "type": "uint256" }, { "internalType": "uint256", "name": "deadline", "type": "uint256" }], "name": "addLiquidity", "outputs": [{ "internalType": "address", "name": "pair", "type": "address" }, { "internalType": "uint256", "name": "_offerIndex", "type": "uint256" }], "stateMutability": "nonpayable", "type": "function" },
            { "inputs": [{ "internalType": "address", "name": "tokenA", "type": "address" }, { "internalType": "bool", "name": "addingTokenA", "type": "bool" }, { "internalType": "uint256", "name": "pairIndex", "type": "uint256" }, { "internalType": "uint256", "name": "offerIndex", "type": "uint256" }, { "internalType": "uint256", "name": "amountAIn", "type": "uint256" }, { "internalType": "bool", "name": "allowAll", "type": "bool" }, { "internalType": "uint256", "name": "restrictedPrice", "type": "uint256" }, { "internalType": "uint256", "name": "startDateAndExpire", "type": "uint256" }, { "internalType": "uint256", "name": "feeIn", "type": "uint256" }, { "internalType": "uint256", "name": "deadline", "type": "uint256" }], "name": "addLiquidityETH", "outputs": [{ "internalType": "address", "name": "pair", "type": "address" }, { "internalType": "uint256", "name": "_offerIndex", "type": "uint256" }], "stateMutability": "payable", "type": "function" },
            { "inputs": [], "name": "configStore", "outputs": [{ "internalType": "address", "name": "", "type": "address" }], "stateMutability": "view", "type": "function" },
            { "inputs": [], "name": "factory", "outputs": [{ "internalType": "address", "name": "", "type": "address" }], "stateMutability": "view", "type": "function" },
            { "inputs": [], "name": "govToken", "outputs": [{ "internalType": "address", "name": "", "type": "address" }], "stateMutability": "view", "type": "function" },
            { "inputs": [{ "internalType": "address", "name": "tokenA", "type": "address" }, { "internalType": "address", "name": "tokenB", "type": "address" }, { "internalType": "address", "name": "to", "type": "address" }, { "internalType": "uint256", "name": "pairIndex", "type": "uint256" }, { "internalType": "uint256", "name": "deadline", "type": "uint256" }], "name": "removeAllLiquidity", "outputs": [{ "internalType": "uint256", "name": "amountA", "type": "uint256" }, { "internalType": "uint256", "name": "amountB", "type": "uint256" }, { "internalType": "uint256", "name": "feeOut", "type": "uint256" }], "stateMutability": "nonpayable", "type": "function" },
            { "inputs": [{ "internalType": "address", "name": "tokenA", "type": "address" }, { "internalType": "address", "name": "to", "type": "address" }, { "internalType": "uint256", "name": "pairIndex", "type": "uint256" }, { "internalType": "uint256", "name": "deadline", "type": "uint256" }], "name": "removeAllLiquidityETH", "outputs": [{ "internalType": "uint256", "name": "amountToken", "type": "uint256" }, { "internalType": "uint256", "name": "amountETH", "type": "uint256" }, { "internalType": "uint256", "name": "feeOut", "type": "uint256" }], "stateMutability": "nonpayable", "type": "function" },
            { "inputs": [{ "internalType": "address", "name": "tokenA", "type": "address" }, { "internalType": "address", "name": "tokenB", "type": "address" }, { "internalType": "bool", "name": "removingTokenA", "type": "bool" }, { "internalType": "address", "name": "to", "type": "address" }, { "internalType": "uint256", "name": "pairIndex", "type": "uint256" }, { "internalType": "uint256", "name": "offerIndex", "type": "uint256" }, { "internalType": "uint256", "name": "amountOut", "type": "uint256" }, { "internalType": "uint256", "name": "receivingOut", "type": "uint256" }, { "internalType": "uint256", "name": "feeOut", "type": "uint256" }, { "internalType": "uint256", "name": "deadline", "type": "uint256" }], "name": "removeLiquidity", "outputs": [], "stateMutability": "nonpayable", "type": "function" },
            { "inputs": [{ "internalType": "address", "name": "tokenA", "type": "address" }, { "internalType": "bool", "name": "removingTokenA", "type": "bool" }, { "internalType": "address", "name": "to", "type": "address" }, { "internalType": "uint256", "name": "pairIndex", "type": "uint256" }, { "internalType": "uint256", "name": "offerIndex", "type": "uint256" }, { "internalType": "uint256", "name": "amountOut", "type": "uint256" }, { "internalType": "uint256", "name": "receivingOut", "type": "uint256" }, { "internalType": "uint256", "name": "feeOut", "type": "uint256" }, { "internalType": "uint256", "name": "deadline", "type": "uint256" }], "name": "removeLiquidityETH", "outputs": [], "stateMutability": "nonpayable", "type": "function" },
            { "stateMutability": "payable", "type": "receive" }
        ],
        "bytecode": ""
    };
});
define("@scom/scom-swap/contracts/oswap-openswap-contract/contracts/restricted/OSWAP_RestrictedLiquidityProvider3.ts", ["require", "exports", "@ijstech/eth-contract", "@scom/scom-swap/contracts/oswap-openswap-contract/contracts/restricted/OSWAP_RestrictedLiquidityProvider3.json.ts"], function (require, exports, eth_contract_33, OSWAP_RestrictedLiquidityProvider3_json_1) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.OSWAP_RestrictedLiquidityProvider3 = void 0;
    class OSWAP_RestrictedLiquidityProvider3 extends eth_contract_33.Contract {
        constructor(wallet, address) {
            super(wallet, address, OSWAP_RestrictedLiquidityProvider3_json_1.default.abi, OSWAP_RestrictedLiquidityProvider3_json_1.default.bytecode);
            this.assign();
        }
        deploy(params, options) {
            return this.__deploy([params.factory, params.WETH], options);
        }
        assign() {
            let WETH_call = async (options) => {
                let result = await this.call('WETH', [], options);
                return result;
            };
            this.WETH = WETH_call;
            let configStore_call = async (options) => {
                let result = await this.call('configStore', [], options);
                return result;
            };
            this.configStore = configStore_call;
            let factory_call = async (options) => {
                let result = await this.call('factory', [], options);
                return result;
            };
            this.factory = factory_call;
            let govToken_call = async (options) => {
                let result = await this.call('govToken', [], options);
                return result;
            };
            this.govToken = govToken_call;
            let addLiquidityParams = (params) => [params.tokenA, params.tokenB, params.addingTokenA, this.wallet.utils.toString(params.pairIndex), this.wallet.utils.toString(params.offerIndex), this.wallet.utils.toString(params.amountIn), params.allowAll, this.wallet.utils.toString(params.restrictedPrice), this.wallet.utils.toString(params.startDateAndExpire), this.wallet.utils.toString(params.feeIn), this.wallet.utils.toString(params.deadline)];
            let addLiquidity_send = async (params, options) => {
                let result = await this.send('addLiquidity', addLiquidityParams(params), options);
                return result;
            };
            let addLiquidity_call = async (params, options) => {
                let result = await this.call('addLiquidity', addLiquidityParams(params), options);
                return {
                    pair: result.pair,
                    _offerIndex: new eth_contract_33.BigNumber(result._offerIndex)
                };
            };
            let addLiquidity_txData = async (params, options) => {
                let result = await this.txData('addLiquidity', addLiquidityParams(params), options);
                return result;
            };
            this.addLiquidity = Object.assign(addLiquidity_send, {
                call: addLiquidity_call,
                txData: addLiquidity_txData
            });
            let addLiquidityETHParams = (params) => [params.tokenA, params.addingTokenA, this.wallet.utils.toString(params.pairIndex), this.wallet.utils.toString(params.offerIndex), this.wallet.utils.toString(params.amountAIn), params.allowAll, this.wallet.utils.toString(params.restrictedPrice), this.wallet.utils.toString(params.startDateAndExpire), this.wallet.utils.toString(params.feeIn), this.wallet.utils.toString(params.deadline)];
            let addLiquidityETH_send = async (params, options) => {
                let result = await this.send('addLiquidityETH', addLiquidityETHParams(params), options);
                return result;
            };
            let addLiquidityETH_call = async (params, options) => {
                let result = await this.call('addLiquidityETH', addLiquidityETHParams(params), options);
                return {
                    pair: result.pair,
                    _offerIndex: new eth_contract_33.BigNumber(result._offerIndex)
                };
            };
            let addLiquidityETH_txData = async (params, options) => {
                let result = await this.txData('addLiquidityETH', addLiquidityETHParams(params), options);
                return result;
            };
            this.addLiquidityETH = Object.assign(addLiquidityETH_send, {
                call: addLiquidityETH_call,
                txData: addLiquidityETH_txData
            });
            let removeAllLiquidityParams = (params) => [params.tokenA, params.tokenB, params.to, this.wallet.utils.toString(params.pairIndex), this.wallet.utils.toString(params.deadline)];
            let removeAllLiquidity_send = async (params, options) => {
                let result = await this.send('removeAllLiquidity', removeAllLiquidityParams(params), options);
                return result;
            };
            let removeAllLiquidity_call = async (params, options) => {
                let result = await this.call('removeAllLiquidity', removeAllLiquidityParams(params), options);
                return {
                    amountA: new eth_contract_33.BigNumber(result.amountA),
                    amountB: new eth_contract_33.BigNumber(result.amountB),
                    feeOut: new eth_contract_33.BigNumber(result.feeOut)
                };
            };
            let removeAllLiquidity_txData = async (params, options) => {
                let result = await this.txData('removeAllLiquidity', removeAllLiquidityParams(params), options);
                return result;
            };
            this.removeAllLiquidity = Object.assign(removeAllLiquidity_send, {
                call: removeAllLiquidity_call,
                txData: removeAllLiquidity_txData
            });
            let removeAllLiquidityETHParams = (params) => [params.tokenA, params.to, this.wallet.utils.toString(params.pairIndex), this.wallet.utils.toString(params.deadline)];
            let removeAllLiquidityETH_send = async (params, options) => {
                let result = await this.send('removeAllLiquidityETH', removeAllLiquidityETHParams(params), options);
                return result;
            };
            let removeAllLiquidityETH_call = async (params, options) => {
                let result = await this.call('removeAllLiquidityETH', removeAllLiquidityETHParams(params), options);
                return {
                    amountToken: new eth_contract_33.BigNumber(result.amountToken),
                    amountETH: new eth_contract_33.BigNumber(result.amountETH),
                    feeOut: new eth_contract_33.BigNumber(result.feeOut)
                };
            };
            let removeAllLiquidityETH_txData = async (params, options) => {
                let result = await this.txData('removeAllLiquidityETH', removeAllLiquidityETHParams(params), options);
                return result;
            };
            this.removeAllLiquidityETH = Object.assign(removeAllLiquidityETH_send, {
                call: removeAllLiquidityETH_call,
                txData: removeAllLiquidityETH_txData
            });
            let removeLiquidityParams = (params) => [params.tokenA, params.tokenB, params.removingTokenA, params.to, this.wallet.utils.toString(params.pairIndex), this.wallet.utils.toString(params.offerIndex), this.wallet.utils.toString(params.amountOut), this.wallet.utils.toString(params.receivingOut), this.wallet.utils.toString(params.feeOut), this.wallet.utils.toString(params.deadline)];
            let removeLiquidity_send = async (params, options) => {
                let result = await this.send('removeLiquidity', removeLiquidityParams(params), options);
                return result;
            };
            let removeLiquidity_call = async (params, options) => {
                let result = await this.call('removeLiquidity', removeLiquidityParams(params), options);
                return;
            };
            let removeLiquidity_txData = async (params, options) => {
                let result = await this.txData('removeLiquidity', removeLiquidityParams(params), options);
                return result;
            };
            this.removeLiquidity = Object.assign(removeLiquidity_send, {
                call: removeLiquidity_call,
                txData: removeLiquidity_txData
            });
            let removeLiquidityETHParams = (params) => [params.tokenA, params.removingTokenA, params.to, this.wallet.utils.toString(params.pairIndex), this.wallet.utils.toString(params.offerIndex), this.wallet.utils.toString(params.amountOut), this.wallet.utils.toString(params.receivingOut), this.wallet.utils.toString(params.feeOut), this.wallet.utils.toString(params.deadline)];
            let removeLiquidityETH_send = async (params, options) => {
                let result = await this.send('removeLiquidityETH', removeLiquidityETHParams(params), options);
                return result;
            };
            let removeLiquidityETH_call = async (params, options) => {
                let result = await this.call('removeLiquidityETH', removeLiquidityETHParams(params), options);
                return;
            };
            let removeLiquidityETH_txData = async (params, options) => {
                let result = await this.txData('removeLiquidityETH', removeLiquidityETHParams(params), options);
                return result;
            };
            this.removeLiquidityETH = Object.assign(removeLiquidityETH_send, {
                call: removeLiquidityETH_call,
                txData: removeLiquidityETH_txData
            });
        }
    }
    OSWAP_RestrictedLiquidityProvider3._abi = OSWAP_RestrictedLiquidityProvider3_json_1.default.abi;
    exports.OSWAP_RestrictedLiquidityProvider3 = OSWAP_RestrictedLiquidityProvider3;
});
define("@scom/scom-swap/contracts/oswap-openswap-contract/contracts/restricted/OSWAP_RestrictedLiquidityProvider4.json.ts", ["require", "exports"], function (require, exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    ///<amd-module name='@scom/scom-swap/contracts/oswap-openswap-contract/contracts/restricted/OSWAP_RestrictedLiquidityProvider4.json.ts'/> 
    exports.default = {
        "abi": [
            { "inputs": [{ "internalType": "address", "name": "_factory", "type": "address" }, { "internalType": "address", "name": "_WETH", "type": "address" }], "stateMutability": "nonpayable", "type": "constructor" },
            { "inputs": [], "name": "WETH", "outputs": [{ "internalType": "address", "name": "", "type": "address" }], "stateMutability": "view", "type": "function" },
            { "inputs": [{ "internalType": "address", "name": "tokenA", "type": "address" }, { "internalType": "address", "name": "tokenB", "type": "address" }, { "internalType": "bool", "name": "addingTokenA", "type": "bool" }, { "internalType": "uint256[9]", "name": "params", "type": "uint256[9]" }, { "internalType": "bytes32", "name": "merkleRoot", "type": "bytes32" }, { "internalType": "string", "name": "allowlistIpfsCid", "type": "string" }], "name": "addLiquidity", "outputs": [{ "internalType": "address", "name": "pair", "type": "address" }, { "internalType": "uint256", "name": "_offerIndex", "type": "uint256" }], "stateMutability": "nonpayable", "type": "function" },
            { "inputs": [{ "internalType": "address", "name": "tokenA", "type": "address" }, { "internalType": "bool", "name": "addingTokenA", "type": "bool" }, { "internalType": "uint256[9]", "name": "params", "type": "uint256[9]" }, { "internalType": "bytes32", "name": "merkleRoot", "type": "bytes32" }, { "internalType": "string", "name": "allowlistIpfsCid", "type": "string" }], "name": "addLiquidityETH", "outputs": [{ "internalType": "address", "name": "pair", "type": "address" }, { "internalType": "uint256", "name": "_offerIndex", "type": "uint256" }], "stateMutability": "payable", "type": "function" },
            { "inputs": [], "name": "configStore", "outputs": [{ "internalType": "address", "name": "", "type": "address" }], "stateMutability": "view", "type": "function" },
            { "inputs": [], "name": "factory", "outputs": [{ "internalType": "address", "name": "", "type": "address" }], "stateMutability": "view", "type": "function" },
            { "inputs": [], "name": "govToken", "outputs": [{ "internalType": "address", "name": "", "type": "address" }], "stateMutability": "view", "type": "function" },
            { "inputs": [{ "internalType": "address", "name": "tokenA", "type": "address" }, { "internalType": "address", "name": "tokenB", "type": "address" }, { "internalType": "address", "name": "to", "type": "address" }, { "internalType": "uint256", "name": "pairIndex", "type": "uint256" }, { "internalType": "uint256", "name": "deadline", "type": "uint256" }], "name": "removeAllLiquidity", "outputs": [{ "internalType": "uint256", "name": "amountA", "type": "uint256" }, { "internalType": "uint256", "name": "amountB", "type": "uint256" }, { "internalType": "uint256", "name": "feeOut", "type": "uint256" }], "stateMutability": "nonpayable", "type": "function" },
            { "inputs": [{ "internalType": "address", "name": "tokenA", "type": "address" }, { "internalType": "address", "name": "to", "type": "address" }, { "internalType": "uint256", "name": "pairIndex", "type": "uint256" }, { "internalType": "uint256", "name": "deadline", "type": "uint256" }], "name": "removeAllLiquidityETH", "outputs": [{ "internalType": "uint256", "name": "amountToken", "type": "uint256" }, { "internalType": "uint256", "name": "amountETH", "type": "uint256" }, { "internalType": "uint256", "name": "feeOut", "type": "uint256" }], "stateMutability": "nonpayable", "type": "function" },
            { "inputs": [{ "internalType": "address", "name": "tokenA", "type": "address" }, { "internalType": "address", "name": "tokenB", "type": "address" }, { "internalType": "bool", "name": "removingTokenA", "type": "bool" }, { "internalType": "address", "name": "to", "type": "address" }, { "internalType": "uint256", "name": "pairIndex", "type": "uint256" }, { "internalType": "uint256", "name": "offerIndex", "type": "uint256" }, { "internalType": "uint256", "name": "amountOut", "type": "uint256" }, { "internalType": "uint256", "name": "receivingOut", "type": "uint256" }, { "internalType": "uint256", "name": "feeOut", "type": "uint256" }, { "internalType": "uint256", "name": "deadline", "type": "uint256" }], "name": "removeLiquidity", "outputs": [], "stateMutability": "nonpayable", "type": "function" },
            { "inputs": [{ "internalType": "address", "name": "tokenA", "type": "address" }, { "internalType": "bool", "name": "removingTokenA", "type": "bool" }, { "internalType": "address", "name": "to", "type": "address" }, { "internalType": "uint256", "name": "pairIndex", "type": "uint256" }, { "internalType": "uint256", "name": "offerIndex", "type": "uint256" }, { "internalType": "uint256", "name": "amountOut", "type": "uint256" }, { "internalType": "uint256", "name": "receivingOut", "type": "uint256" }, { "internalType": "uint256", "name": "feeOut", "type": "uint256" }, { "internalType": "uint256", "name": "deadline", "type": "uint256" }], "name": "removeLiquidityETH", "outputs": [], "stateMutability": "nonpayable", "type": "function" },
            { "stateMutability": "payable", "type": "receive" }
        ],
        "bytecode": "6101006040523480156200001257600080fd5b50604051620028fc380380620028fc833981810160405260408110156200003857600080fd5b5080516020918201516001600160601b0319606083811b821660805282901b1660a05260408051635aa6e67560e01b81529051929391926001600160a01b03851692635aa6e6759260048082019391829003018186803b1580156200009c57600080fd5b505afa158015620000b1573d6000803e3d6000fd5b505050506040513d6020811015620000c857600080fd5b50516040805163b716d46360e01b815290516001600160a01b039092169163b716d46391600480820192602092909190829003018186803b1580156200010d57600080fd5b505afa15801562000122573d6000803e3d6000fd5b505050506040513d60208110156200013957600080fd5b505160601b6001600160601b03191660c05260408051634eb4ee2760e11b815290516001600160a01b03841691639d69dc4e9160048083019260209291908290030181600087803b1580156200018e57600080fd5b505af1158015620001a3573d6000803e3d6000fd5b505050506040513d6020811015620001ba57600080fd5b50516001600160601b031960609190911b1660e052505060805160601c60a05160601c60c05160601c60e05160601c6126726200028a600039806108355280610e9652806114df52508061053952806106f052806108f75280610ce05280610f58528061116652806114a852806116af528061198252508060d252806107a452806107f35280610b165280610b9752806112c652806113c8528061141052806116e8528061178252806117ad52806118e45250806119ba5280611a745280611cd55280611e3352506126726000f3fe6080604052600436106100b55760003560e01c80639d69dc4e11610069578063ad5c46481161004e578063ad5c464814610497578063bacd1c24146104ac578063c45a01551461052257610160565b80639d69dc4e14610401578063a233d84f1461041657610160565b8063851f59441161009a578063851f59441461021d5780638bc32bfc146102f057806398d201a4146103ab57610160565b806305268cff146101655780636d025d22146101a357610160565b36610160573373ffffffffffffffffffffffffffffffffffffffff7f0000000000000000000000000000000000000000000000000000000000000000161461015e57604080517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152600f60248201527f5472616e73666572206661696c65640000000000000000000000000000000000604482015290519081900360640190fd5b005b600080fd5b34801561017157600080fd5b5061017a610537565b6040805173ffffffffffffffffffffffffffffffffffffffff9092168252519081900360200190f35b3480156101af57600080fd5b506101ff600480360360a08110156101c657600080fd5b5073ffffffffffffffffffffffffffffffffffffffff81358116916020810135821691604082013516906060810135906080013561055b565b60408051938452602084019290925282820152519081900360600190f35b6102c060048036036101a081101561023457600080fd5b73ffffffffffffffffffffffffffffffffffffffff8235169160208101351515916040820191610160810135918101906101a0810161018082013564010000000081111561028157600080fd5b82018360208201111561029357600080fd5b803590602001918460018302840111640100000000831117156102b557600080fd5b509092509050610726565b6040805173ffffffffffffffffffffffffffffffffffffffff909316835260208301919091528051918290030190f35b3480156102fc57600080fd5b506102c060048036036101c081101561031457600080fd5b73ffffffffffffffffffffffffffffffffffffffff82358116926020810135909116916040820135151591606081019161018082013591908101906101c081016101a082013564010000000081111561036c57600080fd5b82018360208201111561037e57600080fd5b803590602001918460018302840111640100000000831117156103a057600080fd5b509092509050610dcd565b3480156103b757600080fd5b506101ff600480360360808110156103ce57600080fd5b5073ffffffffffffffffffffffffffffffffffffffff813581169160208101359091169060408101359060600135611249565b34801561040d57600080fd5b5061017a6114dd565b34801561042257600080fd5b5061015e600480360361014081101561043a57600080fd5b5073ffffffffffffffffffffffffffffffffffffffff81358116916020810135821691604082013515159160608101359091169060808101359060a08101359060c08101359060e081013590610100810135906101200135611501565b3480156104a357600080fd5b5061017a6116e6565b3480156104b857600080fd5b5061015e60048036036101208110156104d057600080fd5b5073ffffffffffffffffffffffffffffffffffffffff813581169160208101351515916040820135169060608101359060808101359060a08101359060c08101359060e081013590610100013561170a565b34801561052e57600080fd5b5061017a6119b8565b7f000000000000000000000000000000000000000000000000000000000000000081565b600080600083428110156105d057604080517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152600760248201527f4558504952454400000000000000000000000000000000000000000000000000604482015290519081900360640190fd5b60006105dd8a8a896119dc565b905060008060008373ffffffffffffffffffffffffffffffffffffffff16637a6a5e1b336040518263ffffffff1660e01b8152600401808273ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001915050606060405180830381600087803b15801561066357600080fd5b505af1158015610677573d6000803e3d6000fd5b505050506040513d606081101561068d57600080fd5b5080516020820151604090920151909450909250905073ffffffffffffffffffffffffffffffffffffffff808d16908e16106106ca5781836106cd565b82825b90985096509450846106e08d8c8a611af3565b6106eb8c8c89611af3565b6107167f00000000000000000000000000000000000000000000000000000000000000008c88611af3565b5050505050955095509592505050565b6000806101008601354281101561079e57604080517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152600760248201527f4558504952454400000000000000000000000000000000000000000000000000604482015290519081900360640190fd5b6107d1897f00000000000000000000000000000000000000000000000000000000000000008960005b6020020135611cd0565b925060208701359150600073ffffffffffffffffffffffffffffffffffffffff7f00000000000000000000000000000000000000000000000000000000000000008116908b16106108225788610825565b88155b905060e088013583610a055760007f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff1663bc14128f7f52657374726963746564506169722e6665655065724f726465720000000000006040518263ffffffff1660e01b81526004018082815260200191505060206040518083038186803b1580156108c457600080fd5b505afa1580156108d8573d6000803e3d6000fd5b505050506040513d60208110156108ee57600080fd5b5051905061091e7f0000000000000000000000000000000000000000000000000000000000000000338884611f36565b61092e828263ffffffff61210616565b604080517f5fd5e2fc000000000000000000000000000000000000000000000000000000008152336004820152851515602482015260608d01351515604482015260808d0135606482015260a08d0135608482015260c08d013560a4820152905191935073ffffffffffffffffffffffffffffffffffffffff88169250635fd5e2fc9160c48083019260209291908290030181600087803b1580156109d257600080fd5b505af11580156109e6573d6000803e3d6000fd5b505050506040513d60208110156109fc57600080fd5b50519350610a33565b610a338583868c60035b602002013515158d600460200201358e600560200201358f6006602002013561214f565b8473ffffffffffffffffffffffffffffffffffffffff1663a1d6fdf583868b8b8b6040518663ffffffff1660e01b81526004018086151515158152602001858152602001848152602001806020018281038252848482818152602001925080828437600081840152601f19601f8201169050808301925050509650505050505050600060405180830381600087803b158015610ace57600080fd5b505af1158015610ae2573d6000803e3d6000fd5b505050508915610b0f57604089013515610b0a57610b0a8b33878c60025b6020020135611f36565b610cd5565b60003490507f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff1663d0e30db0826040518263ffffffff1660e01b81526004016000604051808303818588803b158015610b7c57600080fd5b505af1158015610b90573d6000803e3d6000fd5b50505050507f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff1663a9059cbb87836040518363ffffffff1660e01b8152600401808373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200182815260200192505050602060405180830381600087803b158015610c3c57600080fd5b505af1158015610c50573d6000803e3d6000fd5b505050506040513d6020811015610c6657600080fd5b5051610cd357604080517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152600f60248201527f5472616e73666572206661696c65640000000000000000000000000000000000604482015290519081900360640190fd5b505b8015610d0757610d077f0000000000000000000000000000000000000000000000000000000000000000338784611f36565b6040890135151580610d195750600034115b80610d245750600081115b15610dbf57604080517f33f175fc00000000000000000000000000000000000000000000000000000000815283151560048201526024810186905260448101839052905173ffffffffffffffffffffffffffffffffffffffff8716916333f175fc91606480830192600092919082900301818387803b158015610da657600080fd5b505af1158015610dba573d6000803e3d6000fd5b505050505b505050965096945050505050565b60008061010086013542811015610e4557604080517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152600760248201527f4558504952454400000000000000000000000000000000000000000000000000604482015290519081900360640190fd5b610e528a8a8960006107c7565b925060208701359150600073ffffffffffffffffffffffffffffffffffffffff808b16908c1610610e835788610e86565b88155b905060e0880135836110665760007f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff1663bc14128f7f52657374726963746564506169722e6665655065724f726465720000000000006040518263ffffffff1660e01b81526004018082815260200191505060206040518083038186803b158015610f2557600080fd5b505afa158015610f39573d6000803e3d6000fd5b505050506040513d6020811015610f4f57600080fd5b50519050610f7f7f0000000000000000000000000000000000000000000000000000000000000000338884611f36565b610f8f828263ffffffff61210616565b604080517f5fd5e2fc000000000000000000000000000000000000000000000000000000008152336004820152851515602482015260608d01351515604482015260808d0135606482015260a08d0135608482015260c08d013560a4820152905191935073ffffffffffffffffffffffffffffffffffffffff88169250635fd5e2fc9160c48083019260209291908290030181600087803b15801561103357600080fd5b505af1158015611047573d6000803e3d6000fd5b505050506040513d602081101561105d57600080fd5b50519350611074565b6110748583868c6003610a0f565b8473ffffffffffffffffffffffffffffffffffffffff1663a1d6fdf583868b8b8b6040518663ffffffff1660e01b81526004018086151515158152602001858152602001848152602001806020018281038252848482818152602001925080828437600081840152601f19601f8201169050808301925050509650505050505050600060405180830381600087803b15801561110f57600080fd5b505af1158015611123573d6000803e3d6000fd5b5050505060008960026009811061113657fe5b6020020135111561115b5761115b8a61114f578b611151565b8c5b33878c6002610b00565b801561118d5761118d7f0000000000000000000000000000000000000000000000000000000000000000338784611f36565b604089013515158061119f5750600081115b1561123a57604080517f33f175fc00000000000000000000000000000000000000000000000000000000815283151560048201526024810186905260448101839052905173ffffffffffffffffffffffffffffffffffffffff8716916333f175fc91606480830192600092919082900301818387803b15801561122157600080fd5b505af1158015611235573d6000803e3d6000fd5b505050505b50505097509795505050505050565b600080600083428110156112be57604080517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152600760248201527f4558504952454400000000000000000000000000000000000000000000000000604482015290519081900360640190fd5b60006112eb897f0000000000000000000000000000000000000000000000000000000000000000896119dc565b905060008060008373ffffffffffffffffffffffffffffffffffffffff16637a6a5e1b336040518263ffffffff1660e01b8152600401808273ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001915050606060405180830381600087803b15801561137157600080fd5b505af1158015611385573d6000803e3d6000fd5b505050506040513d606081101561139b57600080fd5b5080516020820151604090920151909450909250905073ffffffffffffffffffffffffffffffffffffffff7f00000000000000000000000000000000000000000000000000000000000000008116908d16106113f85781836113fb565b82825b909850965094508461140e8c8c8a611af3565b7f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff16632e1a7d4d886040518263ffffffff1660e01b815260040180828152602001915050600060405180830381600087803b15801561148157600080fd5b505af1158015611495573d6000803e3d6000fd5b505050506114a38b8861229e565b6114ce7f00000000000000000000000000000000000000000000000000000000000000008c88611af3565b50505050509450945094915050565b7f000000000000000000000000000000000000000000000000000000000000000081565b804281101561157157604080517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152600760248201527f4558504952454400000000000000000000000000000000000000000000000000604482015290519081900360640190fd5b600061157e8c8c8a6119dc565b905060008b73ffffffffffffffffffffffffffffffffffffffff168d73ffffffffffffffffffffffffffffffffffffffff16106115bb578a6115be565b8a155b604080517f5592bb530000000000000000000000000000000000000000000000000000000081523360048201528215156024820152604481018b9052606481018a90526084810189905260a48101889052905191925073ffffffffffffffffffffffffffffffffffffffff841691635592bb539160c48082019260009290919082900301818387803b15801561165357600080fd5b505af1158015611667573d6000803e3d6000fd5b505050506000808c61167a57878961167d565b88885b90925090508115611693576116938f8d84611af3565b80156116a4576116a48e8d83611af3565b86156116d5576116d57f00000000000000000000000000000000000000000000000000000000000000008d89611af3565b505050505050505050505050505050565b7f000000000000000000000000000000000000000000000000000000000000000081565b804281101561177a57604080517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152600760248201527f4558504952454400000000000000000000000000000000000000000000000000604482015290519081900360640190fd5b60006117a78b7f00000000000000000000000000000000000000000000000000000000000000008a6119dc565b905060007f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff168c73ffffffffffffffffffffffffffffffffffffffff1610611804578a611807565b8a155b604080517f5592bb530000000000000000000000000000000000000000000000000000000081523360048201528215156024820152604481018b9052606481018a90526084810189905260a48101889052905191925073ffffffffffffffffffffffffffffffffffffffff841691635592bb539160c48082019260009290919082900301818387803b15801561189c57600080fd5b505af11580156118b0573d6000803e3d6000fd5b505050506000808c6118c35787896118c6565b88885b909250905081156118dc576118dc8e8d84611af3565b8015611977577f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff16632e1a7d4d826040518263ffffffff1660e01b815260040180828152602001915050600060405180830381600087803b15801561195557600080fd5b505af1158015611969573d6000803e3d6000fd5b505050506119778c8261229e565b86156119a8576119a87f00000000000000000000000000000000000000000000000000000000000000008d89611af3565b5050505050505050505050505050565b7f000000000000000000000000000000000000000000000000000000000000000081565b60008060006119eb86866123db565b604080517fffffffffffffffffffffffffffffffffffffffff000000000000000000000000606094851b811660208084019190915293851b81166034830152604880830199909952825180830390990189526068820183528851988401989098207fff0000000000000000000000000000000000000000000000000000000000000060888301527f000000000000000000000000000000000000000000000000000000000000000090941b9097166089880152609d8701929092527fb327e3a980c558efc86f97b28d41c7a2929418be2a34a24e1696ec3b20dfa23c60bd808801919091528251808803909101815260dd909601909152845194019390932095945050505050565b6040805173ffffffffffffffffffffffffffffffffffffffff8481166024830152604480830185905283518084039091018152606490920183526020820180517bffffffffffffffffffffffffffffffffffffffffffffffffffffffff167fa9059cbb00000000000000000000000000000000000000000000000000000000178152925182516000946060949389169392918291908083835b60208310611bc957805182527fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe09092019160209182019101611b8c565b6001836020036101000a0380198251168184511680821785525050505050509050019150506000604051808303816000865af19150503d8060008114611c2b576040519150601f19603f3d011682016040523d82523d6000602084013e611c30565b606091505b5091509150818015611c5e575080511580611c5e5750808060200190516020811015611c5b57600080fd5b50515b611cc957604080517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601f60248201527f5472616e7366657248656c7065723a205452414e534645525f4641494c454400604482015290519081900360640190fd5b5050505050565b6000807f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff1663fd3206d286866040518363ffffffff1660e01b8152600401808373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020018273ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019250505060206040518083038186803b158015611da457600080fd5b505afa158015611db8573d6000803e3d6000fd5b505050506040513d6020811015611dce57600080fd5b5051905082158015611dde575080155b15611eb157604080517fc9c6539600000000000000000000000000000000000000000000000000000000815273ffffffffffffffffffffffffffffffffffffffff8781166004830152868116602483015291517f00000000000000000000000000000000000000000000000000000000000000009092169163c9c65396916044808201926020929091908290030181600087803b158015611e7e57600080fd5b505af1158015611e92573d6000803e3d6000fd5b505050506040513d6020811015611ea857600080fd5b50519150611f2e565b80831115611f2057604080517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601260248201527f496e76616c6964207061697220696e6465780000000000000000000000000000604482015290519081900360640190fd5b611f2b8585856119dc565b91505b509392505050565b6040805173ffffffffffffffffffffffffffffffffffffffff85811660248301528481166044830152606480830185905283518084039091018152608490920183526020820180517bffffffffffffffffffffffffffffffffffffffffffffffffffffffff167f23b872dd0000000000000000000000000000000000000000000000000000000017815292518251600094606094938a169392918291908083835b6020831061201457805182527fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe09092019160209182019101611fd7565b6001836020036101000a0380198251168184511680821785525050505050509050019150506000604051808303816000865af19150503d8060008114612076576040519150601f19603f3d011682016040523d82523d6000602084013e61207b565b606091505b50915091508180156120a95750805115806120a957508080602001905160208110156120a657600080fd5b50515b6120fe576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004018080602001828103825260248152602001806126196024913960400191505060405180910390fd5b505050505050565b600061214883836040518060400160405280601e81526020017f536166654d6174683a207375627472616374696f6e206f766572666c6f770000815250612544565b9392505050565b6000806000808a73ffffffffffffffffffffffffffffffffffffffff1663db13653c8b8b6040518363ffffffff1660e01b81526004018083151515158152602001828152602001925050506101006040518083038186803b1580156121b357600080fd5b505afa1580156121c7573d6000803e3d6000fd5b505050506040513d6101008110156121de57600080fd5b50604081015160a082015160c083015160e0909301519196509450909250905087151584151514801561221057508287145b801561221b57508186145b801561222657508085145b61229157604080517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601660248201527f4f7264657220706172616d73206e6f74206d6174636800000000000000000000604482015290519081900360640190fd5b5050505050505050505050565b6040805160008082526020820190925273ffffffffffffffffffffffffffffffffffffffff84169083906040518082805190602001908083835b6020831061231557805182527fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe090920191602091820191016122d8565b6001836020036101000a03801982511681845116808217855250505050505090500191505060006040518083038185875af1925050503d8060008114612377576040519150601f19603f3d011682016040523d82523d6000602084013e61237c565b606091505b50509050806123d6576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004018080602001828103825260238152602001806125f66023913960400191505060405180910390fd5b505050565b6000808273ffffffffffffffffffffffffffffffffffffffff168473ffffffffffffffffffffffffffffffffffffffff16141561247957604080517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601360248201527f4944454e544943414c5f41444452455353455300000000000000000000000000604482015290519081900360640190fd5b8273ffffffffffffffffffffffffffffffffffffffff168473ffffffffffffffffffffffffffffffffffffffff16106124b35782846124b6565b83835b909250905073ffffffffffffffffffffffffffffffffffffffff821661253d57604080517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152600c60248201527f5a45524f5f414444524553530000000000000000000000000000000000000000604482015290519081900360640190fd5b9250929050565b600081848411156125ed576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004018080602001828103825283818151815260200191508051906020019080838360005b838110156125b257818101518382015260200161259a565b50505050905090810190601f1680156125df5780820380516001836020036101000a031916815260200191505b509250505060405180910390fd5b50505090039056fe5472616e7366657248656c7065723a204554485f5452414e534645525f4641494c45445472616e7366657248656c7065723a205452414e534645525f46524f4d5f4641494c4544a2646970667358221220ad2da451cca8b46cd0a6d67d2b1c4e499d90b4d29e54e16730c2cbb85819789e64736f6c634300060b0033"
    };
});
define("@scom/scom-swap/contracts/oswap-openswap-contract/contracts/restricted/OSWAP_RestrictedLiquidityProvider4.ts", ["require", "exports", "@ijstech/eth-contract", "@scom/scom-swap/contracts/oswap-openswap-contract/contracts/restricted/OSWAP_RestrictedLiquidityProvider4.json.ts"], function (require, exports, eth_contract_34, OSWAP_RestrictedLiquidityProvider4_json_1) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.OSWAP_RestrictedLiquidityProvider4 = void 0;
    class OSWAP_RestrictedLiquidityProvider4 extends eth_contract_34.Contract {
        constructor(wallet, address) {
            super(wallet, address, OSWAP_RestrictedLiquidityProvider4_json_1.default.abi, OSWAP_RestrictedLiquidityProvider4_json_1.default.bytecode);
            this.assign();
        }
        deploy(params, options) {
            return this.__deploy([params.factory, params.WETH], options);
        }
        assign() {
            let WETH_call = async (options) => {
                let result = await this.call('WETH', [], options);
                return result;
            };
            this.WETH = WETH_call;
            let configStore_call = async (options) => {
                let result = await this.call('configStore', [], options);
                return result;
            };
            this.configStore = configStore_call;
            let factory_call = async (options) => {
                let result = await this.call('factory', [], options);
                return result;
            };
            this.factory = factory_call;
            let govToken_call = async (options) => {
                let result = await this.call('govToken', [], options);
                return result;
            };
            this.govToken = govToken_call;
            let addLiquidityParams = (params) => [params.tokenA, params.tokenB, params.addingTokenA, this.wallet.utils.toString(params.params), this.wallet.utils.stringToBytes32(params.merkleRoot), params.allowlistIpfsCid];
            let addLiquidity_send = async (params, options) => {
                let result = await this.send('addLiquidity', addLiquidityParams(params), options);
                return result;
            };
            let addLiquidity_call = async (params, options) => {
                let result = await this.call('addLiquidity', addLiquidityParams(params), options);
                return {
                    pair: result.pair,
                    _offerIndex: new eth_contract_34.BigNumber(result._offerIndex)
                };
            };
            let addLiquidity_txData = async (params, options) => {
                let result = await this.txData('addLiquidity', addLiquidityParams(params), options);
                return result;
            };
            this.addLiquidity = Object.assign(addLiquidity_send, {
                call: addLiquidity_call,
                txData: addLiquidity_txData
            });
            let addLiquidityETHParams = (params) => [params.tokenA, params.addingTokenA, this.wallet.utils.toString(params.params), this.wallet.utils.stringToBytes32(params.merkleRoot), params.allowlistIpfsCid];
            let addLiquidityETH_send = async (params, options) => {
                let result = await this.send('addLiquidityETH', addLiquidityETHParams(params), options);
                return result;
            };
            let addLiquidityETH_call = async (params, options) => {
                let result = await this.call('addLiquidityETH', addLiquidityETHParams(params), options);
                return {
                    pair: result.pair,
                    _offerIndex: new eth_contract_34.BigNumber(result._offerIndex)
                };
            };
            let addLiquidityETH_txData = async (params, options) => {
                let result = await this.txData('addLiquidityETH', addLiquidityETHParams(params), options);
                return result;
            };
            this.addLiquidityETH = Object.assign(addLiquidityETH_send, {
                call: addLiquidityETH_call,
                txData: addLiquidityETH_txData
            });
            let removeAllLiquidityParams = (params) => [params.tokenA, params.tokenB, params.to, this.wallet.utils.toString(params.pairIndex), this.wallet.utils.toString(params.deadline)];
            let removeAllLiquidity_send = async (params, options) => {
                let result = await this.send('removeAllLiquidity', removeAllLiquidityParams(params), options);
                return result;
            };
            let removeAllLiquidity_call = async (params, options) => {
                let result = await this.call('removeAllLiquidity', removeAllLiquidityParams(params), options);
                return {
                    amountA: new eth_contract_34.BigNumber(result.amountA),
                    amountB: new eth_contract_34.BigNumber(result.amountB),
                    feeOut: new eth_contract_34.BigNumber(result.feeOut)
                };
            };
            let removeAllLiquidity_txData = async (params, options) => {
                let result = await this.txData('removeAllLiquidity', removeAllLiquidityParams(params), options);
                return result;
            };
            this.removeAllLiquidity = Object.assign(removeAllLiquidity_send, {
                call: removeAllLiquidity_call,
                txData: removeAllLiquidity_txData
            });
            let removeAllLiquidityETHParams = (params) => [params.tokenA, params.to, this.wallet.utils.toString(params.pairIndex), this.wallet.utils.toString(params.deadline)];
            let removeAllLiquidityETH_send = async (params, options) => {
                let result = await this.send('removeAllLiquidityETH', removeAllLiquidityETHParams(params), options);
                return result;
            };
            let removeAllLiquidityETH_call = async (params, options) => {
                let result = await this.call('removeAllLiquidityETH', removeAllLiquidityETHParams(params), options);
                return {
                    amountToken: new eth_contract_34.BigNumber(result.amountToken),
                    amountETH: new eth_contract_34.BigNumber(result.amountETH),
                    feeOut: new eth_contract_34.BigNumber(result.feeOut)
                };
            };
            let removeAllLiquidityETH_txData = async (params, options) => {
                let result = await this.txData('removeAllLiquidityETH', removeAllLiquidityETHParams(params), options);
                return result;
            };
            this.removeAllLiquidityETH = Object.assign(removeAllLiquidityETH_send, {
                call: removeAllLiquidityETH_call,
                txData: removeAllLiquidityETH_txData
            });
            let removeLiquidityParams = (params) => [params.tokenA, params.tokenB, params.removingTokenA, params.to, this.wallet.utils.toString(params.pairIndex), this.wallet.utils.toString(params.offerIndex), this.wallet.utils.toString(params.amountOut), this.wallet.utils.toString(params.receivingOut), this.wallet.utils.toString(params.feeOut), this.wallet.utils.toString(params.deadline)];
            let removeLiquidity_send = async (params, options) => {
                let result = await this.send('removeLiquidity', removeLiquidityParams(params), options);
                return result;
            };
            let removeLiquidity_call = async (params, options) => {
                let result = await this.call('removeLiquidity', removeLiquidityParams(params), options);
                return;
            };
            let removeLiquidity_txData = async (params, options) => {
                let result = await this.txData('removeLiquidity', removeLiquidityParams(params), options);
                return result;
            };
            this.removeLiquidity = Object.assign(removeLiquidity_send, {
                call: removeLiquidity_call,
                txData: removeLiquidity_txData
            });
            let removeLiquidityETHParams = (params) => [params.tokenA, params.removingTokenA, params.to, this.wallet.utils.toString(params.pairIndex), this.wallet.utils.toString(params.offerIndex), this.wallet.utils.toString(params.amountOut), this.wallet.utils.toString(params.receivingOut), this.wallet.utils.toString(params.feeOut), this.wallet.utils.toString(params.deadline)];
            let removeLiquidityETH_send = async (params, options) => {
                let result = await this.send('removeLiquidityETH', removeLiquidityETHParams(params), options);
                return result;
            };
            let removeLiquidityETH_call = async (params, options) => {
                let result = await this.call('removeLiquidityETH', removeLiquidityETHParams(params), options);
                return;
            };
            let removeLiquidityETH_txData = async (params, options) => {
                let result = await this.txData('removeLiquidityETH', removeLiquidityETHParams(params), options);
                return result;
            };
            this.removeLiquidityETH = Object.assign(removeLiquidityETH_send, {
                call: removeLiquidityETH_call,
                txData: removeLiquidityETH_txData
            });
        }
    }
    OSWAP_RestrictedLiquidityProvider4._abi = OSWAP_RestrictedLiquidityProvider4_json_1.default.abi;
    exports.OSWAP_RestrictedLiquidityProvider4 = OSWAP_RestrictedLiquidityProvider4;
});
define("@scom/scom-swap/contracts/oswap-openswap-contract/contracts/restricted/OSWAP_RestrictedPair.json.ts", ["require", "exports"], function (require, exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    ///<amd-module name='@scom/scom-swap/contracts/oswap-openswap-contract/contracts/restricted/OSWAP_RestrictedPair.json.ts'/> 
    exports.default = {
        "abi": [
            { "inputs": [], "stateMutability": "nonpayable", "type": "constructor" },
            { "anonymous": false, "inputs": [{ "indexed": true, "internalType": "bool", "name": "direction", "type": "bool" }, { "indexed": true, "internalType": "uint256", "name": "offerIndex", "type": "uint256" }, { "indexed": true, "internalType": "address", "name": "trader", "type": "address" }, { "indexed": false, "internalType": "uint256", "name": "allocation", "type": "uint256" }], "name": "ApprovedTrader", "type": "event" },
            { "anonymous": false, "inputs": [{ "indexed": true, "internalType": "bool", "name": "direction", "type": "bool" }, { "indexed": true, "internalType": "uint256", "name": "index", "type": "uint256" }], "name": "Lock", "type": "event" },
            { "anonymous": false, "inputs": [{ "indexed": true, "internalType": "address", "name": "provider", "type": "address" }, { "indexed": true, "internalType": "bool", "name": "direction", "type": "bool" }, { "indexed": false, "internalType": "uint256", "name": "index", "type": "uint256" }, { "indexed": false, "internalType": "bool", "name": "allowAll", "type": "bool" }, { "indexed": false, "internalType": "uint256", "name": "restrictedPrice", "type": "uint256" }, { "indexed": false, "internalType": "uint256", "name": "startDate", "type": "uint256" }, { "indexed": false, "internalType": "uint256", "name": "expire", "type": "uint256" }], "name": "NewProviderOffer", "type": "event" },
            { "anonymous": false, "inputs": [{ "indexed": true, "internalType": "address", "name": "to", "type": "address" }, { "indexed": true, "internalType": "bool", "name": "direction", "type": "bool" }, { "indexed": false, "internalType": "uint256", "name": "amountIn", "type": "uint256" }, { "indexed": false, "internalType": "uint256", "name": "amountOut", "type": "uint256" }, { "indexed": false, "internalType": "uint256", "name": "tradeFee", "type": "uint256" }, { "indexed": false, "internalType": "uint256", "name": "protocolFee", "type": "uint256" }], "name": "Swap", "type": "event" },
            { "anonymous": false, "inputs": [{ "indexed": true, "internalType": "address", "name": "provider", "type": "address" }, { "indexed": true, "internalType": "bool", "name": "direction", "type": "bool" }, { "indexed": true, "internalType": "uint256", "name": "index", "type": "uint256" }, { "indexed": false, "internalType": "uint256", "name": "price", "type": "uint256" }, { "indexed": false, "internalType": "uint256", "name": "amountOut", "type": "uint256" }, { "indexed": false, "internalType": "uint256", "name": "amountIn", "type": "uint256" }, { "indexed": false, "internalType": "uint256", "name": "newAmountBalance", "type": "uint256" }, { "indexed": false, "internalType": "uint256", "name": "newReceivingBalance", "type": "uint256" }], "name": "SwappedOneOffer", "type": "event" },
            { "inputs": [{ "internalType": "bool", "name": "", "type": "bool" }, { "internalType": "uint256", "name": "", "type": "uint256" }, { "internalType": "uint256", "name": "", "type": "uint256" }], "name": "approvedTrader", "outputs": [{ "internalType": "address", "name": "", "type": "address" }], "stateMutability": "view", "type": "function" },
            { "inputs": [], "name": "configStore", "outputs": [{ "internalType": "address", "name": "", "type": "address" }], "stateMutability": "view", "type": "function" },
            { "inputs": [{ "internalType": "bool", "name": "", "type": "bool" }], "name": "counter", "outputs": [{ "internalType": "uint256", "name": "", "type": "uint256" }], "stateMutability": "view", "type": "function" },
            { "inputs": [{ "internalType": "address", "name": "provider", "type": "address" }, { "internalType": "bool", "name": "direction", "type": "bool" }, { "internalType": "bool", "name": "allowAll", "type": "bool" }, { "internalType": "uint256", "name": "restrictedPrice", "type": "uint256" }, { "internalType": "uint256", "name": "startDate", "type": "uint256" }, { "internalType": "uint256", "name": "expire", "type": "uint256" }], "name": "createOrder", "outputs": [{ "internalType": "uint256", "name": "index", "type": "uint256" }], "stateMutability": "nonpayable", "type": "function" },
            { "inputs": [], "name": "factory", "outputs": [{ "internalType": "address", "name": "", "type": "address" }], "stateMutability": "view", "type": "function" },
            { "inputs": [], "name": "feeBalance", "outputs": [{ "internalType": "uint256", "name": "", "type": "uint256" }], "stateMutability": "view", "type": "function" },
            { "inputs": [{ "internalType": "address", "name": "", "type": "address" }, { "internalType": "uint256", "name": "", "type": "uint256" }, { "internalType": "address", "name": "", "type": "address" }, { "internalType": "bytes", "name": "", "type": "bytes" }], "name": "getAmountIn", "outputs": [{ "internalType": "uint256", "name": "", "type": "uint256" }], "stateMutability": "view", "type": "function" },
            { "inputs": [{ "internalType": "address", "name": "tokenIn", "type": "address" }, { "internalType": "uint256", "name": "amountIn", "type": "uint256" }, { "internalType": "address", "name": "trader", "type": "address" }, { "internalType": "bytes", "name": "", "type": "bytes" }], "name": "getAmountOut", "outputs": [{ "internalType": "uint256", "name": "amountOut", "type": "uint256" }], "stateMutability": "view", "type": "function" },
            { "inputs": [{ "internalType": "bool", "name": "direction", "type": "bool" }, { "internalType": "uint256", "name": "offerIndex", "type": "uint256" }, { "internalType": "uint256", "name": "start", "type": "uint256" }, { "internalType": "uint256", "name": "length", "type": "uint256" }], "name": "getApprovedTrader", "outputs": [{ "internalType": "address[]", "name": "trader", "type": "address[]" }, { "internalType": "uint256[]", "name": "allocation", "type": "uint256[]" }], "stateMutability": "view", "type": "function" },
            { "inputs": [{ "internalType": "bool", "name": "direction", "type": "bool" }, { "internalType": "uint256", "name": "offerIndex", "type": "uint256" }], "name": "getApprovedTraderLength", "outputs": [{ "internalType": "uint256", "name": "", "type": "uint256" }], "stateMutability": "view", "type": "function" },
            { "inputs": [], "name": "getBalances", "outputs": [{ "internalType": "uint256", "name": "", "type": "uint256" }, { "internalType": "uint256", "name": "", "type": "uint256" }, { "internalType": "uint256", "name": "", "type": "uint256" }], "stateMutability": "view", "type": "function" },
            { "inputs": [], "name": "getLastBalances", "outputs": [{ "internalType": "uint256", "name": "", "type": "uint256" }, { "internalType": "uint256", "name": "", "type": "uint256" }], "stateMutability": "view", "type": "function" },
            { "inputs": [{ "internalType": "bool", "name": "direction", "type": "bool" }, { "internalType": "uint256", "name": "start", "type": "uint256" }, { "internalType": "uint256", "name": "length", "type": "uint256" }], "name": "getOffers", "outputs": [{ "internalType": "uint256[]", "name": "index", "type": "uint256[]" }, { "internalType": "address[]", "name": "provider", "type": "address[]" }, { "internalType": "bool[]", "name": "lockedAndAllowAll", "type": "bool[]" }, { "internalType": "uint256[]", "name": "receiving", "type": "uint256[]" }, { "internalType": "uint256[]", "name": "amountAndPrice", "type": "uint256[]" }, { "internalType": "uint256[]", "name": "startDateAndExpire", "type": "uint256[]" }], "stateMutability": "view", "type": "function" },
            { "inputs": [{ "internalType": "address", "name": "_provider", "type": "address" }, { "internalType": "bool", "name": "direction", "type": "bool" }, { "internalType": "uint256", "name": "start", "type": "uint256" }, { "internalType": "uint256", "name": "length", "type": "uint256" }], "name": "getProviderOffer", "outputs": [{ "internalType": "uint256[]", "name": "index", "type": "uint256[]" }, { "internalType": "address[]", "name": "provider", "type": "address[]" }, { "internalType": "bool[]", "name": "lockedAndAllowAll", "type": "bool[]" }, { "internalType": "uint256[]", "name": "receiving", "type": "uint256[]" }, { "internalType": "uint256[]", "name": "amountAndPrice", "type": "uint256[]" }, { "internalType": "uint256[]", "name": "startDateAndExpire", "type": "uint256[]" }], "stateMutability": "view", "type": "function" },
            { "inputs": [{ "internalType": "address", "name": "provider", "type": "address" }, { "internalType": "bool", "name": "direction", "type": "bool" }], "name": "getProviderOfferIndexLength", "outputs": [{ "internalType": "uint256", "name": "length", "type": "uint256" }], "stateMutability": "view", "type": "function" },
            { "inputs": [{ "internalType": "address", "name": "trader", "type": "address" }, { "internalType": "bool", "name": "direction", "type": "bool" }, { "internalType": "uint256", "name": "start", "type": "uint256" }, { "internalType": "uint256", "name": "length", "type": "uint256" }], "name": "getTraderOffer", "outputs": [{ "internalType": "uint256[]", "name": "index", "type": "uint256[]" }, { "internalType": "address[]", "name": "provider", "type": "address[]" }, { "internalType": "bool[]", "name": "lockedAndAllowAll", "type": "bool[]" }, { "internalType": "uint256[]", "name": "receiving", "type": "uint256[]" }, { "internalType": "uint256[]", "name": "amountAndPrice", "type": "uint256[]" }, { "internalType": "uint256[]", "name": "startDateAndExpire", "type": "uint256[]" }], "stateMutability": "view", "type": "function" },
            { "inputs": [], "name": "govToken", "outputs": [{ "internalType": "address", "name": "", "type": "address" }], "stateMutability": "view", "type": "function" },
            { "inputs": [], "name": "governance", "outputs": [{ "internalType": "address", "name": "", "type": "address" }], "stateMutability": "view", "type": "function" },
            { "inputs": [{ "internalType": "address", "name": "_token0", "type": "address" }, { "internalType": "address", "name": "_token1", "type": "address" }], "name": "initialize", "outputs": [], "stateMutability": "nonpayable", "type": "function" },
            { "inputs": [{ "internalType": "bool", "name": "", "type": "bool" }, { "internalType": "uint256", "name": "", "type": "uint256" }, { "internalType": "address", "name": "", "type": "address" }], "name": "isApprovedTrader", "outputs": [{ "internalType": "bool", "name": "", "type": "bool" }], "stateMutability": "view", "type": "function" },
            { "inputs": [], "name": "isLive", "outputs": [{ "internalType": "bool", "name": "", "type": "bool" }], "stateMutability": "view", "type": "function" },
            { "inputs": [], "name": "lastGovBalance", "outputs": [{ "internalType": "uint256", "name": "", "type": "uint256" }], "stateMutability": "view", "type": "function" },
            { "inputs": [], "name": "lastToken0Balance", "outputs": [{ "internalType": "uint256", "name": "", "type": "uint256" }], "stateMutability": "view", "type": "function" },
            { "inputs": [], "name": "lastToken1Balance", "outputs": [{ "internalType": "uint256", "name": "", "type": "uint256" }], "stateMutability": "view", "type": "function" },
            { "inputs": [{ "internalType": "bool", "name": "direction", "type": "bool" }, { "internalType": "uint256", "name": "index", "type": "uint256" }], "name": "lockOffer", "outputs": [], "stateMutability": "nonpayable", "type": "function" },
            { "inputs": [{ "internalType": "bool", "name": "", "type": "bool" }, { "internalType": "uint256", "name": "", "type": "uint256" }], "name": "offers", "outputs": [{ "internalType": "address", "name": "provider", "type": "address" }, { "internalType": "bool", "name": "locked", "type": "bool" }, { "internalType": "bool", "name": "allowAll", "type": "bool" }, { "internalType": "uint256", "name": "amount", "type": "uint256" }, { "internalType": "uint256", "name": "receiving", "type": "uint256" }, { "internalType": "uint256", "name": "restrictedPrice", "type": "uint256" }, { "internalType": "uint256", "name": "startDate", "type": "uint256" }, { "internalType": "uint256", "name": "expire", "type": "uint256" }], "stateMutability": "view", "type": "function" },
            { "inputs": [], "name": "protocolFeeBalance0", "outputs": [{ "internalType": "uint256", "name": "", "type": "uint256" }], "stateMutability": "view", "type": "function" },
            { "inputs": [], "name": "protocolFeeBalance1", "outputs": [{ "internalType": "uint256", "name": "", "type": "uint256" }], "stateMutability": "view", "type": "function" },
            { "inputs": [{ "internalType": "bool", "name": "", "type": "bool" }, { "internalType": "address", "name": "", "type": "address" }, { "internalType": "uint256", "name": "", "type": "uint256" }], "name": "providerOfferIndex", "outputs": [{ "internalType": "uint256", "name": "", "type": "uint256" }], "stateMutability": "view", "type": "function" },
            { "inputs": [], "name": "redeemProtocolFee", "outputs": [], "stateMutability": "nonpayable", "type": "function" },
            { "inputs": [], "name": "restrictedLiquidityProvider", "outputs": [{ "internalType": "address", "name": "", "type": "address" }], "stateMutability": "view", "type": "function" },
            { "inputs": [], "name": "scaleDirection", "outputs": [{ "internalType": "bool", "name": "", "type": "bool" }], "stateMutability": "view", "type": "function" },
            { "inputs": [], "name": "scaler", "outputs": [{ "internalType": "uint256", "name": "", "type": "uint256" }], "stateMutability": "view", "type": "function" },
            { "inputs": [{ "internalType": "bool", "name": "_isLive", "type": "bool" }], "name": "setLive", "outputs": [], "stateMutability": "nonpayable", "type": "function" },
            { "inputs": [{ "internalType": "uint256", "name": "amount0Out", "type": "uint256" }, { "internalType": "uint256", "name": "amount1Out", "type": "uint256" }, { "internalType": "address", "name": "to", "type": "address" }, { "internalType": "address", "name": "trader", "type": "address" }, { "internalType": "bytes", "name": "", "type": "bytes" }], "name": "swap", "outputs": [], "stateMutability": "nonpayable", "type": "function" },
            { "inputs": [], "name": "sync", "outputs": [], "stateMutability": "nonpayable", "type": "function" },
            { "inputs": [], "name": "token0", "outputs": [{ "internalType": "address", "name": "", "type": "address" }], "stateMutability": "view", "type": "function" },
            { "inputs": [], "name": "token1", "outputs": [{ "internalType": "address", "name": "", "type": "address" }], "stateMutability": "view", "type": "function" },
            { "inputs": [{ "internalType": "bool", "name": "", "type": "bool" }, { "internalType": "uint256", "name": "", "type": "uint256" }, { "internalType": "address", "name": "", "type": "address" }], "name": "traderAllocation", "outputs": [{ "internalType": "uint256", "name": "", "type": "uint256" }], "stateMutability": "view", "type": "function" },
            { "inputs": [{ "internalType": "bool", "name": "", "type": "bool" }, { "internalType": "address", "name": "", "type": "address" }, { "internalType": "uint256", "name": "", "type": "uint256" }], "name": "traderOffer", "outputs": [{ "internalType": "uint256", "name": "", "type": "uint256" }], "stateMutability": "view", "type": "function" },
            { "inputs": [], "name": "whitelistFactory", "outputs": [{ "internalType": "address", "name": "", "type": "address" }], "stateMutability": "view", "type": "function" }
        ],
        "bytecode": "610140604052600180553480156200001657600080fd5b5033606081901b60809081526000805460ff191660011781556040805163ea2ed2c160e01b81529051919384938493849363ea2ed2c1926004808301939192829003018186803b1580156200006a57600080fd5b505afa1580156200007f573d6000803e3d6000fd5b505050506040513d60808110156200009657600080fd5b5080516020808301516040808501516060958601516001600160601b031986881b811660a0529684901b90961660c052815163b716d46360e01b815291519499509197509095509293506001600160a01b0387169263b716d4639260048083019392829003018186803b1580156200010d57600080fd5b505afa15801562000122573d6000803e3d6000fd5b505050506040513d60208110156200013957600080fd5b81019080805190602001909291905050506001600160a01b0316610100816001600160a01b031660601b81525050816001600160a01b031660e0816001600160a01b031660601b81525050806001600160a01b0316610120816001600160a01b031660601b81525050600360006001151515158152602001908152602001600020604051806101000160405280306001600160a01b03168152602001600115158152602001600015158152602001600081526020016000815260200160008152602001600081526020016000815250908060018154018082558091505060019003906000526020600020906006020160009091909190915060008201518160000160006101000a8154816001600160a01b0302191690836001600160a01b0316021790555060208201518160000160146101000a81548160ff02191690831515021790555060408201518160000160156101000a81548160ff021916908315150217905550606082015181600101556080820151816002015560a0820151816003015560c0820151816004015560e0820151816005015550506003600080151515158152602001908152602001600020604051806101000160405280306001600160a01b03168152602001600115158152602001600015158152602001600081526020016000815260200160008152602001600081526020016000815250908060018154018082558091505060019003906000526020600020906006020160009091909190915060008201518160000160006101000a8154816001600160a01b0302191690836001600160a01b0316021790555060208201518160000160146101000a81548160ff02191690831515021790555060408201518160000160156101000a81548160ff021916908315150217905550606082015181600101556080820151816002015560a0820151816003015560c0820151816004015560e0820151816005015550505050505060805160601c60a05160601c60c05160601c60e05160601c6101005160601c6101205160601c614a5e620004c5600039806119c75280611ced5280612483525080610c175280610e2652806123be52806133ef528061344752806134a25280613546528061366452806136ae52508061183952806121535280612ba752508061261f5280612c345250806113fe525080610f3d52806110e852806116b35280611f555280612320528061250c5280612c6e5280613f2e5250614a5e6000f3fe608060405234801561001057600080fd5b50600436106102d25760003560e01c80637401342411610186578063bebf7a61116100e3578063db13653c11610097578063f060d13911610071578063f060d13914610be1578063f5ee334814610be9578063fff6cae914610c08576102d2565b8063db13653c14610ac0578063e5d36ff614610b3d578063ea5dbbc414610b45576102d2565b8063d21220a7116100c8578063d21220a7146109cf578063d38550a7146109d7578063d7dc4e4314610a1e576102d2565b8063bebf7a61146109bf578063c45a0155146109c7576102d2565b80639d69dc4e1161013a578063a87876931161011f578063a878769314610990578063b2901aa3146109af578063b8f7a665146109b7576102d2565b80639d69dc4e146109475780639f0a3cc11461094f576102d2565b8063835daf6c1161016b578063835daf6c146108f05780639749d213146108f85780639cac76ac14610900576102d2565b80637401342414610876578063752bc9dc146108cb576102d2565b806348c0902f116102345780635fd5e2fc116101e8578063625b6ced116101cd578063625b6ced146107975780636b4afee1146107d257806372ca7372146107da576102d2565b80635fd5e2fc1461073a57806360b71d4e1461078f576102d2565b80635a6af09d116102195780635a6af09d146106605780635aa6e675146106685780635eff2d0114610670576102d2565b806348c0902f1461062d578063577e6d0814610658576102d2565b8063364aed841161028b5780633c6d5c72116102705780633c6d5c72146103f75780633d0d81d614610418578063485cc955146105f0576102d2565b8063364aed84146103ae5780633c1e6ff5146103ef576102d2565b80630dfe1681116102bc5780630dfe16811461032e5780631da9a2bd146103365780631deb49951461036d576102d2565b8062113e08146102d757806305268cff146102fd575b600080fd5b6102df610c10565b60408051938452602084019290925282820152519081900360600190f35b610305610e24565b6040805173ffffffffffffffffffffffffffffffffffffffff9092168252519081900360200190f35b610305610e48565b61035b6004803603604081101561034c57600080fd5b50803515159060200135610e64565b60408051918252519081900360200190f35b61035b6004803603606081101561038357600080fd5b50803515159073ffffffffffffffffffffffffffffffffffffffff6020820135169060400135610e88565b61035b600480360360608110156103c457600080fd5b50803515159073ffffffffffffffffffffffffffffffffffffffff6020820135169060400135610ec3565b61035b610ee8565b6103ff610eee565b6040805192835260208301919091528051918290030190f35b6104436004803603606081101561042e57600080fd5b50803515159060208101359060400135610ef8565b6040518080602001806020018060200180602001806020018060200187810387528d818151815260200191508051906020019060200280838360005b8381101561049757818101518382015260200161047f565b5050505090500187810386528c818151815260200191508051906020019060200280838360005b838110156104d65781810151838201526020016104be565b5050505090500187810385528b818151815260200191508051906020019060200280838360005b838110156105155781810151838201526020016104fd565b5050505090500187810384528a818151815260200191508051906020019060200280838360005b8381101561055457818101518382015260200161053c565b50505050905001878103835289818151815260200191508051906020019060200280838360005b8381101561059357818101518382015260200161057b565b50505050905001878103825288818151815260200191508051906020019060200280838360005b838110156105d25781810151838201526020016105ba565b505050509050019c5050505050505050505050505060405180910390f35b61062b6004803603604081101561060657600080fd5b5073ffffffffffffffffffffffffffffffffffffffff81358116916020013516610f25565b005b6103056004803603606081101561064357600080fd5b508035151590602081013590604001356113a1565b61035b6113f0565b61035b6113f6565b6103056113fc565b6106a16004803603608081101561068657600080fd5b50803515159060208101359060408101359060600135611420565b604051808060200180602001838103835285818151815260200191508051906020019060200280838360005b838110156106e55781810151838201526020016106cd565b50505050905001838103825284818151815260200191508051906020019060200280838360005b8381101561072457818101518382015260200161070c565b5050505090500194505050505060405180910390f35b61035b600480360360c081101561075057600080fd5b5073ffffffffffffffffffffffffffffffffffffffff813516906020810135151590604081013515159060608101359060808101359060a00135611636565b61035b611e2e565b61035b600480360360408110156107ad57600080fd5b5073ffffffffffffffffffffffffffffffffffffffff81351690602001351515611e34565b61035b611e6a565b61035b600480360360808110156107f057600080fd5b73ffffffffffffffffffffffffffffffffffffffff823581169260208101359260408201359092169181019060808101606082013564010000000081111561083757600080fd5b82018360208201111561084957600080fd5b8035906020019184600183028401116401000000008311171561086b57600080fd5b509092509050611e70565b6108b76004803603606081101561088c57600080fd5b5080351515906020810135906040013573ffffffffffffffffffffffffffffffffffffffff166120fe565b604080519115158252519081900360200190f35b61062b600480360360408110156108e157600080fd5b50803515159060200135612124565b61035b61229d565b61062b6122a3565b6104436004803603608081101561091657600080fd5b5073ffffffffffffffffffffffffffffffffffffffff81351690602081013515159060408101359060600135612453565b610305612481565b61035b6004803603606081101561096557600080fd5b5080351515906020810135906040013573ffffffffffffffffffffffffffffffffffffffff166124a5565b61035b600480360360208110156109a657600080fd5b503515156124c8565b61035b6124da565b6108b76124e0565b6108b76124e9565b61030561250a565b61030561252e565b610443600480360360808110156109ed57600080fd5b5073ffffffffffffffffffffffffffffffffffffffff8135169060208101351515906040810135906060013561254a565b61062b600480360360a0811015610a3457600080fd5b81359160208101359173ffffffffffffffffffffffffffffffffffffffff604083013581169260608101359091169181019060a081016080820135640100000000811115610a8157600080fd5b820183602082011115610a9357600080fd5b80359060200191846001830284011164010000000083111715610ab557600080fd5b509092509050612561565b610ae560048036036040811015610ad657600080fd5b50803515159060200135612b02565b6040805173ffffffffffffffffffffffffffffffffffffffff90991689529615156020890152941515878701526060870193909352608086019190915260a085015260c084015260e083015251908190036101000190f35b610305612ba5565b61035b60048036036080811015610b5b57600080fd5b73ffffffffffffffffffffffffffffffffffffffff8235811692602081013592604082013590921691810190608081016060820135640100000000811115610ba257600080fd5b820183602082011115610bb457600080fd5b80359060200191846001830284011164010000000083111715610bd657600080fd5b509092509050612bc9565b610305612c32565b61062b60048036036020811015610bff57600080fd5b50351515612c56565b61062b612d2b565b60008060007f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff166370a08231306040518263ffffffff1660e01b8152600401808273ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200191505060206040518083038186803b158015610cb257600080fd5b505afa158015610cc6573d6000803e3d6000fd5b505050506040513d6020811015610cdc57600080fd5b5051600954604080517f70a08231000000000000000000000000000000000000000000000000000000008152306004820152905173ffffffffffffffffffffffffffffffffffffffff909216916370a0823191602480820192602092909190829003018186803b158015610d4f57600080fd5b505afa158015610d63573d6000803e3d6000fd5b505050506040513d6020811015610d7957600080fd5b5051600a54604080517f70a08231000000000000000000000000000000000000000000000000000000008152306004820152905173ffffffffffffffffffffffffffffffffffffffff909216916370a0823191602480820192602092909190829003018186803b158015610dec57600080fd5b505afa158015610e00573d6000803e3d6000fd5b505050506040513d6020811015610e1657600080fd5b505191945092509050909192565b7f000000000000000000000000000000000000000000000000000000000000000081565b60095473ffffffffffffffffffffffffffffffffffffffff1681565b81151560009081526005602090815260408083208484529091529020545b92915050565b60046020528260005260406000206020528160005260406000208181548110610ead57fe5b9060005260206000200160009250925050505481565b60086020528260005260406000206020528160005260406000208181548110610ead57fe5b600b5481565b600d54600e549091565b606080606080606080610f0f6000808b8b8b612daf565b949e939d50919b50995097509095509350505050565b3373ffffffffffffffffffffffffffffffffffffffff7f00000000000000000000000000000000000000000000000000000000000000001614610fc957604080517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152600960248201527f464f5242494444454e0000000000000000000000000000000000000000000000604482015290519081900360640190fd5b6009805473ffffffffffffffffffffffffffffffffffffffff8085167fffffffffffffffffffffffff00000000000000000000000000000000000000009283161792839055600a80548583169316929092179182905590811691161061109057604080517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601860248201527f496e76616c696420746f6b656e2070616972206f726465720000000000000000604482015290519081900360640190fd5b600954600a54604080517f52a03c0300000000000000000000000000000000000000000000000000000000815273ffffffffffffffffffffffffffffffffffffffff93841660048201529183166024830152516000927f000000000000000000000000000000000000000000000000000000000000000016916352a03c0391604480830192602092919082900301818787803b15801561112f57600080fd5b505af1158015611143573d6000803e3d6000fd5b505050506040513d602081101561115957600080fd5b5051905073ffffffffffffffffffffffffffffffffffffffff81166111df57604080517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152600f60248201527f4e6f206f7261636c6520666f756e640000000000000000000000000000000000604482015290519081900360640190fd5b600954604080517f313ce567000000000000000000000000000000000000000000000000000000008152905160009273ffffffffffffffffffffffffffffffffffffffff169163313ce567916004808301926020929190829003018186803b15801561124a57600080fd5b505afa15801561125e573d6000803e3d6000fd5b505050506040513d602081101561127457600080fd5b5051600a54604080517f313ce567000000000000000000000000000000000000000000000000000000008152905192935060009273ffffffffffffffffffffffffffffffffffffffff9092169163313ce56791600480820192602092909190829003018186803b1580156112e757600080fd5b505afa1580156112fb573d6000803e3d6000fd5b505050506040513d602081101561131157600080fd5b5051905060ff828116908216141561132d576001600b5561139a565b600a80547fffffffffffffffffffffff00ffffffffffffffffffffffffffffffffffffffff1660ff8481168482161174010000000000000000000000000000000000000000908102929092179283905591041661138c57808203611390565b8181035b60ff16600a0a600b555b5050505050565b600560205282600052604060002060205281600052604060002081815481106113c657fe5b60009182526020909120015473ffffffffffffffffffffffffffffffffffffffff16925083915050565b60105481565b600d5481565b7f000000000000000000000000000000000000000000000000000000000000000081565b831515600090815260056020908152604080832086845290915290208054606091829180861015611610578061145c878763ffffffff61330f16565b111561147557611472818763ffffffff61338a16565b94505b8467ffffffffffffffff8111801561148c57600080fd5b506040519080825280602002602001820160405280156114b6578160200160208202803683370190505b5093508467ffffffffffffffff811180156114d057600080fd5b506040519080825280602002602001820160405280156114fa578160200160208202803683370190505b50925060005b8581101561160a5788151560009081526007602090815260408083208b845290915281209084611536848b63ffffffff61330f16565b8154811061154057fe5b9060005260206000200160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1687848151811061157757fe5b602002602001019073ffffffffffffffffffffffffffffffffffffffff16908173ffffffffffffffffffffffffffffffffffffffff1681525073ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020548482815181106115f757fe5b6020908102919091010152600101611500565b5061162b565b60408051600080825260208201908152818301909252945092505b505094509492505050565b60006001546001146116a957604080517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152600660248201527f4c4f434b45440000000000000000000000000000000000000000000000000000604482015290519081900360640190fd5b60006001819055507f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff1663b8f7a6656040518163ffffffff1660e01b8152600401602060405180830381600087803b15801561171957600080fd5b505af115801561172d573d6000803e3d6000fd5b505050506040513d602081101561174357600080fd5b50516117b057604080517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152600f60248201527f474c4f42414c4c59205041555345440000000000000000000000000000000000604482015290519081900360640190fd5b60005460ff1661182157604080517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152600660248201527f5041555345440000000000000000000000000000000000000000000000000000604482015290519081900360640190fd5b3373ffffffffffffffffffffffffffffffffffffffff7f000000000000000000000000000000000000000000000000000000000000000016148061187a57503373ffffffffffffffffffffffffffffffffffffffff8816145b6118e557604080517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601860248201527f4e6f742066726f6d20726f75746572206f72206f776e65720000000000000000604482015290519081900360640190fd5b8282101561195457604080517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152600f60248201527f416c726561647920657870697265640000000000000000000000000000000000604482015290519081900360640190fd5b428210156119c357604080517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152600f60248201527f416c726561647920657870697265640000000000000000000000000000000000604482015290519081900360640190fd5b60007f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff1663bc14128f7f52657374726963746564506169722e6d617844757200000000000000000000006040518263ffffffff1660e01b81526004018082815260200191505060206040518083038186803b158015611a5657600080fd5b505afa158015611a6a573d6000803e3d6000fd5b505050506040513d6020811015611a8057600080fd5b50519050428101831115611af557604080517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601360248201527f45787069726520746f6f20666172206177617900000000000000000000000000604482015290519081900360640190fd5b506002600087151515158152602001908152602001600020600081546001019190508190559050600460008715151515815260200190815260200160002060008873ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002081908060018154018082558091505060019003906000526020600020016000909190919091505560036000871515151581526020019081526020016000206040518061010001604052808973ffffffffffffffffffffffffffffffffffffffff1681526020016000151581526020018715158152602001600081526020016000815260200186815260200185815260200184815250908060018154018082558091505060019003906000526020600020906006020160009091909190915060008201518160000160006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555060208201518160000160146101000a81548160ff02191690831515021790555060408201518160000160156101000a81548160ff021916908315150217905550606082015181600101556080820151816002015560a0820151816003015560c0820151816004015560e08201518160050155505060007f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff1663bc14128f7f52657374726963746564506169722e6665655065724f726465720000000000006040518263ffffffff1660e01b81526004018082815260200191505060206040518083038186803b158015611d7c57600080fd5b505afa158015611d90573d6000803e3d6000fd5b505050506040513d6020811015611da657600080fd5b50519050611db488826133cc565b604080518381528715156020820152808201879052606081018690526080810185905290518815159173ffffffffffffffffffffffffffffffffffffffff8b16917f528317aa3a915641ec93963a99c0ef7d64d16e351d258904238e941a5af151da9181900360a00190a350600180559695505050505050565b60115481565b1515600090815260046020908152604080832073ffffffffffffffffffffffffffffffffffffffff949094168352929052205490565b600e5481565b6000808511611ee057604080517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601960248201527f494e53554646494349454e545f494e5055545f414d4f554e5400000000000000604482015290519081900360640190fd5b606080611eed60846136fa565b600954600a54604080517f069d188f00000000000000000000000000000000000000000000000000000000815273ffffffffffffffffffffffffffffffffffffffff9384166004820181905292841660248201529051949650929450818c16149260009283927f0000000000000000000000000000000000000000000000000000000000000000169163069d188f91604480820192606092909190829003018186803b158015611f9c57600080fd5b505afa158015611fb0573d6000803e3d6000fd5b505050506040513d6060811015611fc657600080fd5b50805160209091015190925090506000805b86518110156120ee576000878281518110611fef57fe5b6020026020010151905060026000871515151581526020019081526020016000205481111561207f57604080517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152600f60248201527f4f66666572206e6f742065786973740000000000000000000000000000000000604482015290519081900360640190fd5b6120bd670de0b6b3a76400006120b18f8a868151811061209b57fe5b60200260200101516138e290919063ffffffff16565b9063ffffffff61395516565b92506120cd86848e848989613997565b509093506120e39050898463ffffffff61330f16565b985050600101611fd8565b5050505050505095945050505050565b600660209081526000938452604080852082529284528284209052825290205460ff1681565b811515600090815260036020526040812080548390811061214157fe5b906000526020600020906006020190507f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff1614806121c15750805473ffffffffffffffffffffffffffffffffffffffff1633145b61222c57604080517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601860248201527f4e6f742066726f6d20726f75746572206f72206f776e65720000000000000000604482015290519081900360640190fd5b80547fffffffffffffffffffffff00ffffffffffffffffffffffffffffffffffffffff16740100000000000000000000000000000000000000001781556040518290841515907f108c7d3c4d8ad208c92f4064bac678f032a0ac5bdbaaa1c0fdbd240b23b445ea90600090a3505050565b600f5481565b60015460011461231457604080517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152600660248201527f4c4f434b45440000000000000000000000000000000000000000000000000000604482015290519081900360640190fd5b600060018190555060007f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff1663ef3692526040518163ffffffff1660e01b8152600401602060405180830381600087803b15801561238657600080fd5b505af115801561239a573d6000803e3d6000fd5b505050506040513d60208110156123b057600080fd5b50516011549091506123e5907f0000000000000000000000000000000000000000000000000000000000000000908390613c9c565b600954600f5461240d9173ffffffffffffffffffffffffffffffffffffffff16908390613c9c565b600a546010546124359173ffffffffffffffffffffffffffffffffffffffff16908390613c9c565b60006011819055600f81905560105561244c613ea2565b5060018055565b60608060608060608061246a60018b8b8b8b612daf565b949f939e50919c509a509850909650945050505050565b7f000000000000000000000000000000000000000000000000000000000000000081565b600760209081526000938452604080852082529284528284209052825290205481565b60026020526000908152604090205481565b600c5481565b60005460ff1681565b600a5474010000000000000000000000000000000000000000900460ff1681565b7f000000000000000000000000000000000000000000000000000000000000000081565b600a5473ffffffffffffffffffffffffffffffffffffffff1681565b60608060608060608061246a60028b8b8b8b612daf565b6001546001146125d257604080517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152600660248201527f4c4f434b45440000000000000000000000000000000000000000000000000000604482015290519081900360640190fd5b60006001819055604080517f3af32abf000000000000000000000000000000000000000000000000000000008152336004820152905173ffffffffffffffffffffffffffffffffffffffff7f00000000000000000000000000000000000000000000000000000000000000001692633af32abf92602480820193602093909283900390910190829087803b15801561266957600080fd5b505af115801561267d573d6000803e3d6000fd5b505050506040513d602081101561269357600080fd5b505161273a5732331480156126ae57506126ac33613eb5565b155b80156126cf575073ffffffffffffffffffffffffffffffffffffffff831633145b61273a57604080517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152600e60248201527f496e76616c696420747261646572000000000000000000000000000000000000604482015290519081900360640190fd5b60005460ff166127ab57604080517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152600660248201527f5041555345440000000000000000000000000000000000000000000000000000604482015290519081900360640190fd5b600d54600954604080517f70a08231000000000000000000000000000000000000000000000000000000008152306004820152905160009361286093909273ffffffffffffffffffffffffffffffffffffffff909116916370a0823191602480820192602092909190829003018186803b15801561282857600080fd5b505afa15801561283c573d6000803e3d6000fd5b505050506040513d602081101561285257600080fd5b50519063ffffffff61338a16565b600e54600a54604080517f70a0823100000000000000000000000000000000000000000000000000000000815230600482015290519394506000936128dc939273ffffffffffffffffffffffffffffffffffffffff16916370a08231916024808301926020929190829003018186803b15801561282857600080fd5b9050600080891580156128ee57508815155b156129b2576128ff60018589613ebb565b90925090508882101561297357604080517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601360248201527f494e53554646494349454e545f414d4f554e5400000000000000000000000000604482015290519081900360640190fd5b600a546129979073ffffffffffffffffffffffffffffffffffffffff168984613c9c565b600f546129aa908263ffffffff61330f16565b600f55612aea565b89158015906129bf575088155b15612a83576129d060008489613ebb565b909250905089821015612a4457604080517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601360248201527f494e53554646494349454e545f414d4f554e5400000000000000000000000000604482015290519081900360640190fd5b600954612a689073ffffffffffffffffffffffffffffffffffffffff168984613c9c565b601054612a7b908263ffffffff61330f16565b601055612aea565b604080517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152600d60248201527f4e6f7420737570706f7274656400000000000000000000000000000000000000604482015290519081900360640190fd5b612af2613ea2565b5050600180555050505050505050565b60036020528160005260406000208181548110612b1b57fe5b600091825260209091206006909102018054600182015460028301546003840154600485015460059095015473ffffffffffffffffffffffffffffffffffffffff8516975060ff7401000000000000000000000000000000000000000086048116975075010000000000000000000000000000000000000000009095049094169492939192909188565b7f000000000000000000000000000000000000000000000000000000000000000081565b604080517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152600d60248201527f4e6f7420737570706f72746564000000000000000000000000000000000000006044820152905160009181900360640190fd5b7f000000000000000000000000000000000000000000000000000000000000000081565b3373ffffffffffffffffffffffffffffffffffffffff7f00000000000000000000000000000000000000000000000000000000000000001614612cfa57604080517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152600960248201527f464f5242494444454e0000000000000000000000000000000000000000000000604482015290519081900360640190fd5b600080547fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff0016911515919091179055565b600154600114612d9c57604080517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152600660248201527f4c4f434b45440000000000000000000000000000000000000000000000000000604482015290519081900360640190fd5b6000600155612da9613ea2565b60018055565b606080808080806000808c612ded57505088151560008181526004602090815260408083208380528252808320938352600390915290205490612ede565b8c60011415612e32575050881515600090815260086020908152604080832073ffffffffffffffffffffffffffffffffffffffff8e1684529091529020805490612ede565b8c60021415612e77575050881515600090815260046020908152604080832073ffffffffffffffffffffffffffffffffffffffff8e1684529091529020805490612ede565b604080517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152600c60248201527f556e6b6e6f776e206c6973740000000000000000000000000000000000000000604482015290519081900360640190fd5b8a151560009081526003602052604090208d90838c10156132d25783612f0a8d8d63ffffffff61330f16565b1115612f2357612f20848d63ffffffff61338a16565b9a505b8a67ffffffffffffffff81118015612f3a57600080fd5b50604051908082528060200260200182016040528015612f64578160200160208202803683370190505b5099508a67ffffffffffffffff81118015612f7e57600080fd5b50604051908082528060200260200182016040528015612fa8578160200160208202803683370190505b5098508a67ffffffffffffffff81118015612fc257600080fd5b50604051908082528060200260200182016040528015612fec578160200160208202803683370190505b5096508a60020293508367ffffffffffffffff8111801561300c57600080fd5b50604051908082528060200260200182016040528015613036578160200160208202803683370190505b5097508367ffffffffffffffff8111801561305057600080fd5b5060405190808252806020026020018201604052801561307a578160200160208202803683370190505b5095508367ffffffffffffffff8111801561309457600080fd5b506040519080825280602002602001820160405280156130be578160200160208202803683370190505b50945060005b8b8110156132cc576130dc818e63ffffffff61330f16565b945082156131255782600114613108578385815481106130f857fe5b9060005260206000200154613120565b83858154811061311457fe5b90600052602060002001545b613127565b845b9450600082868154811061313757fe5b90600052602060002090600602019050858c838151811061315457fe5b602090810291909101015261316f828e63ffffffff61330f16565b81548c5191975073ffffffffffffffffffffffffffffffffffffffff16908c908490811061319957fe5b602002602001019073ffffffffffffffffffffffffffffffffffffffff16908173ffffffffffffffffffffffffffffffffffffffff16815250508060000160149054906101000a900460ff168a83815181106131f157fe5b6020026020010190151590811515815250508060000160159054906101000a900460ff168a878151811061322157fe5b602002602001019015159081151581525050806002015489838151811061324457fe5b602002602001018181525050806001015488838151811061326157fe5b602002602001018181525050806003015488878151811061327e57fe5b602002602001018181525050806004015487838151811061329b57fe5b60200260200101818152505080600501548787815181106132b857fe5b6020908102919091010152506001016130c4565b506132fe565b6040805160008082526020820181815282840191825260608301909352909a5090985096508695508594505b505050509550955095509550955095565b60008282018381101561338357604080517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601b60248201527f536166654d6174683a206164646974696f6e206f766572666c6f770000000000604482015290519081900360640190fd5b9392505050565b600061338383836040518060400160405280601e81526020017f536166654d6174683a207375627472616374696f6e206f766572666c6f770000815250614178565b3373ffffffffffffffffffffffffffffffffffffffff831614156134fd576134167f0000000000000000000000000000000000000000000000000000000000000000833084614229565b601154613429908263ffffffff61330f16565b601155600c5461343f908263ffffffff61330f16565b600c556009547f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff9081169116141561349d57600d54613499908263ffffffff61330f16565b600d555b600a547f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff908116911614156134f857600e546134f4908263ffffffff61330f16565b600e555b6136f6565b604080517f70a08231000000000000000000000000000000000000000000000000000000008152306004820152905160009173ffffffffffffffffffffffffffffffffffffffff7f000000000000000000000000000000000000000000000000000000000000000016916370a0823191602480820192602092909190829003018186803b15801561358d57600080fd5b505afa1580156135a1573d6000803e3d6000fd5b505050506040513d60208110156135b757600080fd5b5051600c549091506000906135d390839063ffffffff61338a16565b90508281101561364457604080517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152600e60248201527f4e6f7420656e6f75676820666565000000000000000000000000000000000000604482015290519081900360640190fd5b601154613657908263ffffffff61330f16565b601155600c8290556009547f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff908116911614156136a957600d8290555b600a547f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff908116911614156136f357600e8290555b50505b5050565b606080600061370f848363ffffffff61330f16565b36101561377d57604080517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601260248201527f496e76616c6964206f66666572206c6973740000000000000000000000000000604482015290519081900360640190fd5b60208401356020810280600202604087010136101561379b57600080fd5b604051602082016002028101604052828152816040880160208301378095508160200181019050828152818260408901016020830137935060020260209081019250369150613800906137f4878563ffffffff61330f16565b9063ffffffff61330f16565b1461386c57604080517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601360248201527f496e76616c69642064617461206c656e67746800000000000000000000000000604482015290519081900360640190fd5b60008351116138dc57604080517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601260248201527f496e76616c6964206f66666572206c6973740000000000000000000000000000604482015290519081900360640190fd5b50915091565b6000826138f157506000610e82565b828202828482816138fe57fe5b0414613383576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401808060200182810382526021815260200180614a086021913960400191505060405180910390fd5b600061338383836040518060400160405280601a81526020017f536166654d6174683a206469766973696f6e206279207a65726f00000000000081525061440f565b600080806139b2620186a06120b18a8763ffffffff6138e216565b90506139c4888263ffffffff61338a16565b97506000808673ffffffffffffffffffffffffffffffffffffffff1663b80333ed8c613a0857600a5473ffffffffffffffffffffffffffffffffffffffff16613a22565b60095473ffffffffffffffffffffffffffffffffffffffff165b8d613a455760095473ffffffffffffffffffffffffffffffffffffffff16613a5f565b600a5473ffffffffffffffffffffffffffffffffffffffff165b8d60008e8e604051602001808281526020019150506040516020818303038152906040526040518763ffffffff1660e01b8152600401808773ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020018673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020018581526020018481526020018373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200180602001828103825283818151815260200191508051906020019080838360005b83811015613b71578181015183820152602001613b59565b50505050905090810190601f168015613b9e5780820380516001836020036101000a031916815260200191505b50975050505050505050604080518083038186803b158015613bbf57600080fd5b505afa158015613bd3573d6000803e3d6000fd5b505050506040513d6040811015613be957600080fd5b5080516020909101519092509050613c078a8363ffffffff6138e216565b94506001600b541115613c5e57600a60149054906101000a900460ff1615158b151514613c4757600b54613c4290869063ffffffff61395516565b613c5b565b600b54613c5b90869063ffffffff6138e216565b94505b613c6e858263ffffffff61395516565b9450613c8c816120b184670de0b6b3a764000063ffffffff6138e216565b9350505096509650969350505050565b604080518082018252601981527f7472616e7366657228616464726573732c75696e743235362900000000000000602091820152815173ffffffffffffffffffffffffffffffffffffffff85811660248301526044808301869052845180840390910181526064909201845291810180517bffffffffffffffffffffffffffffffffffffffffffffffffffffffff167fa9059cbb000000000000000000000000000000000000000000000000000000001781529251815160009460609489169392918291908083835b60208310613da257805182527fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe09092019160209182019101613d65565b6001836020036101000a0380198251168184511680821785525050505050509050019150506000604051808303816000865af19150503d8060008114613e04576040519150601f19603f3d011682016040523d82523d6000602084013e613e09565b606091505b5091509150818015613e37575080511580613e375750808060200190516020811015613e3457600080fd5b50515b61139a57604080517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152600f60248201527f5452414e534645525f4641494c45440000000000000000000000000000000000604482015290519081900360640190fd5b613eaa610c10565b600e55600d55600c55565b3b151590565b600080606080613ecb60a46136fa565b915091506000613ed96149cb565b600954600a54604080517f069d188f00000000000000000000000000000000000000000000000000000000815273ffffffffffffffffffffffffffffffffffffffff93841660048201529183166024830152517f00000000000000000000000000000000000000000000000000000000000000009092169163069d188f91604480820192606092909190829003018186803b158015613f7757600080fd5b505afa158015613f8b573d6000803e3d6000fd5b505050506040513d6060811015613fa157600080fd5b508051602080830151604090930151908401529082529150600080805b865181101561409057613fed868281518110613fd657fe5b60200260200101518461330f90919063ffffffff16565b9250613ff76149e9565b6000614015670de0b6b3a76400006120b18f8b878151811061209b57fe5b90506140388e8d8b868151811061402857fe5b6020026020010151848b8b61448e565b60408501526020840152808352614050908c9061330f565b9a5061406a8260016020020151859063ffffffff61330f16565b935061408482600260200201518b9063ffffffff61330f16565b99505050600101613fbe565b5081670de0b6b3a76400001461410757604080517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152600d60248201527f496e76616c696420696e70757400000000000000000000000000000000000000604482015290519081900360640190fd5b604080518b8152602081018a90528082018390526060810189905290518c15159173ffffffffffffffffffffffffffffffffffffffff8c16917fd55848f048ca7d5fd9869d414bb60a426c2b0125c8adb982fee123da3f841ed89181900360800190a3505050505050935093915050565b60008184841115614221576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004018080602001828103825283818151815260200191508051906020019080838360005b838110156141e65781810151838201526020016141ce565b50505050905090810190601f1680156142135780820380516001836020036101000a031916815260200191505b509250505060405180910390fd5b505050900390565b6040805173ffffffffffffffffffffffffffffffffffffffff85811660248301528481166044830152606480830185905283518084039091018152608490920183526020820180517bffffffffffffffffffffffffffffffffffffffffffffffffffffffff167f23b872dd0000000000000000000000000000000000000000000000000000000017815292518251600094606094938a169392918291908083835b6020831061430757805182527fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe090920191602091820191016142ca565b6001836020036101000a0380198251168184511680821785525050505050509050019150506000604051808303816000865af19150503d8060008114614369576040519150601f19603f3d011682016040523d82523d6000602084013e61436e565b606091505b509150915081801561439c57508051158061439c575080806020019051602081101561439957600080fd5b50515b61440757604080517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601460248201527f5452414e534645525f46524f4d5f4641494c4544000000000000000000000000604482015290519081900360640190fd5b505050505050565b60008183614478576040517f08c379a00000000000000000000000000000000000000000000000000000000081526020600482018181528351602484015283519092839260449091019190850190808383600083156141e65781810151838201526020016141ce565b50600083858161448457fe5b0495945050505050565b8515156000908152600260205260408120548190819087111561451257604080517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152600f60248201527f4f66666572206e6f742065786973740000000000000000000000000000000000604482015290519081900360640190fd5b881515600090815260036020526040812080548990811061452f57fe5b6000918252602090912060069091020180549091507501000000000000000000000000000000000000000000900460ff16806145a5575089151560009081526006602090815260408083208b8452825280832073ffffffffffffffffffffffffffffffffffffffff8d16845290915290205460ff165b61461057604080517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601560248201527f4e6f74206120617070726f766564207472616465720000000000000000000000604482015290519081900360640190fd5b806004015442101561468357604080517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601360248201527f4f66666572206e6f7420626567696e2079657400000000000000000000000000604482015290519081900360640190fd5b80600501544211156146f657604080517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152600d60248201527f4f66666572206578706972656400000000000000000000000000000000000000604482015290519081900360640190fd5b60008061470d8c8a8d8d8c8c876020020151613997565b60208a015192985096509250614724575087614758565b614743620186a06120b18960016020020151889063ffffffff6138e216565b9350614755898563ffffffff61338a16565b90505b82547501000000000000000000000000000000000000000000900460ff1661489f578b151560009081526007602090815260408083208d8452825280832073ffffffffffffffffffffffffffffffffffffffff8f1684529091529020548087111561482457604080517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601a60248201527f416d6f756e7420657863656564656420616c6c6f636174696f6e000000000000604482015290519081900360640190fd5b614834818863ffffffff61338a16565b600760008f15151515815260200190815260200160002060008d815260200190815260200160002060008e73ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002081905550505b826001015486111561491257604080517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601d60248201527f416d6f756e74206578636565647320617661696c61626c652066756e64000000604482015290519081900360640190fd5b6001830154614927908763ffffffff61338a16565b60018401556002830154614941908263ffffffff61330f16565b600284018190558354600185015460408051868152602081018b90528082018690526060810192909252608082019390935291518c928f15159273ffffffffffffffffffffffffffffffffffffffff16917f2f27f755766c13db5798f9a3fa7501574d60c8d73dd30849515c312b0bf9cc7e9181900360a00190a450505096509650969350505050565b60405180604001604052806002906020820280368337509192915050565b6040518060600160405280600390602082028036833750919291505056fe536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f77a2646970667358221220a4964c054d963f056d2c8f6ec3e6e2e03881ec61c71caf2660fdd64f2431590364736f6c634300060b0033"
    };
});
define("@scom/scom-swap/contracts/oswap-openswap-contract/contracts/restricted/OSWAP_RestrictedPair.ts", ["require", "exports", "@ijstech/eth-contract", "@scom/scom-swap/contracts/oswap-openswap-contract/contracts/restricted/OSWAP_RestrictedPair.json.ts"], function (require, exports, eth_contract_35, OSWAP_RestrictedPair_json_1) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.OSWAP_RestrictedPair = void 0;
    class OSWAP_RestrictedPair extends eth_contract_35.Contract {
        constructor(wallet, address) {
            super(wallet, address, OSWAP_RestrictedPair_json_1.default.abi, OSWAP_RestrictedPair_json_1.default.bytecode);
            this.assign();
        }
        deploy(options) {
            return this.__deploy([], options);
        }
        parseApprovedTraderEvent(receipt) {
            return this.parseEvents(receipt, "ApprovedTrader").map(e => this.decodeApprovedTraderEvent(e));
        }
        decodeApprovedTraderEvent(event) {
            let result = event.data;
            return {
                direction: result.direction,
                offerIndex: new eth_contract_35.BigNumber(result.offerIndex),
                trader: result.trader,
                allocation: new eth_contract_35.BigNumber(result.allocation),
                _event: event
            };
        }
        parseLockEvent(receipt) {
            return this.parseEvents(receipt, "Lock").map(e => this.decodeLockEvent(e));
        }
        decodeLockEvent(event) {
            let result = event.data;
            return {
                direction: result.direction,
                index: new eth_contract_35.BigNumber(result.index),
                _event: event
            };
        }
        parseNewProviderOfferEvent(receipt) {
            return this.parseEvents(receipt, "NewProviderOffer").map(e => this.decodeNewProviderOfferEvent(e));
        }
        decodeNewProviderOfferEvent(event) {
            let result = event.data;
            return {
                provider: result.provider,
                direction: result.direction,
                index: new eth_contract_35.BigNumber(result.index),
                allowAll: result.allowAll,
                restrictedPrice: new eth_contract_35.BigNumber(result.restrictedPrice),
                startDate: new eth_contract_35.BigNumber(result.startDate),
                expire: new eth_contract_35.BigNumber(result.expire),
                _event: event
            };
        }
        parseSwapEvent(receipt) {
            return this.parseEvents(receipt, "Swap").map(e => this.decodeSwapEvent(e));
        }
        decodeSwapEvent(event) {
            let result = event.data;
            return {
                to: result.to,
                direction: result.direction,
                amountIn: new eth_contract_35.BigNumber(result.amountIn),
                amountOut: new eth_contract_35.BigNumber(result.amountOut),
                tradeFee: new eth_contract_35.BigNumber(result.tradeFee),
                protocolFee: new eth_contract_35.BigNumber(result.protocolFee),
                _event: event
            };
        }
        parseSwappedOneOfferEvent(receipt) {
            return this.parseEvents(receipt, "SwappedOneOffer").map(e => this.decodeSwappedOneOfferEvent(e));
        }
        decodeSwappedOneOfferEvent(event) {
            let result = event.data;
            return {
                provider: result.provider,
                direction: result.direction,
                index: new eth_contract_35.BigNumber(result.index),
                price: new eth_contract_35.BigNumber(result.price),
                amountOut: new eth_contract_35.BigNumber(result.amountOut),
                amountIn: new eth_contract_35.BigNumber(result.amountIn),
                newAmountBalance: new eth_contract_35.BigNumber(result.newAmountBalance),
                newReceivingBalance: new eth_contract_35.BigNumber(result.newReceivingBalance),
                _event: event
            };
        }
        assign() {
            let approvedTraderParams = (params) => [params.param1, this.wallet.utils.toString(params.param2), this.wallet.utils.toString(params.param3)];
            let approvedTrader_call = async (params, options) => {
                let result = await this.call('approvedTrader', approvedTraderParams(params), options);
                return result;
            };
            this.approvedTrader = approvedTrader_call;
            let configStore_call = async (options) => {
                let result = await this.call('configStore', [], options);
                return result;
            };
            this.configStore = configStore_call;
            let counter_call = async (param1, options) => {
                let result = await this.call('counter', [param1], options);
                return new eth_contract_35.BigNumber(result);
            };
            this.counter = counter_call;
            let factory_call = async (options) => {
                let result = await this.call('factory', [], options);
                return result;
            };
            this.factory = factory_call;
            let feeBalance_call = async (options) => {
                let result = await this.call('feeBalance', [], options);
                return new eth_contract_35.BigNumber(result);
            };
            this.feeBalance = feeBalance_call;
            let getAmountInParams = (params) => [params.param1, this.wallet.utils.toString(params.param2), params.param3, this.wallet.utils.stringToBytes(params.param4)];
            let getAmountIn_call = async (params, options) => {
                let result = await this.call('getAmountIn', getAmountInParams(params), options);
                return new eth_contract_35.BigNumber(result);
            };
            this.getAmountIn = getAmountIn_call;
            let getAmountOutParams = (params) => [params.tokenIn, this.wallet.utils.toString(params.amountIn), params.trader, this.wallet.utils.stringToBytes(params.param4)];
            let getAmountOut_call = async (params, options) => {
                let result = await this.call('getAmountOut', getAmountOutParams(params), options);
                return new eth_contract_35.BigNumber(result);
            };
            this.getAmountOut = getAmountOut_call;
            let getApprovedTraderParams = (params) => [params.direction, this.wallet.utils.toString(params.offerIndex), this.wallet.utils.toString(params.start), this.wallet.utils.toString(params.length)];
            let getApprovedTrader_call = async (params, options) => {
                let result = await this.call('getApprovedTrader', getApprovedTraderParams(params), options);
                return {
                    trader: result.trader,
                    allocation: result.allocation.map(e => new eth_contract_35.BigNumber(e))
                };
            };
            this.getApprovedTrader = getApprovedTrader_call;
            let getApprovedTraderLengthParams = (params) => [params.direction, this.wallet.utils.toString(params.offerIndex)];
            let getApprovedTraderLength_call = async (params, options) => {
                let result = await this.call('getApprovedTraderLength', getApprovedTraderLengthParams(params), options);
                return new eth_contract_35.BigNumber(result);
            };
            this.getApprovedTraderLength = getApprovedTraderLength_call;
            let getBalances_call = async (options) => {
                let result = await this.call('getBalances', [], options);
                return {
                    param1: new eth_contract_35.BigNumber(result[0]),
                    param2: new eth_contract_35.BigNumber(result[1]),
                    param3: new eth_contract_35.BigNumber(result[2])
                };
            };
            this.getBalances = getBalances_call;
            let getLastBalances_call = async (options) => {
                let result = await this.call('getLastBalances', [], options);
                return {
                    param1: new eth_contract_35.BigNumber(result[0]),
                    param2: new eth_contract_35.BigNumber(result[1])
                };
            };
            this.getLastBalances = getLastBalances_call;
            let getOffersParams = (params) => [params.direction, this.wallet.utils.toString(params.start), this.wallet.utils.toString(params.length)];
            let getOffers_call = async (params, options) => {
                let result = await this.call('getOffers', getOffersParams(params), options);
                return {
                    index: result.index.map(e => new eth_contract_35.BigNumber(e)),
                    provider: result.provider,
                    lockedAndAllowAll: result.lockedAndAllowAll,
                    receiving: result.receiving.map(e => new eth_contract_35.BigNumber(e)),
                    amountAndPrice: result.amountAndPrice.map(e => new eth_contract_35.BigNumber(e)),
                    startDateAndExpire: result.startDateAndExpire.map(e => new eth_contract_35.BigNumber(e))
                };
            };
            this.getOffers = getOffers_call;
            let getProviderOfferParams = (params) => [params.provider, params.direction, this.wallet.utils.toString(params.start), this.wallet.utils.toString(params.length)];
            let getProviderOffer_call = async (params, options) => {
                let result = await this.call('getProviderOffer', getProviderOfferParams(params), options);
                return {
                    index: result.index.map(e => new eth_contract_35.BigNumber(e)),
                    provider: result.provider,
                    lockedAndAllowAll: result.lockedAndAllowAll,
                    receiving: result.receiving.map(e => new eth_contract_35.BigNumber(e)),
                    amountAndPrice: result.amountAndPrice.map(e => new eth_contract_35.BigNumber(e)),
                    startDateAndExpire: result.startDateAndExpire.map(e => new eth_contract_35.BigNumber(e))
                };
            };
            this.getProviderOffer = getProviderOffer_call;
            let getProviderOfferIndexLengthParams = (params) => [params.provider, params.direction];
            let getProviderOfferIndexLength_call = async (params, options) => {
                let result = await this.call('getProviderOfferIndexLength', getProviderOfferIndexLengthParams(params), options);
                return new eth_contract_35.BigNumber(result);
            };
            this.getProviderOfferIndexLength = getProviderOfferIndexLength_call;
            let getTraderOfferParams = (params) => [params.trader, params.direction, this.wallet.utils.toString(params.start), this.wallet.utils.toString(params.length)];
            let getTraderOffer_call = async (params, options) => {
                let result = await this.call('getTraderOffer', getTraderOfferParams(params), options);
                return {
                    index: result.index.map(e => new eth_contract_35.BigNumber(e)),
                    provider: result.provider,
                    lockedAndAllowAll: result.lockedAndAllowAll,
                    receiving: result.receiving.map(e => new eth_contract_35.BigNumber(e)),
                    amountAndPrice: result.amountAndPrice.map(e => new eth_contract_35.BigNumber(e)),
                    startDateAndExpire: result.startDateAndExpire.map(e => new eth_contract_35.BigNumber(e))
                };
            };
            this.getTraderOffer = getTraderOffer_call;
            let govToken_call = async (options) => {
                let result = await this.call('govToken', [], options);
                return result;
            };
            this.govToken = govToken_call;
            let governance_call = async (options) => {
                let result = await this.call('governance', [], options);
                return result;
            };
            this.governance = governance_call;
            let isApprovedTraderParams = (params) => [params.param1, this.wallet.utils.toString(params.param2), params.param3];
            let isApprovedTrader_call = async (params, options) => {
                let result = await this.call('isApprovedTrader', isApprovedTraderParams(params), options);
                return result;
            };
            this.isApprovedTrader = isApprovedTrader_call;
            let isLive_call = async (options) => {
                let result = await this.call('isLive', [], options);
                return result;
            };
            this.isLive = isLive_call;
            let lastGovBalance_call = async (options) => {
                let result = await this.call('lastGovBalance', [], options);
                return new eth_contract_35.BigNumber(result);
            };
            this.lastGovBalance = lastGovBalance_call;
            let lastToken0Balance_call = async (options) => {
                let result = await this.call('lastToken0Balance', [], options);
                return new eth_contract_35.BigNumber(result);
            };
            this.lastToken0Balance = lastToken0Balance_call;
            let lastToken1Balance_call = async (options) => {
                let result = await this.call('lastToken1Balance', [], options);
                return new eth_contract_35.BigNumber(result);
            };
            this.lastToken1Balance = lastToken1Balance_call;
            let offersParams = (params) => [params.param1, this.wallet.utils.toString(params.param2)];
            let offers_call = async (params, options) => {
                let result = await this.call('offers', offersParams(params), options);
                return {
                    provider: result.provider,
                    locked: result.locked,
                    allowAll: result.allowAll,
                    amount: new eth_contract_35.BigNumber(result.amount),
                    receiving: new eth_contract_35.BigNumber(result.receiving),
                    restrictedPrice: new eth_contract_35.BigNumber(result.restrictedPrice),
                    startDate: new eth_contract_35.BigNumber(result.startDate),
                    expire: new eth_contract_35.BigNumber(result.expire)
                };
            };
            this.offers = offers_call;
            let protocolFeeBalance0_call = async (options) => {
                let result = await this.call('protocolFeeBalance0', [], options);
                return new eth_contract_35.BigNumber(result);
            };
            this.protocolFeeBalance0 = protocolFeeBalance0_call;
            let protocolFeeBalance1_call = async (options) => {
                let result = await this.call('protocolFeeBalance1', [], options);
                return new eth_contract_35.BigNumber(result);
            };
            this.protocolFeeBalance1 = protocolFeeBalance1_call;
            let providerOfferIndexParams = (params) => [params.param1, params.param2, this.wallet.utils.toString(params.param3)];
            let providerOfferIndex_call = async (params, options) => {
                let result = await this.call('providerOfferIndex', providerOfferIndexParams(params), options);
                return new eth_contract_35.BigNumber(result);
            };
            this.providerOfferIndex = providerOfferIndex_call;
            let restrictedLiquidityProvider_call = async (options) => {
                let result = await this.call('restrictedLiquidityProvider', [], options);
                return result;
            };
            this.restrictedLiquidityProvider = restrictedLiquidityProvider_call;
            let scaleDirection_call = async (options) => {
                let result = await this.call('scaleDirection', [], options);
                return result;
            };
            this.scaleDirection = scaleDirection_call;
            let scaler_call = async (options) => {
                let result = await this.call('scaler', [], options);
                return new eth_contract_35.BigNumber(result);
            };
            this.scaler = scaler_call;
            let token0_call = async (options) => {
                let result = await this.call('token0', [], options);
                return result;
            };
            this.token0 = token0_call;
            let token1_call = async (options) => {
                let result = await this.call('token1', [], options);
                return result;
            };
            this.token1 = token1_call;
            let traderAllocationParams = (params) => [params.param1, this.wallet.utils.toString(params.param2), params.param3];
            let traderAllocation_call = async (params, options) => {
                let result = await this.call('traderAllocation', traderAllocationParams(params), options);
                return new eth_contract_35.BigNumber(result);
            };
            this.traderAllocation = traderAllocation_call;
            let traderOfferParams = (params) => [params.param1, params.param2, this.wallet.utils.toString(params.param3)];
            let traderOffer_call = async (params, options) => {
                let result = await this.call('traderOffer', traderOfferParams(params), options);
                return new eth_contract_35.BigNumber(result);
            };
            this.traderOffer = traderOffer_call;
            let whitelistFactory_call = async (options) => {
                let result = await this.call('whitelistFactory', [], options);
                return result;
            };
            this.whitelistFactory = whitelistFactory_call;
            let createOrderParams = (params) => [params.provider, params.direction, params.allowAll, this.wallet.utils.toString(params.restrictedPrice), this.wallet.utils.toString(params.startDate), this.wallet.utils.toString(params.expire)];
            let createOrder_send = async (params, options) => {
                let result = await this.send('createOrder', createOrderParams(params), options);
                return result;
            };
            let createOrder_call = async (params, options) => {
                let result = await this.call('createOrder', createOrderParams(params), options);
                return new eth_contract_35.BigNumber(result);
            };
            let createOrder_txData = async (params, options) => {
                let result = await this.txData('createOrder', createOrderParams(params), options);
                return result;
            };
            this.createOrder = Object.assign(createOrder_send, {
                call: createOrder_call,
                txData: createOrder_txData
            });
            let initializeParams = (params) => [params.token0, params.token1];
            let initialize_send = async (params, options) => {
                let result = await this.send('initialize', initializeParams(params), options);
                return result;
            };
            let initialize_call = async (params, options) => {
                let result = await this.call('initialize', initializeParams(params), options);
                return;
            };
            let initialize_txData = async (params, options) => {
                let result = await this.txData('initialize', initializeParams(params), options);
                return result;
            };
            this.initialize = Object.assign(initialize_send, {
                call: initialize_call,
                txData: initialize_txData
            });
            let lockOfferParams = (params) => [params.direction, this.wallet.utils.toString(params.index)];
            let lockOffer_send = async (params, options) => {
                let result = await this.send('lockOffer', lockOfferParams(params), options);
                return result;
            };
            let lockOffer_call = async (params, options) => {
                let result = await this.call('lockOffer', lockOfferParams(params), options);
                return;
            };
            let lockOffer_txData = async (params, options) => {
                let result = await this.txData('lockOffer', lockOfferParams(params), options);
                return result;
            };
            this.lockOffer = Object.assign(lockOffer_send, {
                call: lockOffer_call,
                txData: lockOffer_txData
            });
            let redeemProtocolFee_send = async (options) => {
                let result = await this.send('redeemProtocolFee', [], options);
                return result;
            };
            let redeemProtocolFee_call = async (options) => {
                let result = await this.call('redeemProtocolFee', [], options);
                return;
            };
            let redeemProtocolFee_txData = async (options) => {
                let result = await this.txData('redeemProtocolFee', [], options);
                return result;
            };
            this.redeemProtocolFee = Object.assign(redeemProtocolFee_send, {
                call: redeemProtocolFee_call,
                txData: redeemProtocolFee_txData
            });
            let setLive_send = async (isLive, options) => {
                let result = await this.send('setLive', [isLive], options);
                return result;
            };
            let setLive_call = async (isLive, options) => {
                let result = await this.call('setLive', [isLive], options);
                return;
            };
            let setLive_txData = async (isLive, options) => {
                let result = await this.txData('setLive', [isLive], options);
                return result;
            };
            this.setLive = Object.assign(setLive_send, {
                call: setLive_call,
                txData: setLive_txData
            });
            let swapParams = (params) => [this.wallet.utils.toString(params.amount0Out), this.wallet.utils.toString(params.amount1Out), params.to, params.trader, this.wallet.utils.stringToBytes(params.param5)];
            let swap_send = async (params, options) => {
                let result = await this.send('swap', swapParams(params), options);
                return result;
            };
            let swap_call = async (params, options) => {
                let result = await this.call('swap', swapParams(params), options);
                return;
            };
            let swap_txData = async (params, options) => {
                let result = await this.txData('swap', swapParams(params), options);
                return result;
            };
            this.swap = Object.assign(swap_send, {
                call: swap_call,
                txData: swap_txData
            });
            let sync_send = async (options) => {
                let result = await this.send('sync', [], options);
                return result;
            };
            let sync_call = async (options) => {
                let result = await this.call('sync', [], options);
                return;
            };
            let sync_txData = async (options) => {
                let result = await this.txData('sync', [], options);
                return result;
            };
            this.sync = Object.assign(sync_send, {
                call: sync_call,
                txData: sync_txData
            });
        }
    }
    OSWAP_RestrictedPair._abi = OSWAP_RestrictedPair_json_1.default.abi;
    exports.OSWAP_RestrictedPair = OSWAP_RestrictedPair;
});
define("@scom/scom-swap/contracts/oswap-openswap-contract/contracts/restricted/OSWAP_RestrictedPairOracle.json.ts", ["require", "exports"], function (require, exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    ///<amd-module name='@scom/scom-swap/contracts/oswap-openswap-contract/contracts/restricted/OSWAP_RestrictedPairOracle.json.ts'/> 
    exports.default = {
        "abi": [
            { "inputs": [], "stateMutability": "nonpayable", "type": "constructor" },
            { "inputs": [], "name": "WEI", "outputs": [{ "internalType": "uint256", "name": "", "type": "uint256" }], "stateMutability": "view", "type": "function" },
            { "inputs": [], "name": "decimals", "outputs": [{ "internalType": "uint8", "name": "", "type": "uint8" }], "stateMutability": "view", "type": "function" },
            { "inputs": [{ "internalType": "address", "name": "from", "type": "address" }, { "internalType": "address", "name": "to", "type": "address" }, { "internalType": "bytes", "name": "payload", "type": "bytes" }], "name": "getLatestPrice", "outputs": [{ "internalType": "uint256", "name": "price", "type": "uint256" }], "stateMutability": "view", "type": "function" },
            { "inputs": [{ "internalType": "address", "name": "from", "type": "address" }, { "internalType": "address", "name": "to", "type": "address" }, { "internalType": "uint256", "name": "", "type": "uint256" }, { "internalType": "uint256", "name": "", "type": "uint256" }, { "internalType": "address", "name": "", "type": "address" }, { "internalType": "bytes", "name": "payload", "type": "bytes" }], "name": "getRatio", "outputs": [{ "internalType": "uint256", "name": "numerator", "type": "uint256" }, { "internalType": "uint256", "name": "denominator", "type": "uint256" }], "stateMutability": "view", "type": "function" },
            { "inputs": [{ "internalType": "address", "name": "", "type": "address" }, { "internalType": "address", "name": "", "type": "address" }], "name": "isSupported", "outputs": [{ "internalType": "bool", "name": "supported", "type": "bool" }], "stateMutability": "view", "type": "function" }
        ],
        "bytecode": "608060405234801561001057600080fd5b506104a0806100206000396000f3fe608060405234801561001057600080fd5b50600436106100675760003560e01c806388462c8d1161005057806388462c8d14610168578063b80333ed146101b7578063b845c9a2146102b057610067565b8063313ce5671461006c578063495e43481461008a575b600080fd5b6100746102b8565b6040805160ff9092168252519081900360200190f35b610156600480360360608110156100a057600080fd5b73ffffffffffffffffffffffffffffffffffffffff82358116926020810135909116918101906060810160408201356401000000008111156100e157600080fd5b8201836020820111156100f357600080fd5b8035906020019184600183028401116401000000008311171561011557600080fd5b91908080601f0160208091040260200160405190810160405280939291908181526020018383808284376000920191909152509295506102bd945050505050565b60408051918252519081900360200190f35b6101a36004803603604081101561017e57600080fd5b5073ffffffffffffffffffffffffffffffffffffffff81358116916020013516610381565b604080519115158252519081900360200190f35b610297600480360360c08110156101cd57600080fd5b73ffffffffffffffffffffffffffffffffffffffff8235811692602081013582169260408201359260608301359260808101359091169181019060c0810160a082013564010000000081111561022257600080fd5b82018360208201111561023457600080fd5b8035906020019184600183028401116401000000008311171561025657600080fd5b91908080601f016020809104026020016040519081016040528093929190818152602001838380828437600092019190915250929550610389945050505050565b6040805192835260208301919091528051918290030190f35b61015661045e565b601290565b6020810151604080517fdb13653c00000000000000000000000000000000000000000000000000000000815273ffffffffffffffffffffffffffffffffffffffff8086169087161060048201819052602482018490529151600093339390929091849163db13653c91604480830192610100929190829003018186803b15801561034657600080fd5b505afa15801561035a573d6000803e3d6000fd5b505050506040513d61010081101561037157600080fd5b5060a00151979650505050505050565b600192915050565b6020810151604080517fdb13653c00000000000000000000000000000000000000000000000000000000815273ffffffffffffffffffffffffffffffffffffffff808916908a16106004820181905260248201849052915160009384939233928591849163db13653c9160448082019261010092909190829003018186803b15801561041457600080fd5b505afa158015610428573d6000803e3d6000fd5b505050506040513d61010081101561043f57600080fd5b5060a001519c670de0b6b3a76400009c509a5050505050505050505050565b670de0b6b3a76400008156fea264697066735822122091927d964564b98f30242279145582bb95454d99f45266cd47d872cb947677cb64736f6c634300060b0033"
    };
});
define("@scom/scom-swap/contracts/oswap-openswap-contract/contracts/restricted/OSWAP_RestrictedPairOracle.ts", ["require", "exports", "@ijstech/eth-contract", "@scom/scom-swap/contracts/oswap-openswap-contract/contracts/restricted/OSWAP_RestrictedPairOracle.json.ts"], function (require, exports, eth_contract_36, OSWAP_RestrictedPairOracle_json_1) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.OSWAP_RestrictedPairOracle = void 0;
    class OSWAP_RestrictedPairOracle extends eth_contract_36.Contract {
        constructor(wallet, address) {
            super(wallet, address, OSWAP_RestrictedPairOracle_json_1.default.abi, OSWAP_RestrictedPairOracle_json_1.default.bytecode);
            this.assign();
        }
        deploy(options) {
            return this.__deploy([], options);
        }
        assign() {
            let WEI_call = async (options) => {
                let result = await this.call('WEI', [], options);
                return new eth_contract_36.BigNumber(result);
            };
            this.WEI = WEI_call;
            let decimals_call = async (options) => {
                let result = await this.call('decimals', [], options);
                return new eth_contract_36.BigNumber(result);
            };
            this.decimals = decimals_call;
            let getLatestPriceParams = (params) => [params.from, params.to, this.wallet.utils.stringToBytes(params.payload)];
            let getLatestPrice_call = async (params, options) => {
                let result = await this.call('getLatestPrice', getLatestPriceParams(params), options);
                return new eth_contract_36.BigNumber(result);
            };
            this.getLatestPrice = getLatestPrice_call;
            let getRatioParams = (params) => [params.from, params.to, this.wallet.utils.toString(params.param3), this.wallet.utils.toString(params.param4), params.param5, this.wallet.utils.stringToBytes(params.payload)];
            let getRatio_call = async (params, options) => {
                let result = await this.call('getRatio', getRatioParams(params), options);
                return {
                    numerator: new eth_contract_36.BigNumber(result.numerator),
                    denominator: new eth_contract_36.BigNumber(result.denominator)
                };
            };
            this.getRatio = getRatio_call;
            let isSupportedParams = (params) => [params.param1, params.param2];
            let isSupported_call = async (params, options) => {
                let result = await this.call('isSupported', isSupportedParams(params), options);
                return result;
            };
            this.isSupported = isSupported_call;
        }
    }
    OSWAP_RestrictedPairOracle._abi = OSWAP_RestrictedPairOracle_json_1.default.abi;
    exports.OSWAP_RestrictedPairOracle = OSWAP_RestrictedPairOracle;
});
define("@scom/scom-swap/contracts/oswap-openswap-contract/contracts/restricted/OSWAP_VotingExecutor4.json.ts", ["require", "exports"], function (require, exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    ///<amd-module name='@scom/scom-swap/contracts/oswap-openswap-contract/contracts/restricted/OSWAP_VotingExecutor4.json.ts'/> 
    exports.default = {
        "abi": [
            { "inputs": [{ "internalType": "address", "name": "_governance", "type": "address" }, { "internalType": "address", "name": "_factory", "type": "address" }, { "internalType": "address", "name": "_configStore", "type": "address" }], "stateMutability": "nonpayable", "type": "constructor" },
            { "inputs": [], "name": "configStore", "outputs": [{ "internalType": "address", "name": "", "type": "address" }], "stateMutability": "view", "type": "function" },
            { "inputs": [{ "internalType": "bytes32[]", "name": "params", "type": "bytes32[]" }], "name": "execute", "outputs": [], "stateMutability": "nonpayable", "type": "function" },
            { "inputs": [], "name": "factory", "outputs": [{ "internalType": "address", "name": "", "type": "address" }], "stateMutability": "view", "type": "function" },
            { "inputs": [], "name": "governance", "outputs": [{ "internalType": "address", "name": "", "type": "address" }], "stateMutability": "view", "type": "function" }
        ],
        "bytecode": "60e060405234801561001057600080fd5b50604051610d35380380610d358339818101604052606081101561003357600080fd5b50805160208201516040909201516001600160601b0319606084811b821660a05283811b821660805282901b1660c0526001600160a01b039182169282169116610c6d6100c8600039806103ee5280610af65280610bf15250806105365280610665528061074f52806107ed52806108d3528061098a5280610a045280610c15525080610106528061016e5250610c6d6000f3fe608060405234801561001057600080fd5b506004361061004c5760003560e01c80635aa6e675146100515780638af7c649146100825780639d69dc4e146100f4578063c45a0155146100fc575b600080fd5b610059610104565b6040805173ffffffffffffffffffffffffffffffffffffffff9092168252519081900360200190f35b6100f26004803603602081101561009857600080fd5b8101906020810181356401000000008111156100b357600080fd5b8201836020820111156100c557600080fd5b803590602001918460208302840111640100000000831117156100e757600080fd5b509092509050610128565b005b610059610bef565b610059610c13565b7f000000000000000000000000000000000000000000000000000000000000000081565b604080517fb15866e6000000000000000000000000000000000000000000000000000000008152336004820152905173ffffffffffffffffffffffffffffffffffffffff7f0000000000000000000000000000000000000000000000000000000000000000169163b15866e6916024808301926020929190829003018186803b1580156101b457600080fd5b505afa1580156101c8573d6000803e3d6000fd5b505050506040513d60208110156101de57600080fd5b505161024b57604080517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152600f60248201527f4e6f742066726f6d20766f74696e670000000000000000000000000000000000604482015290519081900360640190fd5b600181116102ba57604080517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152600e60248201527f496e76616c6964206c656e677468000000000000000000000000000000000000604482015290519081900360640190fd5b6000828260008181106102c957fe5b9050602002013590506000838360018181106102e157fe5b905060200201359050817f6d756c7469437573746f6d506172616d000000000000000000000000000000001415610503577fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff830160028106156103a557604080517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152600e60248201527f496e76616c6964206c656e677468000000000000000000000000000000000000604482015290519081900360640190fd5b60028104905060608060208302604051602082018101604052848152816064602083013780935060405190506020820181016040528481528182606401602083013780925050507f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff16637e9d2c3183836040518363ffffffff1660e01b8152600401808060200180602001838103835285818151815260200191508051906020019060200280838360005b8381101561047d578181015183820152602001610465565b50505050905001838103825284818151815260200191508051906020019060200280838360005b838110156104bc5781810151838201526020016104a4565b50505050905001945050505050600060405180830381600087803b1580156104e357600080fd5b505af11580156104f7573d6000803e3d6000fd5b50505050505050610be9565b600483141561071c57817f7365744f7261636c650000000000000000000000000000000000000000000000141561063b577f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff16630c1445818260601c8686600281811061058157fe5b9050602002013560601c8787600381811061059857fe5b604080517fffffffff0000000000000000000000000000000000000000000000000000000060e089901b16815273ffffffffffffffffffffffffffffffffffffffff9687166004820152949095166024850152602002919091013560601c6044830152509051606480830192600092919082900301818387803b15801561061e57600080fd5b505af1158015610632573d6000803e3d6000fd5b50505050610717565b817f6164644f6c644f7261636c65546f4e657750616972000000000000000000000014156106b0577f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff1663399762478260601c8686600281811061058157fe5b604080517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152600f60248201527f556e6b6e6f776e20636f6d6d616e640000000000000000000000000000000000604482015290519081900360640190fd5b610be9565b60028314156109d157817f736574547261646546656500000000000000000000000000000000000000000014156107c3577f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff1663106030238260001c6040518263ffffffff1660e01b815260040180828152602001915050600060405180830381600087803b15801561061e57600080fd5b817f73657450726f746f636f6c4665650000000000000000000000000000000000001415610861577f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff1663787dce3d8260001c6040518263ffffffff1660e01b815260040180828152602001915050600060405180830381600087803b15801561061e57600080fd5b817f73657450726f746f636f6c466565546f00000000000000000000000000000000141561091a57604080517fe0e6799f000000000000000000000000000000000000000000000000000000008152606083901c6004820152905173ffffffffffffffffffffffffffffffffffffffff7f0000000000000000000000000000000000000000000000000000000000000000169163e0e6799f91602480830192600092919082900301818387803b15801561061e57600080fd5b817f7365744c6976650000000000000000000000000000000000000000000000000014156106b057604080517ff5ee33480000000000000000000000000000000000000000000000000000000081528215156004820152905173ffffffffffffffffffffffffffffffffffffffff7f0000000000000000000000000000000000000000000000000000000000000000169163f5ee334891602480830192600092919082900301818387803b15801561061e57600080fd5b6003831415610b8257817f7365744c697665466f72506169720000000000000000000000000000000000001415610acc577f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff16636883618a8260601c86866002818110610a4f57fe5b604080517fffffffff0000000000000000000000000000000000000000000000000000000060e088901b16815273ffffffffffffffffffffffffffffffffffffffff909516600486015260209091029290920135151560248401525051604480830192600092919082900301818387803b15801561061e57600080fd5b817f637573746f6d506172616d00000000000000000000000000000000000000000014156106b0577f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff16635332c4148286866002818110610b3e57fe5b905060200201356040518363ffffffff1660e01b81526004018083815260200182815260200192505050600060405180830381600087803b15801561061e57600080fd5b604080517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601260248201527f496e76616c696420706172616d65746572730000000000000000000000000000604482015290519081900360640190fd5b50505050565b7f000000000000000000000000000000000000000000000000000000000000000081565b7f00000000000000000000000000000000000000000000000000000000000000008156fea26469706673582212200b632bf0aa257ae294d1e7de0ebf30b0153ae4bc685e9f2de612d1f00afea7be64736f6c634300060b0033"
    };
});
define("@scom/scom-swap/contracts/oswap-openswap-contract/contracts/restricted/OSWAP_VotingExecutor4.ts", ["require", "exports", "@ijstech/eth-contract", "@scom/scom-swap/contracts/oswap-openswap-contract/contracts/restricted/OSWAP_VotingExecutor4.json.ts"], function (require, exports, eth_contract_37, OSWAP_VotingExecutor4_json_1) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.OSWAP_VotingExecutor4 = void 0;
    class OSWAP_VotingExecutor4 extends eth_contract_37.Contract {
        constructor(wallet, address) {
            super(wallet, address, OSWAP_VotingExecutor4_json_1.default.abi, OSWAP_VotingExecutor4_json_1.default.bytecode);
            this.assign();
        }
        deploy(params, options) {
            return this.__deploy([params.governance, params.factory, params.configStore], options);
        }
        assign() {
            let configStore_call = async (options) => {
                let result = await this.call('configStore', [], options);
                return result;
            };
            this.configStore = configStore_call;
            let factory_call = async (options) => {
                let result = await this.call('factory', [], options);
                return result;
            };
            this.factory = factory_call;
            let governance_call = async (options) => {
                let result = await this.call('governance', [], options);
                return result;
            };
            this.governance = governance_call;
            let execute_send = async (params, options) => {
                let result = await this.send('execute', [this.wallet.utils.stringToBytes32(params)], options);
                return result;
            };
            let execute_call = async (params, options) => {
                let result = await this.call('execute', [this.wallet.utils.stringToBytes32(params)], options);
                return;
            };
            let execute_txData = async (params, options) => {
                let result = await this.txData('execute', [this.wallet.utils.stringToBytes32(params)], options);
                return result;
            };
            this.execute = Object.assign(execute_send, {
                call: execute_call,
                txData: execute_txData
            });
        }
    }
    OSWAP_VotingExecutor4._abi = OSWAP_VotingExecutor4_json_1.default.abi;
    exports.OSWAP_VotingExecutor4 = OSWAP_VotingExecutor4;
});
define("@scom/scom-swap/contracts/oswap-openswap-contract/contracts/router/OSWAP_HybridRouter.json.ts", ["require", "exports"], function (require, exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    ///<amd-module name='@scom/scom-swap/contracts/oswap-openswap-contract/contracts/router/OSWAP_HybridRouter.json.ts'/> 
    exports.default = {
        "abi": [
            { "inputs": [{ "internalType": "address", "name": "_oracleFactory", "type": "address" }, { "internalType": "address", "name": "_WETH", "type": "address" }], "stateMutability": "nonpayable", "type": "constructor" },
            { "inputs": [], "name": "WETH", "outputs": [{ "internalType": "address", "name": "", "type": "address" }], "stateMutability": "view", "type": "function" },
            { "inputs": [{ "internalType": "uint256", "name": "amountOut", "type": "uint256" }, { "internalType": "address[]", "name": "path", "type": "address[]" }, { "internalType": "address[]", "name": "pair", "type": "address[]" }, { "internalType": "uint24[]", "name": "fee", "type": "uint24[]" }, { "internalType": "bytes", "name": "data", "type": "bytes" }], "name": "getAmountsIn", "outputs": [{ "internalType": "uint256[]", "name": "amounts", "type": "uint256[]" }], "stateMutability": "view", "type": "function" },
            { "inputs": [{ "internalType": "uint256", "name": "amountIn", "type": "uint256" }, { "internalType": "address[]", "name": "path", "type": "address[]" }, { "internalType": "address[]", "name": "pair", "type": "address[]" }, { "internalType": "uint24[]", "name": "fee", "type": "uint24[]" }, { "internalType": "bytes", "name": "data", "type": "bytes" }], "name": "getAmountsOut", "outputs": [{ "internalType": "uint256[]", "name": "amounts", "type": "uint256[]" }], "stateMutability": "view", "type": "function" },
            { "inputs": [], "name": "oracleFactory", "outputs": [{ "internalType": "address", "name": "", "type": "address" }], "stateMutability": "view", "type": "function" },
            { "inputs": [{ "internalType": "address", "name": "tokenA", "type": "address" }, { "internalType": "address", "name": "tokenB", "type": "address" }], "name": "pairFor", "outputs": [{ "internalType": "address", "name": "pair", "type": "address" }], "stateMutability": "view", "type": "function" },
            { "inputs": [{ "internalType": "uint256", "name": "amountOut", "type": "uint256" }, { "internalType": "address[]", "name": "path", "type": "address[]" }, { "internalType": "address", "name": "to", "type": "address" }, { "internalType": "uint256", "name": "deadline", "type": "uint256" }, { "internalType": "address[]", "name": "pair", "type": "address[]" }, { "internalType": "uint24[]", "name": "fee", "type": "uint24[]" }, { "internalType": "bytes", "name": "data", "type": "bytes" }], "name": "swapETHForExactTokens", "outputs": [{ "internalType": "uint256[]", "name": "amounts", "type": "uint256[]" }], "stateMutability": "payable", "type": "function" },
            { "inputs": [{ "internalType": "uint256", "name": "amountOutMin", "type": "uint256" }, { "internalType": "address[]", "name": "path", "type": "address[]" }, { "internalType": "address", "name": "to", "type": "address" }, { "internalType": "uint256", "name": "deadline", "type": "uint256" }, { "internalType": "address[]", "name": "pair", "type": "address[]" }, { "internalType": "uint24[]", "name": "fee", "type": "uint24[]" }, { "internalType": "bytes", "name": "data", "type": "bytes" }], "name": "swapExactETHForTokens", "outputs": [{ "internalType": "uint256[]", "name": "amounts", "type": "uint256[]" }], "stateMutability": "payable", "type": "function" },
            { "inputs": [{ "internalType": "uint256", "name": "amountOutMin", "type": "uint256" }, { "internalType": "address[]", "name": "path", "type": "address[]" }, { "internalType": "address", "name": "to", "type": "address" }, { "internalType": "uint256", "name": "deadline", "type": "uint256" }, { "internalType": "address[]", "name": "pair", "type": "address[]" }, { "internalType": "uint24[]", "name": "fee", "type": "uint24[]" }], "name": "swapExactETHForTokensSupportingFeeOnTransferTokens", "outputs": [], "stateMutability": "payable", "type": "function" },
            { "inputs": [{ "internalType": "uint256", "name": "amountIn", "type": "uint256" }, { "internalType": "uint256", "name": "amountOutMin", "type": "uint256" }, { "internalType": "address[]", "name": "path", "type": "address[]" }, { "internalType": "address", "name": "to", "type": "address" }, { "internalType": "uint256", "name": "deadline", "type": "uint256" }, { "internalType": "address[]", "name": "pair", "type": "address[]" }, { "internalType": "uint24[]", "name": "fee", "type": "uint24[]" }, { "internalType": "bytes", "name": "data", "type": "bytes" }], "name": "swapExactTokensForETH", "outputs": [{ "internalType": "uint256[]", "name": "amounts", "type": "uint256[]" }], "stateMutability": "nonpayable", "type": "function" },
            { "inputs": [{ "internalType": "uint256", "name": "amountIn", "type": "uint256" }, { "internalType": "uint256", "name": "amountOutMin", "type": "uint256" }, { "internalType": "address[]", "name": "path", "type": "address[]" }, { "internalType": "address", "name": "to", "type": "address" }, { "internalType": "uint256", "name": "deadline", "type": "uint256" }, { "internalType": "address[]", "name": "pair", "type": "address[]" }, { "internalType": "uint24[]", "name": "fee", "type": "uint24[]" }], "name": "swapExactTokensForETHSupportingFeeOnTransferTokens", "outputs": [], "stateMutability": "nonpayable", "type": "function" },
            { "inputs": [{ "internalType": "uint256", "name": "amountIn", "type": "uint256" }, { "internalType": "uint256", "name": "amountOutMin", "type": "uint256" }, { "internalType": "address[]", "name": "path", "type": "address[]" }, { "internalType": "address", "name": "to", "type": "address" }, { "internalType": "uint256", "name": "deadline", "type": "uint256" }, { "internalType": "address[]", "name": "pair", "type": "address[]" }, { "internalType": "uint24[]", "name": "fee", "type": "uint24[]" }, { "internalType": "bytes", "name": "data", "type": "bytes" }], "name": "swapExactTokensForTokens", "outputs": [{ "internalType": "uint256[]", "name": "amounts", "type": "uint256[]" }], "stateMutability": "nonpayable", "type": "function" },
            { "inputs": [{ "internalType": "uint256", "name": "amountIn", "type": "uint256" }, { "internalType": "uint256", "name": "amountOutMin", "type": "uint256" }, { "internalType": "address[]", "name": "path", "type": "address[]" }, { "internalType": "address", "name": "to", "type": "address" }, { "internalType": "uint256", "name": "deadline", "type": "uint256" }, { "internalType": "address[]", "name": "pair", "type": "address[]" }, { "internalType": "uint24[]", "name": "fee", "type": "uint24[]" }], "name": "swapExactTokensForTokensSupportingFeeOnTransferTokens", "outputs": [], "stateMutability": "nonpayable", "type": "function" },
            { "inputs": [{ "internalType": "uint256", "name": "amountOut", "type": "uint256" }, { "internalType": "uint256", "name": "amountInMax", "type": "uint256" }, { "internalType": "address[]", "name": "path", "type": "address[]" }, { "internalType": "address", "name": "to", "type": "address" }, { "internalType": "uint256", "name": "deadline", "type": "uint256" }, { "internalType": "address[]", "name": "pair", "type": "address[]" }, { "internalType": "uint24[]", "name": "fee", "type": "uint24[]" }, { "internalType": "bytes", "name": "data", "type": "bytes" }], "name": "swapTokensForExactETH", "outputs": [{ "internalType": "uint256[]", "name": "amounts", "type": "uint256[]" }], "stateMutability": "nonpayable", "type": "function" },
            { "inputs": [{ "internalType": "uint256", "name": "amountOut", "type": "uint256" }, { "internalType": "uint256", "name": "amountInMax", "type": "uint256" }, { "internalType": "address[]", "name": "path", "type": "address[]" }, { "internalType": "address", "name": "to", "type": "address" }, { "internalType": "uint256", "name": "deadline", "type": "uint256" }, { "internalType": "address[]", "name": "pair", "type": "address[]" }, { "internalType": "uint24[]", "name": "fee", "type": "uint24[]" }, { "internalType": "bytes", "name": "data", "type": "bytes" }], "name": "swapTokensForExactTokens", "outputs": [{ "internalType": "uint256[]", "name": "amounts", "type": "uint256[]" }], "stateMutability": "nonpayable", "type": "function" },
            { "stateMutability": "payable", "type": "receive" }
        ],
        "bytecode": ""
    };
});
define("@scom/scom-swap/contracts/oswap-openswap-contract/contracts/router/OSWAP_HybridRouter.ts", ["require", "exports", "@ijstech/eth-contract", "@scom/scom-swap/contracts/oswap-openswap-contract/contracts/router/OSWAP_HybridRouter.json.ts"], function (require, exports, eth_contract_38, OSWAP_HybridRouter_json_1) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.OSWAP_HybridRouter = void 0;
    class OSWAP_HybridRouter extends eth_contract_38.Contract {
        constructor(wallet, address) {
            super(wallet, address, OSWAP_HybridRouter_json_1.default.abi, OSWAP_HybridRouter_json_1.default.bytecode);
            this.assign();
        }
        deploy(params, options) {
            return this.__deploy([params.oracleFactory, params.WETH], options);
        }
        assign() {
            let WETH_call = async (options) => {
                let result = await this.call('WETH', [], options);
                return result;
            };
            this.WETH = WETH_call;
            let getAmountsInParams = (params) => [this.wallet.utils.toString(params.amountOut), params.path, params.pair, this.wallet.utils.toString(params.fee), this.wallet.utils.stringToBytes(params.data)];
            let getAmountsIn_call = async (params, options) => {
                let result = await this.call('getAmountsIn', getAmountsInParams(params), options);
                return result.map(e => new eth_contract_38.BigNumber(e));
            };
            this.getAmountsIn = getAmountsIn_call;
            let getAmountsOutParams = (params) => [this.wallet.utils.toString(params.amountIn), params.path, params.pair, this.wallet.utils.toString(params.fee), this.wallet.utils.stringToBytes(params.data)];
            let getAmountsOut_call = async (params, options) => {
                let result = await this.call('getAmountsOut', getAmountsOutParams(params), options);
                return result.map(e => new eth_contract_38.BigNumber(e));
            };
            this.getAmountsOut = getAmountsOut_call;
            let oracleFactory_call = async (options) => {
                let result = await this.call('oracleFactory', [], options);
                return result;
            };
            this.oracleFactory = oracleFactory_call;
            let pairForParams = (params) => [params.tokenA, params.tokenB];
            let pairFor_call = async (params, options) => {
                let result = await this.call('pairFor', pairForParams(params), options);
                return result;
            };
            this.pairFor = pairFor_call;
            let swapETHForExactTokensParams = (params) => [this.wallet.utils.toString(params.amountOut), params.path, params.to, this.wallet.utils.toString(params.deadline), params.pair, this.wallet.utils.toString(params.fee), this.wallet.utils.stringToBytes(params.data)];
            let swapETHForExactTokens_send = async (params, options) => {
                let result = await this.send('swapETHForExactTokens', swapETHForExactTokensParams(params), options);
                return result;
            };
            let swapETHForExactTokens_call = async (params, options) => {
                let result = await this.call('swapETHForExactTokens', swapETHForExactTokensParams(params), options);
                return result.map(e => new eth_contract_38.BigNumber(e));
            };
            let swapETHForExactTokens_txData = async (params, options) => {
                let result = await this.txData('swapETHForExactTokens', swapETHForExactTokensParams(params), options);
                return result;
            };
            this.swapETHForExactTokens = Object.assign(swapETHForExactTokens_send, {
                call: swapETHForExactTokens_call,
                txData: swapETHForExactTokens_txData
            });
            let swapExactETHForTokensParams = (params) => [this.wallet.utils.toString(params.amountOutMin), params.path, params.to, this.wallet.utils.toString(params.deadline), params.pair, this.wallet.utils.toString(params.fee), this.wallet.utils.stringToBytes(params.data)];
            let swapExactETHForTokens_send = async (params, options) => {
                let result = await this.send('swapExactETHForTokens', swapExactETHForTokensParams(params), options);
                return result;
            };
            let swapExactETHForTokens_call = async (params, options) => {
                let result = await this.call('swapExactETHForTokens', swapExactETHForTokensParams(params), options);
                return result.map(e => new eth_contract_38.BigNumber(e));
            };
            let swapExactETHForTokens_txData = async (params, options) => {
                let result = await this.txData('swapExactETHForTokens', swapExactETHForTokensParams(params), options);
                return result;
            };
            this.swapExactETHForTokens = Object.assign(swapExactETHForTokens_send, {
                call: swapExactETHForTokens_call,
                txData: swapExactETHForTokens_txData
            });
            let swapExactETHForTokensSupportingFeeOnTransferTokensParams = (params) => [this.wallet.utils.toString(params.amountOutMin), params.path, params.to, this.wallet.utils.toString(params.deadline), params.pair, this.wallet.utils.toString(params.fee)];
            let swapExactETHForTokensSupportingFeeOnTransferTokens_send = async (params, options) => {
                let result = await this.send('swapExactETHForTokensSupportingFeeOnTransferTokens', swapExactETHForTokensSupportingFeeOnTransferTokensParams(params), options);
                return result;
            };
            let swapExactETHForTokensSupportingFeeOnTransferTokens_call = async (params, options) => {
                let result = await this.call('swapExactETHForTokensSupportingFeeOnTransferTokens', swapExactETHForTokensSupportingFeeOnTransferTokensParams(params), options);
                return;
            };
            let swapExactETHForTokensSupportingFeeOnTransferTokens_txData = async (params, options) => {
                let result = await this.txData('swapExactETHForTokensSupportingFeeOnTransferTokens', swapExactETHForTokensSupportingFeeOnTransferTokensParams(params), options);
                return result;
            };
            this.swapExactETHForTokensSupportingFeeOnTransferTokens = Object.assign(swapExactETHForTokensSupportingFeeOnTransferTokens_send, {
                call: swapExactETHForTokensSupportingFeeOnTransferTokens_call,
                txData: swapExactETHForTokensSupportingFeeOnTransferTokens_txData
            });
            let swapExactTokensForETHParams = (params) => [this.wallet.utils.toString(params.amountIn), this.wallet.utils.toString(params.amountOutMin), params.path, params.to, this.wallet.utils.toString(params.deadline), params.pair, this.wallet.utils.toString(params.fee), this.wallet.utils.stringToBytes(params.data)];
            let swapExactTokensForETH_send = async (params, options) => {
                let result = await this.send('swapExactTokensForETH', swapExactTokensForETHParams(params), options);
                return result;
            };
            let swapExactTokensForETH_call = async (params, options) => {
                let result = await this.call('swapExactTokensForETH', swapExactTokensForETHParams(params), options);
                return result.map(e => new eth_contract_38.BigNumber(e));
            };
            let swapExactTokensForETH_txData = async (params, options) => {
                let result = await this.txData('swapExactTokensForETH', swapExactTokensForETHParams(params), options);
                return result;
            };
            this.swapExactTokensForETH = Object.assign(swapExactTokensForETH_send, {
                call: swapExactTokensForETH_call,
                txData: swapExactTokensForETH_txData
            });
            let swapExactTokensForETHSupportingFeeOnTransferTokensParams = (params) => [this.wallet.utils.toString(params.amountIn), this.wallet.utils.toString(params.amountOutMin), params.path, params.to, this.wallet.utils.toString(params.deadline), params.pair, this.wallet.utils.toString(params.fee)];
            let swapExactTokensForETHSupportingFeeOnTransferTokens_send = async (params, options) => {
                let result = await this.send('swapExactTokensForETHSupportingFeeOnTransferTokens', swapExactTokensForETHSupportingFeeOnTransferTokensParams(params), options);
                return result;
            };
            let swapExactTokensForETHSupportingFeeOnTransferTokens_call = async (params, options) => {
                let result = await this.call('swapExactTokensForETHSupportingFeeOnTransferTokens', swapExactTokensForETHSupportingFeeOnTransferTokensParams(params), options);
                return;
            };
            let swapExactTokensForETHSupportingFeeOnTransferTokens_txData = async (params, options) => {
                let result = await this.txData('swapExactTokensForETHSupportingFeeOnTransferTokens', swapExactTokensForETHSupportingFeeOnTransferTokensParams(params), options);
                return result;
            };
            this.swapExactTokensForETHSupportingFeeOnTransferTokens = Object.assign(swapExactTokensForETHSupportingFeeOnTransferTokens_send, {
                call: swapExactTokensForETHSupportingFeeOnTransferTokens_call,
                txData: swapExactTokensForETHSupportingFeeOnTransferTokens_txData
            });
            let swapExactTokensForTokensParams = (params) => [this.wallet.utils.toString(params.amountIn), this.wallet.utils.toString(params.amountOutMin), params.path, params.to, this.wallet.utils.toString(params.deadline), params.pair, this.wallet.utils.toString(params.fee), this.wallet.utils.stringToBytes(params.data)];
            let swapExactTokensForTokens_send = async (params, options) => {
                let result = await this.send('swapExactTokensForTokens', swapExactTokensForTokensParams(params), options);
                return result;
            };
            let swapExactTokensForTokens_call = async (params, options) => {
                let result = await this.call('swapExactTokensForTokens', swapExactTokensForTokensParams(params), options);
                return result.map(e => new eth_contract_38.BigNumber(e));
            };
            let swapExactTokensForTokens_txData = async (params, options) => {
                let result = await this.txData('swapExactTokensForTokens', swapExactTokensForTokensParams(params), options);
                return result;
            };
            this.swapExactTokensForTokens = Object.assign(swapExactTokensForTokens_send, {
                call: swapExactTokensForTokens_call,
                txData: swapExactTokensForTokens_txData
            });
            let swapExactTokensForTokensSupportingFeeOnTransferTokensParams = (params) => [this.wallet.utils.toString(params.amountIn), this.wallet.utils.toString(params.amountOutMin), params.path, params.to, this.wallet.utils.toString(params.deadline), params.pair, this.wallet.utils.toString(params.fee)];
            let swapExactTokensForTokensSupportingFeeOnTransferTokens_send = async (params, options) => {
                let result = await this.send('swapExactTokensForTokensSupportingFeeOnTransferTokens', swapExactTokensForTokensSupportingFeeOnTransferTokensParams(params), options);
                return result;
            };
            let swapExactTokensForTokensSupportingFeeOnTransferTokens_call = async (params, options) => {
                let result = await this.call('swapExactTokensForTokensSupportingFeeOnTransferTokens', swapExactTokensForTokensSupportingFeeOnTransferTokensParams(params), options);
                return;
            };
            let swapExactTokensForTokensSupportingFeeOnTransferTokens_txData = async (params, options) => {
                let result = await this.txData('swapExactTokensForTokensSupportingFeeOnTransferTokens', swapExactTokensForTokensSupportingFeeOnTransferTokensParams(params), options);
                return result;
            };
            this.swapExactTokensForTokensSupportingFeeOnTransferTokens = Object.assign(swapExactTokensForTokensSupportingFeeOnTransferTokens_send, {
                call: swapExactTokensForTokensSupportingFeeOnTransferTokens_call,
                txData: swapExactTokensForTokensSupportingFeeOnTransferTokens_txData
            });
            let swapTokensForExactETHParams = (params) => [this.wallet.utils.toString(params.amountOut), this.wallet.utils.toString(params.amountInMax), params.path, params.to, this.wallet.utils.toString(params.deadline), params.pair, this.wallet.utils.toString(params.fee), this.wallet.utils.stringToBytes(params.data)];
            let swapTokensForExactETH_send = async (params, options) => {
                let result = await this.send('swapTokensForExactETH', swapTokensForExactETHParams(params), options);
                return result;
            };
            let swapTokensForExactETH_call = async (params, options) => {
                let result = await this.call('swapTokensForExactETH', swapTokensForExactETHParams(params), options);
                return result.map(e => new eth_contract_38.BigNumber(e));
            };
            let swapTokensForExactETH_txData = async (params, options) => {
                let result = await this.txData('swapTokensForExactETH', swapTokensForExactETHParams(params), options);
                return result;
            };
            this.swapTokensForExactETH = Object.assign(swapTokensForExactETH_send, {
                call: swapTokensForExactETH_call,
                txData: swapTokensForExactETH_txData
            });
            let swapTokensForExactTokensParams = (params) => [this.wallet.utils.toString(params.amountOut), this.wallet.utils.toString(params.amountInMax), params.path, params.to, this.wallet.utils.toString(params.deadline), params.pair, this.wallet.utils.toString(params.fee), this.wallet.utils.stringToBytes(params.data)];
            let swapTokensForExactTokens_send = async (params, options) => {
                let result = await this.send('swapTokensForExactTokens', swapTokensForExactTokensParams(params), options);
                return result;
            };
            let swapTokensForExactTokens_call = async (params, options) => {
                let result = await this.call('swapTokensForExactTokens', swapTokensForExactTokensParams(params), options);
                return result.map(e => new eth_contract_38.BigNumber(e));
            };
            let swapTokensForExactTokens_txData = async (params, options) => {
                let result = await this.txData('swapTokensForExactTokens', swapTokensForExactTokensParams(params), options);
                return result;
            };
            this.swapTokensForExactTokens = Object.assign(swapTokensForExactTokens_send, {
                call: swapTokensForExactTokens_call,
                txData: swapTokensForExactTokens_txData
            });
        }
    }
    OSWAP_HybridRouter._abi = OSWAP_HybridRouter_json_1.default.abi;
    exports.OSWAP_HybridRouter = OSWAP_HybridRouter;
});
define("@scom/scom-swap/contracts/oswap-openswap-contract/contracts/router/OSWAP_HybridRouterRegistry.json.ts", ["require", "exports"], function (require, exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    ///<amd-module name='@scom/scom-swap/contracts/oswap-openswap-contract/contracts/router/OSWAP_HybridRouterRegistry.json.ts'/> 
    exports.default = {
        "abi": [
            { "inputs": [{ "internalType": "address", "name": "_governance", "type": "address" }], "stateMutability": "nonpayable", "type": "constructor" },
            { "anonymous": false, "inputs": [{ "indexed": true, "internalType": "address", "name": "pair", "type": "address" }, { "indexed": false, "internalType": "uint256", "name": "fee", "type": "uint256" }, { "indexed": false, "internalType": "uint256", "name": "feeBase", "type": "uint256" }, { "indexed": false, "internalType": "uint256", "name": "typeCode", "type": "uint256" }], "name": "CustomPairRegister", "type": "event" },
            { "anonymous": false, "inputs": [{ "indexed": true, "internalType": "address", "name": "previousOwner", "type": "address" }, { "indexed": true, "internalType": "address", "name": "newOwner", "type": "address" }], "name": "OwnershipTransferred", "type": "event" },
            { "anonymous": false, "inputs": [{ "indexed": true, "internalType": "address", "name": "factory", "type": "address" }, { "indexed": true, "internalType": "address", "name": "pair", "type": "address" }, { "indexed": false, "internalType": "address", "name": "token0", "type": "address" }, { "indexed": false, "internalType": "address", "name": "token1", "type": "address" }], "name": "PairRegister", "type": "event" },
            { "anonymous": false, "inputs": [{ "indexed": true, "internalType": "address", "name": "factory", "type": "address" }, { "indexed": false, "internalType": "bytes32", "name": "name", "type": "bytes32" }, { "indexed": false, "internalType": "uint256", "name": "fee", "type": "uint256" }, { "indexed": false, "internalType": "uint256", "name": "feeBase", "type": "uint256" }, { "indexed": false, "internalType": "uint256", "name": "typeCode", "type": "uint256" }], "name": "ProtocolRegister", "type": "event" },
            { "inputs": [{ "internalType": "address", "name": "", "type": "address" }], "name": "customPairs", "outputs": [{ "internalType": "uint256", "name": "fee", "type": "uint256" }, { "internalType": "uint256", "name": "feeBase", "type": "uint256" }, { "internalType": "uint256", "name": "typeCode", "type": "uint256" }], "stateMutability": "view", "type": "function" },
            { "inputs": [{ "internalType": "bytes32[]", "name": "params", "type": "bytes32[]" }], "name": "execute", "outputs": [], "stateMutability": "nonpayable", "type": "function" },
            { "inputs": [{ "internalType": "address", "name": "pairAddress", "type": "address" }], "name": "getFee", "outputs": [{ "internalType": "uint256", "name": "fee", "type": "uint256" }, { "internalType": "uint256", "name": "feeBase", "type": "uint256" }], "stateMutability": "view", "type": "function" },
            { "inputs": [{ "internalType": "address[]", "name": "pairAddress", "type": "address[]" }], "name": "getPairTokens", "outputs": [{ "internalType": "address[]", "name": "token0", "type": "address[]" }, { "internalType": "address[]", "name": "token1", "type": "address[]" }], "stateMutability": "view", "type": "function" },
            { "inputs": [{ "internalType": "address", "name": "pairAddress", "type": "address" }], "name": "getTypeCode", "outputs": [{ "internalType": "uint256", "name": "typeCode", "type": "uint256" }], "stateMutability": "view", "type": "function" },
            { "inputs": [], "name": "governance", "outputs": [{ "internalType": "address", "name": "", "type": "address" }], "stateMutability": "view", "type": "function" },
            { "inputs": [{ "internalType": "bytes32[]", "name": "_name", "type": "bytes32[]" }, { "internalType": "address[]", "name": "_factory", "type": "address[]" }, { "internalType": "uint256[]", "name": "_fee", "type": "uint256[]" }, { "internalType": "uint256[]", "name": "_feeBase", "type": "uint256[]" }, { "internalType": "uint256[]", "name": "_typeCode", "type": "uint256[]" }], "name": "init", "outputs": [], "stateMutability": "nonpayable", "type": "function" },
            { "inputs": [], "name": "owner", "outputs": [{ "internalType": "address", "name": "", "type": "address" }], "stateMutability": "view", "type": "function" },
            { "inputs": [{ "internalType": "address", "name": "", "type": "address" }], "name": "pairs", "outputs": [{ "internalType": "address", "name": "factory", "type": "address" }, { "internalType": "address", "name": "token0", "type": "address" }, { "internalType": "address", "name": "token1", "type": "address" }], "stateMutability": "view", "type": "function" },
            { "inputs": [{ "internalType": "uint256", "name": "", "type": "uint256" }], "name": "protocolList", "outputs": [{ "internalType": "address", "name": "", "type": "address" }], "stateMutability": "view", "type": "function" },
            { "inputs": [], "name": "protocolListLength", "outputs": [{ "internalType": "uint256", "name": "", "type": "uint256" }], "stateMutability": "view", "type": "function" },
            { "inputs": [{ "internalType": "address", "name": "", "type": "address" }], "name": "protocols", "outputs": [{ "internalType": "bytes32", "name": "name", "type": "bytes32" }, { "internalType": "uint256", "name": "fee", "type": "uint256" }, { "internalType": "uint256", "name": "feeBase", "type": "uint256" }, { "internalType": "uint256", "name": "typeCode", "type": "uint256" }], "stateMutability": "view", "type": "function" },
            { "inputs": [{ "internalType": "address", "name": "token0", "type": "address" }, { "internalType": "address", "name": "token1", "type": "address" }, { "internalType": "address", "name": "pairAddress", "type": "address" }, { "internalType": "uint256", "name": "fee", "type": "uint256" }, { "internalType": "uint256", "name": "feeBase", "type": "uint256" }, { "internalType": "uint256", "name": "typeCode", "type": "uint256" }], "name": "registerPair", "outputs": [], "stateMutability": "nonpayable", "type": "function" },
            { "inputs": [{ "internalType": "address", "name": "_factory", "type": "address" }, { "internalType": "address", "name": "pairAddress", "type": "address" }], "name": "registerPairByAddress", "outputs": [], "stateMutability": "nonpayable", "type": "function" },
            { "inputs": [{ "internalType": "address", "name": "_factory", "type": "address" }, { "internalType": "uint256", "name": "index", "type": "uint256" }], "name": "registerPairByIndex", "outputs": [], "stateMutability": "nonpayable", "type": "function" },
            { "inputs": [{ "internalType": "address", "name": "_factory", "type": "address" }, { "internalType": "address", "name": "_token0", "type": "address" }, { "internalType": "address", "name": "_token1", "type": "address" }], "name": "registerPairByTokens", "outputs": [], "stateMutability": "nonpayable", "type": "function" },
            { "inputs": [{ "internalType": "address", "name": "_factory", "type": "address" }, { "internalType": "address", "name": "_token0", "type": "address" }, { "internalType": "address", "name": "_token1", "type": "address" }, { "internalType": "uint256", "name": "pairIndex", "type": "uint256" }], "name": "registerPairByTokensV3", "outputs": [], "stateMutability": "nonpayable", "type": "function" },
            { "inputs": [{ "internalType": "address", "name": "_factory", "type": "address" }, { "internalType": "address[]", "name": "pairAddress", "type": "address[]" }], "name": "registerPairsByAddress", "outputs": [], "stateMutability": "nonpayable", "type": "function" },
            { "inputs": [{ "internalType": "address[]", "name": "_factory", "type": "address[]" }, { "internalType": "address[]", "name": "pairAddress", "type": "address[]" }], "name": "registerPairsByAddress2", "outputs": [], "stateMutability": "nonpayable", "type": "function" },
            { "inputs": [{ "internalType": "address", "name": "_factory", "type": "address" }, { "internalType": "uint256[]", "name": "index", "type": "uint256[]" }], "name": "registerPairsByIndex", "outputs": [], "stateMutability": "nonpayable", "type": "function" },
            { "inputs": [{ "internalType": "address", "name": "_factory", "type": "address" }, { "internalType": "address[]", "name": "_token0", "type": "address[]" }, { "internalType": "address[]", "name": "_token1", "type": "address[]" }], "name": "registerPairsByTokens", "outputs": [], "stateMutability": "nonpayable", "type": "function" },
            { "inputs": [{ "internalType": "address", "name": "_factory", "type": "address" }, { "internalType": "address[]", "name": "_token0", "type": "address[]" }, { "internalType": "address[]", "name": "_token1", "type": "address[]" }, { "internalType": "uint256[]", "name": "_pairIndex", "type": "uint256[]" }], "name": "registerPairsByTokensV3", "outputs": [], "stateMutability": "nonpayable", "type": "function" },
            { "inputs": [{ "internalType": "bytes32", "name": "_name", "type": "bytes32" }, { "internalType": "address", "name": "_factory", "type": "address" }, { "internalType": "uint256", "name": "_fee", "type": "uint256" }, { "internalType": "uint256", "name": "_feeBase", "type": "uint256" }, { "internalType": "uint256", "name": "_typeCode", "type": "uint256" }], "name": "registerProtocol", "outputs": [], "stateMutability": "nonpayable", "type": "function" },
            { "inputs": [], "name": "renounceOwnership", "outputs": [], "stateMutability": "nonpayable", "type": "function" },
            { "inputs": [{ "internalType": "address", "name": "newOwner", "type": "address" }], "name": "transferOwnership", "outputs": [], "stateMutability": "nonpayable", "type": "function" }
        ],
        "bytecode": "60806040523480156200001157600080fd5b50604051620034be380380620034be833981810160405260208110156200003757600080fd5b505160006200004e6001600160e01b03620000be16565b600080546001600160a01b0319166001600160a01b0383169081178255604051929350917f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e0908290a350600580546001600160a01b0319166001600160a01b0392909216919091179055620000c2565b3390565b6133ec80620000d26000396000f3fe608060405234801561001057600080fd5b50600436106101a35760003560e01c8063715018a6116100ee5780639c5eda8411610097578063ed706dbd11610071578063ed706dbd14610ba7578063edf30da914610c67578063f2fde38b14610ca2578063fe33b30214610cd5576101a3565b80639c5eda8414610ad7578063b88c914814610b22578063d52f6d0214610b6e576101a3565b80638d8a7c8a116100c85780638d8a7c8a14610a0f5780638da5cb5b14610a425780639179f07814610a4a576101a3565b8063715018a61461097d578063837cd3fa146109855780638af7c6491461099f576101a3565b806326638a0a1161015057806346079b881161012a57806346079b881461085157806353ec54ae146108965780635aa6e67514610975576101a3565b806326638a0a146105eb5780632dc014b31461064457806330f802e5146107fc576101a3565b80630d36c409116101815780630d36c4091461028a57806314406f66146103b15780631f2a1a2b146104e2576101a3565b806307742f44146101a857806307b1d728146101f357806307c28c2614610244575b600080fd5b6101f1600480360360808110156101be57600080fd5b5073ffffffffffffffffffffffffffffffffffffffff813581169160208101358216916040820135169060600135610d40565b005b6102266004803603602081101561020957600080fd5b503573ffffffffffffffffffffffffffffffffffffffff16610e96565b60408051938452602084019290925282820152519081900360600190f35b6102616004803603602081101561025a57600080fd5b5035610eb6565b6040805173ffffffffffffffffffffffffffffffffffffffff9092168252519081900360200190f35b6101f1600480360360408110156102a057600080fd5b8101906020810181356401000000008111156102bb57600080fd5b8201836020820111156102cd57600080fd5b803590602001918460208302840111640100000000831117156102ef57600080fd5b919080806020026020016040519081016040528093929190818152602001838360200280828437600092019190915250929594936020810193503591505064010000000081111561033f57600080fd5b82018360208201111561035157600080fd5b8035906020019184602083028401116401000000008311171561037357600080fd5b919080806020026020016040519081016040528093929190818152602001838360200280828437600092019190915250929550610eea945050505050565b6101f1600480360360808110156103c757600080fd5b73ffffffffffffffffffffffffffffffffffffffff82351691908101906040810160208201356401000000008111156103ff57600080fd5b82018360208201111561041157600080fd5b8035906020019184602083028401116401000000008311171561043357600080fd5b91939092909160208101903564010000000081111561045157600080fd5b82018360208201111561046357600080fd5b8035906020019184602083028401116401000000008311171561048557600080fd5b9193909290916020810190356401000000008111156104a357600080fd5b8201836020820111156104b557600080fd5b803590602001918460208302840111640100000000831117156104d757600080fd5b5090925090506110cc565b610552600480360360208110156104f857600080fd5b81019060208101813564010000000081111561051357600080fd5b82018360208201111561052557600080fd5b8035906020019184602083028401116401000000008311171561054757600080fd5b509092509050611346565b604051808060200180602001838103835285818151815260200191508051906020019060200280838360005b8381101561059657818101518382015260200161057e565b50505050905001838103825284818151815260200191508051906020019060200280838360005b838110156105d55781810151838201526020016105bd565b5050505090500194505050505060405180910390f35b61061e6004803603602081101561060157600080fd5b503573ffffffffffffffffffffffffffffffffffffffff166114e9565b604080519485526020850193909352838301919091526060830152519081900360800190f35b6101f1600480360360a081101561065a57600080fd5b81019060208101813564010000000081111561067557600080fd5b82018360208201111561068757600080fd5b803590602001918460208302840111640100000000831117156106a957600080fd5b9193909290916020810190356401000000008111156106c757600080fd5b8201836020820111156106d957600080fd5b803590602001918460208302840111640100000000831117156106fb57600080fd5b91939092909160208101903564010000000081111561071957600080fd5b82018360208201111561072b57600080fd5b8035906020019184602083028401116401000000008311171561074d57600080fd5b91939092909160208101903564010000000081111561076b57600080fd5b82018360208201111561077d57600080fd5b8035906020019184602083028401116401000000008311171561079f57600080fd5b9193909290916020810190356401000000008111156107bd57600080fd5b8201836020820111156107cf57600080fd5b803590602001918460208302840111640100000000831117156107f157600080fd5b509092509050611512565b6101f1600480360360c081101561081257600080fd5b5073ffffffffffffffffffffffffffffffffffffffff813581169160208101358216916040820135169060608101359060808101359060a00135611735565b6101f16004803603606081101561086757600080fd5b5073ffffffffffffffffffffffffffffffffffffffff8135811691602081013582169160409091013516611853565b6101f1600480360360608110156108ac57600080fd5b73ffffffffffffffffffffffffffffffffffffffff82351691908101906040810160208201356401000000008111156108e457600080fd5b8201836020820111156108f657600080fd5b8035906020019184602083028401116401000000008311171561091857600080fd5b91939092909160208101903564010000000081111561093657600080fd5b82018360208201111561094857600080fd5b8035906020019184602083028401116401000000008311171561096a57600080fd5b5090925090506119d0565b610261611c63565b6101f1611c7f565b61098d611d7f565b60408051918252519081900360200190f35b6101f1600480360360208110156109b557600080fd5b8101906020810181356401000000008111156109d057600080fd5b8201836020820111156109e257600080fd5b80359060200191846020830284011164010000000083111715610a0457600080fd5b509092509050611d85565b61098d60048036036020811015610a2557600080fd5b503573ffffffffffffffffffffffffffffffffffffffff166120f8565b61026161218c565b6101f160048036036040811015610a6057600080fd5b73ffffffffffffffffffffffffffffffffffffffff8235169190810190604081016020820135640100000000811115610a9857600080fd5b820183602082011115610aaa57600080fd5b80359060200191846020830284011164010000000083111715610acc57600080fd5b5090925090506121a8565b6101f1600480360360a0811015610aed57600080fd5b5080359073ffffffffffffffffffffffffffffffffffffffff60208201351690604081013590606081013590608001356122ef565b610b5560048036036020811015610b3857600080fd5b503573ffffffffffffffffffffffffffffffffffffffff16612404565b6040805192835260208301919091528051918290030190f35b6101f160048036036040811015610b8457600080fd5b5073ffffffffffffffffffffffffffffffffffffffff81351690602001356124a7565b6101f160048036036040811015610bbd57600080fd5b73ffffffffffffffffffffffffffffffffffffffff8235169190810190604081016020820135640100000000811115610bf557600080fd5b820183602082011115610c0757600080fd5b80359060200191846020830284011164010000000083111715610c2957600080fd5b9190808060200260200160405190810160405280939291908181526020018383602002808284376000920191909152509295506125cc945050505050565b6101f160048036036040811015610c7d57600080fd5b5073ffffffffffffffffffffffffffffffffffffffff813581169160200135166126bd565b6101f160048036036020811015610cb857600080fd5b503573ffffffffffffffffffffffffffffffffffffffff16612795565b610d0860048036036020811015610ceb57600080fd5b503573ffffffffffffffffffffffffffffffffffffffff1661291f565b6040805173ffffffffffffffffffffffffffffffffffffffff9485168152928416602084015292168183015290519081900360600190f35b73ffffffffffffffffffffffffffffffffffffffff8416600090815260036020819052604090912081015414610dd757604080517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152600c60248201527f496e76616c696420747970650000000000000000000000000000000000000000604482015290519081900360640190fd5b604080517f5eced48000000000000000000000000000000000000000000000000000000000815273ffffffffffffffffffffffffffffffffffffffff85811660048301528481166024830152604482018490529151600092871691635eced480916064808301926020929190829003018186803b158015610e5757600080fd5b505afa158015610e6b573d6000803e3d6000fd5b505050506040513d6020811015610e8157600080fd5b50519050610e8f858261295d565b5050505050565b600260208190526000918252604090912080546001820154919092015483565b60048181548110610ec357fe5b60009182526020909120015473ffffffffffffffffffffffffffffffffffffffff16905081565b805182518114610f5b57604080517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601660248201527f6172726179206c656e677468206e6f74206d6174636800000000000000000000604482015290519081900360640190fd5b60005b818110156110c657600060036000868481518110610f7857fe5b602002602001015173ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060030154118015611021575060036000858381518110610fd657fe5b602002602001015173ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060030154600314155b61108c57604080517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601760248201527f50726f746f636f6c206e6f7420726567636f6e697a6564000000000000000000604482015290519081900360640190fd5b6110be84828151811061109b57fe5b60200260200101518483815181106110af57fe5b60200260200101516001612965565b600101610f5e565b50505050565b73ffffffffffffffffffffffffffffffffffffffff871660009081526003602081905260409091208101541461116357604080517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152600c60248201527f496e76616c696420747970650000000000000000000000000000000000000000604482015290519081900360640190fd5b848381146111d257604080517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601660248201527f6172726179206c656e677468206e6f74206d6174636800000000000000000000604482015290519081900360640190fd5b60005b8181101561133b5760008973ffffffffffffffffffffffffffffffffffffffff16635eced4808a8a8581811061120757fe5b9050602002013573ffffffffffffffffffffffffffffffffffffffff1689898681811061123057fe5b9050602002013573ffffffffffffffffffffffffffffffffffffffff1688888781811061125957fe5b905060200201356040518463ffffffff1660e01b8152600401808473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020018373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001828152602001935050505060206040518083038186803b1580156112fa57600080fd5b505afa15801561130e573d6000803e3d6000fd5b505050506040513d602081101561132457600080fd5b505190506113328a8261295d565b506001016111d5565b505050505050505050565b606080828067ffffffffffffffff8111801561136157600080fd5b5060405190808252806020026020018201604052801561138b578160200160208202803683370190505b5092508067ffffffffffffffff811180156113a557600080fd5b506040519080825280602002602001820160405280156113cf578160200160208202803683370190505b50915060005b818110156114e0576000600160008888858181106113ef57fe5b9050602002013573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002090508060010160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1685838151811061147957fe5b73ffffffffffffffffffffffffffffffffffffffff9283166020918202929092010152600282015485519116908590849081106114b257fe5b73ffffffffffffffffffffffffffffffffffffffff90921660209283029190910190910152506001016113d5565b50509250929050565b600360208190526000918252604090912080546001820154600283015492909301549092919084565b61151a612d5c565b60005473ffffffffffffffffffffffffffffffffffffffff9081169116146115a357604080517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820181905260248201527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e6572604482015290519081900360640190fd5b6004541561161257604080517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152600c60248201527f416c726561647920696e69740000000000000000000000000000000000000000604482015290519081900360640190fd5b88878114801561162157508786145b801561162c57508582145b61169757604080517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601060248201527f6c656e677468206e6f74206d6174636800000000000000000000000000000000604482015290519081900360640190fd5b60005b818110156117275761171f8c8c838181106116b157fe5b905060200201358b8b848181106116c457fe5b9050602002013573ffffffffffffffffffffffffffffffffffffffff168a8a858181106116ed57fe5b9050602002013589898681811061170057fe5b9050602002013588888781811061171357fe5b90506020020135612d60565b60010161169a565b505050505050505050505050565b600554604080517fa3818b3b000000000000000000000000000000000000000000000000000000008152336004820152905173ffffffffffffffffffffffffffffffffffffffff9092169163a3818b3b91602480820192602092909190829003018186803b1580156117a657600080fd5b505afa1580156117ba573d6000803e3d6000fd5b505050506040513d60208110156117d057600080fd5b505161183d57604080517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152600f60248201527f4e6f742066726f6d20766f74696e670000000000000000000000000000000000604482015290519081900360640190fd5b61184b868686868686612fcb565b505050505050565b73ffffffffffffffffffffffffffffffffffffffff831660009081526003602081905260409091200154158015906118b4575073ffffffffffffffffffffffffffffffffffffffff8316600090815260036020819052604090912081015414155b61191f57604080517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152600c60248201527f496e76616c696420747970650000000000000000000000000000000000000000604482015290519081900360640190fd5b604080517fe6a4390500000000000000000000000000000000000000000000000000000000815273ffffffffffffffffffffffffffffffffffffffff84811660048301528381166024830152915160009286169163e6a43905916044808301926020929190829003018186803b15801561199857600080fd5b505afa1580156119ac573d6000803e3d6000fd5b505050506040513d60208110156119c257600080fd5b505190506110c6848261295d565b73ffffffffffffffffffffffffffffffffffffffff85166000908152600360208190526040909120015415801590611a31575073ffffffffffffffffffffffffffffffffffffffff8516600090815260036020819052604090912081015414155b611a9c57604080517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152600c60248201527f496e76616c696420747970650000000000000000000000000000000000000000604482015290519081900360640190fd5b82818114611b0b57604080517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601660248201527f6172726179206c656e677468206e6f74206d6174636800000000000000000000604482015290519081900360640190fd5b60005b81811015611c5a5760008773ffffffffffffffffffffffffffffffffffffffff1663e6a43905888885818110611b4057fe5b9050602002013573ffffffffffffffffffffffffffffffffffffffff16878786818110611b6957fe5b9050602002013573ffffffffffffffffffffffffffffffffffffffff166040518363ffffffff1660e01b8152600401808373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020018273ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019250505060206040518083038186803b158015611c1957600080fd5b505afa158015611c2d573d6000803e3d6000fd5b505050506040513d6020811015611c4357600080fd5b50519050611c51888261295d565b50600101611b0e565b50505050505050565b60055473ffffffffffffffffffffffffffffffffffffffff1681565b611c87612d5c565b60005473ffffffffffffffffffffffffffffffffffffffff908116911614611d1057604080517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820181905260248201527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e6572604482015290519081900360640190fd5b6000805460405173ffffffffffffffffffffffffffffffffffffffff909116907f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e0908390a3600080547fffffffffffffffffffffffff0000000000000000000000000000000000000000169055565b60045490565b600554604080517fb15866e6000000000000000000000000000000000000000000000000000000008152336004820152905173ffffffffffffffffffffffffffffffffffffffff9092169163b15866e691602480820192602092909190829003018186803b158015611df657600080fd5b505afa158015611e0a573d6000803e3d6000fd5b505050506040513d6020811015611e2057600080fd5b5051611e8d57604080517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152600f60248201527f4e6f742066726f6d20766f74696e670000000000000000000000000000000000604482015290519081900360640190fd5b60018111611efc57604080517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152600e60248201527f496e76616c6964206c656e677468000000000000000000000000000000000000604482015290519081900360640190fd5b600082826000818110611f0b57fe5b60200291909101359150506006821415611fca57807f726567697374657250726f746f636f6c000000000000000000000000000000001415611fc557611fbf83836001818110611f5757fe5b9050602002013584846002818110611f6b57fe5b9050602002013560601c85856003818110611f8257fe5b9050602002013560001c86866004818110611f9957fe5b9050602002013560001c87876005818110611fb057fe5b9050602002013560001c612d60565b506120f4565b61208d565b600782141561208d57807f7265676973746572506169720000000000000000000000000000000000000000141561208d57611fbf8383600181811061200b57fe5b9050602002013560601c8484600281811061202257fe5b9050602002013560601c8585600381811061203957fe5b9050602002013560601c8686600481811061205057fe5b9050602002013560001c8787600581811061206757fe5b9050602002013560001c8888600681811061207e57fe5b9050602002013560001c612fcb565b604080517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601260248201527f496e76616c696420706172616d65746572730000000000000000000000000000604482015290519081900360640190fd5b5050565b73ffffffffffffffffffffffffffffffffffffffff80821660009081526001602052604081205490911680156121595773ffffffffffffffffffffffffffffffffffffffff8116600090815260036020819052604090912001549150612186565b73ffffffffffffffffffffffffffffffffffffffff83166000908152600260208190526040909120015491505b50919050565b60005473ffffffffffffffffffffffffffffffffffffffff1690565b73ffffffffffffffffffffffffffffffffffffffff83166000908152600360208190526040909120015461223d57604080517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601760248201527f50726f746f636f6c206e6f7420726567636f6e697a6564000000000000000000604482015290519081900360640190fd5b8060005b81811015610e8f5760008573ffffffffffffffffffffffffffffffffffffffff16631e3dd18b86868581811061227357fe5b905060200201356040518263ffffffff1660e01b81526004018082815260200191505060206040518083038186803b1580156122ae57600080fd5b505afa1580156122c2573d6000803e3d6000fd5b505050506040513d60208110156122d857600080fd5b505190506122e6868261295d565b50600101612241565b600554604080517fa3818b3b000000000000000000000000000000000000000000000000000000008152336004820152905173ffffffffffffffffffffffffffffffffffffffff9092169163a3818b3b91602480820192602092909190829003018186803b15801561236057600080fd5b505afa158015612374573d6000803e3d6000fd5b505050506040513d602081101561238a57600080fd5b50516123f757604080517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152600f60248201527f4e6f742066726f6d20766f74696e670000000000000000000000000000000000604482015290519081900360640190fd5b610e8f8585858585612d60565b73ffffffffffffffffffffffffffffffffffffffff808216600090815260016020526040812054909182911680156124705773ffffffffffffffffffffffffffffffffffffffff81166000908152600360205260409020600181015460029091015490935091506124a1565b73ffffffffffffffffffffffffffffffffffffffff8416600090815260026020526040902060018101549054935091505b50915091565b73ffffffffffffffffffffffffffffffffffffffff82166000908152600360208190526040909120015461253c57604080517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601760248201527f50726f746f636f6c206e6f7420726567636f6e697a6564000000000000000000604482015290519081900360640190fd5b60008273ffffffffffffffffffffffffffffffffffffffff16631e3dd18b836040518263ffffffff1660e01b81526004018082815260200191505060206040518083038186803b15801561258f57600080fd5b505afa1580156125a3573d6000803e3d6000fd5b505050506040513d60208110156125b957600080fd5b505190506125c7838261295d565b505050565b73ffffffffffffffffffffffffffffffffffffffff8216600090815260036020819052604090912001541580159061262d575073ffffffffffffffffffffffffffffffffffffffff8216600090815260036020819052604090912081015414155b61269857604080517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601760248201527f50726f746f636f6c206e6f7420726567636f6e697a6564000000000000000000604482015290519081900360640190fd5b805160005b818110156110c6576126b5848483815181106110af57fe5b60010161269d565b73ffffffffffffffffffffffffffffffffffffffff8216600090815260036020819052604090912001541580159061271e575073ffffffffffffffffffffffffffffffffffffffff8216600090815260036020819052604090912081015414155b61278957604080517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601760248201527f50726f746f636f6c206e6f7420726567636f6e697a6564000000000000000000604482015290519081900360640190fd5b6120f482826001612965565b61279d612d5c565b60005473ffffffffffffffffffffffffffffffffffffffff90811691161461282657604080517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820181905260248201527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e6572604482015290519081900360640190fd5b73ffffffffffffffffffffffffffffffffffffffff8116612892576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040180806020018281038252602681526020018061336e6026913960400191505060405180910390fd5b6000805460405173ffffffffffffffffffffffffffffffffffffffff808516939216917f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e091a3600080547fffffffffffffffffffffffff00000000000000000000000000000000000000001673ffffffffffffffffffffffffffffffffffffffff92909216919091179055565b600160208190526000918252604090912080549181015460029091015473ffffffffffffffffffffffffffffffffffffffff92831692918216911683565b6120f4828260005b73ffffffffffffffffffffffffffffffffffffffff82166129d1576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004018080602001828103825260238152602001806133946023913960400191505060405180910390fd5b60008273ffffffffffffffffffffffffffffffffffffffff16630dfe16816040518163ffffffff1660e01b8152600401602060405180830381600087803b158015612a1b57600080fd5b505af1158015612a2f573d6000803e3d6000fd5b505050506040513d6020811015612a4557600080fd5b5051604080517fd21220a7000000000000000000000000000000000000000000000000000000008152905191925060009173ffffffffffffffffffffffffffffffffffffffff86169163d21220a791600480830192602092919082900301818787803b158015612ab457600080fd5b505af1158015612ac8573d6000803e3d6000fd5b505050506040513d6020811015612ade57600080fd5b5051905073ffffffffffffffffffffffffffffffffffffffff80821690831610612b6957604080517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601460248201527f496e76616c696420746f6b656e73206f72646572000000000000000000000000604482015290519081900360640190fd5b8215612c9f57604080517fe6a4390500000000000000000000000000000000000000000000000000000000815273ffffffffffffffffffffffffffffffffffffffff84811660048301528381166024830152915160009288169163e6a43905916044808301926020929190829003018186803b158015612be857600080fd5b505afa158015612bfc573d6000803e3d6000fd5b505050506040513d6020811015612c1257600080fd5b5051905073ffffffffffffffffffffffffffffffffffffffff85811690821614612c9d57604080517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152600c60248201527f696e76616c696420706169720000000000000000000000000000000000000000604482015290519081900360640190fd5b505b73ffffffffffffffffffffffffffffffffffffffff8085166000818152600160208181526040928390208054868c167fffffffffffffffffffffffff00000000000000000000000000000000000000009182168117835593820180548a891690831681179091556002909201805497891697909116871790558351908152908101949094528151929390927f07860c96452446c5761a5adeb8371913b7cdcadcae0b6de6a2185692d0abcd19929181900390910190a35050505050565b3390565b73ffffffffffffffffffffffffffffffffffffffff8416612de257604080517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601860248201527f496e76616c69642070726f746f636f6c20616464726573730000000000000000604482015290519081900360640190fd5b81831115612e5157604080517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152600d60248201527f46656520746f6f206c6172676500000000000000000000000000000000000000604482015290519081900360640190fd5b60008211612ec057604080517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601760248201527f50726f746f636f6c206e6f7420726567636f6e697a6564000000000000000000604482015290519081900360640190fd5b60408051608080820183528782526020808301878152838501878152606080860188815273ffffffffffffffffffffffffffffffffffffffff8c16600081815260038088528a822099518a5595516001808b0191909155945160028a0155915197909401969096556004805492830181559095527f8a35acfbc15ff81a39ae7d344fd709f28e8600b4aa8c65c6b64bfe7fe36bd19b0180547fffffffffffffffffffffffff0000000000000000000000000000000000000000168217905584518a8152918201889052818501879052928101859052925191927f4647302d46fbbda75aa1966c4e2d24de38981639223ee539cc8409190780c192929081900390910190a25050505050565b73ffffffffffffffffffffffffffffffffffffffff861661304d57604080517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601560248201527f496e76616c696420746f6b656e20616464726573730000000000000000000000604482015290519081900360640190fd5b8473ffffffffffffffffffffffffffffffffffffffff168673ffffffffffffffffffffffffffffffffffffffff16106130e757604080517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601360248201527f496e76616c696420746f6b656e206f7264657200000000000000000000000000604482015290519081900360640190fd5b73ffffffffffffffffffffffffffffffffffffffff841661316957604080517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601460248201527f496e76616c696420706169722061646472657373000000000000000000000000604482015290519081900360640190fd5b818311156131d857604080517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152600d60248201527f46656520746f6f206c6172676500000000000000000000000000000000000000604482015290519081900360640190fd5b6000821161324757604080517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601760248201527f50726f746f636f6c206e6f7420726567636f6e697a6564000000000000000000604482015290519081900360640190fd5b73ffffffffffffffffffffffffffffffffffffffff808516600081815260016020818152604080842080547fffffffffffffffffffffffff0000000000000000000000000000000000000000908116825581850180548f8a16908316811790915560029283018054998f169990921689179091558184528286208b81559485018a905593018790558051928352908201949094528351929391927f07860c96452446c5761a5adeb8371913b7cdcadcae0b6de6a2185692d0abcd19929181900390910190a36040805184815260208101849052808201839052905173ffffffffffffffffffffffffffffffffffffffff8616917f468d5e8323e9769eda1c0370b2f3c84ea8e2424256a85fd5fb8cf06653c5ad75919081900360600190a250505050505056fe4f776e61626c653a206e6577206f776e657220697320746865207a65726f2061646472657373496e76616c6964207061697220616464726573732f50616972206e6f7420666f756e64a26469706673582212203eca006eace6022ce828d6154a168d35d90464bcaf85fece4da58c3dc77eb55c64736f6c634300060b0033"
    };
});
define("@scom/scom-swap/contracts/oswap-openswap-contract/contracts/router/OSWAP_HybridRouterRegistry.ts", ["require", "exports", "@ijstech/eth-contract", "@scom/scom-swap/contracts/oswap-openswap-contract/contracts/router/OSWAP_HybridRouterRegistry.json.ts"], function (require, exports, eth_contract_39, OSWAP_HybridRouterRegistry_json_1) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.OSWAP_HybridRouterRegistry = void 0;
    class OSWAP_HybridRouterRegistry extends eth_contract_39.Contract {
        constructor(wallet, address) {
            super(wallet, address, OSWAP_HybridRouterRegistry_json_1.default.abi, OSWAP_HybridRouterRegistry_json_1.default.bytecode);
            this.assign();
        }
        deploy(governance, options) {
            return this.__deploy([governance], options);
        }
        parseCustomPairRegisterEvent(receipt) {
            return this.parseEvents(receipt, "CustomPairRegister").map(e => this.decodeCustomPairRegisterEvent(e));
        }
        decodeCustomPairRegisterEvent(event) {
            let result = event.data;
            return {
                pair: result.pair,
                fee: new eth_contract_39.BigNumber(result.fee),
                feeBase: new eth_contract_39.BigNumber(result.feeBase),
                typeCode: new eth_contract_39.BigNumber(result.typeCode),
                _event: event
            };
        }
        parseOwnershipTransferredEvent(receipt) {
            return this.parseEvents(receipt, "OwnershipTransferred").map(e => this.decodeOwnershipTransferredEvent(e));
        }
        decodeOwnershipTransferredEvent(event) {
            let result = event.data;
            return {
                previousOwner: result.previousOwner,
                newOwner: result.newOwner,
                _event: event
            };
        }
        parsePairRegisterEvent(receipt) {
            return this.parseEvents(receipt, "PairRegister").map(e => this.decodePairRegisterEvent(e));
        }
        decodePairRegisterEvent(event) {
            let result = event.data;
            return {
                factory: result.factory,
                pair: result.pair,
                token0: result.token0,
                token1: result.token1,
                _event: event
            };
        }
        parseProtocolRegisterEvent(receipt) {
            return this.parseEvents(receipt, "ProtocolRegister").map(e => this.decodeProtocolRegisterEvent(e));
        }
        decodeProtocolRegisterEvent(event) {
            let result = event.data;
            return {
                factory: result.factory,
                name: result.name,
                fee: new eth_contract_39.BigNumber(result.fee),
                feeBase: new eth_contract_39.BigNumber(result.feeBase),
                typeCode: new eth_contract_39.BigNumber(result.typeCode),
                _event: event
            };
        }
        assign() {
            let customPairs_call = async (param1, options) => {
                let result = await this.call('customPairs', [param1], options);
                return {
                    fee: new eth_contract_39.BigNumber(result.fee),
                    feeBase: new eth_contract_39.BigNumber(result.feeBase),
                    typeCode: new eth_contract_39.BigNumber(result.typeCode)
                };
            };
            this.customPairs = customPairs_call;
            let getFee_call = async (pairAddress, options) => {
                let result = await this.call('getFee', [pairAddress], options);
                return {
                    fee: new eth_contract_39.BigNumber(result.fee),
                    feeBase: new eth_contract_39.BigNumber(result.feeBase)
                };
            };
            this.getFee = getFee_call;
            let getPairTokens_call = async (pairAddress, options) => {
                let result = await this.call('getPairTokens', [pairAddress], options);
                return {
                    token0: result.token0,
                    token1: result.token1
                };
            };
            this.getPairTokens = getPairTokens_call;
            let getTypeCode_call = async (pairAddress, options) => {
                let result = await this.call('getTypeCode', [pairAddress], options);
                return new eth_contract_39.BigNumber(result);
            };
            this.getTypeCode = getTypeCode_call;
            let governance_call = async (options) => {
                let result = await this.call('governance', [], options);
                return result;
            };
            this.governance = governance_call;
            let owner_call = async (options) => {
                let result = await this.call('owner', [], options);
                return result;
            };
            this.owner = owner_call;
            let pairs_call = async (param1, options) => {
                let result = await this.call('pairs', [param1], options);
                return {
                    factory: result.factory,
                    token0: result.token0,
                    token1: result.token1
                };
            };
            this.pairs = pairs_call;
            let protocolList_call = async (param1, options) => {
                let result = await this.call('protocolList', [this.wallet.utils.toString(param1)], options);
                return result;
            };
            this.protocolList = protocolList_call;
            let protocolListLength_call = async (options) => {
                let result = await this.call('protocolListLength', [], options);
                return new eth_contract_39.BigNumber(result);
            };
            this.protocolListLength = protocolListLength_call;
            let protocols_call = async (param1, options) => {
                let result = await this.call('protocols', [param1], options);
                return {
                    name: result.name,
                    fee: new eth_contract_39.BigNumber(result.fee),
                    feeBase: new eth_contract_39.BigNumber(result.feeBase),
                    typeCode: new eth_contract_39.BigNumber(result.typeCode)
                };
            };
            this.protocols = protocols_call;
            let execute_send = async (params, options) => {
                let result = await this.send('execute', [this.wallet.utils.stringToBytes32(params)], options);
                return result;
            };
            let execute_call = async (params, options) => {
                let result = await this.call('execute', [this.wallet.utils.stringToBytes32(params)], options);
                return;
            };
            let execute_txData = async (params, options) => {
                let result = await this.txData('execute', [this.wallet.utils.stringToBytes32(params)], options);
                return result;
            };
            this.execute = Object.assign(execute_send, {
                call: execute_call,
                txData: execute_txData
            });
            let initParams = (params) => [this.wallet.utils.stringToBytes32(params.name), params.factory, this.wallet.utils.toString(params.fee), this.wallet.utils.toString(params.feeBase), this.wallet.utils.toString(params.typeCode)];
            let init_send = async (params, options) => {
                let result = await this.send('init', initParams(params), options);
                return result;
            };
            let init_call = async (params, options) => {
                let result = await this.call('init', initParams(params), options);
                return;
            };
            let init_txData = async (params, options) => {
                let result = await this.txData('init', initParams(params), options);
                return result;
            };
            this.init = Object.assign(init_send, {
                call: init_call,
                txData: init_txData
            });
            let registerPairParams = (params) => [params.token0, params.token1, params.pairAddress, this.wallet.utils.toString(params.fee), this.wallet.utils.toString(params.feeBase), this.wallet.utils.toString(params.typeCode)];
            let registerPair_send = async (params, options) => {
                let result = await this.send('registerPair', registerPairParams(params), options);
                return result;
            };
            let registerPair_call = async (params, options) => {
                let result = await this.call('registerPair', registerPairParams(params), options);
                return;
            };
            let registerPair_txData = async (params, options) => {
                let result = await this.txData('registerPair', registerPairParams(params), options);
                return result;
            };
            this.registerPair = Object.assign(registerPair_send, {
                call: registerPair_call,
                txData: registerPair_txData
            });
            let registerPairByAddressParams = (params) => [params.factory, params.pairAddress];
            let registerPairByAddress_send = async (params, options) => {
                let result = await this.send('registerPairByAddress', registerPairByAddressParams(params), options);
                return result;
            };
            let registerPairByAddress_call = async (params, options) => {
                let result = await this.call('registerPairByAddress', registerPairByAddressParams(params), options);
                return;
            };
            let registerPairByAddress_txData = async (params, options) => {
                let result = await this.txData('registerPairByAddress', registerPairByAddressParams(params), options);
                return result;
            };
            this.registerPairByAddress = Object.assign(registerPairByAddress_send, {
                call: registerPairByAddress_call,
                txData: registerPairByAddress_txData
            });
            let registerPairByIndexParams = (params) => [params.factory, this.wallet.utils.toString(params.index)];
            let registerPairByIndex_send = async (params, options) => {
                let result = await this.send('registerPairByIndex', registerPairByIndexParams(params), options);
                return result;
            };
            let registerPairByIndex_call = async (params, options) => {
                let result = await this.call('registerPairByIndex', registerPairByIndexParams(params), options);
                return;
            };
            let registerPairByIndex_txData = async (params, options) => {
                let result = await this.txData('registerPairByIndex', registerPairByIndexParams(params), options);
                return result;
            };
            this.registerPairByIndex = Object.assign(registerPairByIndex_send, {
                call: registerPairByIndex_call,
                txData: registerPairByIndex_txData
            });
            let registerPairByTokensParams = (params) => [params.factory, params.token0, params.token1];
            let registerPairByTokens_send = async (params, options) => {
                let result = await this.send('registerPairByTokens', registerPairByTokensParams(params), options);
                return result;
            };
            let registerPairByTokens_call = async (params, options) => {
                let result = await this.call('registerPairByTokens', registerPairByTokensParams(params), options);
                return;
            };
            let registerPairByTokens_txData = async (params, options) => {
                let result = await this.txData('registerPairByTokens', registerPairByTokensParams(params), options);
                return result;
            };
            this.registerPairByTokens = Object.assign(registerPairByTokens_send, {
                call: registerPairByTokens_call,
                txData: registerPairByTokens_txData
            });
            let registerPairByTokensV3Params = (params) => [params.factory, params.token0, params.token1, this.wallet.utils.toString(params.pairIndex)];
            let registerPairByTokensV3_send = async (params, options) => {
                let result = await this.send('registerPairByTokensV3', registerPairByTokensV3Params(params), options);
                return result;
            };
            let registerPairByTokensV3_call = async (params, options) => {
                let result = await this.call('registerPairByTokensV3', registerPairByTokensV3Params(params), options);
                return;
            };
            let registerPairByTokensV3_txData = async (params, options) => {
                let result = await this.txData('registerPairByTokensV3', registerPairByTokensV3Params(params), options);
                return result;
            };
            this.registerPairByTokensV3 = Object.assign(registerPairByTokensV3_send, {
                call: registerPairByTokensV3_call,
                txData: registerPairByTokensV3_txData
            });
            let registerPairsByAddressParams = (params) => [params.factory, params.pairAddress];
            let registerPairsByAddress_send = async (params, options) => {
                let result = await this.send('registerPairsByAddress', registerPairsByAddressParams(params), options);
                return result;
            };
            let registerPairsByAddress_call = async (params, options) => {
                let result = await this.call('registerPairsByAddress', registerPairsByAddressParams(params), options);
                return;
            };
            let registerPairsByAddress_txData = async (params, options) => {
                let result = await this.txData('registerPairsByAddress', registerPairsByAddressParams(params), options);
                return result;
            };
            this.registerPairsByAddress = Object.assign(registerPairsByAddress_send, {
                call: registerPairsByAddress_call,
                txData: registerPairsByAddress_txData
            });
            let registerPairsByAddress2Params = (params) => [params.factory, params.pairAddress];
            let registerPairsByAddress2_send = async (params, options) => {
                let result = await this.send('registerPairsByAddress2', registerPairsByAddress2Params(params), options);
                return result;
            };
            let registerPairsByAddress2_call = async (params, options) => {
                let result = await this.call('registerPairsByAddress2', registerPairsByAddress2Params(params), options);
                return;
            };
            let registerPairsByAddress2_txData = async (params, options) => {
                let result = await this.txData('registerPairsByAddress2', registerPairsByAddress2Params(params), options);
                return result;
            };
            this.registerPairsByAddress2 = Object.assign(registerPairsByAddress2_send, {
                call: registerPairsByAddress2_call,
                txData: registerPairsByAddress2_txData
            });
            let registerPairsByIndexParams = (params) => [params.factory, this.wallet.utils.toString(params.index)];
            let registerPairsByIndex_send = async (params, options) => {
                let result = await this.send('registerPairsByIndex', registerPairsByIndexParams(params), options);
                return result;
            };
            let registerPairsByIndex_call = async (params, options) => {
                let result = await this.call('registerPairsByIndex', registerPairsByIndexParams(params), options);
                return;
            };
            let registerPairsByIndex_txData = async (params, options) => {
                let result = await this.txData('registerPairsByIndex', registerPairsByIndexParams(params), options);
                return result;
            };
            this.registerPairsByIndex = Object.assign(registerPairsByIndex_send, {
                call: registerPairsByIndex_call,
                txData: registerPairsByIndex_txData
            });
            let registerPairsByTokensParams = (params) => [params.factory, params.token0, params.token1];
            let registerPairsByTokens_send = async (params, options) => {
                let result = await this.send('registerPairsByTokens', registerPairsByTokensParams(params), options);
                return result;
            };
            let registerPairsByTokens_call = async (params, options) => {
                let result = await this.call('registerPairsByTokens', registerPairsByTokensParams(params), options);
                return;
            };
            let registerPairsByTokens_txData = async (params, options) => {
                let result = await this.txData('registerPairsByTokens', registerPairsByTokensParams(params), options);
                return result;
            };
            this.registerPairsByTokens = Object.assign(registerPairsByTokens_send, {
                call: registerPairsByTokens_call,
                txData: registerPairsByTokens_txData
            });
            let registerPairsByTokensV3Params = (params) => [params.factory, params.token0, params.token1, this.wallet.utils.toString(params.pairIndex)];
            let registerPairsByTokensV3_send = async (params, options) => {
                let result = await this.send('registerPairsByTokensV3', registerPairsByTokensV3Params(params), options);
                return result;
            };
            let registerPairsByTokensV3_call = async (params, options) => {
                let result = await this.call('registerPairsByTokensV3', registerPairsByTokensV3Params(params), options);
                return;
            };
            let registerPairsByTokensV3_txData = async (params, options) => {
                let result = await this.txData('registerPairsByTokensV3', registerPairsByTokensV3Params(params), options);
                return result;
            };
            this.registerPairsByTokensV3 = Object.assign(registerPairsByTokensV3_send, {
                call: registerPairsByTokensV3_call,
                txData: registerPairsByTokensV3_txData
            });
            let registerProtocolParams = (params) => [this.wallet.utils.stringToBytes32(params.name), params.factory, this.wallet.utils.toString(params.fee), this.wallet.utils.toString(params.feeBase), this.wallet.utils.toString(params.typeCode)];
            let registerProtocol_send = async (params, options) => {
                let result = await this.send('registerProtocol', registerProtocolParams(params), options);
                return result;
            };
            let registerProtocol_call = async (params, options) => {
                let result = await this.call('registerProtocol', registerProtocolParams(params), options);
                return;
            };
            let registerProtocol_txData = async (params, options) => {
                let result = await this.txData('registerProtocol', registerProtocolParams(params), options);
                return result;
            };
            this.registerProtocol = Object.assign(registerProtocol_send, {
                call: registerProtocol_call,
                txData: registerProtocol_txData
            });
            let renounceOwnership_send = async (options) => {
                let result = await this.send('renounceOwnership', [], options);
                return result;
            };
            let renounceOwnership_call = async (options) => {
                let result = await this.call('renounceOwnership', [], options);
                return;
            };
            let renounceOwnership_txData = async (options) => {
                let result = await this.txData('renounceOwnership', [], options);
                return result;
            };
            this.renounceOwnership = Object.assign(renounceOwnership_send, {
                call: renounceOwnership_call,
                txData: renounceOwnership_txData
            });
            let transferOwnership_send = async (newOwner, options) => {
                let result = await this.send('transferOwnership', [newOwner], options);
                return result;
            };
            let transferOwnership_call = async (newOwner, options) => {
                let result = await this.call('transferOwnership', [newOwner], options);
                return;
            };
            let transferOwnership_txData = async (newOwner, options) => {
                let result = await this.txData('transferOwnership', [newOwner], options);
                return result;
            };
            this.transferOwnership = Object.assign(transferOwnership_send, {
                call: transferOwnership_call,
                txData: transferOwnership_txData
            });
        }
    }
    OSWAP_HybridRouterRegistry._abi = OSWAP_HybridRouterRegistry_json_1.default.abi;
    exports.OSWAP_HybridRouterRegistry = OSWAP_HybridRouterRegistry;
});
define("@scom/scom-swap/contracts/oswap-openswap-contract/contracts/router/OSWAP_OracleRouter.json.ts", ["require", "exports"], function (require, exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    ///<amd-module name='@scom/scom-swap/contracts/oswap-openswap-contract/contracts/router/OSWAP_OracleRouter.json.ts'/> 
    exports.default = {
        "abi": [
            { "inputs": [{ "internalType": "address", "name": "_ammFactory", "type": "address" }, { "internalType": "address", "name": "_oracleFactory", "type": "address" }, { "internalType": "address", "name": "_WETH", "type": "address" }], "stateMutability": "nonpayable", "type": "constructor" },
            { "inputs": [], "name": "WETH", "outputs": [{ "internalType": "address", "name": "", "type": "address" }], "stateMutability": "view", "type": "function" },
            { "inputs": [], "name": "ammFactory", "outputs": [{ "internalType": "address", "name": "", "type": "address" }], "stateMutability": "view", "type": "function" },
            { "inputs": [{ "internalType": "uint256", "name": "amountOut", "type": "uint256" }, { "internalType": "address", "name": "tokenIn", "type": "address" }, { "internalType": "address", "name": "tokenOut", "type": "address" }, { "internalType": "bytes", "name": "data", "type": "bytes" }], "name": "getAmountIn", "outputs": [{ "internalType": "uint256", "name": "amountIn", "type": "uint256" }], "stateMutability": "view", "type": "function" },
            { "inputs": [{ "internalType": "uint256", "name": "amountIn", "type": "uint256" }, { "internalType": "address", "name": "tokenIn", "type": "address" }, { "internalType": "address", "name": "tokenOut", "type": "address" }, { "internalType": "bytes", "name": "data", "type": "bytes" }], "name": "getAmountOut", "outputs": [{ "internalType": "uint256", "name": "amountOut", "type": "uint256" }], "stateMutability": "view", "type": "function" },
            { "inputs": [{ "internalType": "uint256", "name": "amountOut", "type": "uint256" }, { "internalType": "address[]", "name": "path", "type": "address[]" }, { "internalType": "bool[]", "name": "useOracle", "type": "bool[]" }, { "internalType": "bytes", "name": "data", "type": "bytes" }], "name": "getAmountsIn", "outputs": [{ "internalType": "uint256[]", "name": "amounts", "type": "uint256[]" }], "stateMutability": "view", "type": "function" },
            { "inputs": [{ "internalType": "uint256", "name": "amountIn", "type": "uint256" }, { "internalType": "address[]", "name": "path", "type": "address[]" }, { "internalType": "bool[]", "name": "useOracle", "type": "bool[]" }, { "internalType": "bytes", "name": "data", "type": "bytes" }], "name": "getAmountsOut", "outputs": [{ "internalType": "uint256[]", "name": "amounts", "type": "uint256[]" }], "stateMutability": "view", "type": "function" },
            { "inputs": [{ "internalType": "address", "name": "tokenIn", "type": "address" }, { "internalType": "address", "name": "tokenOut", "type": "address" }, { "internalType": "bytes", "name": "data", "type": "bytes" }], "name": "getLatestPrice", "outputs": [{ "internalType": "uint256", "name": "", "type": "uint256" }], "stateMutability": "view", "type": "function" },
            { "inputs": [], "name": "oracleFactory", "outputs": [{ "internalType": "address", "name": "", "type": "address" }], "stateMutability": "view", "type": "function" },
            { "inputs": [{ "internalType": "uint256", "name": "amountOut", "type": "uint256" }, { "internalType": "address[]", "name": "path", "type": "address[]" }, { "internalType": "address", "name": "to", "type": "address" }, { "internalType": "uint256", "name": "deadline", "type": "uint256" }, { "internalType": "bool[]", "name": "useOracle", "type": "bool[]" }, { "internalType": "bytes", "name": "data", "type": "bytes" }], "name": "swapETHForExactTokens", "outputs": [{ "internalType": "uint256[]", "name": "amounts", "type": "uint256[]" }], "stateMutability": "payable", "type": "function" },
            { "inputs": [{ "internalType": "uint256", "name": "amountOutMin", "type": "uint256" }, { "internalType": "address[]", "name": "path", "type": "address[]" }, { "internalType": "address", "name": "to", "type": "address" }, { "internalType": "uint256", "name": "deadline", "type": "uint256" }, { "internalType": "bool[]", "name": "useOracle", "type": "bool[]" }, { "internalType": "bytes", "name": "data", "type": "bytes" }], "name": "swapExactETHForTokens", "outputs": [{ "internalType": "uint256[]", "name": "amounts", "type": "uint256[]" }], "stateMutability": "payable", "type": "function" },
            { "inputs": [{ "internalType": "uint256", "name": "amountOutMin", "type": "uint256" }, { "internalType": "address[]", "name": "path", "type": "address[]" }, { "internalType": "address", "name": "to", "type": "address" }, { "internalType": "uint256", "name": "deadline", "type": "uint256" }, { "internalType": "bool[]", "name": "useOracle", "type": "bool[]" }, { "internalType": "bytes", "name": "data", "type": "bytes" }], "name": "swapExactETHForTokensSupportingFeeOnTransferTokens", "outputs": [], "stateMutability": "payable", "type": "function" },
            { "inputs": [{ "internalType": "uint256", "name": "amountIn", "type": "uint256" }, { "internalType": "uint256", "name": "amountOutMin", "type": "uint256" }, { "internalType": "address[]", "name": "path", "type": "address[]" }, { "internalType": "address", "name": "to", "type": "address" }, { "internalType": "uint256", "name": "deadline", "type": "uint256" }, { "internalType": "bool[]", "name": "useOracle", "type": "bool[]" }, { "internalType": "bytes", "name": "data", "type": "bytes" }], "name": "swapExactTokensForETH", "outputs": [{ "internalType": "uint256[]", "name": "amounts", "type": "uint256[]" }], "stateMutability": "nonpayable", "type": "function" },
            { "inputs": [{ "internalType": "uint256", "name": "amountIn", "type": "uint256" }, { "internalType": "uint256", "name": "amountOutMin", "type": "uint256" }, { "internalType": "address[]", "name": "path", "type": "address[]" }, { "internalType": "address", "name": "to", "type": "address" }, { "internalType": "uint256", "name": "deadline", "type": "uint256" }, { "internalType": "bool[]", "name": "useOracle", "type": "bool[]" }, { "internalType": "bytes", "name": "data", "type": "bytes" }], "name": "swapExactTokensForETHSupportingFeeOnTransferTokens", "outputs": [], "stateMutability": "nonpayable", "type": "function" },
            { "inputs": [{ "internalType": "uint256", "name": "amountIn", "type": "uint256" }, { "internalType": "uint256", "name": "amountOutMin", "type": "uint256" }, { "internalType": "address[]", "name": "path", "type": "address[]" }, { "internalType": "address", "name": "to", "type": "address" }, { "internalType": "uint256", "name": "deadline", "type": "uint256" }, { "internalType": "bool[]", "name": "useOracle", "type": "bool[]" }, { "internalType": "bytes", "name": "data", "type": "bytes" }], "name": "swapExactTokensForTokens", "outputs": [{ "internalType": "uint256[]", "name": "amounts", "type": "uint256[]" }], "stateMutability": "nonpayable", "type": "function" },
            { "inputs": [{ "internalType": "uint256", "name": "amountIn", "type": "uint256" }, { "internalType": "uint256", "name": "amountOutMin", "type": "uint256" }, { "internalType": "address[]", "name": "path", "type": "address[]" }, { "internalType": "address", "name": "to", "type": "address" }, { "internalType": "uint256", "name": "deadline", "type": "uint256" }, { "internalType": "bool[]", "name": "useOracle", "type": "bool[]" }, { "internalType": "bytes", "name": "data", "type": "bytes" }], "name": "swapExactTokensForTokensSupportingFeeOnTransferTokens", "outputs": [], "stateMutability": "nonpayable", "type": "function" },
            { "inputs": [{ "internalType": "uint256", "name": "amountOut", "type": "uint256" }, { "internalType": "uint256", "name": "amountInMax", "type": "uint256" }, { "internalType": "address[]", "name": "path", "type": "address[]" }, { "internalType": "address", "name": "to", "type": "address" }, { "internalType": "uint256", "name": "deadline", "type": "uint256" }, { "internalType": "bool[]", "name": "useOracle", "type": "bool[]" }, { "internalType": "bytes", "name": "data", "type": "bytes" }], "name": "swapTokensForExactETH", "outputs": [{ "internalType": "uint256[]", "name": "amounts", "type": "uint256[]" }], "stateMutability": "nonpayable", "type": "function" },
            { "inputs": [{ "internalType": "uint256", "name": "amountOut", "type": "uint256" }, { "internalType": "uint256", "name": "amountInMax", "type": "uint256" }, { "internalType": "address[]", "name": "path", "type": "address[]" }, { "internalType": "address", "name": "to", "type": "address" }, { "internalType": "uint256", "name": "deadline", "type": "uint256" }, { "internalType": "bool[]", "name": "useOracle", "type": "bool[]" }, { "internalType": "bytes", "name": "data", "type": "bytes" }], "name": "swapTokensForExactTokens", "outputs": [{ "internalType": "uint256[]", "name": "amounts", "type": "uint256[]" }], "stateMutability": "nonpayable", "type": "function" },
            { "stateMutability": "payable", "type": "receive" }
        ],
        "bytecode": "60e060405234801561001057600080fd5b5060405162004ccb38038062004ccb8339818101604052606081101561003557600080fd5b50805160208201516040909201516001600160601b0319606092831b811660805292821b831660a052901b1660c05260805160601c60a05160601c60c05160601c614bcd620000fe6000398061012f52806112d8528061145252806114e75280611cb55280611ee35280611fc9528061272552806128cb52806129fe5280612b565280612bd75280612f115280612fbc528061357e52806136f5528061378a5250806134c45280613a7b5280613cc852806141ea5250806134e85280613a555250614bcd6000f3fe6080604052600436106101125760003560e01c80636e20a8ac116100a5578063c4f1be6111610074578063dacda92f11610059578063dacda92f14610fc3578063eef56c7614610fd8578063f39db2c614611115576101bd565b8063c4f1be6114610e86578063c7f7fb9014610fae576101bd565b80636e20a8ac14610a6d5780638e933c4c14610bbc578063ad5c464814610cf9578063b890b39714610d37576101bd565b8063495e4348116100e1578063495e43481461071557806350ab4df6146107ca5780635594e318146108745780636b1c9d50146109c3576101bd565b806311308430146101c257806323f2f4d31461034f578063315deba61461049e5780633feeb15a146105c6576101bd565b366101bd573373ffffffffffffffffffffffffffffffffffffffff7f000000000000000000000000000000000000000000000000000000000000000016146101bb57604080517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152600f60248201527f5472616e73666572206661696c65640000000000000000000000000000000000604482015290519081900360640190fd5b005b600080fd5b6102ff600480360360c08110156101d857600080fd5b813591908101906040810160208201356401000000008111156101fa57600080fd5b82018360208201111561020c57600080fd5b8035906020019184602083028401116401000000008311171561022e57600080fd5b9193909273ffffffffffffffffffffffffffffffffffffffff83351692602081013592919060608101906040013564010000000081111561026e57600080fd5b82018360208201111561028057600080fd5b803590602001918460208302840111640100000000831117156102a257600080fd5b9193909290916020810190356401000000008111156102c057600080fd5b8201836020820111156102d257600080fd5b803590602001918460018302840111640100000000831117156102f457600080fd5b509092509050611264565b60408051602080825283518183015283519192839290830191858101910280838360005b8381101561033b578181015183820152602001610323565b505050509050019250505060405180910390f35b34801561035b57600080fd5b506102ff600480360360e081101561037257600080fd5b81359160208101359181019060608101604082013564010000000081111561039957600080fd5b8201836020820111156103ab57600080fd5b803590602001918460208302840111640100000000831117156103cd57600080fd5b9193909273ffffffffffffffffffffffffffffffffffffffff83351692602081013592919060608101906040013564010000000081111561040d57600080fd5b82018360208201111561041f57600080fd5b8035906020019184602083028401116401000000008311171561044157600080fd5b91939092909160208101903564010000000081111561045f57600080fd5b82018360208201111561047157600080fd5b8035906020019184600183028401116401000000008311171561049357600080fd5b5090925090506116c6565b3480156104aa57600080fd5b506102ff600480360360808110156104c157600080fd5b813591908101906040810160208201356401000000008111156104e357600080fd5b8201836020820111156104f557600080fd5b8035906020019184602083028401116401000000008311171561051757600080fd5b91939092909160208101903564010000000081111561053557600080fd5b82018360208201111561054757600080fd5b8035906020019184602083028401116401000000008311171561056957600080fd5b91939092909160208101903564010000000081111561058757600080fd5b82018360208201111561059957600080fd5b803590602001918460018302840111640100000000831117156105bb57600080fd5b50909250905061189a565b3480156105d257600080fd5b506101bb600480360360e08110156105e957600080fd5b81359160208101359181019060608101604082013564010000000081111561061057600080fd5b82018360208201111561062257600080fd5b8035906020019184602083028401116401000000008311171561064457600080fd5b9193909273ffffffffffffffffffffffffffffffffffffffff83351692602081013592919060608101906040013564010000000081111561068457600080fd5b82018360208201111561069657600080fd5b803590602001918460208302840111640100000000831117156106b857600080fd5b9193909290916020810190356401000000008111156106d657600080fd5b8201836020820111156106e857600080fd5b8035906020019184600183028401116401000000008311171561070a57600080fd5b509092509050611c2e565b34801561072157600080fd5b506107b86004803603606081101561073857600080fd5b73ffffffffffffffffffffffffffffffffffffffff823581169260208101359091169181019060608101604082013564010000000081111561077957600080fd5b82018360208201111561078b57600080fd5b803590602001918460018302840111640100000000831117156107ad57600080fd5b50909250905061206a565b60408051918252519081900360200190f35b3480156107d657600080fd5b506107b8600480360360808110156107ed57600080fd5b81359173ffffffffffffffffffffffffffffffffffffffff60208201358116926040830135909116919081019060808101606082013564010000000081111561083557600080fd5b82018360208201111561084757600080fd5b8035906020019184600183028401116401000000008311171561086957600080fd5b509092509050612170565b34801561088057600080fd5b506101bb600480360360e081101561089757600080fd5b8135916020810135918101906060810160408201356401000000008111156108be57600080fd5b8201836020820111156108d057600080fd5b803590602001918460208302840111640100000000831117156108f257600080fd5b9193909273ffffffffffffffffffffffffffffffffffffffff83351692602081013592919060608101906040013564010000000081111561093257600080fd5b82018360208201111561094457600080fd5b8035906020019184602083028401116401000000008311171561096657600080fd5b91939092909160208101903564010000000081111561098457600080fd5b82018360208201111561099657600080fd5b803590602001918460018302840111640100000000831117156109b857600080fd5b509092509050612236565b3480156109cf57600080fd5b506107b8600480360360808110156109e657600080fd5b81359173ffffffffffffffffffffffffffffffffffffffff602082013581169260408301359091169190810190608081016060820135640100000000811115610a2e57600080fd5b820183602082011115610a4057600080fd5b80359060200191846001830284011164010000000083111715610a6257600080fd5b5090925090506125d6565b348015610a7957600080fd5b506102ff600480360360e0811015610a9057600080fd5b813591602081013591810190606081016040820135640100000000811115610ab757600080fd5b820183602082011115610ac957600080fd5b80359060200191846020830284011164010000000083111715610aeb57600080fd5b9193909273ffffffffffffffffffffffffffffffffffffffff833516926020810135929190606081019060400135640100000000811115610b2b57600080fd5b820183602082011115610b3d57600080fd5b80359060200191846020830284011164010000000083111715610b5f57600080fd5b919390929091602081019035640100000000811115610b7d57600080fd5b820183602082011115610b8f57600080fd5b80359060200191846001830284011164010000000083111715610bb157600080fd5b50909250905061269c565b6101bb600480360360c0811015610bd257600080fd5b81359190810190604081016020820135640100000000811115610bf457600080fd5b820183602082011115610c0657600080fd5b80359060200191846020830284011164010000000083111715610c2857600080fd5b9193909273ffffffffffffffffffffffffffffffffffffffff833516926020810135929190606081019060400135640100000000811115610c6857600080fd5b820183602082011115610c7a57600080fd5b80359060200191846020830284011164010000000083111715610c9c57600080fd5b919390929091602081019035640100000000811115610cba57600080fd5b820183602082011115610ccc57600080fd5b80359060200191846001830284011164010000000083111715610cee57600080fd5b50909250905061298c565b348015610d0557600080fd5b50610d0e612f0f565b6040805173ffffffffffffffffffffffffffffffffffffffff9092168252519081900360200190f35b348015610d4357600080fd5b506102ff600480360360e0811015610d5a57600080fd5b813591602081013591810190606081016040820135640100000000811115610d8157600080fd5b820183602082011115610d9357600080fd5b80359060200191846020830284011164010000000083111715610db557600080fd5b9193909273ffffffffffffffffffffffffffffffffffffffff833516926020810135929190606081019060400135640100000000811115610df557600080fd5b820183602082011115610e0757600080fd5b80359060200191846020830284011164010000000083111715610e2957600080fd5b919390929091602081019035640100000000811115610e4757600080fd5b820183602082011115610e5957600080fd5b80359060200191846001830284011164010000000083111715610e7b57600080fd5b509092509050612f33565b348015610e9257600080fd5b506102ff60048036036080811015610ea957600080fd5b81359190810190604081016020820135640100000000811115610ecb57600080fd5b820183602082011115610edd57600080fd5b80359060200191846020830284011164010000000083111715610eff57600080fd5b919390929091602081019035640100000000811115610f1d57600080fd5b820183602082011115610f2f57600080fd5b80359060200191846020830284011164010000000083111715610f5157600080fd5b919390929091602081019035640100000000811115610f6f57600080fd5b820183602082011115610f8157600080fd5b80359060200191846001830284011164010000000083111715610fa357600080fd5b50909250905061313d565b348015610fba57600080fd5b50610d0e6134c2565b348015610fcf57600080fd5b50610d0e6134e6565b6102ff600480360360c0811015610fee57600080fd5b8135919081019060408101602082013564010000000081111561101057600080fd5b82018360208201111561102257600080fd5b8035906020019184602083028401116401000000008311171561104457600080fd5b9193909273ffffffffffffffffffffffffffffffffffffffff83351692602081013592919060608101906040013564010000000081111561108457600080fd5b82018360208201111561109657600080fd5b803590602001918460208302840111640100000000831117156110b857600080fd5b9193909290916020810190356401000000008111156110d657600080fd5b8201836020820111156110e857600080fd5b8035906020019184600183028401116401000000008311171561110a57600080fd5b50909250905061350a565b34801561112157600080fd5b506102ff600480360360e081101561113857600080fd5b81359160208101359181019060608101604082013564010000000081111561115f57600080fd5b82018360208201111561117157600080fd5b8035906020019184602083028401116401000000008311171561119357600080fd5b9193909273ffffffffffffffffffffffffffffffffffffffff8335169260208101359291906060810190604001356401000000008111156111d357600080fd5b8201836020820111156111e557600080fd5b8035906020019184602083028401116401000000008311171561120757600080fd5b91939092909160208101903564010000000081111561122557600080fd5b82018360208201111561123757600080fd5b8035906020019184600183028401116401000000008311171561125957600080fd5b509092509050613935565b606085428110156112d657604080517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152600760248201527f4558504952454400000000000000000000000000000000000000000000000000604482015290519081900360640190fd5b7f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff168a8a600081811061131a57fe5b9050602002013573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16146113b957604080517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152600c60248201527f494e56414c49445f504154480000000000000000000000000000000000000000604482015290519081900360640190fd5b6113c8348b8b8989898961189a565b91508a826001845103815181106113db57fe5b6020026020010151101561145057604080517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601a60248201527f494e53554646494349454e545f4f55545055545f414d4f554e54000000000000604482015290519081900360640190fd5b7f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff1663d0e30db08360008151811061149957fe5b60200260200101516040518263ffffffff1660e01b81526004016000604051808303818588803b1580156114cc57600080fd5b505af11580156114e0573d6000803e3d6000fd5b50505050507f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff1663a9059cbb6115938c8c600081811061153157fe5b9050602002013573ffffffffffffffffffffffffffffffffffffffff168d8d600181811061155b57fe5b9050602002013573ffffffffffffffffffffffffffffffffffffffff168a8a600081811061158557fe5b905060200201351515613a3b565b846000815181106115a057fe5b60200260200101516040518363ffffffff1660e01b8152600401808373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200182815260200192505050602060405180830381600087803b15801561161157600080fd5b505af1158015611625573d6000803e3d6000fd5b505050506040513d602081101561163b57600080fd5b50516116a857604080517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152600f60248201527f5472616e73666572206661696c65640000000000000000000000000000000000604482015290519081900360640190fd5b6116b8828b8b8b8a8a8a8a613c67565b509998505050505050505050565b6060854281101561173857604080517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152600760248201527f4558504952454400000000000000000000000000000000000000000000000000604482015290519081900360640190fd5b6117478c8b8b8989898961189a565b91508a8260018451038151811061175a57fe5b602002602001015110156117cf57604080517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601a60248201527f494e53554646494349454e545f4f55545055545f414d4f554e54000000000000604482015290519081900360640190fd5b61187b8a8a60008181106117df57fe5b9050602002013573ffffffffffffffffffffffffffffffffffffffff16336118618d8d600081811061180d57fe5b9050602002013573ffffffffffffffffffffffffffffffffffffffff168e8e600181811061183757fe5b9050602002013573ffffffffffffffffffffffffffffffffffffffff168b8b600081811061158557fe5b8560008151811061186e57fe5b6020026020010151613fb9565b61188b828b8b8b8a8a8a8a613c67565b509a9950505050505050505050565b6060600286101561190c57604080517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152600c60248201527f494e56414c49445f504154480000000000000000000000000000000000000000604482015290519081900360640190fd5b7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff8601841461199c57604080517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152600e60248201527f494e56414c49445f4f5241434c45000000000000000000000000000000000000604482015290519081900360640190fd5b8567ffffffffffffffff811180156119b357600080fd5b506040519080825280602002602001820160405280156119dd578160200160208202803683370190505b50905087816000815181106119ee57fe5b60200260200101818152505060005b7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff8701811015611c2257858582818110611a3357fe5b90506020020135611b8d57611a9d888883818110611a4d57fe5b9050602002013573ffffffffffffffffffffffffffffffffffffffff16898984600101818110611a7957fe5b9050602002013573ffffffffffffffffffffffffffffffffffffffff166000613a3b565b73ffffffffffffffffffffffffffffffffffffffff1663ca706bcf898984818110611ac457fe5b9050602002013573ffffffffffffffffffffffffffffffffffffffff16848481518110611aed57fe5b60200260200101516040518363ffffffff1660e01b8152600401808373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020018281526020019250505060206040518083038186803b158015611b5c57600080fd5b505afa158015611b70573d6000803e3d6000fd5b505050506040513d6020811015611b8657600080fd5b5051611c00565b611c00828281518110611b9c57fe5b6020026020010151898984818110611bb057fe5b9050602002013573ffffffffffffffffffffffffffffffffffffffff168a8a85600101818110611bdc57fe5b9050602002013573ffffffffffffffffffffffffffffffffffffffff168787612170565b828260010181518110611c0f57fe5b60209081029190910101526001016119fd565b50979650505050505050565b8442811015611c9e57604080517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152600760248201527f4558504952454400000000000000000000000000000000000000000000000000604482015290519081900360640190fd5b73ffffffffffffffffffffffffffffffffffffffff7f00000000000000000000000000000000000000000000000000000000000000001689897fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff8101818110611d0357fe5b9050602002013573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1614611da257604080517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152600c60248201527f494e56414c49445f504154480000000000000000000000000000000000000000604482015290519081900360640190fd5b6002881015611e1257604080517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152600c60248201527f494e56414c49445f504154480000000000000000000000000000000000000000604482015290519081900360640190fd5b611e5689896000818110611e2257fe5b9050602002013573ffffffffffffffffffffffffffffffffffffffff1633611e508c8c600081811061153157fe5b8e613fb9565b611e9a898930888888888080601f01602080910402602001604051908101604052809392919081815260200183838082843760009201919091525061418992505050565b604080517f70a08231000000000000000000000000000000000000000000000000000000008152306004820152905160009173ffffffffffffffffffffffffffffffffffffffff7f000000000000000000000000000000000000000000000000000000000000000016916370a0823191602480820192602092909190829003018186803b158015611f2a57600080fd5b505afa158015611f3e573d6000803e3d6000fd5b505050506040513d6020811015611f5457600080fd5b505190508a811015611fc757604080517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601a60248201527f494e53554646494349454e545f4f55545055545f414d4f554e54000000000000604482015290519081900360640190fd5b7f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff16632e1a7d4d826040518263ffffffff1660e01b815260040180828152602001915050600060405180830381600087803b15801561203a57600080fd5b505af115801561204e573d6000803e3d6000fd5b5050505061205c88826147aa565b505050505050505050505050565b600073ffffffffffffffffffffffffffffffffffffffff8085169086161061209486866001613a3b565b73ffffffffffffffffffffffffffffffffffffffff1663d519f64d8286866040518463ffffffff1660e01b81526004018084151515158152602001806020018281038252848482818152602001925080828437600083820152604051601f9091017fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe016909201965060209550909350505081840390508186803b15801561213a57600080fd5b505afa15801561214e573d6000803e3d6000fd5b505050506040513d602081101561216457600080fd5b50519695505050505050565b600061217e85856001613a3b565b73ffffffffffffffffffffffffffffffffffffffff16633b19103b868886866040518563ffffffff1660e01b8152600401808573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001848152602001806020018281038252848482818152602001925080828437600081840152601f19601f8201169050808301925050509550505050505060206040518083038186803b15801561213a57600080fd5b84428110156122a657604080517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152600760248201527f4558504952454400000000000000000000000000000000000000000000000000604482015290519081900360640190fd5b600288101561231657604080517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152600c60248201527f494e56414c49445f504154480000000000000000000000000000000000000000604482015290519081900360640190fd5b61232689896000818110611e2257fe5b600089897fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff810181811061235657fe5b9050602002013573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff166370a08231896040518263ffffffff1660e01b8152600401808273ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200191505060206040518083038186803b1580156123ef57600080fd5b505afa158015612403573d6000803e3d6000fd5b505050506040513d602081101561241957600080fd5b5051604080516020601f8701819004810282018101909252858152919250612465918c918c918c918b918b918b908b908190840183828082843760009201919091525061418992505050565b8a612569828c8c7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff810181811061249857fe5b9050602002013573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff166370a082318c6040518263ffffffff1660e01b8152600401808273ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200191505060206040518083038186803b15801561253157600080fd5b505afa158015612545573d6000803e3d6000fd5b505050506040513d602081101561255b57600080fd5b50519063ffffffff6148e716565b101561205c57604080517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601a60248201527f494e53554646494349454e545f4f55545055545f414d4f554e54000000000000604482015290519081900360640190fd5b60006125e485856001613a3b565b73ffffffffffffffffffffffffffffffffffffffff1663685639a9858886866040518563ffffffff1660e01b8152600401808573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001848152602001806020018281038252848482818152602001925080828437600081840152601f19601f8201169050808301925050509550505050505060206040518083038186803b15801561213a57600080fd5b6060854281101561270e57604080517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152600760248201527f4558504952454400000000000000000000000000000000000000000000000000604482015290519081900360640190fd5b73ffffffffffffffffffffffffffffffffffffffff7f0000000000000000000000000000000000000000000000000000000000000000168a8a7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff810181811061277357fe5b9050602002013573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff161461281257604080517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152600c60248201527f494e56414c49445f504154480000000000000000000000000000000000000000604482015290519081900360640190fd5b6128218c8b8b8989898961189a565b91508a8260018451038151811061283457fe5b602002602001015110156128a957604080517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601a60248201527f494e53554646494349454e545f4f55545055545f414d4f554e54000000000000604482015290519081900360640190fd5b6128b98a8a60008181106117df57fe5b6128c9828b8b308a8a8a8a613c67565b7f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff16632e1a7d4d8360018551038151811061291557fe5b60200260200101516040518263ffffffff1660e01b815260040180828152602001915050600060405180830381600087803b15801561295357600080fd5b505af1158015612967573d6000803e3d6000fd5b5050505061188b888360018551038151811061297f57fe5b60200260200101516147aa565b84428110156129fc57604080517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152600760248201527f4558504952454400000000000000000000000000000000000000000000000000604482015290519081900360640190fd5b7f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff1689896000818110612a4057fe5b9050602002013573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1614612adf57604080517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152600c60248201527f494e56414c49445f504154480000000000000000000000000000000000000000604482015290519081900360640190fd5b6002881015612b4f57604080517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152600c60248201527f494e56414c49445f504154480000000000000000000000000000000000000000604482015290519081900360640190fd5b60003490507f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff1663d0e30db0826040518263ffffffff1660e01b81526004016000604051808303818588803b158015612bbc57600080fd5b505af1158015612bd0573d6000803e3d6000fd5b50505050507f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff1663a9059cbb612c218c8c600081811061153157fe5b836040518363ffffffff1660e01b8152600401808373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200182815260200192505050602060405180830381600087803b158015612c8b57600080fd5b505af1158015612c9f573d6000803e3d6000fd5b505050506040513d6020811015612cb557600080fd5b5051612d2257604080517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152600f60248201527f5472616e73666572206661696c65640000000000000000000000000000000000604482015290519081900360640190fd5b50600089897fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff8101818110612d5357fe5b9050602002013573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff166370a08231896040518263ffffffff1660e01b8152600401808273ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200191505060206040518083038186803b158015612dec57600080fd5b505afa158015612e00573d6000803e3d6000fd5b505050506040513d6020811015612e1657600080fd5b5051604080516020601f8701819004810282018101909252858152919250612e62918c918c918c918b918b918b908b908190840183828082843760009201919091525061418992505050565b8a612e95828c8c7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff810181811061249857fe5b1015612f0257604080517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601a60248201527f494e53554646494349454e545f4f55545055545f414d4f554e54000000000000604482015290519081900360640190fd5b5050505050505050505050565b7f000000000000000000000000000000000000000000000000000000000000000081565b60608542811015612fa557604080517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152600760248201527f4558504952454400000000000000000000000000000000000000000000000000604482015290519081900360640190fd5b73ffffffffffffffffffffffffffffffffffffffff7f0000000000000000000000000000000000000000000000000000000000000000168a8a7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff810181811061300a57fe5b9050602002013573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16146130a957604080517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152600c60248201527f494e56414c49445f504154480000000000000000000000000000000000000000604482015290519081900360640190fd5b6130b88c8b8b8989898961313d565b91508a826000815181106130c857fe5b602002602001015111156128a957604080517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601660248201527f4558434553534956455f494e5055545f414d4f554e5400000000000000000000604482015290519081900360640190fd5b606060028610156131af57604080517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152600c60248201527f494e56414c49445f504154480000000000000000000000000000000000000000604482015290519081900360640190fd5b7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff8601841461323f57604080517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152600e60248201527f494e56414c49445f4f5241434c45000000000000000000000000000000000000604482015290519081900360640190fd5b8567ffffffffffffffff8111801561325657600080fd5b50604051908082528060200260200182016040528015613280578160200160208202803683370190505b509050878160018351038151811061329457fe5b60209081029190910101527fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff86015b8015611c22578585600183038181106132d857fe5b9050602002013561340e5761331e8888600184038181106132f557fe5b9050602002013573ffffffffffffffffffffffffffffffffffffffff16898984818110611a7957fe5b73ffffffffffffffffffffffffffffffffffffffff1663632db21c89898481811061334557fe5b9050602002013573ffffffffffffffffffffffffffffffffffffffff1684848151811061336e57fe5b60200260200101516040518363ffffffff1660e01b8152600401808373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020018281526020019250505060206040518083038186803b1580156133dd57600080fd5b505afa1580156133f1573d6000803e3d6000fd5b505050506040513d602081101561340757600080fd5b5051613481565b61348182828151811061341d57fe5b602002602001015189896001850381811061343457fe5b9050602002013573ffffffffffffffffffffffffffffffffffffffff168a8a8581811061345d57fe5b9050602002013573ffffffffffffffffffffffffffffffffffffffff1687876125d6565b82600183038151811061349057fe5b60209081029190910101527fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff016132c3565b7f000000000000000000000000000000000000000000000000000000000000000081565b7f000000000000000000000000000000000000000000000000000000000000000081565b6060854281101561357c57604080517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152600760248201527f4558504952454400000000000000000000000000000000000000000000000000604482015290519081900360640190fd5b7f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff168a8a60008181106135c057fe5b9050602002013573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff161461365f57604080517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152600c60248201527f494e56414c49445f504154480000000000000000000000000000000000000000604482015290519081900360640190fd5b61366e8b8b8b8989898961313d565b9150348260008151811061367e57fe5b602002602001015111156136f357604080517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601660248201527f4558434553534956455f494e5055545f414d4f554e5400000000000000000000604482015290519081900360640190fd5b7f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff1663d0e30db08360008151811061373c57fe5b60200260200101516040518263ffffffff1660e01b81526004016000604051808303818588803b15801561376f57600080fd5b505af1158015613783573d6000803e3d6000fd5b50505050507f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff1663a9059cbb6137d48c8c600081811061153157fe5b846000815181106137e157fe5b60200260200101516040518363ffffffff1660e01b8152600401808373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200182815260200192505050602060405180830381600087803b15801561385257600080fd5b505af1158015613866573d6000803e3d6000fd5b505050506040513d602081101561387c57600080fd5b50516138e957604080517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152600f60248201527f5472616e73666572206661696c65640000000000000000000000000000000000604482015290519081900360640190fd5b6138f9828b8b8b8a8a8a8a613c67565b8160008151811061390657fe5b60200260200101513411156116b8576116b8338360008151811061392657fe5b602002602001015134036147aa565b606085428110156139a757604080517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152600760248201527f4558504952454400000000000000000000000000000000000000000000000000604482015290519081900360640190fd5b6139b68c8b8b8989898961313d565b91508a826000815181106139c657fe5b602002602001015111156117cf57604080517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601660248201527f4558434553534956455f494e5055545f414d4f554e5400000000000000000000604482015290519081900360640190fd5b6000806000613a4a8686614930565b9150915083613a79577f0000000000000000000000000000000000000000000000000000000000000000613a9b565b7f00000000000000000000000000000000000000000000000000000000000000005b60408051606085811b7fffffffffffffffffffffffffffffffffffffffff0000000000000000000000009081166020808501919091529186901b166034830152825180830360280181526048909201909252805191012085613b32576040518060400160405280602081526020017f5c193265bc1f16117085a454b86f04b786de5c40d54a45dc24869043eb75f155815250613b69565b6040518060400160405280602081526020017ff16ce672144451d138eed853d57e4616c66cace4e953a121899bbd6e5643ca038152505b60405160200180807fff000000000000000000000000000000000000000000000000000000000000008152506001018473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1660601b815260140183815260200182805190602001908083835b60208310613c1c57805182527fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe09092019160209182019101613bdf565b6001836020036101000a03801982511681845116808217855250505050505090500193505050506040516020818303038152906040528051906020012060001c925050509392505050565b3233148015613c7c5750613c7a33614a99565b155b80613d3d5750604080517f3af32abf000000000000000000000000000000000000000000000000000000008152336004820152905173ffffffffffffffffffffffffffffffffffffffff7f00000000000000000000000000000000000000000000000000000000000000001691633af32abf9160248083019260209291908290030181600087803b158015613d1057600080fd5b505af1158015613d24573d6000803e3d6000fd5b505050506040513d6020811015613d3a57600080fd5b50515b613d4657600080fd5b60005b7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff8701811015613fae57600080898984818110613d8257fe5b9050602002013573ffffffffffffffffffffffffffffffffffffffff168a8a85600101818110613dae57fe5b9050602002013573ffffffffffffffffffffffffffffffffffffffff169150915060008b8460010181518110613de057fe5b60200260200101519050600080613df78585614930565b5090508073ffffffffffffffffffffffffffffffffffffffff168573ffffffffffffffffffffffffffffffffffffffff1614613e3557826000613e39565b6000835b9093509150600090507ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe8c018610613e71578a613eb0565b613eb0848e8e89600201818110613e8457fe5b9050602002013573ffffffffffffffffffffffffffffffffffffffff168c8c8a60010181811061158557fe5b9050613ec385858c8c8a81811061158557fe5b73ffffffffffffffffffffffffffffffffffffffff1663022c0d9f8484848c8c6040518663ffffffff1660e01b8152600401808681526020018581526020018473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001806020018281038252848482818152602001925080828437600081840152601f19601f8201169050808301925050509650505050505050600060405180830381600087803b158015613f8557600080fd5b505af1158015613f99573d6000803e3d6000fd5b505060019097019650613d4995505050505050565b505050505050505050565b6040805173ffffffffffffffffffffffffffffffffffffffff85811660248301528481166044830152606480830185905283518084039091018152608490920183526020820180517bffffffffffffffffffffffffffffffffffffffffffffffffffffffff167f23b872dd0000000000000000000000000000000000000000000000000000000017815292518251600094606094938a169392918291908083835b6020831061409757805182527fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe0909201916020918201910161405a565b6001836020036101000a0380198251168184511680821785525050505050509050019150506000604051808303816000865af19150503d80600081146140f9576040519150601f19603f3d011682016040523d82523d6000602084013e6140fe565b606091505b509150915081801561412c57508051158061412c575080806020019051602081101561412957600080fd5b50515b614181576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401808060200182810382526024815260200180614b746024913960400191505060405180910390fd5b505050505050565b323314801561419e575061419c33614a99565b155b8061425f5750604080517f3af32abf000000000000000000000000000000000000000000000000000000008152336004820152905173ffffffffffffffffffffffffffffffffffffffff7f00000000000000000000000000000000000000000000000000000000000000001691633af32abf9160248083019260209291908290030181600087803b15801561423257600080fd5b505af1158015614246573d6000803e3d6000fd5b505050506040513d602081101561425c57600080fd5b50515b61426857600080fd5b7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff850182146142f857604080517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152600e60248201527f494e56414c49445f4f5241434c45000000000000000000000000000000000000604482015290519081900360640190fd5b60005b7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff86018110156147a157600087878360010181811061433657fe5b9050602002013573ffffffffffffffffffffffffffffffffffffffff1690506000806000808b8b8781811061436757fe5b9050602002013573ffffffffffffffffffffffffffffffffffffffff16905060006143928287614930565b50905073ffffffffffffffffffffffffffffffffffffffff828116908216146143c283888d8d8c81811061158557fe5b955060008060008873ffffffffffffffffffffffffffffffffffffffff16633c6d5c726040518163ffffffff1660e01b8152600401604080518083038186803b15801561440e57600080fd5b505afa158015614422573d6000803e3d6000fd5b505050506040513d604081101561443857600080fd5b5080516020909101519092509050600084614454578183614457565b82825b5090506144db818873ffffffffffffffffffffffffffffffffffffffff166370a082318d6040518263ffffffff1660e01b8152600401808273ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200191505060206040518083038186803b15801561253157600080fd5b9350508873ffffffffffffffffffffffffffffffffffffffff16633b19103b87858f6040518463ffffffff1660e01b8152600401808473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200183815260200180602001828103825283818151815260200191508051906020019080838360005b83811015614581578181015183820152602001614569565b50505050905090810190601f1680156145ae5780820380516001836020036101000a031916815260200191505b5094505050505060206040518083038186803b1580156145cd57600080fd5b505afa1580156145e1573d6000803e3d6000fd5b505050506040513d60208110156145f757600080fd5b5051975083925061460d91505057846000614611565b6000855b90955093506000925050507ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe8b01861061464b578961468a565b61468a858d8d8960020181811061465e57fe5b9050602002013573ffffffffffffffffffffffffffffffffffffffff168b8b8a60010181811061158557fe5b6040517f022c0d9f000000000000000000000000000000000000000000000000000000008152600481018581526024820185905273ffffffffffffffffffffffffffffffffffffffff80841660448401526080606484019081528b5160848501528b519495509088169363022c0d9f938893889388938f9360a40190602085019080838360005b83811015614729578181015183820152602001614711565b50505050905090810190601f1680156147565780820380516001836020036101000a031916815260200191505b5095505050505050600060405180830381600087803b15801561477857600080fd5b505af115801561478c573d6000803e3d6000fd5b5050600190970196506142fb95505050505050565b50505050505050565b6040805160008082526020820190925273ffffffffffffffffffffffffffffffffffffffff84169083906040518082805190602001908083835b6020831061482157805182527fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe090920191602091820191016147e4565b6001836020036101000a03801982511681845116808217855250505050505090500191505060006040518083038185875af1925050503d8060008114614883576040519150601f19603f3d011682016040523d82523d6000602084013e614888565b606091505b50509050806148e2576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401808060200182810382526023815260200180614b516023913960400191505060405180910390fd5b505050565b600061492983836040518060400160405280601e81526020017f536166654d6174683a207375627472616374696f6e206f766572666c6f770000815250614a9f565b9392505050565b6000808273ffffffffffffffffffffffffffffffffffffffff168473ffffffffffffffffffffffffffffffffffffffff1614156149ce57604080517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601360248201527f4944454e544943414c5f41444452455353455300000000000000000000000000604482015290519081900360640190fd5b8273ffffffffffffffffffffffffffffffffffffffff168473ffffffffffffffffffffffffffffffffffffffff1610614a08578284614a0b565b83835b909250905073ffffffffffffffffffffffffffffffffffffffff8216614a9257604080517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152600c60248201527f5a45524f5f414444524553530000000000000000000000000000000000000000604482015290519081900360640190fd5b9250929050565b3b151590565b60008184841115614b48576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004018080602001828103825283818151815260200191508051906020019080838360005b83811015614b0d578181015183820152602001614af5565b50505050905090810190601f168015614b3a5780820380516001836020036101000a031916815260200191505b509250505060405180910390fd5b50505090039056fe5472616e7366657248656c7065723a204554485f5452414e534645525f4641494c45445472616e7366657248656c7065723a205452414e534645525f46524f4d5f4641494c4544a2646970667358221220218a11e804ce8d2df4dc16d5c7449fceb1d5f3ec1d4ed6c465615f6dea0de5ac64736f6c634300060b0033"
    };
});
define("@scom/scom-swap/contracts/oswap-openswap-contract/contracts/router/OSWAP_OracleRouter.ts", ["require", "exports", "@ijstech/eth-contract", "@scom/scom-swap/contracts/oswap-openswap-contract/contracts/router/OSWAP_OracleRouter.json.ts"], function (require, exports, eth_contract_40, OSWAP_OracleRouter_json_1) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.OSWAP_OracleRouter = void 0;
    class OSWAP_OracleRouter extends eth_contract_40.Contract {
        constructor(wallet, address) {
            super(wallet, address, OSWAP_OracleRouter_json_1.default.abi, OSWAP_OracleRouter_json_1.default.bytecode);
            this.assign();
        }
        deploy(params, options) {
            return this.__deploy([params.ammFactory, params.oracleFactory, params.WETH], options);
        }
        assign() {
            let WETH_call = async (options) => {
                let result = await this.call('WETH', [], options);
                return result;
            };
            this.WETH = WETH_call;
            let ammFactory_call = async (options) => {
                let result = await this.call('ammFactory', [], options);
                return result;
            };
            this.ammFactory = ammFactory_call;
            let getAmountInParams = (params) => [this.wallet.utils.toString(params.amountOut), params.tokenIn, params.tokenOut, this.wallet.utils.stringToBytes(params.data)];
            let getAmountIn_call = async (params, options) => {
                let result = await this.call('getAmountIn', getAmountInParams(params), options);
                return new eth_contract_40.BigNumber(result);
            };
            this.getAmountIn = getAmountIn_call;
            let getAmountOutParams = (params) => [this.wallet.utils.toString(params.amountIn), params.tokenIn, params.tokenOut, this.wallet.utils.stringToBytes(params.data)];
            let getAmountOut_call = async (params, options) => {
                let result = await this.call('getAmountOut', getAmountOutParams(params), options);
                return new eth_contract_40.BigNumber(result);
            };
            this.getAmountOut = getAmountOut_call;
            let getAmountsInParams = (params) => [this.wallet.utils.toString(params.amountOut), params.path, params.useOracle, this.wallet.utils.stringToBytes(params.data)];
            let getAmountsIn_call = async (params, options) => {
                let result = await this.call('getAmountsIn', getAmountsInParams(params), options);
                return result.map(e => new eth_contract_40.BigNumber(e));
            };
            this.getAmountsIn = getAmountsIn_call;
            let getAmountsOutParams = (params) => [this.wallet.utils.toString(params.amountIn), params.path, params.useOracle, this.wallet.utils.stringToBytes(params.data)];
            let getAmountsOut_call = async (params, options) => {
                let result = await this.call('getAmountsOut', getAmountsOutParams(params), options);
                return result.map(e => new eth_contract_40.BigNumber(e));
            };
            this.getAmountsOut = getAmountsOut_call;
            let getLatestPriceParams = (params) => [params.tokenIn, params.tokenOut, this.wallet.utils.stringToBytes(params.data)];
            let getLatestPrice_call = async (params, options) => {
                let result = await this.call('getLatestPrice', getLatestPriceParams(params), options);
                return new eth_contract_40.BigNumber(result);
            };
            this.getLatestPrice = getLatestPrice_call;
            let oracleFactory_call = async (options) => {
                let result = await this.call('oracleFactory', [], options);
                return result;
            };
            this.oracleFactory = oracleFactory_call;
            let swapETHForExactTokensParams = (params) => [this.wallet.utils.toString(params.amountOut), params.path, params.to, this.wallet.utils.toString(params.deadline), params.useOracle, this.wallet.utils.stringToBytes(params.data)];
            let swapETHForExactTokens_send = async (params, options) => {
                let result = await this.send('swapETHForExactTokens', swapETHForExactTokensParams(params), options);
                return result;
            };
            let swapETHForExactTokens_call = async (params, options) => {
                let result = await this.call('swapETHForExactTokens', swapETHForExactTokensParams(params), options);
                return result.map(e => new eth_contract_40.BigNumber(e));
            };
            let swapETHForExactTokens_txData = async (params, options) => {
                let result = await this.txData('swapETHForExactTokens', swapETHForExactTokensParams(params), options);
                return result;
            };
            this.swapETHForExactTokens = Object.assign(swapETHForExactTokens_send, {
                call: swapETHForExactTokens_call,
                txData: swapETHForExactTokens_txData
            });
            let swapExactETHForTokensParams = (params) => [this.wallet.utils.toString(params.amountOutMin), params.path, params.to, this.wallet.utils.toString(params.deadline), params.useOracle, this.wallet.utils.stringToBytes(params.data)];
            let swapExactETHForTokens_send = async (params, options) => {
                let result = await this.send('swapExactETHForTokens', swapExactETHForTokensParams(params), options);
                return result;
            };
            let swapExactETHForTokens_call = async (params, options) => {
                let result = await this.call('swapExactETHForTokens', swapExactETHForTokensParams(params), options);
                return result.map(e => new eth_contract_40.BigNumber(e));
            };
            let swapExactETHForTokens_txData = async (params, options) => {
                let result = await this.txData('swapExactETHForTokens', swapExactETHForTokensParams(params), options);
                return result;
            };
            this.swapExactETHForTokens = Object.assign(swapExactETHForTokens_send, {
                call: swapExactETHForTokens_call,
                txData: swapExactETHForTokens_txData
            });
            let swapExactETHForTokensSupportingFeeOnTransferTokensParams = (params) => [this.wallet.utils.toString(params.amountOutMin), params.path, params.to, this.wallet.utils.toString(params.deadline), params.useOracle, this.wallet.utils.stringToBytes(params.data)];
            let swapExactETHForTokensSupportingFeeOnTransferTokens_send = async (params, options) => {
                let result = await this.send('swapExactETHForTokensSupportingFeeOnTransferTokens', swapExactETHForTokensSupportingFeeOnTransferTokensParams(params), options);
                return result;
            };
            let swapExactETHForTokensSupportingFeeOnTransferTokens_call = async (params, options) => {
                let result = await this.call('swapExactETHForTokensSupportingFeeOnTransferTokens', swapExactETHForTokensSupportingFeeOnTransferTokensParams(params), options);
                return;
            };
            let swapExactETHForTokensSupportingFeeOnTransferTokens_txData = async (params, options) => {
                let result = await this.txData('swapExactETHForTokensSupportingFeeOnTransferTokens', swapExactETHForTokensSupportingFeeOnTransferTokensParams(params), options);
                return result;
            };
            this.swapExactETHForTokensSupportingFeeOnTransferTokens = Object.assign(swapExactETHForTokensSupportingFeeOnTransferTokens_send, {
                call: swapExactETHForTokensSupportingFeeOnTransferTokens_call,
                txData: swapExactETHForTokensSupportingFeeOnTransferTokens_txData
            });
            let swapExactTokensForETHParams = (params) => [this.wallet.utils.toString(params.amountIn), this.wallet.utils.toString(params.amountOutMin), params.path, params.to, this.wallet.utils.toString(params.deadline), params.useOracle, this.wallet.utils.stringToBytes(params.data)];
            let swapExactTokensForETH_send = async (params, options) => {
                let result = await this.send('swapExactTokensForETH', swapExactTokensForETHParams(params), options);
                return result;
            };
            let swapExactTokensForETH_call = async (params, options) => {
                let result = await this.call('swapExactTokensForETH', swapExactTokensForETHParams(params), options);
                return result.map(e => new eth_contract_40.BigNumber(e));
            };
            let swapExactTokensForETH_txData = async (params, options) => {
                let result = await this.txData('swapExactTokensForETH', swapExactTokensForETHParams(params), options);
                return result;
            };
            this.swapExactTokensForETH = Object.assign(swapExactTokensForETH_send, {
                call: swapExactTokensForETH_call,
                txData: swapExactTokensForETH_txData
            });
            let swapExactTokensForETHSupportingFeeOnTransferTokensParams = (params) => [this.wallet.utils.toString(params.amountIn), this.wallet.utils.toString(params.amountOutMin), params.path, params.to, this.wallet.utils.toString(params.deadline), params.useOracle, this.wallet.utils.stringToBytes(params.data)];
            let swapExactTokensForETHSupportingFeeOnTransferTokens_send = async (params, options) => {
                let result = await this.send('swapExactTokensForETHSupportingFeeOnTransferTokens', swapExactTokensForETHSupportingFeeOnTransferTokensParams(params), options);
                return result;
            };
            let swapExactTokensForETHSupportingFeeOnTransferTokens_call = async (params, options) => {
                let result = await this.call('swapExactTokensForETHSupportingFeeOnTransferTokens', swapExactTokensForETHSupportingFeeOnTransferTokensParams(params), options);
                return;
            };
            let swapExactTokensForETHSupportingFeeOnTransferTokens_txData = async (params, options) => {
                let result = await this.txData('swapExactTokensForETHSupportingFeeOnTransferTokens', swapExactTokensForETHSupportingFeeOnTransferTokensParams(params), options);
                return result;
            };
            this.swapExactTokensForETHSupportingFeeOnTransferTokens = Object.assign(swapExactTokensForETHSupportingFeeOnTransferTokens_send, {
                call: swapExactTokensForETHSupportingFeeOnTransferTokens_call,
                txData: swapExactTokensForETHSupportingFeeOnTransferTokens_txData
            });
            let swapExactTokensForTokensParams = (params) => [this.wallet.utils.toString(params.amountIn), this.wallet.utils.toString(params.amountOutMin), params.path, params.to, this.wallet.utils.toString(params.deadline), params.useOracle, this.wallet.utils.stringToBytes(params.data)];
            let swapExactTokensForTokens_send = async (params, options) => {
                let result = await this.send('swapExactTokensForTokens', swapExactTokensForTokensParams(params), options);
                return result;
            };
            let swapExactTokensForTokens_call = async (params, options) => {
                let result = await this.call('swapExactTokensForTokens', swapExactTokensForTokensParams(params), options);
                return result.map(e => new eth_contract_40.BigNumber(e));
            };
            let swapExactTokensForTokens_txData = async (params, options) => {
                let result = await this.txData('swapExactTokensForTokens', swapExactTokensForTokensParams(params), options);
                return result;
            };
            this.swapExactTokensForTokens = Object.assign(swapExactTokensForTokens_send, {
                call: swapExactTokensForTokens_call,
                txData: swapExactTokensForTokens_txData
            });
            let swapExactTokensForTokensSupportingFeeOnTransferTokensParams = (params) => [this.wallet.utils.toString(params.amountIn), this.wallet.utils.toString(params.amountOutMin), params.path, params.to, this.wallet.utils.toString(params.deadline), params.useOracle, this.wallet.utils.stringToBytes(params.data)];
            let swapExactTokensForTokensSupportingFeeOnTransferTokens_send = async (params, options) => {
                let result = await this.send('swapExactTokensForTokensSupportingFeeOnTransferTokens', swapExactTokensForTokensSupportingFeeOnTransferTokensParams(params), options);
                return result;
            };
            let swapExactTokensForTokensSupportingFeeOnTransferTokens_call = async (params, options) => {
                let result = await this.call('swapExactTokensForTokensSupportingFeeOnTransferTokens', swapExactTokensForTokensSupportingFeeOnTransferTokensParams(params), options);
                return;
            };
            let swapExactTokensForTokensSupportingFeeOnTransferTokens_txData = async (params, options) => {
                let result = await this.txData('swapExactTokensForTokensSupportingFeeOnTransferTokens', swapExactTokensForTokensSupportingFeeOnTransferTokensParams(params), options);
                return result;
            };
            this.swapExactTokensForTokensSupportingFeeOnTransferTokens = Object.assign(swapExactTokensForTokensSupportingFeeOnTransferTokens_send, {
                call: swapExactTokensForTokensSupportingFeeOnTransferTokens_call,
                txData: swapExactTokensForTokensSupportingFeeOnTransferTokens_txData
            });
            let swapTokensForExactETHParams = (params) => [this.wallet.utils.toString(params.amountOut), this.wallet.utils.toString(params.amountInMax), params.path, params.to, this.wallet.utils.toString(params.deadline), params.useOracle, this.wallet.utils.stringToBytes(params.data)];
            let swapTokensForExactETH_send = async (params, options) => {
                let result = await this.send('swapTokensForExactETH', swapTokensForExactETHParams(params), options);
                return result;
            };
            let swapTokensForExactETH_call = async (params, options) => {
                let result = await this.call('swapTokensForExactETH', swapTokensForExactETHParams(params), options);
                return result.map(e => new eth_contract_40.BigNumber(e));
            };
            let swapTokensForExactETH_txData = async (params, options) => {
                let result = await this.txData('swapTokensForExactETH', swapTokensForExactETHParams(params), options);
                return result;
            };
            this.swapTokensForExactETH = Object.assign(swapTokensForExactETH_send, {
                call: swapTokensForExactETH_call,
                txData: swapTokensForExactETH_txData
            });
            let swapTokensForExactTokensParams = (params) => [this.wallet.utils.toString(params.amountOut), this.wallet.utils.toString(params.amountInMax), params.path, params.to, this.wallet.utils.toString(params.deadline), params.useOracle, this.wallet.utils.stringToBytes(params.data)];
            let swapTokensForExactTokens_send = async (params, options) => {
                let result = await this.send('swapTokensForExactTokens', swapTokensForExactTokensParams(params), options);
                return result;
            };
            let swapTokensForExactTokens_call = async (params, options) => {
                let result = await this.call('swapTokensForExactTokens', swapTokensForExactTokensParams(params), options);
                return result.map(e => new eth_contract_40.BigNumber(e));
            };
            let swapTokensForExactTokens_txData = async (params, options) => {
                let result = await this.txData('swapTokensForExactTokens', swapTokensForExactTokensParams(params), options);
                return result;
            };
            this.swapTokensForExactTokens = Object.assign(swapTokensForExactTokens_send, {
                call: swapTokensForExactTokens_call,
                txData: swapTokensForExactTokens_txData
            });
        }
    }
    OSWAP_OracleRouter._abi = OSWAP_OracleRouter_json_1.default.abi;
    exports.OSWAP_OracleRouter = OSWAP_OracleRouter;
});
define("@scom/scom-swap/contracts/oswap-openswap-contract/contracts/restricted/OSWAP_OtcPair.json.ts", ["require", "exports"], function (require, exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    ///<amd-module name='@scom/scom-swap/contracts/oswap-openswap-contract/contracts/restricted/OSWAP_OtcPair.json.ts'/> 
    exports.default = {
        "abi": [
            { "inputs": [], "stateMutability": "nonpayable", "type": "constructor" },
            { "anonymous": false, "inputs": [{ "indexed": true, "internalType": "address", "name": "provider", "type": "address" }, { "indexed": true, "internalType": "bool", "name": "direction", "type": "bool" }, { "indexed": true, "internalType": "uint256", "name": "index", "type": "uint256" }, { "indexed": false, "internalType": "uint256", "name": "originalAmount", "type": "uint256" }, { "indexed": false, "internalType": "uint256", "name": "amount", "type": "uint256" }, { "indexed": false, "internalType": "uint256", "name": "newAmountBalance", "type": "uint256" }], "name": "AddLiquidity", "type": "event" },
            { "anonymous": false, "inputs": [{ "indexed": true, "internalType": "bool", "name": "direction", "type": "bool" }, { "indexed": true, "internalType": "uint256", "name": "offerIndex", "type": "uint256" }, { "indexed": true, "internalType": "address", "name": "trader", "type": "address" }, { "indexed": false, "internalType": "uint256", "name": "allocation", "type": "uint256" }], "name": "ApprovedTrader", "type": "event" },
            { "anonymous": false, "inputs": [{ "indexed": true, "internalType": "bool", "name": "direction", "type": "bool" }, { "indexed": true, "internalType": "uint256", "name": "index", "type": "uint256" }], "name": "Lock", "type": "event" },
            { "anonymous": false, "inputs": [{ "indexed": true, "internalType": "address", "name": "provider", "type": "address" }, { "indexed": true, "internalType": "bool", "name": "direction", "type": "bool" }, { "indexed": false, "internalType": "uint256", "name": "index", "type": "uint256" }, { "indexed": false, "internalType": "bool", "name": "allowAll", "type": "bool" }, { "indexed": false, "internalType": "uint256", "name": "restrictedPrice", "type": "uint256" }, { "indexed": false, "internalType": "uint256", "name": "startDate", "type": "uint256" }, { "indexed": false, "internalType": "uint256", "name": "expire", "type": "uint256" }], "name": "NewProviderOffer", "type": "event" },
            { "anonymous": false, "inputs": [{ "indexed": true, "internalType": "address", "name": "provider", "type": "address" }, { "indexed": true, "internalType": "bool", "name": "direction", "type": "bool" }, { "indexed": true, "internalType": "uint256", "name": "index", "type": "uint256" }, { "indexed": false, "internalType": "uint256", "name": "amountOut", "type": "uint256" }, { "indexed": false, "internalType": "uint256", "name": "receivingOut", "type": "uint256" }, { "indexed": false, "internalType": "uint256", "name": "newAmountBalance", "type": "uint256" }, { "indexed": false, "internalType": "uint256", "name": "newReceivingBalance", "type": "uint256" }], "name": "RemoveLiquidity", "type": "event" },
            { "anonymous": false, "inputs": [{ "indexed": true, "internalType": "address", "name": "to", "type": "address" }, { "indexed": true, "internalType": "bool", "name": "direction", "type": "bool" }, { "indexed": false, "internalType": "uint256", "name": "amountIn", "type": "uint256" }, { "indexed": false, "internalType": "uint256", "name": "amountOut", "type": "uint256" }, { "indexed": false, "internalType": "uint256", "name": "tradeFee", "type": "uint256" }, { "indexed": false, "internalType": "uint256", "name": "protocolFee", "type": "uint256" }], "name": "Swap", "type": "event" },
            { "anonymous": false, "inputs": [{ "indexed": true, "internalType": "address", "name": "provider", "type": "address" }, { "indexed": true, "internalType": "bool", "name": "direction", "type": "bool" }, { "indexed": true, "internalType": "uint256", "name": "index", "type": "uint256" }, { "indexed": false, "internalType": "uint256", "name": "price", "type": "uint256" }, { "indexed": false, "internalType": "uint256", "name": "amountOut", "type": "uint256" }, { "indexed": false, "internalType": "uint256", "name": "amountIn", "type": "uint256" }, { "indexed": false, "internalType": "uint256", "name": "newAmountBalance", "type": "uint256" }, { "indexed": false, "internalType": "uint256", "name": "newReceivingBalance", "type": "uint256" }, { "indexed": false, "internalType": "uint256", "name": "swappedAmountBalance", "type": "uint256" }], "name": "SwappedOneOffer", "type": "event" },
            { "inputs": [{ "internalType": "bool", "name": "direction", "type": "bool" }, { "internalType": "uint256", "name": "index", "type": "uint256" }], "name": "addLiquidity", "outputs": [], "stateMutability": "nonpayable", "type": "function" },
            { "inputs": [{ "internalType": "bool", "name": "", "type": "bool" }, { "internalType": "uint256", "name": "", "type": "uint256" }, { "internalType": "uint256", "name": "", "type": "uint256" }], "name": "approvedTrader", "outputs": [{ "internalType": "address", "name": "", "type": "address" }], "stateMutability": "view", "type": "function" },
            { "inputs": [], "name": "configStore", "outputs": [{ "internalType": "address", "name": "", "type": "address" }], "stateMutability": "view", "type": "function" },
            { "inputs": [{ "internalType": "bool", "name": "", "type": "bool" }], "name": "counter", "outputs": [{ "internalType": "uint256", "name": "", "type": "uint256" }], "stateMutability": "view", "type": "function" },
            { "inputs": [{ "internalType": "address", "name": "provider", "type": "address" }, { "internalType": "bool", "name": "direction", "type": "bool" }, { "internalType": "bool", "name": "allowAll", "type": "bool" }, { "internalType": "uint256", "name": "restrictedPrice", "type": "uint256" }, { "internalType": "uint256", "name": "startDate", "type": "uint256" }, { "internalType": "uint256", "name": "expire", "type": "uint256" }], "name": "createOrder", "outputs": [{ "internalType": "uint256", "name": "index", "type": "uint256" }], "stateMutability": "nonpayable", "type": "function" },
            { "inputs": [], "name": "factory", "outputs": [{ "internalType": "address", "name": "", "type": "address" }], "stateMutability": "view", "type": "function" },
            { "inputs": [], "name": "feeBalance", "outputs": [{ "internalType": "uint256", "name": "", "type": "uint256" }], "stateMutability": "view", "type": "function" },
            { "inputs": [{ "internalType": "address", "name": "", "type": "address" }, { "internalType": "uint256", "name": "", "type": "uint256" }, { "internalType": "address", "name": "", "type": "address" }, { "internalType": "bytes", "name": "", "type": "bytes" }], "name": "getAmountIn", "outputs": [{ "internalType": "uint256", "name": "", "type": "uint256" }], "stateMutability": "view", "type": "function" },
            { "inputs": [{ "internalType": "address", "name": "tokenIn", "type": "address" }, { "internalType": "uint256", "name": "amountIn", "type": "uint256" }, { "internalType": "address", "name": "trader", "type": "address" }, { "internalType": "bytes", "name": "", "type": "bytes" }], "name": "getAmountOut", "outputs": [{ "internalType": "uint256", "name": "amountOut", "type": "uint256" }], "stateMutability": "view", "type": "function" },
            { "inputs": [{ "internalType": "bool", "name": "direction", "type": "bool" }, { "internalType": "uint256", "name": "offerIndex", "type": "uint256" }, { "internalType": "uint256", "name": "start", "type": "uint256" }, { "internalType": "uint256", "name": "length", "type": "uint256" }], "name": "getApprovedTrader", "outputs": [{ "internalType": "address[]", "name": "trader", "type": "address[]" }, { "internalType": "uint256[]", "name": "allocation", "type": "uint256[]" }], "stateMutability": "view", "type": "function" },
            { "inputs": [{ "internalType": "bool", "name": "direction", "type": "bool" }, { "internalType": "uint256", "name": "offerIndex", "type": "uint256" }], "name": "getApprovedTraderLength", "outputs": [{ "internalType": "uint256", "name": "", "type": "uint256" }], "stateMutability": "view", "type": "function" },
            { "inputs": [], "name": "getBalances", "outputs": [{ "internalType": "uint256", "name": "", "type": "uint256" }, { "internalType": "uint256", "name": "", "type": "uint256" }, { "internalType": "uint256", "name": "", "type": "uint256" }], "stateMutability": "view", "type": "function" },
            { "inputs": [], "name": "getLastBalances", "outputs": [{ "internalType": "uint256", "name": "", "type": "uint256" }, { "internalType": "uint256", "name": "", "type": "uint256" }], "stateMutability": "view", "type": "function" },
            { "inputs": [{ "internalType": "bool", "name": "direction", "type": "bool" }, { "internalType": "uint256", "name": "start", "type": "uint256" }, { "internalType": "uint256", "name": "length", "type": "uint256" }], "name": "getOffers", "outputs": [{ "internalType": "uint256[]", "name": "index", "type": "uint256[]" }, { "internalType": "address[]", "name": "provider", "type": "address[]" }, { "internalType": "bool[]", "name": "lockedAndAllowAll", "type": "bool[]" }, { "internalType": "uint256[]", "name": "receiving", "type": "uint256[]" }, { "internalType": "uint256[]", "name": "amountAndPrice", "type": "uint256[]" }, { "internalType": "uint256[]", "name": "startDateAndExpire", "type": "uint256[]" }], "stateMutability": "view", "type": "function" },
            { "inputs": [{ "internalType": "address", "name": "_provider", "type": "address" }, { "internalType": "bool", "name": "direction", "type": "bool" }, { "internalType": "uint256", "name": "start", "type": "uint256" }, { "internalType": "uint256", "name": "length", "type": "uint256" }], "name": "getProviderOffer", "outputs": [{ "internalType": "uint256[]", "name": "index", "type": "uint256[]" }, { "internalType": "address[]", "name": "provider", "type": "address[]" }, { "internalType": "bool[]", "name": "lockedAndAllowAll", "type": "bool[]" }, { "internalType": "uint256[]", "name": "receiving", "type": "uint256[]" }, { "internalType": "uint256[]", "name": "amountAndPrice", "type": "uint256[]" }, { "internalType": "uint256[]", "name": "startDateAndExpire", "type": "uint256[]" }], "stateMutability": "view", "type": "function" },
            { "inputs": [{ "internalType": "address", "name": "provider", "type": "address" }, { "internalType": "bool", "name": "direction", "type": "bool" }], "name": "getProviderOfferIndexLength", "outputs": [{ "internalType": "uint256", "name": "length", "type": "uint256" }], "stateMutability": "view", "type": "function" },
            { "inputs": [{ "internalType": "address", "name": "trader", "type": "address" }, { "internalType": "bool", "name": "direction", "type": "bool" }, { "internalType": "uint256", "name": "start", "type": "uint256" }, { "internalType": "uint256", "name": "length", "type": "uint256" }], "name": "getTraderOffer", "outputs": [{ "internalType": "uint256[]", "name": "index", "type": "uint256[]" }, { "internalType": "address[]", "name": "provider", "type": "address[]" }, { "internalType": "bool[]", "name": "lockedAndAllowAll", "type": "bool[]" }, { "internalType": "uint256[]", "name": "receiving", "type": "uint256[]" }, { "internalType": "uint256[]", "name": "amountAndPrice", "type": "uint256[]" }, { "internalType": "uint256[]", "name": "startDateAndExpire", "type": "uint256[]" }], "stateMutability": "view", "type": "function" },
            { "inputs": [], "name": "govToken", "outputs": [{ "internalType": "address", "name": "", "type": "address" }], "stateMutability": "view", "type": "function" },
            { "inputs": [], "name": "governance", "outputs": [{ "internalType": "address", "name": "", "type": "address" }], "stateMutability": "view", "type": "function" },
            { "inputs": [{ "internalType": "address", "name": "_token0", "type": "address" }, { "internalType": "address", "name": "_token1", "type": "address" }], "name": "initialize", "outputs": [], "stateMutability": "nonpayable", "type": "function" },
            { "inputs": [{ "internalType": "bool", "name": "", "type": "bool" }, { "internalType": "uint256", "name": "", "type": "uint256" }, { "internalType": "address", "name": "", "type": "address" }], "name": "isApprovedTrader", "outputs": [{ "internalType": "bool", "name": "", "type": "bool" }], "stateMutability": "view", "type": "function" },
            { "inputs": [], "name": "isLive", "outputs": [{ "internalType": "bool", "name": "", "type": "bool" }], "stateMutability": "view", "type": "function" },
            { "inputs": [], "name": "lastGovBalance", "outputs": [{ "internalType": "uint256", "name": "", "type": "uint256" }], "stateMutability": "view", "type": "function" },
            { "inputs": [], "name": "lastToken0Balance", "outputs": [{ "internalType": "uint256", "name": "", "type": "uint256" }], "stateMutability": "view", "type": "function" },
            { "inputs": [], "name": "lastToken1Balance", "outputs": [{ "internalType": "uint256", "name": "", "type": "uint256" }], "stateMutability": "view", "type": "function" },
            { "inputs": [{ "internalType": "bool", "name": "direction", "type": "bool" }, { "internalType": "uint256", "name": "index", "type": "uint256" }], "name": "lockOffer", "outputs": [], "stateMutability": "nonpayable", "type": "function" },
            { "inputs": [{ "internalType": "bool", "name": "", "type": "bool" }, { "internalType": "uint256", "name": "", "type": "uint256" }], "name": "offers", "outputs": [{ "internalType": "address", "name": "provider", "type": "address" }, { "internalType": "bool", "name": "locked", "type": "bool" }, { "internalType": "bool", "name": "allowAll", "type": "bool" }, { "internalType": "uint256", "name": "originalAmount", "type": "uint256" }, { "internalType": "uint256", "name": "amount", "type": "uint256" }, { "internalType": "uint256", "name": "swappedAmount", "type": "uint256" }, { "internalType": "uint256", "name": "receiving", "type": "uint256" }, { "internalType": "uint256", "name": "restrictedPrice", "type": "uint256" }, { "internalType": "uint256", "name": "startDate", "type": "uint256" }, { "internalType": "uint256", "name": "expire", "type": "uint256" }], "stateMutability": "view", "type": "function" },
            { "inputs": [], "name": "protocolFeeBalance0", "outputs": [{ "internalType": "uint256", "name": "", "type": "uint256" }], "stateMutability": "view", "type": "function" },
            { "inputs": [], "name": "protocolFeeBalance1", "outputs": [{ "internalType": "uint256", "name": "", "type": "uint256" }], "stateMutability": "view", "type": "function" },
            { "inputs": [{ "internalType": "bool", "name": "", "type": "bool" }, { "internalType": "address", "name": "", "type": "address" }, { "internalType": "uint256", "name": "", "type": "uint256" }], "name": "providerOfferIndex", "outputs": [{ "internalType": "uint256", "name": "", "type": "uint256" }], "stateMutability": "view", "type": "function" },
            { "inputs": [], "name": "redeemProtocolFee", "outputs": [], "stateMutability": "nonpayable", "type": "function" },
            { "inputs": [{ "internalType": "address", "name": "provider", "type": "address" }], "name": "removeAllLiquidity", "outputs": [{ "internalType": "uint256", "name": "amount0", "type": "uint256" }, { "internalType": "uint256", "name": "amount1", "type": "uint256" }], "stateMutability": "nonpayable", "type": "function" },
            { "inputs": [{ "internalType": "address", "name": "provider", "type": "address" }, { "internalType": "bool", "name": "direction", "type": "bool" }], "name": "removeAllLiquidity1D", "outputs": [{ "internalType": "uint256", "name": "totalAmount", "type": "uint256" }, { "internalType": "uint256", "name": "totalReceiving", "type": "uint256" }], "stateMutability": "nonpayable", "type": "function" },
            { "inputs": [{ "internalType": "address", "name": "provider", "type": "address" }, { "internalType": "bool", "name": "direction", "type": "bool" }, { "internalType": "uint256", "name": "index", "type": "uint256" }, { "internalType": "uint256", "name": "amountOut", "type": "uint256" }, { "internalType": "uint256", "name": "receivingOut", "type": "uint256" }], "name": "removeLiquidity", "outputs": [], "stateMutability": "nonpayable", "type": "function" },
            { "inputs": [], "name": "restrictedLiquidityProvider", "outputs": [{ "internalType": "address", "name": "", "type": "address" }], "stateMutability": "view", "type": "function" },
            { "inputs": [], "name": "scaleDirection", "outputs": [{ "internalType": "bool", "name": "", "type": "bool" }], "stateMutability": "view", "type": "function" },
            { "inputs": [], "name": "scaler", "outputs": [{ "internalType": "uint256", "name": "", "type": "uint256" }], "stateMutability": "view", "type": "function" },
            { "inputs": [{ "internalType": "bool", "name": "direction", "type": "bool" }, { "internalType": "uint256", "name": "offerIndex", "type": "uint256" }, { "internalType": "address", "name": "trader", "type": "address" }, { "internalType": "uint256", "name": "allocation", "type": "uint256" }], "name": "setApprovedTrader", "outputs": [], "stateMutability": "nonpayable", "type": "function" },
            { "inputs": [{ "internalType": "bool", "name": "_isLive", "type": "bool" }], "name": "setLive", "outputs": [], "stateMutability": "nonpayable", "type": "function" },
            { "inputs": [{ "internalType": "bool", "name": "direction", "type": "bool" }, { "internalType": "uint256", "name": "offerIndex", "type": "uint256" }, { "internalType": "address[]", "name": "trader", "type": "address[]" }, { "internalType": "uint256[]", "name": "allocation", "type": "uint256[]" }], "name": "setMultipleApprovedTraders", "outputs": [], "stateMutability": "nonpayable", "type": "function" },
            { "inputs": [{ "internalType": "uint256", "name": "amount0Out", "type": "uint256" }, { "internalType": "uint256", "name": "amount1Out", "type": "uint256" }, { "internalType": "address", "name": "to", "type": "address" }, { "internalType": "address", "name": "trader", "type": "address" }, { "internalType": "bytes", "name": "", "type": "bytes" }], "name": "swap", "outputs": [], "stateMutability": "nonpayable", "type": "function" },
            { "inputs": [], "name": "sync", "outputs": [], "stateMutability": "nonpayable", "type": "function" },
            { "inputs": [], "name": "token0", "outputs": [{ "internalType": "address", "name": "", "type": "address" }], "stateMutability": "view", "type": "function" },
            { "inputs": [], "name": "token1", "outputs": [{ "internalType": "address", "name": "", "type": "address" }], "stateMutability": "view", "type": "function" },
            { "inputs": [{ "internalType": "bool", "name": "", "type": "bool" }, { "internalType": "uint256", "name": "", "type": "uint256" }, { "internalType": "address", "name": "", "type": "address" }], "name": "traderAllocation", "outputs": [{ "internalType": "uint256", "name": "", "type": "uint256" }], "stateMutability": "view", "type": "function" },
            { "inputs": [{ "internalType": "bool", "name": "", "type": "bool" }, { "internalType": "address", "name": "", "type": "address" }, { "internalType": "uint256", "name": "", "type": "uint256" }], "name": "traderOffer", "outputs": [{ "internalType": "uint256", "name": "", "type": "uint256" }], "stateMutability": "view", "type": "function" },
            { "inputs": [], "name": "whitelistFactory", "outputs": [{ "internalType": "address", "name": "", "type": "address" }], "stateMutability": "view", "type": "function" }
        ],
        "bytecode": ""
    };
});
define("@scom/scom-swap/contracts/oswap-openswap-contract/contracts/restricted/OSWAP_OtcPair.ts", ["require", "exports", "@ijstech/eth-contract", "@scom/scom-swap/contracts/oswap-openswap-contract/contracts/restricted/OSWAP_OtcPair.json.ts"], function (require, exports, eth_contract_41, OSWAP_OtcPair_json_1) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.OSWAP_OtcPair = void 0;
    class OSWAP_OtcPair extends eth_contract_41.Contract {
        constructor(wallet, address) {
            super(wallet, address, OSWAP_OtcPair_json_1.default.abi, OSWAP_OtcPair_json_1.default.bytecode);
            this.assign();
        }
        deploy(options) {
            return this.__deploy([], options);
        }
        parseAddLiquidityEvent(receipt) {
            return this.parseEvents(receipt, "AddLiquidity").map(e => this.decodeAddLiquidityEvent(e));
        }
        decodeAddLiquidityEvent(event) {
            let result = event.data;
            return {
                provider: result.provider,
                direction: result.direction,
                index: new eth_contract_41.BigNumber(result.index),
                originalAmount: new eth_contract_41.BigNumber(result.originalAmount),
                amount: new eth_contract_41.BigNumber(result.amount),
                newAmountBalance: new eth_contract_41.BigNumber(result.newAmountBalance),
                _event: event
            };
        }
        parseApprovedTraderEvent(receipt) {
            return this.parseEvents(receipt, "ApprovedTrader").map(e => this.decodeApprovedTraderEvent(e));
        }
        decodeApprovedTraderEvent(event) {
            let result = event.data;
            return {
                direction: result.direction,
                offerIndex: new eth_contract_41.BigNumber(result.offerIndex),
                trader: result.trader,
                allocation: new eth_contract_41.BigNumber(result.allocation),
                _event: event
            };
        }
        parseLockEvent(receipt) {
            return this.parseEvents(receipt, "Lock").map(e => this.decodeLockEvent(e));
        }
        decodeLockEvent(event) {
            let result = event.data;
            return {
                direction: result.direction,
                index: new eth_contract_41.BigNumber(result.index),
                _event: event
            };
        }
        parseNewProviderOfferEvent(receipt) {
            return this.parseEvents(receipt, "NewProviderOffer").map(e => this.decodeNewProviderOfferEvent(e));
        }
        decodeNewProviderOfferEvent(event) {
            let result = event.data;
            return {
                provider: result.provider,
                direction: result.direction,
                index: new eth_contract_41.BigNumber(result.index),
                allowAll: result.allowAll,
                restrictedPrice: new eth_contract_41.BigNumber(result.restrictedPrice),
                startDate: new eth_contract_41.BigNumber(result.startDate),
                expire: new eth_contract_41.BigNumber(result.expire),
                _event: event
            };
        }
        parseRemoveLiquidityEvent(receipt) {
            return this.parseEvents(receipt, "RemoveLiquidity").map(e => this.decodeRemoveLiquidityEvent(e));
        }
        decodeRemoveLiquidityEvent(event) {
            let result = event.data;
            return {
                provider: result.provider,
                direction: result.direction,
                index: new eth_contract_41.BigNumber(result.index),
                amountOut: new eth_contract_41.BigNumber(result.amountOut),
                receivingOut: new eth_contract_41.BigNumber(result.receivingOut),
                newAmountBalance: new eth_contract_41.BigNumber(result.newAmountBalance),
                newReceivingBalance: new eth_contract_41.BigNumber(result.newReceivingBalance),
                _event: event
            };
        }
        parseSwapEvent(receipt) {
            return this.parseEvents(receipt, "Swap").map(e => this.decodeSwapEvent(e));
        }
        decodeSwapEvent(event) {
            let result = event.data;
            return {
                to: result.to,
                direction: result.direction,
                amountIn: new eth_contract_41.BigNumber(result.amountIn),
                amountOut: new eth_contract_41.BigNumber(result.amountOut),
                tradeFee: new eth_contract_41.BigNumber(result.tradeFee),
                protocolFee: new eth_contract_41.BigNumber(result.protocolFee),
                _event: event
            };
        }
        parseSwappedOneOfferEvent(receipt) {
            return this.parseEvents(receipt, "SwappedOneOffer").map(e => this.decodeSwappedOneOfferEvent(e));
        }
        decodeSwappedOneOfferEvent(event) {
            let result = event.data;
            return {
                provider: result.provider,
                direction: result.direction,
                index: new eth_contract_41.BigNumber(result.index),
                price: new eth_contract_41.BigNumber(result.price),
                amountOut: new eth_contract_41.BigNumber(result.amountOut),
                amountIn: new eth_contract_41.BigNumber(result.amountIn),
                newAmountBalance: new eth_contract_41.BigNumber(result.newAmountBalance),
                newReceivingBalance: new eth_contract_41.BigNumber(result.newReceivingBalance),
                swappedAmountBalance: new eth_contract_41.BigNumber(result.swappedAmountBalance),
                _event: event
            };
        }
        assign() {
            let approvedTraderParams = (params) => [params.param1, this.wallet.utils.toString(params.param2), this.wallet.utils.toString(params.param3)];
            let approvedTrader_call = async (params, options) => {
                let result = await this.call('approvedTrader', approvedTraderParams(params), options);
                return result;
            };
            this.approvedTrader = approvedTrader_call;
            let configStore_call = async (options) => {
                let result = await this.call('configStore', [], options);
                return result;
            };
            this.configStore = configStore_call;
            let counter_call = async (param1, options) => {
                let result = await this.call('counter', [param1], options);
                return new eth_contract_41.BigNumber(result);
            };
            this.counter = counter_call;
            let factory_call = async (options) => {
                let result = await this.call('factory', [], options);
                return result;
            };
            this.factory = factory_call;
            let feeBalance_call = async (options) => {
                let result = await this.call('feeBalance', [], options);
                return new eth_contract_41.BigNumber(result);
            };
            this.feeBalance = feeBalance_call;
            let getAmountInParams = (params) => [params.param1, this.wallet.utils.toString(params.param2), params.param3, this.wallet.utils.stringToBytes(params.param4)];
            let getAmountIn_call = async (params, options) => {
                let result = await this.call('getAmountIn', getAmountInParams(params), options);
                return new eth_contract_41.BigNumber(result);
            };
            this.getAmountIn = getAmountIn_call;
            let getAmountOutParams = (params) => [params.tokenIn, this.wallet.utils.toString(params.amountIn), params.trader, this.wallet.utils.stringToBytes(params.param4)];
            let getAmountOut_call = async (params, options) => {
                let result = await this.call('getAmountOut', getAmountOutParams(params), options);
                return new eth_contract_41.BigNumber(result);
            };
            this.getAmountOut = getAmountOut_call;
            let getApprovedTraderParams = (params) => [params.direction, this.wallet.utils.toString(params.offerIndex), this.wallet.utils.toString(params.start), this.wallet.utils.toString(params.length)];
            let getApprovedTrader_call = async (params, options) => {
                let result = await this.call('getApprovedTrader', getApprovedTraderParams(params), options);
                return {
                    trader: result.trader,
                    allocation: result.allocation.map(e => new eth_contract_41.BigNumber(e))
                };
            };
            this.getApprovedTrader = getApprovedTrader_call;
            let getApprovedTraderLengthParams = (params) => [params.direction, this.wallet.utils.toString(params.offerIndex)];
            let getApprovedTraderLength_call = async (params, options) => {
                let result = await this.call('getApprovedTraderLength', getApprovedTraderLengthParams(params), options);
                return new eth_contract_41.BigNumber(result);
            };
            this.getApprovedTraderLength = getApprovedTraderLength_call;
            let getBalances_call = async (options) => {
                let result = await this.call('getBalances', [], options);
                return {
                    param1: new eth_contract_41.BigNumber(result[0]),
                    param2: new eth_contract_41.BigNumber(result[1]),
                    param3: new eth_contract_41.BigNumber(result[2])
                };
            };
            this.getBalances = getBalances_call;
            let getLastBalances_call = async (options) => {
                let result = await this.call('getLastBalances', [], options);
                return {
                    param1: new eth_contract_41.BigNumber(result[0]),
                    param2: new eth_contract_41.BigNumber(result[1])
                };
            };
            this.getLastBalances = getLastBalances_call;
            let getOffersParams = (params) => [params.direction, this.wallet.utils.toString(params.start), this.wallet.utils.toString(params.length)];
            let getOffers_call = async (params, options) => {
                let result = await this.call('getOffers', getOffersParams(params), options);
                return {
                    index: result.index.map(e => new eth_contract_41.BigNumber(e)),
                    provider: result.provider,
                    lockedAndAllowAll: result.lockedAndAllowAll,
                    receiving: result.receiving.map(e => new eth_contract_41.BigNumber(e)),
                    amountAndPrice: result.amountAndPrice.map(e => new eth_contract_41.BigNumber(e)),
                    startDateAndExpire: result.startDateAndExpire.map(e => new eth_contract_41.BigNumber(e))
                };
            };
            this.getOffers = getOffers_call;
            let getProviderOfferParams = (params) => [params.provider, params.direction, this.wallet.utils.toString(params.start), this.wallet.utils.toString(params.length)];
            let getProviderOffer_call = async (params, options) => {
                let result = await this.call('getProviderOffer', getProviderOfferParams(params), options);
                return {
                    index: result.index.map(e => new eth_contract_41.BigNumber(e)),
                    provider: result.provider,
                    lockedAndAllowAll: result.lockedAndAllowAll,
                    receiving: result.receiving.map(e => new eth_contract_41.BigNumber(e)),
                    amountAndPrice: result.amountAndPrice.map(e => new eth_contract_41.BigNumber(e)),
                    startDateAndExpire: result.startDateAndExpire.map(e => new eth_contract_41.BigNumber(e))
                };
            };
            this.getProviderOffer = getProviderOffer_call;
            let getProviderOfferIndexLengthParams = (params) => [params.provider, params.direction];
            let getProviderOfferIndexLength_call = async (params, options) => {
                let result = await this.call('getProviderOfferIndexLength', getProviderOfferIndexLengthParams(params), options);
                return new eth_contract_41.BigNumber(result);
            };
            this.getProviderOfferIndexLength = getProviderOfferIndexLength_call;
            let getTraderOfferParams = (params) => [params.trader, params.direction, this.wallet.utils.toString(params.start), this.wallet.utils.toString(params.length)];
            let getTraderOffer_call = async (params, options) => {
                let result = await this.call('getTraderOffer', getTraderOfferParams(params), options);
                return {
                    index: result.index.map(e => new eth_contract_41.BigNumber(e)),
                    provider: result.provider,
                    lockedAndAllowAll: result.lockedAndAllowAll,
                    receiving: result.receiving.map(e => new eth_contract_41.BigNumber(e)),
                    amountAndPrice: result.amountAndPrice.map(e => new eth_contract_41.BigNumber(e)),
                    startDateAndExpire: result.startDateAndExpire.map(e => new eth_contract_41.BigNumber(e))
                };
            };
            this.getTraderOffer = getTraderOffer_call;
            let govToken_call = async (options) => {
                let result = await this.call('govToken', [], options);
                return result;
            };
            this.govToken = govToken_call;
            let governance_call = async (options) => {
                let result = await this.call('governance', [], options);
                return result;
            };
            this.governance = governance_call;
            let isApprovedTraderParams = (params) => [params.param1, this.wallet.utils.toString(params.param2), params.param3];
            let isApprovedTrader_call = async (params, options) => {
                let result = await this.call('isApprovedTrader', isApprovedTraderParams(params), options);
                return result;
            };
            this.isApprovedTrader = isApprovedTrader_call;
            let isLive_call = async (options) => {
                let result = await this.call('isLive', [], options);
                return result;
            };
            this.isLive = isLive_call;
            let lastGovBalance_call = async (options) => {
                let result = await this.call('lastGovBalance', [], options);
                return new eth_contract_41.BigNumber(result);
            };
            this.lastGovBalance = lastGovBalance_call;
            let lastToken0Balance_call = async (options) => {
                let result = await this.call('lastToken0Balance', [], options);
                return new eth_contract_41.BigNumber(result);
            };
            this.lastToken0Balance = lastToken0Balance_call;
            let lastToken1Balance_call = async (options) => {
                let result = await this.call('lastToken1Balance', [], options);
                return new eth_contract_41.BigNumber(result);
            };
            this.lastToken1Balance = lastToken1Balance_call;
            let offersParams = (params) => [params.param1, this.wallet.utils.toString(params.param2)];
            let offers_call = async (params, options) => {
                let result = await this.call('offers', offersParams(params), options);
                return {
                    provider: result.provider,
                    locked: result.locked,
                    allowAll: result.allowAll,
                    originalAmount: new eth_contract_41.BigNumber(result.originalAmount),
                    amount: new eth_contract_41.BigNumber(result.amount),
                    swappedAmount: new eth_contract_41.BigNumber(result.swappedAmount),
                    receiving: new eth_contract_41.BigNumber(result.receiving),
                    restrictedPrice: new eth_contract_41.BigNumber(result.restrictedPrice),
                    startDate: new eth_contract_41.BigNumber(result.startDate),
                    expire: new eth_contract_41.BigNumber(result.expire)
                };
            };
            this.offers = offers_call;
            let protocolFeeBalance0_call = async (options) => {
                let result = await this.call('protocolFeeBalance0', [], options);
                return new eth_contract_41.BigNumber(result);
            };
            this.protocolFeeBalance0 = protocolFeeBalance0_call;
            let protocolFeeBalance1_call = async (options) => {
                let result = await this.call('protocolFeeBalance1', [], options);
                return new eth_contract_41.BigNumber(result);
            };
            this.protocolFeeBalance1 = protocolFeeBalance1_call;
            let providerOfferIndexParams = (params) => [params.param1, params.param2, this.wallet.utils.toString(params.param3)];
            let providerOfferIndex_call = async (params, options) => {
                let result = await this.call('providerOfferIndex', providerOfferIndexParams(params), options);
                return new eth_contract_41.BigNumber(result);
            };
            this.providerOfferIndex = providerOfferIndex_call;
            let restrictedLiquidityProvider_call = async (options) => {
                let result = await this.call('restrictedLiquidityProvider', [], options);
                return result;
            };
            this.restrictedLiquidityProvider = restrictedLiquidityProvider_call;
            let scaleDirection_call = async (options) => {
                let result = await this.call('scaleDirection', [], options);
                return result;
            };
            this.scaleDirection = scaleDirection_call;
            let scaler_call = async (options) => {
                let result = await this.call('scaler', [], options);
                return new eth_contract_41.BigNumber(result);
            };
            this.scaler = scaler_call;
            let token0_call = async (options) => {
                let result = await this.call('token0', [], options);
                return result;
            };
            this.token0 = token0_call;
            let token1_call = async (options) => {
                let result = await this.call('token1', [], options);
                return result;
            };
            this.token1 = token1_call;
            let traderAllocationParams = (params) => [params.param1, this.wallet.utils.toString(params.param2), params.param3];
            let traderAllocation_call = async (params, options) => {
                let result = await this.call('traderAllocation', traderAllocationParams(params), options);
                return new eth_contract_41.BigNumber(result);
            };
            this.traderAllocation = traderAllocation_call;
            let traderOfferParams = (params) => [params.param1, params.param2, this.wallet.utils.toString(params.param3)];
            let traderOffer_call = async (params, options) => {
                let result = await this.call('traderOffer', traderOfferParams(params), options);
                return new eth_contract_41.BigNumber(result);
            };
            this.traderOffer = traderOffer_call;
            let whitelistFactory_call = async (options) => {
                let result = await this.call('whitelistFactory', [], options);
                return result;
            };
            this.whitelistFactory = whitelistFactory_call;
            let addLiquidityParams = (params) => [params.direction, this.wallet.utils.toString(params.index)];
            let addLiquidity_send = async (params, options) => {
                let result = await this.send('addLiquidity', addLiquidityParams(params), options);
                return result;
            };
            let addLiquidity_call = async (params, options) => {
                let result = await this.call('addLiquidity', addLiquidityParams(params), options);
                return;
            };
            let addLiquidity_txData = async (params, options) => {
                let result = await this.txData('addLiquidity', addLiquidityParams(params), options);
                return result;
            };
            this.addLiquidity = Object.assign(addLiquidity_send, {
                call: addLiquidity_call,
                txData: addLiquidity_txData
            });
            let createOrderParams = (params) => [params.provider, params.direction, params.allowAll, this.wallet.utils.toString(params.restrictedPrice), this.wallet.utils.toString(params.startDate), this.wallet.utils.toString(params.expire)];
            let createOrder_send = async (params, options) => {
                let result = await this.send('createOrder', createOrderParams(params), options);
                return result;
            };
            let createOrder_call = async (params, options) => {
                let result = await this.call('createOrder', createOrderParams(params), options);
                return new eth_contract_41.BigNumber(result);
            };
            let createOrder_txData = async (params, options) => {
                let result = await this.txData('createOrder', createOrderParams(params), options);
                return result;
            };
            this.createOrder = Object.assign(createOrder_send, {
                call: createOrder_call,
                txData: createOrder_txData
            });
            let initializeParams = (params) => [params.token0, params.token1];
            let initialize_send = async (params, options) => {
                let result = await this.send('initialize', initializeParams(params), options);
                return result;
            };
            let initialize_call = async (params, options) => {
                let result = await this.call('initialize', initializeParams(params), options);
                return;
            };
            let initialize_txData = async (params, options) => {
                let result = await this.txData('initialize', initializeParams(params), options);
                return result;
            };
            this.initialize = Object.assign(initialize_send, {
                call: initialize_call,
                txData: initialize_txData
            });
            let lockOfferParams = (params) => [params.direction, this.wallet.utils.toString(params.index)];
            let lockOffer_send = async (params, options) => {
                let result = await this.send('lockOffer', lockOfferParams(params), options);
                return result;
            };
            let lockOffer_call = async (params, options) => {
                let result = await this.call('lockOffer', lockOfferParams(params), options);
                return;
            };
            let lockOffer_txData = async (params, options) => {
                let result = await this.txData('lockOffer', lockOfferParams(params), options);
                return result;
            };
            this.lockOffer = Object.assign(lockOffer_send, {
                call: lockOffer_call,
                txData: lockOffer_txData
            });
            let redeemProtocolFee_send = async (options) => {
                let result = await this.send('redeemProtocolFee', [], options);
                return result;
            };
            let redeemProtocolFee_call = async (options) => {
                let result = await this.call('redeemProtocolFee', [], options);
                return;
            };
            let redeemProtocolFee_txData = async (options) => {
                let result = await this.txData('redeemProtocolFee', [], options);
                return result;
            };
            this.redeemProtocolFee = Object.assign(redeemProtocolFee_send, {
                call: redeemProtocolFee_call,
                txData: redeemProtocolFee_txData
            });
            let removeAllLiquidity_send = async (provider, options) => {
                let result = await this.send('removeAllLiquidity', [provider], options);
                return result;
            };
            let removeAllLiquidity_call = async (provider, options) => {
                let result = await this.call('removeAllLiquidity', [provider], options);
                return {
                    amount0: new eth_contract_41.BigNumber(result.amount0),
                    amount1: new eth_contract_41.BigNumber(result.amount1)
                };
            };
            let removeAllLiquidity_txData = async (provider, options) => {
                let result = await this.txData('removeAllLiquidity', [provider], options);
                return result;
            };
            this.removeAllLiquidity = Object.assign(removeAllLiquidity_send, {
                call: removeAllLiquidity_call,
                txData: removeAllLiquidity_txData
            });
            let removeAllLiquidity1DParams = (params) => [params.provider, params.direction];
            let removeAllLiquidity1D_send = async (params, options) => {
                let result = await this.send('removeAllLiquidity1D', removeAllLiquidity1DParams(params), options);
                return result;
            };
            let removeAllLiquidity1D_call = async (params, options) => {
                let result = await this.call('removeAllLiquidity1D', removeAllLiquidity1DParams(params), options);
                return {
                    totalAmount: new eth_contract_41.BigNumber(result.totalAmount),
                    totalReceiving: new eth_contract_41.BigNumber(result.totalReceiving)
                };
            };
            let removeAllLiquidity1D_txData = async (params, options) => {
                let result = await this.txData('removeAllLiquidity1D', removeAllLiquidity1DParams(params), options);
                return result;
            };
            this.removeAllLiquidity1D = Object.assign(removeAllLiquidity1D_send, {
                call: removeAllLiquidity1D_call,
                txData: removeAllLiquidity1D_txData
            });
            let removeLiquidityParams = (params) => [params.provider, params.direction, this.wallet.utils.toString(params.index), this.wallet.utils.toString(params.amountOut), this.wallet.utils.toString(params.receivingOut)];
            let removeLiquidity_send = async (params, options) => {
                let result = await this.send('removeLiquidity', removeLiquidityParams(params), options);
                return result;
            };
            let removeLiquidity_call = async (params, options) => {
                let result = await this.call('removeLiquidity', removeLiquidityParams(params), options);
                return;
            };
            let removeLiquidity_txData = async (params, options) => {
                let result = await this.txData('removeLiquidity', removeLiquidityParams(params), options);
                return result;
            };
            this.removeLiquidity = Object.assign(removeLiquidity_send, {
                call: removeLiquidity_call,
                txData: removeLiquidity_txData
            });
            let setApprovedTraderParams = (params) => [params.direction, this.wallet.utils.toString(params.offerIndex), params.trader, this.wallet.utils.toString(params.allocation)];
            let setApprovedTrader_send = async (params, options) => {
                let result = await this.send('setApprovedTrader', setApprovedTraderParams(params), options);
                return result;
            };
            let setApprovedTrader_call = async (params, options) => {
                let result = await this.call('setApprovedTrader', setApprovedTraderParams(params), options);
                return;
            };
            let setApprovedTrader_txData = async (params, options) => {
                let result = await this.txData('setApprovedTrader', setApprovedTraderParams(params), options);
                return result;
            };
            this.setApprovedTrader = Object.assign(setApprovedTrader_send, {
                call: setApprovedTrader_call,
                txData: setApprovedTrader_txData
            });
            let setLive_send = async (isLive, options) => {
                let result = await this.send('setLive', [isLive], options);
                return result;
            };
            let setLive_call = async (isLive, options) => {
                let result = await this.call('setLive', [isLive], options);
                return;
            };
            let setLive_txData = async (isLive, options) => {
                let result = await this.txData('setLive', [isLive], options);
                return result;
            };
            this.setLive = Object.assign(setLive_send, {
                call: setLive_call,
                txData: setLive_txData
            });
            let setMultipleApprovedTradersParams = (params) => [params.direction, this.wallet.utils.toString(params.offerIndex), params.trader, this.wallet.utils.toString(params.allocation)];
            let setMultipleApprovedTraders_send = async (params, options) => {
                let result = await this.send('setMultipleApprovedTraders', setMultipleApprovedTradersParams(params), options);
                return result;
            };
            let setMultipleApprovedTraders_call = async (params, options) => {
                let result = await this.call('setMultipleApprovedTraders', setMultipleApprovedTradersParams(params), options);
                return;
            };
            let setMultipleApprovedTraders_txData = async (params, options) => {
                let result = await this.txData('setMultipleApprovedTraders', setMultipleApprovedTradersParams(params), options);
                return result;
            };
            this.setMultipleApprovedTraders = Object.assign(setMultipleApprovedTraders_send, {
                call: setMultipleApprovedTraders_call,
                txData: setMultipleApprovedTraders_txData
            });
            let swapParams = (params) => [this.wallet.utils.toString(params.amount0Out), this.wallet.utils.toString(params.amount1Out), params.to, params.trader, this.wallet.utils.stringToBytes(params.param5)];
            let swap_send = async (params, options) => {
                let result = await this.send('swap', swapParams(params), options);
                return result;
            };
            let swap_call = async (params, options) => {
                let result = await this.call('swap', swapParams(params), options);
                return;
            };
            let swap_txData = async (params, options) => {
                let result = await this.txData('swap', swapParams(params), options);
                return result;
            };
            this.swap = Object.assign(swap_send, {
                call: swap_call,
                txData: swap_txData
            });
            let sync_send = async (options) => {
                let result = await this.send('sync', [], options);
                return result;
            };
            let sync_call = async (options) => {
                let result = await this.call('sync', [], options);
                return;
            };
            let sync_txData = async (options) => {
                let result = await this.txData('sync', [], options);
                return result;
            };
            this.sync = Object.assign(sync_send, {
                call: sync_call,
                txData: sync_txData
            });
        }
    }
    OSWAP_OtcPair._abi = OSWAP_OtcPair_json_1.default.abi;
    exports.OSWAP_OtcPair = OSWAP_OtcPair;
});
define("@scom/scom-swap/contracts/oswap-openswap-contract/contracts/restricted/OSWAP_OtcPairCreator.json.ts", ["require", "exports"], function (require, exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    ///<amd-module name='@scom/scom-swap/contracts/oswap-openswap-contract/contracts/restricted/OSWAP_OtcPairCreator.json.ts'/> 
    exports.default = {
        "abi": [
            { "inputs": [{ "internalType": "bytes32", "name": "salt", "type": "bytes32" }], "name": "createPair", "outputs": [{ "internalType": "address", "name": "pair", "type": "address" }], "stateMutability": "nonpayable", "type": "function" }
        ],
        "bytecode": "608060405234801561001057600080fd5b5061580f806100206000396000f3fe608060405234801561001057600080fd5b506004361061002b5760003560e01c8063ed25a5a214610030575b600080fd5b61004d6004803603602081101561004657600080fd5b5035610076565b6040805173ffffffffffffffffffffffffffffffffffffffff9092168252519081900360200190f35b600060606040518060200161008a906100b1565b6020820181038252601f19601f820116604052509050828151602083016000f59392505050565b61571b806100bf8339019056fe610140604052600180553480156200001657600080fd5b5033606081901b60809081526000805460ff191660011781556040805163ea2ed2c160e01b81529051919384938493849363ea2ed2c1926004808301939192829003018186803b1580156200006a57600080fd5b505afa1580156200007f573d6000803e3d6000fd5b505050506040513d60808110156200009657600080fd5b5080516020808301516040808501516060958601516001600160601b031986881b811660a0529684901b90961660c052815163b716d46360e01b815291519499509197509095509293506001600160a01b0387169263b716d4639260048083019392829003018186803b1580156200010d57600080fd5b505afa15801562000122573d6000803e3d6000fd5b505050506040513d60208110156200013957600080fd5b81019080805190602001909291905050506001600160a01b0316610100816001600160a01b031660601b81525050816001600160a01b031660e0816001600160a01b031660601b81525050806001600160a01b0316610120816001600160a01b031660601b81525050600360006001151515158152602001908152602001600020604051806101400160405280306001600160a01b031681526020016001151581526020016000151581526020016000815260200160008152602001600081526020016000815260200160008152602001600081526020016000815250908060018154018082558091505060019003906000526020600020906008020160009091909190915060008201518160000160006101000a8154816001600160a01b0302191690836001600160a01b0316021790555060208201518160000160146101000a81548160ff02191690831515021790555060408201518160000160156101000a81548160ff021916908315150217905550606082015181600101556080820151816002015560a0820151816003015560c0820151816004015560e082015181600501556101008201518160060155610120820151816007015550506003600080151515158152602001908152602001600020604051806101400160405280306001600160a01b031681526020016001151581526020016000151581526020016000815260200160008152602001600081526020016000815260200160008152602001600081526020016000815250908060018154018082558091505060019003906000526020600020906008020160009091909190915060008201518160000160006101000a8154816001600160a01b0302191690836001600160a01b0316021790555060208201518160000160146101000a81548160ff02191690831515021790555060408201518160000160156101000a81548160ff021916908315150217905550606082015181600101556080820151816002015560a0820151816003015560c0820151816004015560e082015181600501556101008201518160060155610120820151816007015550505050505060805160601c60a05160601c60c05160601c60e05160601c6101005160601c6101205160601c6151f06200052b600039806119135280611bf552806127695280613aee525080610d755280610f4352806126be528061369852806136f0528061373e52806137c852806138cc52806139095250806117e052806120a952806123585280612d9e5280612f92528061397352806141e35250806128ba5280612e72525080611465525080611040528061119d52806116a85280611ec552806121fc528061262d52806127f25280612e9f52806145f152506151f06000f3fe608060405234801561001057600080fd5b50600436106103145760003560e01c806376701636116101a7578063d21220a7116100ee578063ea5dbbc411610097578063f5ee334811610071578063f5ee334814610d07578063fa69ce2b14610d26578063fff6cae914610d6657610314565b8063ea5dbbc414610c42578063ee13b84114610cd1578063f060d13914610cff57610314565b8063db13653c116100c8578063db13653c14610b81578063db47533e14610c00578063e5d36ff614610c3a57610314565b8063d21220a714610aaa578063d38550a714610ab2578063d7dc4e4314610aec57610314565b80639f0a3cc111610150578063b8f7a6651161012a578063b8f7a66514610a92578063bebf7a6114610a9a578063c45a015514610aa257610314565b80639f0a3cc114610a37578063a878769314610a6b578063b2901aa314610a8a57610314565b80639749d213116101815780639749d213146109ed5780639cac76ac146109f55780639d69dc4e14610a2f57610314565b8063767016361461099a5780637a6a5e1b146109bf578063835daf6c146109e557610314565b8063577e6d081161026b578063625b6ced1161021457806372ca7372116101ee57806372ca73721461089e578063740134241461092d578063752bc9dc1461097557610314565b8063625b6ced146107985780636322fa32146107c65780636b4afee11461089657610314565b80635eff2d01116102455780635eff2d011461067e5780635fd5e2fc1461074857806360b71d4e1461079057610314565b8063577e6d08146106665780635a6af09d1461066e5780635aa6e6751461067657610314565b8063364aed84116102cd5780633d0d81d6116102a75780633d0d81d614610433578063485cc9551461060b57806348c0902f1461063b57610314565b8063364aed84146103d65780633c1e6ff51461040a5780633c6d5c721461041257610314565b80630dfe1681116102fe5780630dfe1681146103635780631da9a2bd1461036b5780631deb4995146103a257610314565b8062113e081461031957806305268cff1461033f575b600080fd5b610321610d6e565b60408051938452602084019290925282820152519081900360600190f35b610347610f41565b604080516001600160a01b039092168252519081900360200190f35b610347610f65565b6103906004803603604081101561038157600080fd5b50803515159060200135610f74565b60408051918252519081900360200190f35b610390600480360360608110156103b857600080fd5b5080351515906001600160a01b036020820135169060400135610f98565b610390600480360360608110156103ec57600080fd5b5080351515906001600160a01b036020820135169060400135610fd3565b610390610ff8565b61041a610ffe565b6040805192835260208301919091528051918290030190f35b61045e6004803603606081101561044957600080fd5b50803515159060208101359060400135611008565b6040518080602001806020018060200180602001806020018060200187810387528d818151815260200191508051906020019060200280838360005b838110156104b257818101518382015260200161049a565b5050505090500187810386528c818151815260200191508051906020019060200280838360005b838110156104f15781810151838201526020016104d9565b5050505090500187810385528b818151815260200191508051906020019060200280838360005b83811015610530578181015183820152602001610518565b5050505090500187810384528a818151815260200191508051906020019060200280838360005b8381101561056f578181015183820152602001610557565b50505050905001878103835289818151815260200191508051906020019060200280838360005b838110156105ae578181015183820152602001610596565b50505050905001878103825288818151815260200191508051906020019060200280838360005b838110156105ed5781810151838201526020016105d5565b505050509050019c5050505050505050505050505060405180910390f35b6106396004803603604081101561062157600080fd5b506001600160a01b0381358116916020013516611035565b005b6103476004803603606081101561065157600080fd5b50803515159060208101359060400135611415565b610390611457565b61039061145d565b610347611463565b6106af6004803603608081101561069457600080fd5b50803515159060208101359060408101359060600135611487565b604051808060200180602001838103835285818151815260200191508051906020019060200280838360005b838110156106f35781810151838201526020016106db565b50505050905001838103825284818151815260200191508051906020019060200280838360005b8381101561073257818101518382015260200161071a565b5050505090500194505050505060405180910390f35b610390600480360360c081101561075e57600080fd5b506001600160a01b03813516906020810135151590604081013515159060608101359060808101359060a0013561165c565b610390611d1c565b610390600480360360408110156107ae57600080fd5b506001600160a01b0381351690602001351515611d22565b610639600480360360808110156107dc57600080fd5b813515159160208101359181019060608101604082013564010000000081111561080557600080fd5b82018360208201111561081757600080fd5b8035906020019184602083028401116401000000008311171561083957600080fd5b91939092909160208101903564010000000081111561085757600080fd5b82018360208201111561086957600080fd5b8035906020019184602083028401116401000000008311171561088b57600080fd5b509092509050611d4b565b610390611e01565b610390600480360360808110156108b457600080fd5b6001600160a01b0382358116926020810135926040820135909216918101906080810160608201356401000000008111156108ee57600080fd5b82018360208201111561090057600080fd5b8035906020019184600183028401116401000000008311171561092257600080fd5b509092509050611e07565b6109616004803603606081101561094357600080fd5b508035151590602081013590604001356001600160a01b0316612054565b604080519115158252519081900360200190f35b6106396004803603604081101561098b57600080fd5b5080351515906020013561207a565b610639600480360360408110156109b057600080fd5b508035151590602001356121b2565b61041a600480360360208110156109d557600080fd5b50356001600160a01b031661253d565b6103906125db565b6106396125e1565b61045e60048036036080811015610a0b57600080fd5b506001600160a01b0381351690602081013515159060408101359060600135612739565b610347612767565b61039060048036036060811015610a4d57600080fd5b508035151590602081013590604001356001600160a01b031661278b565b61039060048036036020811015610a8157600080fd5b503515156127ae565b6103906127c0565b6109616127c6565b6109616127cf565b6103476127f0565b610347612814565b61045e60048036036080811015610ac857600080fd5b506001600160a01b0381351690602081013515159060408101359060600135612823565b610639600480360360a0811015610b0257600080fd5b8135916020810135916001600160a01b03604083013581169260608101359091169181019060a081016080820135640100000000811115610b4257600080fd5b820183602082011115610b5457600080fd5b80359060200191846001830284011164010000000083111715610b7657600080fd5b50909250905061283a565b610ba660048036036040811015610b9757600080fd5b50803515159060200135612cda565b604080516001600160a01b03909b168b5298151560208b0152961515898901526060890195909552608088019390935260a087019190915260c086015260e085015261010084015261012083015251908190036101400190f35b61063960048036036080811015610c1657600080fd5b5080351515906020810135906001600160a01b036040820135169060600135612d7e565b610347612d9c565b61039060048036036080811015610c5857600080fd5b6001600160a01b038235811692602081013592604082013590921691810190608081016060820135640100000000811115610c9257600080fd5b820183602082011115610ca457600080fd5b80359060200191846001830284011164010000000083111715610cc657600080fd5b509092509050612dc0565b61041a60048036036040811015610ce757600080fd5b506001600160a01b0381351690602001351515612e0f565b610347612e70565b61063960048036036020811015610d1d57600080fd5b50351515612e94565b610639600480360360a0811015610d3c57600080fd5b506001600160a01b0381351690602081013515159060408101359060608101359060800135612f42565b610639613087565b60008060007f00000000000000000000000000000000000000000000000000000000000000006001600160a01b03166370a08231306040518263ffffffff1660e01b815260040180826001600160a01b03166001600160a01b0316815260200191505060206040518083038186803b158015610de957600080fd5b505afa158015610dfd573d6000803e3d6000fd5b505050506040513d6020811015610e1357600080fd5b5051600954604080517f70a0823100000000000000000000000000000000000000000000000000000000815230600482015290516001600160a01b03909216916370a0823191602480820192602092909190829003018186803b158015610e7957600080fd5b505afa158015610e8d573d6000803e3d6000fd5b505050506040513d6020811015610ea357600080fd5b5051600a54604080517f70a0823100000000000000000000000000000000000000000000000000000000815230600482015290516001600160a01b03909216916370a0823191602480820192602092909190829003018186803b158015610f0957600080fd5b505afa158015610f1d573d6000803e3d6000fd5b505050506040513d6020811015610f3357600080fd5b505191945092509050909192565b7f000000000000000000000000000000000000000000000000000000000000000081565b6009546001600160a01b031681565b81151560009081526005602090815260408083208484529091529020545b92915050565b60046020528260005260406000206020528160005260406000208181548110610fbd57fe5b9060005260206000200160009250925050505481565b60086020528260005260406000206020528160005260406000208181548110610fbd57fe5b600b5481565b600d54600e549091565b60608060608060608061101f6000808b8b8b6130da565b949e939d50919b50995097509095509350505050565b336001600160a01b037f000000000000000000000000000000000000000000000000000000000000000016146110b2576040805162461bcd60e51b815260206004820152600960248201527f464f5242494444454e0000000000000000000000000000000000000000000000604482015290519081900360640190fd5b600980546001600160a01b038085167fffffffffffffffffffffffff00000000000000000000000000000000000000009283161792839055600a805485831693169290921791829055908116911610611152576040805162461bcd60e51b815260206004820152601860248201527f496e76616c696420746f6b656e2070616972206f726465720000000000000000604482015290519081900360640190fd5b600954600a54604080517f52a03c030000000000000000000000000000000000000000000000000000000081526001600160a01b0393841660048201529183166024830152516000927f000000000000000000000000000000000000000000000000000000000000000016916352a03c0391604480830192602092919082900301818787803b1580156111e457600080fd5b505af11580156111f8573d6000803e3d6000fd5b505050506040513d602081101561120e57600080fd5b505190506001600160a01b03811661126d576040805162461bcd60e51b815260206004820152600f60248201527f4e6f206f7261636c6520666f756e640000000000000000000000000000000000604482015290519081900360640190fd5b600954604080517f313ce56700000000000000000000000000000000000000000000000000000000815290516000926001600160a01b03169163313ce567916004808301926020929190829003018186803b1580156112cb57600080fd5b505afa1580156112df573d6000803e3d6000fd5b505050506040513d60208110156112f557600080fd5b5051600a54604080517f313ce56700000000000000000000000000000000000000000000000000000000815290519293506000926001600160a01b039092169163313ce56791600480820192602092909190829003018186803b15801561135b57600080fd5b505afa15801561136f573d6000803e3d6000fd5b505050506040513d602081101561138557600080fd5b5051905060ff82811690821614156113a1576001600b5561140e565b600a80547fffffffffffffffffffffff00ffffffffffffffffffffffffffffffffffffffff1660ff8481168482161174010000000000000000000000000000000000000000908102929092179283905591041661140057808203611404565b8181035b60ff16600a0a600b555b5050505050565b6005602052826000526040600020602052816000526040600020818154811061143a57fe5b6000918252602090912001546001600160a01b0316925083915050565b60105481565b600d5481565b7f000000000000000000000000000000000000000000000000000000000000000081565b83151560009081526005602090815260408083208684529091529020805460609182918086101561163657806114c3878763ffffffff6135df16565b11156114dc576114d9818763ffffffff61364016565b94505b8467ffffffffffffffff811180156114f357600080fd5b5060405190808252806020026020018201604052801561151d578160200160208202803683370190505b5093508467ffffffffffffffff8111801561153757600080fd5b50604051908082528060200260200182016040528015611561578160200160208202803683370190505b50925060005b858110156116305788151560009081526007602090815260408083208b84529091528120908461159d848b63ffffffff6135df16565b815481106115a757fe5b9060005260206000200160009054906101000a90046001600160a01b03168784815181106115d157fe5b60200260200101906001600160a01b031690816001600160a01b03168152506001600160a01b03166001600160a01b031681526020019081526020016000205484828151811061161d57fe5b6020908102919091010152600101611567565b50611651565b60408051600080825260208201908152818301909252945092505b505094509492505050565b600060015460011461169e576040805162461bcd60e51b81526020600482015260066024820152651313d0d2d15160d21b604482015290519081900360640190fd5b60006001819055507f00000000000000000000000000000000000000000000000000000000000000006001600160a01b031663b8f7a6656040518163ffffffff1660e01b8152600401602060405180830381600087803b15801561170157600080fd5b505af1158015611715573d6000803e3d6000fd5b505050506040513d602081101561172b57600080fd5b505161177e576040805162461bcd60e51b815260206004820152600f60248201527f474c4f42414c4c59205041555345440000000000000000000000000000000000604482015290519081900360640190fd5b60005460ff166117d5576040805162461bcd60e51b815260206004820152600660248201527f5041555345440000000000000000000000000000000000000000000000000000604482015290519081900360640190fd5b336001600160a01b037f00000000000000000000000000000000000000000000000000000000000000001614806118145750336001600160a01b038816145b611865576040805162461bcd60e51b815260206004820152601860248201527f4e6f742066726f6d20726f75746572206f72206f776e65720000000000000000604482015290519081900360640190fd5b828210156118ba576040805162461bcd60e51b815260206004820152600f60248201527f416c726561647920657870697265640000000000000000000000000000000000604482015290519081900360640190fd5b4282101561190f576040805162461bcd60e51b815260206004820152600f60248201527f416c726561647920657870697265640000000000000000000000000000000000604482015290519081900360640190fd5b60007f00000000000000000000000000000000000000000000000000000000000000006001600160a01b031663bc14128f7f4f7463506169722e6d61784475720000000000000000000000000000000000006040518263ffffffff1660e01b81526004018082815260200191505060206040518083038186803b15801561199557600080fd5b505afa1580156119a9573d6000803e3d6000fd5b505050506040513d60208110156119bf57600080fd5b50519050428101831115611a1a576040805162461bcd60e51b815260206004820152601360248201527f45787069726520746f6f20666172206177617900000000000000000000000000604482015290519081900360640190fd5b50600260008715151515815260200190815260200160002060008154600101919050819055905060046000871515151581526020019081526020016000206000886001600160a01b03166001600160a01b031681526020019081526020016000208190806001815401808255809150506001900390600052602060002001600090919091909150556003600087151515158152602001908152602001600020604051806101400160405280896001600160a01b0316815260200160001515815260200187151581526020016000815260200160008152602001600081526020016000815260200186815260200185815260200184815250908060018154018082558091505060019003906000526020600020906008020160009091909190915060008201518160000160006101000a8154816001600160a01b0302191690836001600160a01b0316021790555060208201518160000160146101000a81548160ff02191690831515021790555060408201518160000160156101000a81548160ff021916908315150217905550606082015181600101556080820151816002015560a0820151816003015560c0820151816004015560e0820151816005015561010082015181600601556101208201518160070155505060007f00000000000000000000000000000000000000000000000000000000000000006001600160a01b031663bc14128f7f4f7463506169722e6665655065724f72646572000000000000000000000000006040518263ffffffff1660e01b81526004018082815260200191505060206040518083038186803b158015611c7757600080fd5b505afa158015611c8b573d6000803e3d6000fd5b505050506040513d6020811015611ca157600080fd5b50519050611caf8882613682565b60408051838152871515602082015280820187905260608101869052608081018590529051881515916001600160a01b038b16917f528317aa3a915641ec93963a99c0ef7d64d16e351d258904238e941a5af151da9181900360a00190a350600180559695505050505050565b60115481565b151560009081526004602090815260408083206001600160a01b03949094168352929052205490565b82818114611da0576040805162461bcd60e51b815260206004820152601060248201527f6c656e677468206e6f74206d6174636800000000000000000000000000000000604482015290519081900360640190fd5b611dab878783613944565b60005b81811015611df757611def8888888885818110611dc757fe5b905060200201356001600160a01b0316878786818110611de357fe5b90506020020135613bc3565b600101611dae565b5050505050505050565b600e5481565b6000808511611e5d576040805162461bcd60e51b815260206004820152601960248201527f494e53554646494349454e545f494e5055545f414d4f554e5400000000000000604482015290519081900360640190fd5b606080611e6a6084613d2a565b600954600a54604080517f069d188f0000000000000000000000000000000000000000000000000000000081526001600160a01b039384166004820181905292841660248201529051949650929450818c16149260009283927f0000000000000000000000000000000000000000000000000000000000000000169163069d188f91604480820192606092909190829003018186803b158015611f0c57600080fd5b505afa158015611f20573d6000803e3d6000fd5b505050506040513d6060811015611f3657600080fd5b50805160209091015190925090506000805b8651811015612044576000878281518110611f5f57fe5b60200260200101519050600260008715151515815260200190815260200160002054811115611fd5576040805162461bcd60e51b815260206004820152600f60248201527f4f66666572206e6f742065786973740000000000000000000000000000000000604482015290519081900360640190fd5b612013670de0b6b3a76400006120078f8a8681518110611ff157fe5b6020026020010151613ec490919063ffffffff16565b9063ffffffff613f1d16565b925061202386848e848989613f5f565b509093506120399050898463ffffffff6135df16565b985050600101611f48565b5050505050505095945050505050565b600660209081526000938452604080852082529284528284209052825290205460ff1681565b811515600090815260036020526040812080548390811061209757fe5b906000526020600020906008020190507f00000000000000000000000000000000000000000000000000000000000000006001600160a01b0316336001600160a01b031614806120f0575080546001600160a01b031633145b612141576040805162461bcd60e51b815260206004820152601860248201527f4e6f742066726f6d20726f75746572206f72206f776e65720000000000000000604482015290519081900360640190fd5b80547fffffffffffffffffffffff00ffffffffffffffffffffffffffffffffffffffff16740100000000000000000000000000000000000000001781556040518290841515907f108c7d3c4d8ad208c92f4064bac678f032a0ac5bdbaaa1c0fdbd240b23b445ea90600090a3505050565b6001546001146121f2576040805162461bcd60e51b81526020600482015260066024820152651313d0d2d15160d21b604482015290519081900360640190fd5b60006001819055507f00000000000000000000000000000000000000000000000000000000000000006001600160a01b031663b8f7a6656040518163ffffffff1660e01b8152600401602060405180830381600087803b15801561225557600080fd5b505af1158015612269573d6000803e3d6000fd5b505050506040513d602081101561227f57600080fd5b50516122d2576040805162461bcd60e51b815260206004820152600f60248201527f474c4f42414c4c59205041555345440000000000000000000000000000000000604482015290519081900360640190fd5b60005460ff16612329576040805162461bcd60e51b815260206004820152600660248201527f5041555345440000000000000000000000000000000000000000000000000000604482015290519081900360640190fd5b811515600090815260036020526040812080548390811061234657fe5b906000526020600020906008020190507f00000000000000000000000000000000000000000000000000000000000000006001600160a01b0316336001600160a01b0316148061239f575080546001600160a01b031633145b6123f0576040805162461bcd60e51b815260206004820152601860248201527f4e6f742066726f6d20726f75746572206f72206f776e65720000000000000000604482015290519081900360640190fd5b60008060006123fd610d6e565b9250925092506000861561242657600e5461241f90839063ffffffff61364016565b905061243d565b600d5461243a90849063ffffffff61364016565b90505b60008111612492576040805162461bcd60e51b815260206004820152600c60248201527f4e6f20616d6f756e7420696e0000000000000000000000000000000000000000604482015290519081900360640190fd5b60018501546124a7908263ffffffff6135df16565b600186015560028501546124c1908263ffffffff6135df16565b60028601908155600c859055600d849055600e8390558554600187015491546040805193845260208401859052838101919091525188928a1515926001600160a01b0316917f123b82410308461dcaa608e4e0f8420228f0940801c5bb49f48997b777d6b6149181900360600190a45050600180555050505050565b600080600154600114612580576040805162461bcd60e51b81526020600482015260066024820152651313d0d2d15160d21b604482015290519081900360640190fd5b60006001819055506125938360006141d5565b90925090506000806125a68560016141d5565b90925090506125bb848263ffffffff6135df16565b93506125cd838363ffffffff6135df16565b600180559395939450505050565b600f5481565b600154600114612621576040805162461bcd60e51b81526020600482015260066024820152651313d0d2d15160d21b604482015290519081900360640190fd5b600060018190555060007f00000000000000000000000000000000000000000000000000000000000000006001600160a01b031663ef3692526040518163ffffffff1660e01b8152600401602060405180830381600087803b15801561268657600080fd5b505af115801561269a573d6000803e3d6000fd5b505050506040513d60208110156126b057600080fd5b50516011549091506126e5907f0000000000000000000000000000000000000000000000000000000000000000908390614393565b600954600f54612700916001600160a01b0316908390614393565b600a5460105461271b916001600160a01b0316908390614393565b60006011819055600f819055601055612732614572565b5060018055565b60608060608060608061275060018b8b8b8b6130da565b949f939e50919c509a509850909650945050505050565b7f000000000000000000000000000000000000000000000000000000000000000081565b600760209081526000938452604080852082529284528284209052825290205481565b60026020526000908152604090205481565b600c5481565b60005460ff1681565b600a5474010000000000000000000000000000000000000000900460ff1681565b7f000000000000000000000000000000000000000000000000000000000000000081565b600a546001600160a01b031681565b60608060608060608061275060028b8b8b8b6130da565b60015460011461287a576040805162461bcd60e51b81526020600482015260066024820152651313d0d2d15160d21b604482015290519081900360640190fd5b60006001819055604080517f3af32abf00000000000000000000000000000000000000000000000000000000815233600482015290516001600160a01b037f00000000000000000000000000000000000000000000000000000000000000001692633af32abf92602480820193602093909283900390910190829087803b15801561290457600080fd5b505af1158015612918573d6000803e3d6000fd5b505050506040513d602081101561292e57600080fd5b50516129ae573233148015612949575061294733614585565b155b801561295d57506001600160a01b03831633145b6129ae576040805162461bcd60e51b815260206004820152600e60248201527f496e76616c696420747261646572000000000000000000000000000000000000604482015290519081900360640190fd5b60005460ff16612a05576040805162461bcd60e51b815260206004820152600660248201527f5041555345440000000000000000000000000000000000000000000000000000604482015290519081900360640190fd5b600d54600954604080517f70a082310000000000000000000000000000000000000000000000000000000081523060048201529051600093612aad9390926001600160a01b03909116916370a0823191602480820192602092909190829003018186803b158015612a7557600080fd5b505afa158015612a89573d6000803e3d6000fd5b505050506040513d6020811015612a9f57600080fd5b50519063ffffffff61364016565b600e54600a54604080517f70a082310000000000000000000000000000000000000000000000000000000081523060048201529051939450600093612b1c93926001600160a01b0316916370a08231916024808301926020929190829003018186803b158015612a7557600080fd5b905060008089158015612b2e57508815155b15612bcb57612b3f6001858961458b565b909250905088821015612b99576040805162461bcd60e51b815260206004820152601360248201527f494e53554646494349454e545f414d4f554e5400000000000000000000000000604482015290519081900360640190fd5b600a54612bb0906001600160a01b03168984614393565b600f54612bc3908263ffffffff6135df16565b600f55612cc2565b8915801590612bd8575088155b15612c7557612be96000848961458b565b909250905089821015612c43576040805162461bcd60e51b815260206004820152601360248201527f494e53554646494349454e545f414d4f554e5400000000000000000000000000604482015290519081900360640190fd5b600954612c5a906001600160a01b03168984614393565b601054612c6d908263ffffffff6135df16565b601055612cc2565b6040805162461bcd60e51b815260206004820152600d60248201527f4e6f7420737570706f7274656400000000000000000000000000000000000000604482015290519081900360640190fd5b612cca614572565b5050600180555050505050505050565b60036020528160005260406000208181548110612cf357fe5b6000918252602090912060089091020180546001820154600283015460038401546004850154600586015460068701546007909701546001600160a01b038716995060ff74010000000000000000000000000000000000000000880481169950750100000000000000000000000000000000000000000090970490961696949593949293919290918a565b612d8a84846001613944565b612d9684848484613bc3565b50505050565b7f000000000000000000000000000000000000000000000000000000000000000081565b6040805162461bcd60e51b815260206004820152600d60248201527f4e6f7420737570706f72746564000000000000000000000000000000000000006044820152905160009181900360640190fd5b600080600154600114612e52576040805162461bcd60e51b81526020600482015260066024820152651313d0d2d15160d21b604482015290519081900360640190fd5b6000600155612e6184846141d5565b60018055909590945092505050565b7f000000000000000000000000000000000000000000000000000000000000000081565b336001600160a01b037f00000000000000000000000000000000000000000000000000000000000000001614612f11576040805162461bcd60e51b815260206004820152600960248201527f464f5242494444454e0000000000000000000000000000000000000000000000604482015290519081900360640190fd5b600080547fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff0016911515919091179055565b600154600114612f82576040805162461bcd60e51b81526020600482015260066024820152651313d0d2d15160d21b604482015290519081900360640190fd5b6000600155336001600160a01b037f0000000000000000000000000000000000000000000000000000000000000000161480612fc65750336001600160a01b038616145b613017576040805162461bcd60e51b815260206004820152601860248201527f4e6f742066726f6d20726f75746572206f72206f776e65720000000000000000604482015290519081900360640190fd5b6130248585858585614814565b6000808561304457600954600a546001600160a01b039182169116613058565b600a546009546001600160a01b0391821691165b91509150613067823386614393565b613072813385614393565b61307a614572565b5050600180555050505050565b6001546001146130c7576040805162461bcd60e51b81526020600482015260066024820152651313d0d2d15160d21b604482015290519081900360640190fd5b60006001556130d4614572565b60018055565b606080808080806000808c613118575050881515600081815260046020908152604080832083805282528083209383526003909152902054906131d5565b8c6001141561315057505088151560009081526008602090815260408083206001600160a01b038e16845290915290208054906131d5565b8c6002141561318857505088151560009081526004602090815260408083206001600160a01b038e16845290915290208054906131d5565b6040805162461bcd60e51b815260206004820152600c60248201527f556e6b6e6f776e206c6973740000000000000000000000000000000000000000604482015290519081900360640190fd5b8a151560009081526003602052604090208d90838c10156135a257836132018d8d63ffffffff6135df16565b111561321a57613217848d63ffffffff61364016565b9a505b8a67ffffffffffffffff8111801561323157600080fd5b5060405190808252806020026020018201604052801561325b578160200160208202803683370190505b5099508a67ffffffffffffffff8111801561327557600080fd5b5060405190808252806020026020018201604052801561329f578160200160208202803683370190505b5098508a67ffffffffffffffff811180156132b957600080fd5b506040519080825280602002602001820160405280156132e3578160200160208202803683370190505b5096508a60020293508367ffffffffffffffff8111801561330357600080fd5b5060405190808252806020026020018201604052801561332d578160200160208202803683370190505b5097508367ffffffffffffffff8111801561334757600080fd5b50604051908082528060200260200182016040528015613371578160200160208202803683370190505b5095508367ffffffffffffffff8111801561338b57600080fd5b506040519080825280602002602001820160405280156133b5578160200160208202803683370190505b50945060005b8b81101561359c576133d3818e63ffffffff6135df16565b9450821561341c57826001146133ff578385815481106133ef57fe5b9060005260206000200154613417565b83858154811061340b57fe5b90600052602060002001545b61341e565b845b9450600082868154811061342e57fe5b90600052602060002090600802019050858c838151811061344b57fe5b6020908102919091010152613466828e63ffffffff6135df16565b81548c519197506001600160a01b0316908c908490811061348357fe5b60200260200101906001600160a01b031690816001600160a01b0316815250508060000160149054906101000a900460ff168a83815181106134c157fe5b6020026020010190151590811515815250508060000160159054906101000a900460ff168a87815181106134f157fe5b602002602001019015159081151581525050806004015489838151811061351457fe5b602002602001018181525050806002015488838151811061353157fe5b602002602001018181525050806005015488878151811061354e57fe5b602002602001018181525050806006015487838151811061356b57fe5b602002602001018181525050806007015487878151811061358857fe5b6020908102919091010152506001016133bb565b506135ce565b6040805160008082526020820181815282840191825260608301909352909a5090985096508695508594505b505050509550955095509550955095565b600082820183811015613639576040805162461bcd60e51b815260206004820152601b60248201527f536166654d6174683a206164646974696f6e206f766572666c6f770000000000604482015290519081900360640190fd5b9392505050565b600061363983836040518060400160405280601e81526020017f536166654d6174683a207375627472616374696f6e206f766572666c6f770000815250614a1e565b336001600160a01b038316141561378c576136bf7f0000000000000000000000000000000000000000000000000000000000000000833084614ab5565b6011546136d2908263ffffffff6135df16565b601155600c546136e8908263ffffffff6135df16565b600c556009547f00000000000000000000000000000000000000000000000000000000000000006001600160a01b039081169116141561373957600d54613735908263ffffffff6135df16565b600d555b600a547f00000000000000000000000000000000000000000000000000000000000000006001600160a01b039081169116141561378757600e54613783908263ffffffff6135df16565b600e555b613940565b604080517f70a0823100000000000000000000000000000000000000000000000000000000815230600482015290516000916001600160a01b037f000000000000000000000000000000000000000000000000000000000000000016916370a0823191602480820192602092909190829003018186803b15801561380f57600080fd5b505afa158015613823573d6000803e3d6000fd5b505050506040513d602081101561383957600080fd5b5051600c5490915060009061385590839063ffffffff61364016565b9050828110156138ac576040805162461bcd60e51b815260206004820152600e60248201527f4e6f7420656e6f75676820666565000000000000000000000000000000000000604482015290519081900360640190fd5b6011546138bf908263ffffffff6135df16565b601155600c8290556009547f00000000000000000000000000000000000000000000000000000000000000006001600160a01b039081169116141561390457600d8290555b600a547f00000000000000000000000000000000000000000000000000000000000000006001600160a01b0390811691161415612d965750600e555b5050565b821515600090815260036020526040812080548490811061396157fe5b906000526020600020906008020190507f00000000000000000000000000000000000000000000000000000000000000006001600160a01b0316336001600160a01b031614806139ba575080546001600160a01b031633145b613a0b576040805162461bcd60e51b815260206004820152601860248201527f4e6f742066726f6d20726f75746572206f72206f776e65720000000000000000604482015290519081900360640190fd5b805474010000000000000000000000000000000000000000900460ff1615613a7a576040805162461bcd60e51b815260206004820152600c60248201527f4f66666572206c6f636b65640000000000000000000000000000000000000000604482015290519081900360640190fd5b80547501000000000000000000000000000000000000000000900460ff1615613aea576040805162461bcd60e51b815260206004820152601a60248201527f4f66666572207761732073657420746f20616c6c6f7720616c6c000000000000604482015290519081900360640190fd5b60007f00000000000000000000000000000000000000000000000000000000000000006001600160a01b031663bc14128f7f4f7463506169722e6665655065725472616465720000000000000000000000006040518263ffffffff1660e01b81526004018082815260200191505060206040518083038186803b158015613b7057600080fd5b505afa158015613b84573d6000803e3d6000fd5b505050506040513d6020811015613b9a57600080fd5b5051825490915061140e906001600160a01b0316613bbe838663ffffffff613ec416565b613682565b831515600090815260066020908152604080832086845282528083206001600160a01b038616845290915290205460ff16613cbc57831515600081815260056020908152604080832087845282528083208054600180820183559185528385200180547fffffffffffffffffffffffff0000000000000000000000000000000000000000166001600160a01b038916908117909155858552600684528285208986528452828520818652845282852080547fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff0016831790559484526008835281842094845293825282208054938401815582529020018390555b831515600081815260076020908152604080832087845282528083206001600160a01b03871680855290835292819020859055805185815290519293879390927fe51457e789313604d11150ac77eade7d4c00b796eb6429e2de5bd9a6a9716a48928290030190a450505050565b6060806000613d3f848363ffffffff6135df16565b361015613d93576040805162461bcd60e51b815260206004820152601260248201527f496e76616c6964206f66666572206c6973740000000000000000000000000000604482015290519081900360640190fd5b602084013560208102806002026040870101361015613db157600080fd5b604051602082016002028101604052828152816040880160208301378095508160200181019050828152818260408901016020830137935060020260209081019250369150613e1690613e0a878563ffffffff6135df16565b9063ffffffff6135df16565b14613e68576040805162461bcd60e51b815260206004820152601360248201527f496e76616c69642064617461206c656e67746800000000000000000000000000604482015290519081900360640190fd5b6000835111613ebe576040805162461bcd60e51b815260206004820152601260248201527f496e76616c6964206f66666572206c6973740000000000000000000000000000604482015290519081900360640190fd5b50915091565b600082613ed357506000610f92565b82820282848281613ee057fe5b04146136395760405162461bcd60e51b815260040180806020018281038252602181526020018061519a6021913960400191505060405180910390fd5b600061363983836040518060400160405280601a81526020017f536166654d6174683a206469766973696f6e206279207a65726f000000000000815250614c74565b60008080613f7a620186a06120078a8763ffffffff613ec416565b9050613f8c888263ffffffff61364016565b9750600080866001600160a01b031663b80333ed8c613fb657600a546001600160a01b0316613fc3565b6009546001600160a01b03165b8d613fd9576009546001600160a01b0316613fe6565b600a546001600160a01b03165b8d60008e8e604051602001808281526020019150506040516020818303038152906040526040518763ffffffff1660e01b815260040180876001600160a01b03166001600160a01b03168152602001866001600160a01b03166001600160a01b03168152602001858152602001848152602001836001600160a01b03166001600160a01b0316815260200180602001828103825283818151815260200191508051906020019080838360005b838110156140aa578181015183820152602001614092565b50505050905090810190601f1680156140d75780820380516001836020036101000a031916815260200191505b50975050505050505050604080518083038186803b1580156140f857600080fd5b505afa15801561410c573d6000803e3d6000fd5b505050506040513d604081101561412257600080fd5b50805160209091015190925090506141408a8363ffffffff613ec416565b94506001600b54111561419757600a60149054906101000a900460ff1615158b15151461418057600b5461417b90869063ffffffff613f1d16565b614194565b600b5461419490869063ffffffff613ec416565b94505b6141a7858263ffffffff613f1d16565b94506141c58161200784670de0b6b3a764000063ffffffff613ec416565b9350505096509650969350505050565b600080336001600160a01b037f00000000000000000000000000000000000000000000000000000000000000001614806142175750336001600160a01b038516145b614268576040805162461bcd60e51b815260206004820152601860248201527f4e6f742066726f6d20726f75746572206f72206f776e65720000000000000000604482015290519081900360640190fd5b82151560009081526004602090815260408083206001600160a01b03881684529091528120805490915b8181101561433a5760008382815481106142a857fe5b906000526020600020015490506000600360008915151515815260200190815260200160002082815481106142d957fe5b906000526020600020906008020190506143008160020154886135df90919063ffffffff16565b96506143198160040154876135df90919063ffffffff16565b955061433089898484600201548560040154614814565b5050600101614292565b506000808661434a57858561434d565b84865b6009549193509150614369906001600160a01b03163384614393565b600a54614380906001600160a01b03163383614393565b614388614572565b505050509250929050565b604080518082018252601981527f7472616e7366657228616464726573732c75696e74323536290000000000000060209182015281516001600160a01b0385811660248301526044808301869052845180840390910181526064909201845291810180517bffffffffffffffffffffffffffffffffffffffffffffffffffffffff167fa9059cbb000000000000000000000000000000000000000000000000000000001781529251815160009460609489169392918291908083835b6020831061448c57805182527fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe0909201916020918201910161444f565b6001836020036101000a0380198251168184511680821785525050505050509050019150506000604051808303816000865af19150503d80600081146144ee576040519150601f19603f3d011682016040523d82523d6000602084013e6144f3565b606091505b5091509150818015614521575080511580614521575080806020019051602081101561451e57600080fd5b50515b61140e576040805162461bcd60e51b815260206004820152600f60248201527f5452414e534645525f4641494c45440000000000000000000000000000000000604482015290519081900360640190fd5b61457a610d6e565b600e55600d55600c55565b3b151590565b60008060608061459b60a4613d2a565b9150915060006145a961515d565b600954600a54604080517f069d188f0000000000000000000000000000000000000000000000000000000081526001600160a01b0393841660048201529183166024830152517f00000000000000000000000000000000000000000000000000000000000000009092169163069d188f91604480820192606092909190829003018186803b15801561463a57600080fd5b505afa15801561464e573d6000803e3d6000fd5b505050506040513d606081101561466457600080fd5b508051602080830151604090930151908401529082529150600080805b8651811015614753576146b086828151811061469957fe5b6020026020010151846135df90919063ffffffff16565b92506146ba61517b565b60006146d8670de0b6b3a76400006120078f8b8781518110611ff157fe5b90506146fb8e8d8b86815181106146eb57fe5b6020026020010151848b8b614cd9565b60408501526020840152808352614713908c906135df565b9a5061472d8260016020020151859063ffffffff6135df16565b935061474782600260200201518b9063ffffffff6135df16565b99505050600101614681565b5081670de0b6b3a7640000146147b0576040805162461bcd60e51b815260206004820152600d60248201527f496e76616c696420696e70757400000000000000000000000000000000000000604482015290519081900360640190fd5b604080518b8152602081018a90528082018390526060810189905290518c1515916001600160a01b038c16917fd55848f048ca7d5fd9869d414bb60a426c2b0125c8adb982fee123da3f841ed89181900360800190a3505050505050935093915050565b60008311614869576040805162461bcd60e51b815260206004820152601c60248201527f50726f7669646572206c6971756964697479206e6f7420666f756e6400000000604482015290519081900360640190fd5b831515600090815260036020526040812080548590811061488657fe5b6000918252602090912060089091020180549091506001600160a01b038781169116146148fa576040805162461bcd60e51b815260206004820152601160248201527f4e6f742066726f6d2070726f7669646572000000000000000000000000000000604482015290519081900360640190fd5b805474010000000000000000000000000000000000000000900460ff1680156149235750600083115b156149805742816007015410614980576040805162461bcd60e51b815260206004820152600b60248201527f4e6f742065787069726564000000000000000000000000000000000000000000604482015290519081900360640190fd5b6002810154614995908463ffffffff61364016565b600282015560048101546149af908363ffffffff61364016565b600482018190556002820154604080518681526020810186905280820192909252606082019290925290518591871515916001600160a01b038a16917f4036cb0ba867fe695e855b2d73d97fe96c1ff8c45e6490c12181cb5650be546e919081900360800190a4505050505050565b60008184841115614aad5760405162461bcd60e51b81526004018080602001828103825283818151815260200191508051906020019080838360005b83811015614a72578181015183820152602001614a5a565b50505050905090810190601f168015614a9f5780820380516001836020036101000a031916815260200191505b509250505060405180910390fd5b505050900390565b604080516001600160a01b0385811660248301528481166044830152606480830185905283518084039091018152608490920183526020820180517bffffffffffffffffffffffffffffffffffffffffffffffffffffffff167f23b872dd0000000000000000000000000000000000000000000000000000000017815292518251600094606094938a169392918291908083835b60208310614b8657805182527fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe09092019160209182019101614b49565b6001836020036101000a0380198251168184511680821785525050505050509050019150506000604051808303816000865af19150503d8060008114614be8576040519150601f19603f3d011682016040523d82523d6000602084013e614bed565b606091505b5091509150818015614c1b575080511580614c1b5750808060200190516020811015614c1857600080fd5b50515b614c6c576040805162461bcd60e51b815260206004820152601460248201527f5452414e534645525f46524f4d5f4641494c4544000000000000000000000000604482015290519081900360640190fd5b505050505050565b60008183614cc35760405162461bcd60e51b8152602060048201818152835160248401528351909283926044909101919085019080838360008315614a72578181015183820152602001614a5a565b506000838581614ccf57fe5b0495945050505050565b85151560009081526002602052604081205481908190871115614d43576040805162461bcd60e51b815260206004820152600f60248201527f4f66666572206e6f742065786973740000000000000000000000000000000000604482015290519081900360640190fd5b8815156000908152600360205260408120805489908110614d6057fe5b6000918252602090912060089091020180549091507501000000000000000000000000000000000000000000900460ff1680614dc9575089151560009081526006602090815260408083208b845282528083206001600160a01b038d16845290915290205460ff165b614e1a576040805162461bcd60e51b815260206004820152601560248201527f4e6f74206120617070726f766564207472616465720000000000000000000000604482015290519081900360640190fd5b8060060154421015614e73576040805162461bcd60e51b815260206004820152601360248201527f4f66666572206e6f7420626567696e2079657400000000000000000000000000604482015290519081900360640190fd5b8060070154421115614ecc576040805162461bcd60e51b815260206004820152600d60248201527f4f66666572206578706972656400000000000000000000000000000000000000604482015290519081900360640190fd5b600080614ee38c8a8d8d8c8c876020020151613f5f565b60208a015192985096509250614efa575087614f2e565b614f19620186a06120078960016020020151889063ffffffff613ec416565b9350614f2b898563ffffffff61364016565b90505b82547501000000000000000000000000000000000000000000900460ff16615034578b151560009081526007602090815260408083208d845282528083206001600160a01b038f16845290915290205480871115614fd3576040805162461bcd60e51b815260206004820152601a60248201527f416d6f756e7420657863656564656420616c6c6f636174696f6e000000000000604482015290519081900360640190fd5b614fe3818863ffffffff61364016565b600760008f15151515815260200190815260200160002060008d815260200190815260200160002060008e6001600160a01b03166001600160a01b0316815260200190815260200160002081905550505b826002015486111561508d576040805162461bcd60e51b815260206004820152601d60248201527f416d6f756e74206578636565647320617661696c61626c652066756e64000000604482015290519081900360640190fd5b60028301546150a2908763ffffffff61364016565b600284015560038301546150bc908763ffffffff6135df16565b600384015560048301546150d6908263ffffffff6135df16565b6004840181905583546002850154600386015460408051878152602081018c90528082018790526060810193909352608083019490945260a082015291518c928f1515926001600160a01b0316917fc045a4ee305a3d56e6553ecb3f7258e3aa52a574f2f2896e2151cb31300e90649181900360c00190a450505096509650969350505050565b60405180604001604052806002906020820280368337509192915050565b6040518060600160405280600390602082028036833750919291505056fe536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f77a2646970667358221220fa10c80d3c3778c4474fa13173ab8749db2c21eff29b719e1d9907e3370793e664736f6c634300060b0033a2646970667358221220aa4b22e69468473250eda563bec45d7c922019bbadf51f964794e20a55ca0fc864736f6c634300060b0033"
    };
});
define("@scom/scom-swap/contracts/oswap-openswap-contract/contracts/restricted/OSWAP_OtcPairCreator.ts", ["require", "exports", "@ijstech/eth-contract", "@scom/scom-swap/contracts/oswap-openswap-contract/contracts/restricted/OSWAP_OtcPairCreator.json.ts"], function (require, exports, eth_contract_42, OSWAP_OtcPairCreator_json_1) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.OSWAP_OtcPairCreator = void 0;
    class OSWAP_OtcPairCreator extends eth_contract_42.Contract {
        constructor(wallet, address) {
            super(wallet, address, OSWAP_OtcPairCreator_json_1.default.abi, OSWAP_OtcPairCreator_json_1.default.bytecode);
            this.assign();
        }
        deploy(options) {
            return this.__deploy([], options);
        }
        assign() {
            let createPair_send = async (salt, options) => {
                let result = await this.send('createPair', [this.wallet.utils.stringToBytes32(salt)], options);
                return result;
            };
            let createPair_call = async (salt, options) => {
                let result = await this.call('createPair', [this.wallet.utils.stringToBytes32(salt)], options);
                return result;
            };
            let createPair_txData = async (salt, options) => {
                let result = await this.txData('createPair', [this.wallet.utils.stringToBytes32(salt)], options);
                return result;
            };
            this.createPair = Object.assign(createPair_send, {
                call: createPair_call,
                txData: createPair_txData
            });
        }
    }
    OSWAP_OtcPairCreator._abi = OSWAP_OtcPairCreator_json_1.default.abi;
    exports.OSWAP_OtcPairCreator = OSWAP_OtcPairCreator;
});
define("@scom/scom-swap/contracts/oswap-openswap-contract/contracts/restricted/OSWAP_RestrictedPair1.json.ts", ["require", "exports"], function (require, exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    ///<amd-module name='@scom/scom-swap/contracts/oswap-openswap-contract/contracts/restricted/OSWAP_RestrictedPair1.json.ts'/> 
    exports.default = {
        "abi": [
            { "anonymous": false, "inputs": [{ "indexed": true, "internalType": "address", "name": "provider", "type": "address" }, { "indexed": true, "internalType": "bool", "name": "direction", "type": "bool" }, { "indexed": true, "internalType": "uint256", "name": "index", "type": "uint256" }, { "indexed": false, "internalType": "uint256", "name": "amount", "type": "uint256" }, { "indexed": false, "internalType": "uint256", "name": "newAmountBalance", "type": "uint256" }], "name": "AddLiquidity", "type": "event" },
            { "anonymous": false, "inputs": [{ "indexed": true, "internalType": "bool", "name": "direction", "type": "bool" }, { "indexed": true, "internalType": "uint256", "name": "offerIndex", "type": "uint256" }, { "indexed": true, "internalType": "address", "name": "trader", "type": "address" }, { "indexed": false, "internalType": "uint256", "name": "allocation", "type": "uint256" }], "name": "ApprovedTrader", "type": "event" },
            { "anonymous": false, "inputs": [{ "indexed": true, "internalType": "bool", "name": "direction", "type": "bool" }, { "indexed": true, "internalType": "uint256", "name": "index", "type": "uint256" }], "name": "Lock", "type": "event" },
            { "anonymous": false, "inputs": [{ "indexed": true, "internalType": "address", "name": "provider", "type": "address" }, { "indexed": true, "internalType": "bool", "name": "direction", "type": "bool" }, { "indexed": false, "internalType": "uint256", "name": "index", "type": "uint256" }, { "indexed": false, "internalType": "bool", "name": "allowAll", "type": "bool" }, { "indexed": false, "internalType": "uint256", "name": "restrictedPrice", "type": "uint256" }, { "indexed": false, "internalType": "uint256", "name": "startDate", "type": "uint256" }, { "indexed": false, "internalType": "uint256", "name": "expire", "type": "uint256" }], "name": "NewProviderOffer", "type": "event" },
            { "anonymous": false, "inputs": [{ "indexed": true, "internalType": "address", "name": "provider", "type": "address" }, { "indexed": true, "internalType": "bool", "name": "direction", "type": "bool" }, { "indexed": true, "internalType": "uint256", "name": "index", "type": "uint256" }, { "indexed": false, "internalType": "uint256", "name": "amountOut", "type": "uint256" }, { "indexed": false, "internalType": "uint256", "name": "receivingOut", "type": "uint256" }, { "indexed": false, "internalType": "uint256", "name": "newAmountBalance", "type": "uint256" }, { "indexed": false, "internalType": "uint256", "name": "newReceivingBalance", "type": "uint256" }], "name": "RemoveLiquidity", "type": "event" },
            { "anonymous": false, "inputs": [{ "indexed": true, "internalType": "address", "name": "to", "type": "address" }, { "indexed": true, "internalType": "bool", "name": "direction", "type": "bool" }, { "indexed": false, "internalType": "uint256", "name": "amountIn", "type": "uint256" }, { "indexed": false, "internalType": "uint256", "name": "amountOut", "type": "uint256" }, { "indexed": false, "internalType": "uint256", "name": "tradeFee", "type": "uint256" }, { "indexed": false, "internalType": "uint256", "name": "protocolFee", "type": "uint256" }], "name": "Swap", "type": "event" },
            { "anonymous": false, "inputs": [{ "indexed": true, "internalType": "address", "name": "provider", "type": "address" }, { "indexed": true, "internalType": "bool", "name": "direction", "type": "bool" }, { "indexed": true, "internalType": "uint256", "name": "index", "type": "uint256" }, { "indexed": false, "internalType": "uint256", "name": "price", "type": "uint256" }, { "indexed": false, "internalType": "uint256", "name": "amountOut", "type": "uint256" }, { "indexed": false, "internalType": "uint256", "name": "amountIn", "type": "uint256" }, { "indexed": false, "internalType": "uint256", "name": "newAmountBalance", "type": "uint256" }, { "indexed": false, "internalType": "uint256", "name": "newReceivingBalance", "type": "uint256" }], "name": "SwappedOneOffer", "type": "event" },
            { "inputs": [{ "internalType": "bool", "name": "direction", "type": "bool" }, { "internalType": "uint256", "name": "index", "type": "uint256" }], "name": "addLiquidity", "outputs": [], "stateMutability": "nonpayable", "type": "function" },
            { "inputs": [{ "internalType": "bool", "name": "", "type": "bool" }, { "internalType": "uint256", "name": "", "type": "uint256" }, { "internalType": "uint256", "name": "", "type": "uint256" }], "name": "approvedTrader", "outputs": [{ "internalType": "address", "name": "", "type": "address" }], "stateMutability": "view", "type": "function" },
            { "inputs": [], "name": "configStore", "outputs": [{ "internalType": "address", "name": "", "type": "address" }], "stateMutability": "view", "type": "function" },
            { "inputs": [{ "internalType": "bool", "name": "", "type": "bool" }], "name": "counter", "outputs": [{ "internalType": "uint256", "name": "", "type": "uint256" }], "stateMutability": "view", "type": "function" },
            { "inputs": [{ "internalType": "address", "name": "provider", "type": "address" }, { "internalType": "bool", "name": "direction", "type": "bool" }, { "internalType": "bool", "name": "allowAll", "type": "bool" }, { "internalType": "uint256", "name": "restrictedPrice", "type": "uint256" }, { "internalType": "uint256", "name": "startDate", "type": "uint256" }, { "internalType": "uint256", "name": "expire", "type": "uint256" }], "name": "createOrder", "outputs": [{ "internalType": "uint256", "name": "index", "type": "uint256" }], "stateMutability": "nonpayable", "type": "function" },
            { "inputs": [], "name": "factory", "outputs": [{ "internalType": "address", "name": "", "type": "address" }], "stateMutability": "view", "type": "function" },
            { "inputs": [], "name": "feeBalance", "outputs": [{ "internalType": "uint256", "name": "", "type": "uint256" }], "stateMutability": "view", "type": "function" },
            { "inputs": [{ "internalType": "address", "name": "", "type": "address" }, { "internalType": "uint256", "name": "", "type": "uint256" }, { "internalType": "address", "name": "", "type": "address" }, { "internalType": "bytes", "name": "", "type": "bytes" }], "name": "getAmountIn", "outputs": [{ "internalType": "uint256", "name": "", "type": "uint256" }], "stateMutability": "view", "type": "function" },
            { "inputs": [{ "internalType": "address", "name": "tokenIn", "type": "address" }, { "internalType": "uint256", "name": "amountIn", "type": "uint256" }, { "internalType": "address", "name": "trader", "type": "address" }, { "internalType": "bytes", "name": "", "type": "bytes" }], "name": "getAmountOut", "outputs": [{ "internalType": "uint256", "name": "amountOut", "type": "uint256" }], "stateMutability": "view", "type": "function" },
            { "inputs": [{ "internalType": "bool", "name": "direction", "type": "bool" }, { "internalType": "uint256", "name": "offerIndex", "type": "uint256" }, { "internalType": "uint256", "name": "start", "type": "uint256" }, { "internalType": "uint256", "name": "length", "type": "uint256" }], "name": "getApprovedTrader", "outputs": [{ "internalType": "address[]", "name": "trader", "type": "address[]" }, { "internalType": "uint256[]", "name": "allocation", "type": "uint256[]" }], "stateMutability": "view", "type": "function" },
            { "inputs": [{ "internalType": "bool", "name": "direction", "type": "bool" }, { "internalType": "uint256", "name": "offerIndex", "type": "uint256" }], "name": "getApprovedTraderLength", "outputs": [{ "internalType": "uint256", "name": "", "type": "uint256" }], "stateMutability": "view", "type": "function" },
            { "inputs": [], "name": "getBalances", "outputs": [{ "internalType": "uint256", "name": "", "type": "uint256" }, { "internalType": "uint256", "name": "", "type": "uint256" }, { "internalType": "uint256", "name": "", "type": "uint256" }], "stateMutability": "view", "type": "function" },
            { "inputs": [], "name": "getLastBalances", "outputs": [{ "internalType": "uint256", "name": "", "type": "uint256" }, { "internalType": "uint256", "name": "", "type": "uint256" }], "stateMutability": "view", "type": "function" },
            { "inputs": [{ "internalType": "bool", "name": "direction", "type": "bool" }, { "internalType": "uint256", "name": "start", "type": "uint256" }, { "internalType": "uint256", "name": "length", "type": "uint256" }], "name": "getOffers", "outputs": [{ "internalType": "uint256[]", "name": "index", "type": "uint256[]" }, { "internalType": "address[]", "name": "provider", "type": "address[]" }, { "internalType": "bool[]", "name": "lockedAndAllowAll", "type": "bool[]" }, { "internalType": "uint256[]", "name": "receiving", "type": "uint256[]" }, { "internalType": "uint256[]", "name": "amountAndPrice", "type": "uint256[]" }, { "internalType": "uint256[]", "name": "startDateAndExpire", "type": "uint256[]" }], "stateMutability": "view", "type": "function" },
            { "inputs": [{ "internalType": "address", "name": "_provider", "type": "address" }, { "internalType": "bool", "name": "direction", "type": "bool" }, { "internalType": "uint256", "name": "start", "type": "uint256" }, { "internalType": "uint256", "name": "length", "type": "uint256" }], "name": "getProviderOffer", "outputs": [{ "internalType": "uint256[]", "name": "index", "type": "uint256[]" }, { "internalType": "address[]", "name": "provider", "type": "address[]" }, { "internalType": "bool[]", "name": "lockedAndAllowAll", "type": "bool[]" }, { "internalType": "uint256[]", "name": "receiving", "type": "uint256[]" }, { "internalType": "uint256[]", "name": "amountAndPrice", "type": "uint256[]" }, { "internalType": "uint256[]", "name": "startDateAndExpire", "type": "uint256[]" }], "stateMutability": "view", "type": "function" },
            { "inputs": [{ "internalType": "address", "name": "provider", "type": "address" }, { "internalType": "bool", "name": "direction", "type": "bool" }], "name": "getProviderOfferIndexLength", "outputs": [{ "internalType": "uint256", "name": "length", "type": "uint256" }], "stateMutability": "view", "type": "function" },
            { "inputs": [{ "internalType": "address", "name": "trader", "type": "address" }, { "internalType": "bool", "name": "direction", "type": "bool" }, { "internalType": "uint256", "name": "start", "type": "uint256" }, { "internalType": "uint256", "name": "length", "type": "uint256" }], "name": "getTraderOffer", "outputs": [{ "internalType": "uint256[]", "name": "index", "type": "uint256[]" }, { "internalType": "address[]", "name": "provider", "type": "address[]" }, { "internalType": "bool[]", "name": "lockedAndAllowAll", "type": "bool[]" }, { "internalType": "uint256[]", "name": "receiving", "type": "uint256[]" }, { "internalType": "uint256[]", "name": "amountAndPrice", "type": "uint256[]" }, { "internalType": "uint256[]", "name": "startDateAndExpire", "type": "uint256[]" }], "stateMutability": "view", "type": "function" },
            { "inputs": [], "name": "govToken", "outputs": [{ "internalType": "address", "name": "", "type": "address" }], "stateMutability": "view", "type": "function" },
            { "inputs": [], "name": "governance", "outputs": [{ "internalType": "address", "name": "", "type": "address" }], "stateMutability": "view", "type": "function" },
            { "inputs": [{ "internalType": "address", "name": "_token0", "type": "address" }, { "internalType": "address", "name": "_token1", "type": "address" }], "name": "initialize", "outputs": [], "stateMutability": "nonpayable", "type": "function" },
            { "inputs": [{ "internalType": "bool", "name": "", "type": "bool" }, { "internalType": "uint256", "name": "", "type": "uint256" }, { "internalType": "address", "name": "", "type": "address" }], "name": "isApprovedTrader", "outputs": [{ "internalType": "bool", "name": "", "type": "bool" }], "stateMutability": "view", "type": "function" },
            { "inputs": [], "name": "isLive", "outputs": [{ "internalType": "bool", "name": "", "type": "bool" }], "stateMutability": "view", "type": "function" },
            { "inputs": [], "name": "lastGovBalance", "outputs": [{ "internalType": "uint256", "name": "", "type": "uint256" }], "stateMutability": "view", "type": "function" },
            { "inputs": [], "name": "lastToken0Balance", "outputs": [{ "internalType": "uint256", "name": "", "type": "uint256" }], "stateMutability": "view", "type": "function" },
            { "inputs": [], "name": "lastToken1Balance", "outputs": [{ "internalType": "uint256", "name": "", "type": "uint256" }], "stateMutability": "view", "type": "function" },
            { "inputs": [{ "internalType": "bool", "name": "direction", "type": "bool" }, { "internalType": "uint256", "name": "index", "type": "uint256" }], "name": "lockOffer", "outputs": [], "stateMutability": "nonpayable", "type": "function" },
            { "inputs": [{ "internalType": "bool", "name": "", "type": "bool" }, { "internalType": "uint256", "name": "", "type": "uint256" }], "name": "offers", "outputs": [{ "internalType": "address", "name": "provider", "type": "address" }, { "internalType": "bool", "name": "locked", "type": "bool" }, { "internalType": "bool", "name": "allowAll", "type": "bool" }, { "internalType": "uint256", "name": "amount", "type": "uint256" }, { "internalType": "uint256", "name": "receiving", "type": "uint256" }, { "internalType": "uint256", "name": "restrictedPrice", "type": "uint256" }, { "internalType": "uint256", "name": "startDate", "type": "uint256" }, { "internalType": "uint256", "name": "expire", "type": "uint256" }], "stateMutability": "view", "type": "function" },
            { "inputs": [], "name": "protocolFeeBalance0", "outputs": [{ "internalType": "uint256", "name": "", "type": "uint256" }], "stateMutability": "view", "type": "function" },
            { "inputs": [], "name": "protocolFeeBalance1", "outputs": [{ "internalType": "uint256", "name": "", "type": "uint256" }], "stateMutability": "view", "type": "function" },
            { "inputs": [{ "internalType": "bool", "name": "", "type": "bool" }, { "internalType": "address", "name": "", "type": "address" }, { "internalType": "uint256", "name": "", "type": "uint256" }], "name": "providerOfferIndex", "outputs": [{ "internalType": "uint256", "name": "", "type": "uint256" }], "stateMutability": "view", "type": "function" },
            { "inputs": [], "name": "redeemProtocolFee", "outputs": [], "stateMutability": "nonpayable", "type": "function" },
            { "inputs": [{ "internalType": "address", "name": "provider", "type": "address" }], "name": "removeAllLiquidity", "outputs": [{ "internalType": "uint256", "name": "amount0", "type": "uint256" }, { "internalType": "uint256", "name": "amount1", "type": "uint256" }], "stateMutability": "nonpayable", "type": "function" },
            { "inputs": [{ "internalType": "address", "name": "provider", "type": "address" }, { "internalType": "bool", "name": "direction", "type": "bool" }], "name": "removeAllLiquidity1D", "outputs": [{ "internalType": "uint256", "name": "totalAmount", "type": "uint256" }, { "internalType": "uint256", "name": "totalReceiving", "type": "uint256" }], "stateMutability": "nonpayable", "type": "function" },
            { "inputs": [{ "internalType": "address", "name": "provider", "type": "address" }, { "internalType": "bool", "name": "direction", "type": "bool" }, { "internalType": "uint256", "name": "index", "type": "uint256" }, { "internalType": "uint256", "name": "amountOut", "type": "uint256" }, { "internalType": "uint256", "name": "receivingOut", "type": "uint256" }], "name": "removeLiquidity", "outputs": [], "stateMutability": "nonpayable", "type": "function" },
            { "inputs": [], "name": "restrictedLiquidityProvider", "outputs": [{ "internalType": "address", "name": "", "type": "address" }], "stateMutability": "view", "type": "function" },
            { "inputs": [], "name": "scaleDirection", "outputs": [{ "internalType": "bool", "name": "", "type": "bool" }], "stateMutability": "view", "type": "function" },
            { "inputs": [], "name": "scaler", "outputs": [{ "internalType": "uint256", "name": "", "type": "uint256" }], "stateMutability": "view", "type": "function" },
            { "inputs": [{ "internalType": "bool", "name": "direction", "type": "bool" }, { "internalType": "uint256", "name": "offerIndex", "type": "uint256" }, { "internalType": "address", "name": "trader", "type": "address" }, { "internalType": "uint256", "name": "allocation", "type": "uint256" }], "name": "setApprovedTrader", "outputs": [], "stateMutability": "nonpayable", "type": "function" },
            { "inputs": [{ "internalType": "bool", "name": "_isLive", "type": "bool" }], "name": "setLive", "outputs": [], "stateMutability": "nonpayable", "type": "function" },
            { "inputs": [{ "internalType": "bool", "name": "direction", "type": "bool" }, { "internalType": "uint256", "name": "offerIndex", "type": "uint256" }, { "internalType": "address[]", "name": "trader", "type": "address[]" }, { "internalType": "uint256[]", "name": "allocation", "type": "uint256[]" }], "name": "setMultipleApprovedTraders", "outputs": [], "stateMutability": "nonpayable", "type": "function" },
            { "inputs": [{ "internalType": "uint256", "name": "amount0Out", "type": "uint256" }, { "internalType": "uint256", "name": "amount1Out", "type": "uint256" }, { "internalType": "address", "name": "to", "type": "address" }, { "internalType": "address", "name": "trader", "type": "address" }, { "internalType": "bytes", "name": "", "type": "bytes" }], "name": "swap", "outputs": [], "stateMutability": "nonpayable", "type": "function" },
            { "inputs": [], "name": "sync", "outputs": [], "stateMutability": "nonpayable", "type": "function" },
            { "inputs": [], "name": "token0", "outputs": [{ "internalType": "address", "name": "", "type": "address" }], "stateMutability": "view", "type": "function" },
            { "inputs": [], "name": "token1", "outputs": [{ "internalType": "address", "name": "", "type": "address" }], "stateMutability": "view", "type": "function" },
            { "inputs": [{ "internalType": "bool", "name": "", "type": "bool" }, { "internalType": "uint256", "name": "", "type": "uint256" }, { "internalType": "address", "name": "", "type": "address" }], "name": "traderAllocation", "outputs": [{ "internalType": "uint256", "name": "", "type": "uint256" }], "stateMutability": "view", "type": "function" },
            { "inputs": [{ "internalType": "bool", "name": "", "type": "bool" }, { "internalType": "address", "name": "", "type": "address" }, { "internalType": "uint256", "name": "", "type": "uint256" }], "name": "traderOffer", "outputs": [{ "internalType": "uint256", "name": "", "type": "uint256" }], "stateMutability": "view", "type": "function" },
            { "inputs": [], "name": "whitelistFactory", "outputs": [{ "internalType": "address", "name": "", "type": "address" }], "stateMutability": "view", "type": "function" }
        ],
        "bytecode": ""
    };
});
define("@scom/scom-swap/contracts/oswap-openswap-contract/contracts/restricted/OSWAP_RestrictedPair1.ts", ["require", "exports", "@ijstech/eth-contract", "@scom/scom-swap/contracts/oswap-openswap-contract/contracts/restricted/OSWAP_RestrictedPair1.json.ts"], function (require, exports, eth_contract_43, OSWAP_RestrictedPair1_json_1) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.OSWAP_RestrictedPair1 = void 0;
    class OSWAP_RestrictedPair1 extends eth_contract_43.Contract {
        constructor(wallet, address) {
            super(wallet, address, OSWAP_RestrictedPair1_json_1.default.abi, OSWAP_RestrictedPair1_json_1.default.bytecode);
            this.assign();
        }
        deploy(options) {
            return this.__deploy([], options);
        }
        parseAddLiquidityEvent(receipt) {
            return this.parseEvents(receipt, "AddLiquidity").map(e => this.decodeAddLiquidityEvent(e));
        }
        decodeAddLiquidityEvent(event) {
            let result = event.data;
            return {
                provider: result.provider,
                direction: result.direction,
                index: new eth_contract_43.BigNumber(result.index),
                amount: new eth_contract_43.BigNumber(result.amount),
                newAmountBalance: new eth_contract_43.BigNumber(result.newAmountBalance),
                _event: event
            };
        }
        parseApprovedTraderEvent(receipt) {
            return this.parseEvents(receipt, "ApprovedTrader").map(e => this.decodeApprovedTraderEvent(e));
        }
        decodeApprovedTraderEvent(event) {
            let result = event.data;
            return {
                direction: result.direction,
                offerIndex: new eth_contract_43.BigNumber(result.offerIndex),
                trader: result.trader,
                allocation: new eth_contract_43.BigNumber(result.allocation),
                _event: event
            };
        }
        parseLockEvent(receipt) {
            return this.parseEvents(receipt, "Lock").map(e => this.decodeLockEvent(e));
        }
        decodeLockEvent(event) {
            let result = event.data;
            return {
                direction: result.direction,
                index: new eth_contract_43.BigNumber(result.index),
                _event: event
            };
        }
        parseNewProviderOfferEvent(receipt) {
            return this.parseEvents(receipt, "NewProviderOffer").map(e => this.decodeNewProviderOfferEvent(e));
        }
        decodeNewProviderOfferEvent(event) {
            let result = event.data;
            return {
                provider: result.provider,
                direction: result.direction,
                index: new eth_contract_43.BigNumber(result.index),
                allowAll: result.allowAll,
                restrictedPrice: new eth_contract_43.BigNumber(result.restrictedPrice),
                startDate: new eth_contract_43.BigNumber(result.startDate),
                expire: new eth_contract_43.BigNumber(result.expire),
                _event: event
            };
        }
        parseRemoveLiquidityEvent(receipt) {
            return this.parseEvents(receipt, "RemoveLiquidity").map(e => this.decodeRemoveLiquidityEvent(e));
        }
        decodeRemoveLiquidityEvent(event) {
            let result = event.data;
            return {
                provider: result.provider,
                direction: result.direction,
                index: new eth_contract_43.BigNumber(result.index),
                amountOut: new eth_contract_43.BigNumber(result.amountOut),
                receivingOut: new eth_contract_43.BigNumber(result.receivingOut),
                newAmountBalance: new eth_contract_43.BigNumber(result.newAmountBalance),
                newReceivingBalance: new eth_contract_43.BigNumber(result.newReceivingBalance),
                _event: event
            };
        }
        parseSwapEvent(receipt) {
            return this.parseEvents(receipt, "Swap").map(e => this.decodeSwapEvent(e));
        }
        decodeSwapEvent(event) {
            let result = event.data;
            return {
                to: result.to,
                direction: result.direction,
                amountIn: new eth_contract_43.BigNumber(result.amountIn),
                amountOut: new eth_contract_43.BigNumber(result.amountOut),
                tradeFee: new eth_contract_43.BigNumber(result.tradeFee),
                protocolFee: new eth_contract_43.BigNumber(result.protocolFee),
                _event: event
            };
        }
        parseSwappedOneOfferEvent(receipt) {
            return this.parseEvents(receipt, "SwappedOneOffer").map(e => this.decodeSwappedOneOfferEvent(e));
        }
        decodeSwappedOneOfferEvent(event) {
            let result = event.data;
            return {
                provider: result.provider,
                direction: result.direction,
                index: new eth_contract_43.BigNumber(result.index),
                price: new eth_contract_43.BigNumber(result.price),
                amountOut: new eth_contract_43.BigNumber(result.amountOut),
                amountIn: new eth_contract_43.BigNumber(result.amountIn),
                newAmountBalance: new eth_contract_43.BigNumber(result.newAmountBalance),
                newReceivingBalance: new eth_contract_43.BigNumber(result.newReceivingBalance),
                _event: event
            };
        }
        assign() {
            let approvedTraderParams = (params) => [params.param1, this.wallet.utils.toString(params.param2), this.wallet.utils.toString(params.param3)];
            let approvedTrader_call = async (params, options) => {
                let result = await this.call('approvedTrader', approvedTraderParams(params), options);
                return result;
            };
            this.approvedTrader = approvedTrader_call;
            let configStore_call = async (options) => {
                let result = await this.call('configStore', [], options);
                return result;
            };
            this.configStore = configStore_call;
            let counter_call = async (param1, options) => {
                let result = await this.call('counter', [param1], options);
                return new eth_contract_43.BigNumber(result);
            };
            this.counter = counter_call;
            let factory_call = async (options) => {
                let result = await this.call('factory', [], options);
                return result;
            };
            this.factory = factory_call;
            let feeBalance_call = async (options) => {
                let result = await this.call('feeBalance', [], options);
                return new eth_contract_43.BigNumber(result);
            };
            this.feeBalance = feeBalance_call;
            let getAmountInParams = (params) => [params.param1, this.wallet.utils.toString(params.param2), params.param3, this.wallet.utils.stringToBytes(params.param4)];
            let getAmountIn_call = async (params, options) => {
                let result = await this.call('getAmountIn', getAmountInParams(params), options);
                return new eth_contract_43.BigNumber(result);
            };
            this.getAmountIn = getAmountIn_call;
            let getAmountOutParams = (params) => [params.tokenIn, this.wallet.utils.toString(params.amountIn), params.trader, this.wallet.utils.stringToBytes(params.param4)];
            let getAmountOut_call = async (params, options) => {
                let result = await this.call('getAmountOut', getAmountOutParams(params), options);
                return new eth_contract_43.BigNumber(result);
            };
            this.getAmountOut = getAmountOut_call;
            let getApprovedTraderParams = (params) => [params.direction, this.wallet.utils.toString(params.offerIndex), this.wallet.utils.toString(params.start), this.wallet.utils.toString(params.length)];
            let getApprovedTrader_call = async (params, options) => {
                let result = await this.call('getApprovedTrader', getApprovedTraderParams(params), options);
                return {
                    trader: result.trader,
                    allocation: result.allocation.map(e => new eth_contract_43.BigNumber(e))
                };
            };
            this.getApprovedTrader = getApprovedTrader_call;
            let getApprovedTraderLengthParams = (params) => [params.direction, this.wallet.utils.toString(params.offerIndex)];
            let getApprovedTraderLength_call = async (params, options) => {
                let result = await this.call('getApprovedTraderLength', getApprovedTraderLengthParams(params), options);
                return new eth_contract_43.BigNumber(result);
            };
            this.getApprovedTraderLength = getApprovedTraderLength_call;
            let getBalances_call = async (options) => {
                let result = await this.call('getBalances', [], options);
                return {
                    param1: new eth_contract_43.BigNumber(result[0]),
                    param2: new eth_contract_43.BigNumber(result[1]),
                    param3: new eth_contract_43.BigNumber(result[2])
                };
            };
            this.getBalances = getBalances_call;
            let getLastBalances_call = async (options) => {
                let result = await this.call('getLastBalances', [], options);
                return {
                    param1: new eth_contract_43.BigNumber(result[0]),
                    param2: new eth_contract_43.BigNumber(result[1])
                };
            };
            this.getLastBalances = getLastBalances_call;
            let getOffersParams = (params) => [params.direction, this.wallet.utils.toString(params.start), this.wallet.utils.toString(params.length)];
            let getOffers_call = async (params, options) => {
                let result = await this.call('getOffers', getOffersParams(params), options);
                return {
                    index: result.index.map(e => new eth_contract_43.BigNumber(e)),
                    provider: result.provider,
                    lockedAndAllowAll: result.lockedAndAllowAll,
                    receiving: result.receiving.map(e => new eth_contract_43.BigNumber(e)),
                    amountAndPrice: result.amountAndPrice.map(e => new eth_contract_43.BigNumber(e)),
                    startDateAndExpire: result.startDateAndExpire.map(e => new eth_contract_43.BigNumber(e))
                };
            };
            this.getOffers = getOffers_call;
            let getProviderOfferParams = (params) => [params.provider, params.direction, this.wallet.utils.toString(params.start), this.wallet.utils.toString(params.length)];
            let getProviderOffer_call = async (params, options) => {
                let result = await this.call('getProviderOffer', getProviderOfferParams(params), options);
                return {
                    index: result.index.map(e => new eth_contract_43.BigNumber(e)),
                    provider: result.provider,
                    lockedAndAllowAll: result.lockedAndAllowAll,
                    receiving: result.receiving.map(e => new eth_contract_43.BigNumber(e)),
                    amountAndPrice: result.amountAndPrice.map(e => new eth_contract_43.BigNumber(e)),
                    startDateAndExpire: result.startDateAndExpire.map(e => new eth_contract_43.BigNumber(e))
                };
            };
            this.getProviderOffer = getProviderOffer_call;
            let getProviderOfferIndexLengthParams = (params) => [params.provider, params.direction];
            let getProviderOfferIndexLength_call = async (params, options) => {
                let result = await this.call('getProviderOfferIndexLength', getProviderOfferIndexLengthParams(params), options);
                return new eth_contract_43.BigNumber(result);
            };
            this.getProviderOfferIndexLength = getProviderOfferIndexLength_call;
            let getTraderOfferParams = (params) => [params.trader, params.direction, this.wallet.utils.toString(params.start), this.wallet.utils.toString(params.length)];
            let getTraderOffer_call = async (params, options) => {
                let result = await this.call('getTraderOffer', getTraderOfferParams(params), options);
                return {
                    index: result.index.map(e => new eth_contract_43.BigNumber(e)),
                    provider: result.provider,
                    lockedAndAllowAll: result.lockedAndAllowAll,
                    receiving: result.receiving.map(e => new eth_contract_43.BigNumber(e)),
                    amountAndPrice: result.amountAndPrice.map(e => new eth_contract_43.BigNumber(e)),
                    startDateAndExpire: result.startDateAndExpire.map(e => new eth_contract_43.BigNumber(e))
                };
            };
            this.getTraderOffer = getTraderOffer_call;
            let govToken_call = async (options) => {
                let result = await this.call('govToken', [], options);
                return result;
            };
            this.govToken = govToken_call;
            let governance_call = async (options) => {
                let result = await this.call('governance', [], options);
                return result;
            };
            this.governance = governance_call;
            let isApprovedTraderParams = (params) => [params.param1, this.wallet.utils.toString(params.param2), params.param3];
            let isApprovedTrader_call = async (params, options) => {
                let result = await this.call('isApprovedTrader', isApprovedTraderParams(params), options);
                return result;
            };
            this.isApprovedTrader = isApprovedTrader_call;
            let isLive_call = async (options) => {
                let result = await this.call('isLive', [], options);
                return result;
            };
            this.isLive = isLive_call;
            let lastGovBalance_call = async (options) => {
                let result = await this.call('lastGovBalance', [], options);
                return new eth_contract_43.BigNumber(result);
            };
            this.lastGovBalance = lastGovBalance_call;
            let lastToken0Balance_call = async (options) => {
                let result = await this.call('lastToken0Balance', [], options);
                return new eth_contract_43.BigNumber(result);
            };
            this.lastToken0Balance = lastToken0Balance_call;
            let lastToken1Balance_call = async (options) => {
                let result = await this.call('lastToken1Balance', [], options);
                return new eth_contract_43.BigNumber(result);
            };
            this.lastToken1Balance = lastToken1Balance_call;
            let offersParams = (params) => [params.param1, this.wallet.utils.toString(params.param2)];
            let offers_call = async (params, options) => {
                let result = await this.call('offers', offersParams(params), options);
                return {
                    provider: result.provider,
                    locked: result.locked,
                    allowAll: result.allowAll,
                    amount: new eth_contract_43.BigNumber(result.amount),
                    receiving: new eth_contract_43.BigNumber(result.receiving),
                    restrictedPrice: new eth_contract_43.BigNumber(result.restrictedPrice),
                    startDate: new eth_contract_43.BigNumber(result.startDate),
                    expire: new eth_contract_43.BigNumber(result.expire)
                };
            };
            this.offers = offers_call;
            let protocolFeeBalance0_call = async (options) => {
                let result = await this.call('protocolFeeBalance0', [], options);
                return new eth_contract_43.BigNumber(result);
            };
            this.protocolFeeBalance0 = protocolFeeBalance0_call;
            let protocolFeeBalance1_call = async (options) => {
                let result = await this.call('protocolFeeBalance1', [], options);
                return new eth_contract_43.BigNumber(result);
            };
            this.protocolFeeBalance1 = protocolFeeBalance1_call;
            let providerOfferIndexParams = (params) => [params.param1, params.param2, this.wallet.utils.toString(params.param3)];
            let providerOfferIndex_call = async (params, options) => {
                let result = await this.call('providerOfferIndex', providerOfferIndexParams(params), options);
                return new eth_contract_43.BigNumber(result);
            };
            this.providerOfferIndex = providerOfferIndex_call;
            let restrictedLiquidityProvider_call = async (options) => {
                let result = await this.call('restrictedLiquidityProvider', [], options);
                return result;
            };
            this.restrictedLiquidityProvider = restrictedLiquidityProvider_call;
            let scaleDirection_call = async (options) => {
                let result = await this.call('scaleDirection', [], options);
                return result;
            };
            this.scaleDirection = scaleDirection_call;
            let scaler_call = async (options) => {
                let result = await this.call('scaler', [], options);
                return new eth_contract_43.BigNumber(result);
            };
            this.scaler = scaler_call;
            let token0_call = async (options) => {
                let result = await this.call('token0', [], options);
                return result;
            };
            this.token0 = token0_call;
            let token1_call = async (options) => {
                let result = await this.call('token1', [], options);
                return result;
            };
            this.token1 = token1_call;
            let traderAllocationParams = (params) => [params.param1, this.wallet.utils.toString(params.param2), params.param3];
            let traderAllocation_call = async (params, options) => {
                let result = await this.call('traderAllocation', traderAllocationParams(params), options);
                return new eth_contract_43.BigNumber(result);
            };
            this.traderAllocation = traderAllocation_call;
            let traderOfferParams = (params) => [params.param1, params.param2, this.wallet.utils.toString(params.param3)];
            let traderOffer_call = async (params, options) => {
                let result = await this.call('traderOffer', traderOfferParams(params), options);
                return new eth_contract_43.BigNumber(result);
            };
            this.traderOffer = traderOffer_call;
            let whitelistFactory_call = async (options) => {
                let result = await this.call('whitelistFactory', [], options);
                return result;
            };
            this.whitelistFactory = whitelistFactory_call;
            let addLiquidityParams = (params) => [params.direction, this.wallet.utils.toString(params.index)];
            let addLiquidity_send = async (params, options) => {
                let result = await this.send('addLiquidity', addLiquidityParams(params), options);
                return result;
            };
            let addLiquidity_call = async (params, options) => {
                let result = await this.call('addLiquidity', addLiquidityParams(params), options);
                return;
            };
            let addLiquidity_txData = async (params, options) => {
                let result = await this.txData('addLiquidity', addLiquidityParams(params), options);
                return result;
            };
            this.addLiquidity = Object.assign(addLiquidity_send, {
                call: addLiquidity_call,
                txData: addLiquidity_txData
            });
            let createOrderParams = (params) => [params.provider, params.direction, params.allowAll, this.wallet.utils.toString(params.restrictedPrice), this.wallet.utils.toString(params.startDate), this.wallet.utils.toString(params.expire)];
            let createOrder_send = async (params, options) => {
                let result = await this.send('createOrder', createOrderParams(params), options);
                return result;
            };
            let createOrder_call = async (params, options) => {
                let result = await this.call('createOrder', createOrderParams(params), options);
                return new eth_contract_43.BigNumber(result);
            };
            let createOrder_txData = async (params, options) => {
                let result = await this.txData('createOrder', createOrderParams(params), options);
                return result;
            };
            this.createOrder = Object.assign(createOrder_send, {
                call: createOrder_call,
                txData: createOrder_txData
            });
            let initializeParams = (params) => [params.token0, params.token1];
            let initialize_send = async (params, options) => {
                let result = await this.send('initialize', initializeParams(params), options);
                return result;
            };
            let initialize_call = async (params, options) => {
                let result = await this.call('initialize', initializeParams(params), options);
                return;
            };
            let initialize_txData = async (params, options) => {
                let result = await this.txData('initialize', initializeParams(params), options);
                return result;
            };
            this.initialize = Object.assign(initialize_send, {
                call: initialize_call,
                txData: initialize_txData
            });
            let lockOfferParams = (params) => [params.direction, this.wallet.utils.toString(params.index)];
            let lockOffer_send = async (params, options) => {
                let result = await this.send('lockOffer', lockOfferParams(params), options);
                return result;
            };
            let lockOffer_call = async (params, options) => {
                let result = await this.call('lockOffer', lockOfferParams(params), options);
                return;
            };
            let lockOffer_txData = async (params, options) => {
                let result = await this.txData('lockOffer', lockOfferParams(params), options);
                return result;
            };
            this.lockOffer = Object.assign(lockOffer_send, {
                call: lockOffer_call,
                txData: lockOffer_txData
            });
            let redeemProtocolFee_send = async (options) => {
                let result = await this.send('redeemProtocolFee', [], options);
                return result;
            };
            let redeemProtocolFee_call = async (options) => {
                let result = await this.call('redeemProtocolFee', [], options);
                return;
            };
            let redeemProtocolFee_txData = async (options) => {
                let result = await this.txData('redeemProtocolFee', [], options);
                return result;
            };
            this.redeemProtocolFee = Object.assign(redeemProtocolFee_send, {
                call: redeemProtocolFee_call,
                txData: redeemProtocolFee_txData
            });
            let removeAllLiquidity_send = async (provider, options) => {
                let result = await this.send('removeAllLiquidity', [provider], options);
                return result;
            };
            let removeAllLiquidity_call = async (provider, options) => {
                let result = await this.call('removeAllLiquidity', [provider], options);
                return {
                    amount0: new eth_contract_43.BigNumber(result.amount0),
                    amount1: new eth_contract_43.BigNumber(result.amount1)
                };
            };
            let removeAllLiquidity_txData = async (provider, options) => {
                let result = await this.txData('removeAllLiquidity', [provider], options);
                return result;
            };
            this.removeAllLiquidity = Object.assign(removeAllLiquidity_send, {
                call: removeAllLiquidity_call,
                txData: removeAllLiquidity_txData
            });
            let removeAllLiquidity1DParams = (params) => [params.provider, params.direction];
            let removeAllLiquidity1D_send = async (params, options) => {
                let result = await this.send('removeAllLiquidity1D', removeAllLiquidity1DParams(params), options);
                return result;
            };
            let removeAllLiquidity1D_call = async (params, options) => {
                let result = await this.call('removeAllLiquidity1D', removeAllLiquidity1DParams(params), options);
                return {
                    totalAmount: new eth_contract_43.BigNumber(result.totalAmount),
                    totalReceiving: new eth_contract_43.BigNumber(result.totalReceiving)
                };
            };
            let removeAllLiquidity1D_txData = async (params, options) => {
                let result = await this.txData('removeAllLiquidity1D', removeAllLiquidity1DParams(params), options);
                return result;
            };
            this.removeAllLiquidity1D = Object.assign(removeAllLiquidity1D_send, {
                call: removeAllLiquidity1D_call,
                txData: removeAllLiquidity1D_txData
            });
            let removeLiquidityParams = (params) => [params.provider, params.direction, this.wallet.utils.toString(params.index), this.wallet.utils.toString(params.amountOut), this.wallet.utils.toString(params.receivingOut)];
            let removeLiquidity_send = async (params, options) => {
                let result = await this.send('removeLiquidity', removeLiquidityParams(params), options);
                return result;
            };
            let removeLiquidity_call = async (params, options) => {
                let result = await this.call('removeLiquidity', removeLiquidityParams(params), options);
                return;
            };
            let removeLiquidity_txData = async (params, options) => {
                let result = await this.txData('removeLiquidity', removeLiquidityParams(params), options);
                return result;
            };
            this.removeLiquidity = Object.assign(removeLiquidity_send, {
                call: removeLiquidity_call,
                txData: removeLiquidity_txData
            });
            let setApprovedTraderParams = (params) => [params.direction, this.wallet.utils.toString(params.offerIndex), params.trader, this.wallet.utils.toString(params.allocation)];
            let setApprovedTrader_send = async (params, options) => {
                let result = await this.send('setApprovedTrader', setApprovedTraderParams(params), options);
                return result;
            };
            let setApprovedTrader_call = async (params, options) => {
                let result = await this.call('setApprovedTrader', setApprovedTraderParams(params), options);
                return;
            };
            let setApprovedTrader_txData = async (params, options) => {
                let result = await this.txData('setApprovedTrader', setApprovedTraderParams(params), options);
                return result;
            };
            this.setApprovedTrader = Object.assign(setApprovedTrader_send, {
                call: setApprovedTrader_call,
                txData: setApprovedTrader_txData
            });
            let setLive_send = async (isLive, options) => {
                let result = await this.send('setLive', [isLive], options);
                return result;
            };
            let setLive_call = async (isLive, options) => {
                let result = await this.call('setLive', [isLive], options);
                return;
            };
            let setLive_txData = async (isLive, options) => {
                let result = await this.txData('setLive', [isLive], options);
                return result;
            };
            this.setLive = Object.assign(setLive_send, {
                call: setLive_call,
                txData: setLive_txData
            });
            let setMultipleApprovedTradersParams = (params) => [params.direction, this.wallet.utils.toString(params.offerIndex), params.trader, this.wallet.utils.toString(params.allocation)];
            let setMultipleApprovedTraders_send = async (params, options) => {
                let result = await this.send('setMultipleApprovedTraders', setMultipleApprovedTradersParams(params), options);
                return result;
            };
            let setMultipleApprovedTraders_call = async (params, options) => {
                let result = await this.call('setMultipleApprovedTraders', setMultipleApprovedTradersParams(params), options);
                return;
            };
            let setMultipleApprovedTraders_txData = async (params, options) => {
                let result = await this.txData('setMultipleApprovedTraders', setMultipleApprovedTradersParams(params), options);
                return result;
            };
            this.setMultipleApprovedTraders = Object.assign(setMultipleApprovedTraders_send, {
                call: setMultipleApprovedTraders_call,
                txData: setMultipleApprovedTraders_txData
            });
            let swapParams = (params) => [this.wallet.utils.toString(params.amount0Out), this.wallet.utils.toString(params.amount1Out), params.to, params.trader, this.wallet.utils.stringToBytes(params.param5)];
            let swap_send = async (params, options) => {
                let result = await this.send('swap', swapParams(params), options);
                return result;
            };
            let swap_call = async (params, options) => {
                let result = await this.call('swap', swapParams(params), options);
                return;
            };
            let swap_txData = async (params, options) => {
                let result = await this.txData('swap', swapParams(params), options);
                return result;
            };
            this.swap = Object.assign(swap_send, {
                call: swap_call,
                txData: swap_txData
            });
            let sync_send = async (options) => {
                let result = await this.send('sync', [], options);
                return result;
            };
            let sync_call = async (options) => {
                let result = await this.call('sync', [], options);
                return;
            };
            let sync_txData = async (options) => {
                let result = await this.txData('sync', [], options);
                return result;
            };
            this.sync = Object.assign(sync_send, {
                call: sync_call,
                txData: sync_txData
            });
        }
    }
    OSWAP_RestrictedPair1._abi = OSWAP_RestrictedPair1_json_1.default.abi;
    exports.OSWAP_RestrictedPair1 = OSWAP_RestrictedPair1;
});
define("@scom/scom-swap/contracts/oswap-openswap-contract/contracts/restricted/OSWAP_RestrictedPair3.json.ts", ["require", "exports"], function (require, exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    ///<amd-module name='@scom/scom-swap/contracts/oswap-openswap-contract/contracts/restricted/OSWAP_RestrictedPair3.json.ts'/> 
    exports.default = {
        "abi": [
            { "anonymous": false, "inputs": [{ "indexed": true, "internalType": "address", "name": "provider", "type": "address" }, { "indexed": true, "internalType": "bool", "name": "direction", "type": "bool" }, { "indexed": true, "internalType": "uint256", "name": "index", "type": "uint256" }, { "indexed": false, "internalType": "uint256", "name": "amount", "type": "uint256" }, { "indexed": false, "internalType": "uint256", "name": "newAmountBalance", "type": "uint256" }, { "indexed": false, "internalType": "uint256", "name": "feeIn", "type": "uint256" }, { "indexed": false, "internalType": "uint256", "name": "newFeeBalance", "type": "uint256" }], "name": "AddLiquidity", "type": "event" },
            { "anonymous": false, "inputs": [{ "indexed": true, "internalType": "bool", "name": "direction", "type": "bool" }, { "indexed": true, "internalType": "uint256", "name": "offerIndex", "type": "uint256" }, { "indexed": true, "internalType": "address", "name": "trader", "type": "address" }, { "indexed": false, "internalType": "uint256", "name": "allocation", "type": "uint256" }], "name": "ApprovedTrader", "type": "event" },
            { "anonymous": false, "inputs": [{ "indexed": true, "internalType": "bool", "name": "direction", "type": "bool" }, { "indexed": true, "internalType": "uint256", "name": "index", "type": "uint256" }], "name": "Lock", "type": "event" },
            { "anonymous": false, "inputs": [{ "indexed": true, "internalType": "address", "name": "provider", "type": "address" }, { "indexed": true, "internalType": "bool", "name": "direction", "type": "bool" }, { "indexed": false, "internalType": "uint256", "name": "index", "type": "uint256" }, { "indexed": false, "internalType": "bool", "name": "allowAll", "type": "bool" }, { "indexed": false, "internalType": "uint256", "name": "restrictedPrice", "type": "uint256" }, { "indexed": false, "internalType": "uint256", "name": "startDate", "type": "uint256" }, { "indexed": false, "internalType": "uint256", "name": "expire", "type": "uint256" }], "name": "NewProviderOffer", "type": "event" },
            { "anonymous": false, "inputs": [{ "indexed": true, "internalType": "address", "name": "provider", "type": "address" }, { "indexed": true, "internalType": "bool", "name": "direction", "type": "bool" }, { "indexed": true, "internalType": "uint256", "name": "index", "type": "uint256" }, { "indexed": false, "internalType": "uint256", "name": "amountOut", "type": "uint256" }, { "indexed": false, "internalType": "uint256", "name": "receivingOut", "type": "uint256" }, { "indexed": false, "internalType": "uint256", "name": "feeOut", "type": "uint256" }, { "indexed": false, "internalType": "uint256", "name": "newAmountBalance", "type": "uint256" }, { "indexed": false, "internalType": "uint256", "name": "newReceivingBalance", "type": "uint256" }, { "indexed": false, "internalType": "uint256", "name": "newFeeBalance", "type": "uint256" }], "name": "RemoveLiquidity", "type": "event" },
            { "anonymous": false, "inputs": [{ "indexed": true, "internalType": "address", "name": "to", "type": "address" }, { "indexed": true, "internalType": "bool", "name": "direction", "type": "bool" }, { "indexed": false, "internalType": "uint256", "name": "amountIn", "type": "uint256" }, { "indexed": false, "internalType": "uint256", "name": "amountOut", "type": "uint256" }, { "indexed": false, "internalType": "uint256", "name": "tradeFee", "type": "uint256" }, { "indexed": false, "internalType": "uint256", "name": "protocolFee", "type": "uint256" }], "name": "Swap", "type": "event" },
            { "anonymous": false, "inputs": [{ "indexed": true, "internalType": "address", "name": "provider", "type": "address" }, { "indexed": true, "internalType": "bool", "name": "direction", "type": "bool" }, { "indexed": true, "internalType": "uint256", "name": "index", "type": "uint256" }, { "indexed": false, "internalType": "uint256", "name": "price", "type": "uint256" }, { "indexed": false, "internalType": "uint256", "name": "amountOut", "type": "uint256" }, { "indexed": false, "internalType": "uint256", "name": "amountIn", "type": "uint256" }, { "indexed": false, "internalType": "uint256", "name": "newAmountBalance", "type": "uint256" }, { "indexed": false, "internalType": "uint256", "name": "newReceivingBalance", "type": "uint256" }], "name": "SwappedOneOffer", "type": "event" },
            { "inputs": [{ "internalType": "bool", "name": "direction", "type": "bool" }, { "internalType": "uint256", "name": "index", "type": "uint256" }, { "internalType": "uint256", "name": "feeIn", "type": "uint256" }], "name": "addLiquidity", "outputs": [], "stateMutability": "nonpayable", "type": "function" },
            { "inputs": [{ "internalType": "bool", "name": "", "type": "bool" }, { "internalType": "uint256", "name": "", "type": "uint256" }, { "internalType": "address", "name": "", "type": "address" }], "name": "allocationSet", "outputs": [{ "internalType": "bool", "name": "", "type": "bool" }], "stateMutability": "view", "type": "function" },
            { "inputs": [{ "internalType": "bool", "name": "", "type": "bool" }, { "internalType": "uint256", "name": "", "type": "uint256" }, { "internalType": "uint256", "name": "", "type": "uint256" }], "name": "approvedTrader", "outputs": [{ "internalType": "address", "name": "", "type": "address" }], "stateMutability": "view", "type": "function" },
            { "inputs": [], "name": "configStore", "outputs": [{ "internalType": "address", "name": "", "type": "address" }], "stateMutability": "view", "type": "function" },
            { "inputs": [{ "internalType": "bool", "name": "", "type": "bool" }], "name": "counter", "outputs": [{ "internalType": "uint256", "name": "", "type": "uint256" }], "stateMutability": "view", "type": "function" },
            { "inputs": [{ "internalType": "address", "name": "provider", "type": "address" }, { "internalType": "bool", "name": "direction", "type": "bool" }, { "internalType": "bool", "name": "allowAll", "type": "bool" }, { "internalType": "uint256", "name": "restrictedPrice", "type": "uint256" }, { "internalType": "uint256", "name": "startDate", "type": "uint256" }, { "internalType": "uint256", "name": "expire", "type": "uint256" }], "name": "createOrder", "outputs": [{ "internalType": "uint256", "name": "index", "type": "uint256" }], "stateMutability": "nonpayable", "type": "function" },
            { "inputs": [], "name": "factory", "outputs": [{ "internalType": "address", "name": "", "type": "address" }], "stateMutability": "view", "type": "function" },
            { "inputs": [], "name": "feeBalance", "outputs": [{ "internalType": "uint256", "name": "", "type": "uint256" }], "stateMutability": "view", "type": "function" },
            { "inputs": [{ "internalType": "address", "name": "", "type": "address" }, { "internalType": "uint256", "name": "", "type": "uint256" }, { "internalType": "address", "name": "", "type": "address" }, { "internalType": "bytes", "name": "", "type": "bytes" }], "name": "getAmountIn", "outputs": [{ "internalType": "uint256", "name": "", "type": "uint256" }], "stateMutability": "view", "type": "function" },
            { "inputs": [{ "internalType": "address", "name": "tokenIn", "type": "address" }, { "internalType": "uint256", "name": "amountIn", "type": "uint256" }, { "internalType": "address", "name": "trader", "type": "address" }, { "internalType": "bytes", "name": "", "type": "bytes" }], "name": "getAmountOut", "outputs": [{ "internalType": "uint256", "name": "amountOut", "type": "uint256" }], "stateMutability": "view", "type": "function" },
            { "inputs": [{ "internalType": "bool", "name": "direction", "type": "bool" }, { "internalType": "uint256", "name": "offerIndex", "type": "uint256" }, { "internalType": "uint256", "name": "start", "type": "uint256" }, { "internalType": "uint256", "name": "length", "type": "uint256" }], "name": "getApprovedTrader", "outputs": [{ "internalType": "address[]", "name": "trader", "type": "address[]" }, { "internalType": "uint256[]", "name": "allocation", "type": "uint256[]" }], "stateMutability": "view", "type": "function" },
            { "inputs": [{ "internalType": "bool", "name": "direction", "type": "bool" }, { "internalType": "uint256", "name": "offerIndex", "type": "uint256" }], "name": "getApprovedTraderLength", "outputs": [{ "internalType": "uint256", "name": "", "type": "uint256" }], "stateMutability": "view", "type": "function" },
            { "inputs": [], "name": "getBalances", "outputs": [{ "internalType": "uint256", "name": "", "type": "uint256" }, { "internalType": "uint256", "name": "", "type": "uint256" }, { "internalType": "uint256", "name": "", "type": "uint256" }], "stateMutability": "view", "type": "function" },
            { "inputs": [], "name": "getLastBalances", "outputs": [{ "internalType": "uint256", "name": "", "type": "uint256" }, { "internalType": "uint256", "name": "", "type": "uint256" }], "stateMutability": "view", "type": "function" },
            { "inputs": [{ "internalType": "bool", "name": "direction", "type": "bool" }, { "internalType": "uint256", "name": "start", "type": "uint256" }, { "internalType": "uint256", "name": "length", "type": "uint256" }], "name": "getOffers", "outputs": [{ "internalType": "uint256[]", "name": "index", "type": "uint256[]" }, { "internalType": "address[]", "name": "provider", "type": "address[]" }, { "internalType": "bool[]", "name": "lockedAndAllowAll", "type": "bool[]" }, { "internalType": "uint256[]", "name": "receiving", "type": "uint256[]" }, { "internalType": "uint256[]", "name": "amountAndPrice", "type": "uint256[]" }, { "internalType": "uint256[]", "name": "startDateAndExpire", "type": "uint256[]" }], "stateMutability": "view", "type": "function" },
            { "inputs": [{ "internalType": "address", "name": "_provider", "type": "address" }, { "internalType": "bool", "name": "direction", "type": "bool" }, { "internalType": "uint256", "name": "start", "type": "uint256" }, { "internalType": "uint256", "name": "length", "type": "uint256" }], "name": "getProviderOffer", "outputs": [{ "internalType": "uint256[]", "name": "index", "type": "uint256[]" }, { "internalType": "address[]", "name": "provider", "type": "address[]" }, { "internalType": "bool[]", "name": "lockedAndAllowAll", "type": "bool[]" }, { "internalType": "uint256[]", "name": "receiving", "type": "uint256[]" }, { "internalType": "uint256[]", "name": "amountAndPrice", "type": "uint256[]" }, { "internalType": "uint256[]", "name": "startDateAndExpire", "type": "uint256[]" }], "stateMutability": "view", "type": "function" },
            { "inputs": [{ "internalType": "address", "name": "provider", "type": "address" }, { "internalType": "bool", "name": "direction", "type": "bool" }], "name": "getProviderOfferIndexLength", "outputs": [{ "internalType": "uint256", "name": "length", "type": "uint256" }], "stateMutability": "view", "type": "function" },
            { "inputs": [{ "internalType": "address", "name": "trader", "type": "address" }, { "internalType": "bool", "name": "direction", "type": "bool" }, { "internalType": "uint256", "name": "start", "type": "uint256" }, { "internalType": "uint256", "name": "length", "type": "uint256" }], "name": "getTraderOffer", "outputs": [{ "internalType": "uint256[]", "name": "index", "type": "uint256[]" }, { "internalType": "address[]", "name": "provider", "type": "address[]" }, { "internalType": "bool[]", "name": "lockedAndAllowAll", "type": "bool[]" }, { "internalType": "uint256[]", "name": "receiving", "type": "uint256[]" }, { "internalType": "uint256[]", "name": "amountAndPrice", "type": "uint256[]" }, { "internalType": "uint256[]", "name": "startDateAndExpire", "type": "uint256[]" }], "stateMutability": "view", "type": "function" },
            { "inputs": [], "name": "govToken", "outputs": [{ "internalType": "address", "name": "", "type": "address" }], "stateMutability": "view", "type": "function" },
            { "inputs": [], "name": "governance", "outputs": [{ "internalType": "address", "name": "", "type": "address" }], "stateMutability": "view", "type": "function" },
            { "inputs": [{ "internalType": "address", "name": "_token0", "type": "address" }, { "internalType": "address", "name": "_token1", "type": "address" }], "name": "initialize", "outputs": [], "stateMutability": "nonpayable", "type": "function" },
            { "inputs": [{ "internalType": "bool", "name": "", "type": "bool" }, { "internalType": "uint256", "name": "", "type": "uint256" }, { "internalType": "address", "name": "", "type": "address" }], "name": "isApprovedTrader", "outputs": [{ "internalType": "bool", "name": "", "type": "bool" }], "stateMutability": "view", "type": "function" },
            { "inputs": [], "name": "isLive", "outputs": [{ "internalType": "bool", "name": "", "type": "bool" }], "stateMutability": "view", "type": "function" },
            { "inputs": [], "name": "lastGovBalance", "outputs": [{ "internalType": "uint256", "name": "", "type": "uint256" }], "stateMutability": "view", "type": "function" },
            { "inputs": [], "name": "lastToken0Balance", "outputs": [{ "internalType": "uint256", "name": "", "type": "uint256" }], "stateMutability": "view", "type": "function" },
            { "inputs": [], "name": "lastToken1Balance", "outputs": [{ "internalType": "uint256", "name": "", "type": "uint256" }], "stateMutability": "view", "type": "function" },
            { "inputs": [{ "internalType": "bool", "name": "direction", "type": "bool" }, { "internalType": "uint256", "name": "index", "type": "uint256" }], "name": "lockOffer", "outputs": [], "stateMutability": "nonpayable", "type": "function" },
            { "inputs": [{ "internalType": "bool", "name": "", "type": "bool" }, { "internalType": "uint256", "name": "", "type": "uint256" }], "name": "offers", "outputs": [{ "internalType": "address", "name": "provider", "type": "address" }, { "internalType": "bool", "name": "locked", "type": "bool" }, { "internalType": "bool", "name": "allowAll", "type": "bool" }, { "internalType": "uint256", "name": "amount", "type": "uint256" }, { "internalType": "uint256", "name": "receiving", "type": "uint256" }, { "internalType": "uint256", "name": "restrictedPrice", "type": "uint256" }, { "internalType": "uint256", "name": "startDate", "type": "uint256" }, { "internalType": "uint256", "name": "expire", "type": "uint256" }], "stateMutability": "view", "type": "function" },
            { "inputs": [{ "internalType": "bool", "name": "", "type": "bool" }, { "internalType": "uint256", "name": "", "type": "uint256" }], "name": "prepaidFeeBalance", "outputs": [{ "internalType": "uint256", "name": "", "type": "uint256" }], "stateMutability": "view", "type": "function" },
            { "inputs": [], "name": "protocolFeeBalance0", "outputs": [{ "internalType": "uint256", "name": "", "type": "uint256" }], "stateMutability": "view", "type": "function" },
            { "inputs": [], "name": "protocolFeeBalance1", "outputs": [{ "internalType": "uint256", "name": "", "type": "uint256" }], "stateMutability": "view", "type": "function" },
            { "inputs": [{ "internalType": "bool", "name": "", "type": "bool" }, { "internalType": "address", "name": "", "type": "address" }, { "internalType": "uint256", "name": "", "type": "uint256" }], "name": "providerOfferIndex", "outputs": [{ "internalType": "uint256", "name": "", "type": "uint256" }], "stateMutability": "view", "type": "function" },
            { "inputs": [], "name": "redeemProtocolFee", "outputs": [], "stateMutability": "nonpayable", "type": "function" },
            { "inputs": [{ "internalType": "address", "name": "provider", "type": "address" }], "name": "removeAllLiquidity", "outputs": [{ "internalType": "uint256", "name": "amount0", "type": "uint256" }, { "internalType": "uint256", "name": "amount1", "type": "uint256" }, { "internalType": "uint256", "name": "feeOut", "type": "uint256" }], "stateMutability": "nonpayable", "type": "function" },
            { "inputs": [{ "internalType": "address", "name": "provider", "type": "address" }, { "internalType": "bool", "name": "direction", "type": "bool" }], "name": "removeAllLiquidity1D", "outputs": [{ "internalType": "uint256", "name": "totalAmount", "type": "uint256" }, { "internalType": "uint256", "name": "totalReceiving", "type": "uint256" }, { "internalType": "uint256", "name": "totalRemainingFee", "type": "uint256" }], "stateMutability": "nonpayable", "type": "function" },
            { "inputs": [{ "internalType": "address", "name": "provider", "type": "address" }, { "internalType": "bool", "name": "direction", "type": "bool" }, { "internalType": "uint256", "name": "index", "type": "uint256" }, { "internalType": "uint256", "name": "amountOut", "type": "uint256" }, { "internalType": "uint256", "name": "receivingOut", "type": "uint256" }, { "internalType": "uint256", "name": "feeOut", "type": "uint256" }], "name": "removeLiquidity", "outputs": [], "stateMutability": "nonpayable", "type": "function" },
            { "inputs": [], "name": "restrictedLiquidityProvider", "outputs": [{ "internalType": "address", "name": "", "type": "address" }], "stateMutability": "view", "type": "function" },
            { "inputs": [], "name": "scaleDirection", "outputs": [{ "internalType": "bool", "name": "", "type": "bool" }], "stateMutability": "view", "type": "function" },
            { "inputs": [], "name": "scaler", "outputs": [{ "internalType": "uint256", "name": "", "type": "uint256" }], "stateMutability": "view", "type": "function" },
            { "inputs": [{ "internalType": "bool", "name": "direction", "type": "bool" }, { "internalType": "uint256", "name": "offerIndex", "type": "uint256" }, { "internalType": "address", "name": "trader", "type": "address" }, { "internalType": "uint256", "name": "allocation", "type": "uint256" }, { "internalType": "bytes", "name": "signature", "type": "bytes" }], "name": "setApprovedTraderBySignature", "outputs": [], "stateMutability": "nonpayable", "type": "function" },
            { "inputs": [{ "internalType": "bool", "name": "_isLive", "type": "bool" }], "name": "setLive", "outputs": [], "stateMutability": "nonpayable", "type": "function" },
            { "inputs": [{ "internalType": "uint256", "name": "amount0Out", "type": "uint256" }, { "internalType": "uint256", "name": "amount1Out", "type": "uint256" }, { "internalType": "address", "name": "to", "type": "address" }, { "internalType": "address", "name": "trader", "type": "address" }, { "internalType": "bytes", "name": "", "type": "bytes" }], "name": "swap", "outputs": [], "stateMutability": "nonpayable", "type": "function" },
            { "inputs": [], "name": "sync", "outputs": [], "stateMutability": "nonpayable", "type": "function" },
            { "inputs": [], "name": "token0", "outputs": [{ "internalType": "address", "name": "", "type": "address" }], "stateMutability": "view", "type": "function" },
            { "inputs": [], "name": "token1", "outputs": [{ "internalType": "address", "name": "", "type": "address" }], "stateMutability": "view", "type": "function" },
            { "inputs": [{ "internalType": "bool", "name": "", "type": "bool" }, { "internalType": "uint256", "name": "", "type": "uint256" }, { "internalType": "address", "name": "", "type": "address" }], "name": "traderAllocation", "outputs": [{ "internalType": "uint256", "name": "", "type": "uint256" }], "stateMutability": "view", "type": "function" },
            { "inputs": [{ "internalType": "bool", "name": "", "type": "bool" }, { "internalType": "address", "name": "", "type": "address" }, { "internalType": "uint256", "name": "", "type": "uint256" }], "name": "traderOffer", "outputs": [{ "internalType": "uint256", "name": "", "type": "uint256" }], "stateMutability": "view", "type": "function" },
            { "inputs": [], "name": "whitelistFactory", "outputs": [{ "internalType": "address", "name": "", "type": "address" }], "stateMutability": "view", "type": "function" }
        ],
        "bytecode": "610140604052600180553480156200001657600080fd5b5033606081901b60809081526000805460ff191660011781556040805163ea2ed2c160e01b81529051919384938493849363ea2ed2c1926004808301939192829003018186803b1580156200006a57600080fd5b505afa1580156200007f573d6000803e3d6000fd5b505050506040513d60808110156200009657600080fd5b5080516020808301516040808501516060958601516001600160601b031986881b811660a0529684901b90961660c052815163b716d46360e01b815291519499509197509095509293506001600160a01b0387169263b716d4639260048083019392829003018186803b1580156200010d57600080fd5b505afa15801562000122573d6000803e3d6000fd5b505050506040513d60208110156200013957600080fd5b81019080805190602001909291905050506001600160a01b0316610100816001600160a01b031660601b81525050816001600160a01b031660e0816001600160a01b031660601b81525050806001600160a01b0316610120816001600160a01b031660601b81525050600360006001151515158152602001908152602001600020604051806101000160405280306001600160a01b03168152602001600115158152602001600015158152602001600081526020016000815260200160008152602001600081526020016000815250908060018154018082558091505060019003906000526020600020906006020160009091909190915060008201518160000160006101000a8154816001600160a01b0302191690836001600160a01b0316021790555060208201518160000160146101000a81548160ff02191690831515021790555060408201518160000160156101000a81548160ff021916908315150217905550606082015181600101556080820151816002015560a0820151816003015560c0820151816004015560e0820151816005015550506003600080151515158152602001908152602001600020604051806101000160405280306001600160a01b03168152602001600115158152602001600015158152602001600081526020016000815260200160008152602001600081526020016000815250908060018154018082558091505060019003906000526020600020906006020160009091909190915060008201518160000160006101000a8154816001600160a01b0302191690836001600160a01b0316021790555060208201518160000160146101000a81548160ff02191690831515021790555060408201518160000160156101000a81548160ff021916908315150217905550606082015181600101556080820151816002015560a0820151816003015560c0820151816004015560e0820151816005015550505050505060805160601c60a05160601c60c05160601c60e05160601c6101005160601c6101205160601c6154bd620004f26000398061113d528061227652806125345280612c81525080610d5f5280610f2d52806115fc52806116625280611d7e5280612bd65280614109528061416152806141af5280614239528061433d528061437a5280614a475250806114785280611c985280612143528061293252806132a75280614873525080612def5280613380525080611dc852508061131c5280611831528061198e528061200b528061274e5280612b455280612d0a52806133ad5280614aec52506154bd6000f3fe608060405234801561001057600080fd5b506004361061031f5760003560e01c806374013424116101a7578063c45a0155116100ee578063e5d36ff611610097578063f060d13911610071578063f060d13914610d29578063f5ee334814610d31578063fff6cae914610d505761031f565b8063e5d36ff614610c64578063ea5dbbc414610c6c578063ee13b84114610cfb5761031f565b8063d38550a7116100c8578063d38550a714610b25578063d7dc4e4314610b5f578063db13653c14610bf45761031f565b8063c45a015514610af0578063cff2195e14610af8578063d21220a714610b1d5761031f565b80639d69dc4e11610150578063b2901aa31161012a578063b2901aa314610ad8578063b8f7a66514610ae0578063bebf7a6114610ae85761031f565b80639d69dc4e14610a7d5780639f0a3cc114610a85578063a878769314610ab95761031f565b8063835daf6c11610181578063835daf6c14610a335780639749d21314610a3b5780639cac76ac14610a435761031f565b806374013424146109b4578063752bc9dc146109e85780637a6a5e1b14610a0d5761031f565b8063485cc9551161026b5780635eff2d0111610214578063625b6ced116101ee578063625b6ced146108ef5780636b4afee11461091d57806372ca7372146109255761031f565b80635eff2d01146107d55780635fd5e2fc1461089f57806360b71d4e146108e75761031f565b8063577e6d0811610245578063577e6d08146107bd5780635a6af09d146107c55780635aa6e675146107cd5761031f565b8063485cc9551461071e57806348c0902f1461074c5780635592bb53146107775761031f565b806333f175fc116102cd5780633c1e6ff5116102a75780633c1e6ff51461051d5780633c6d5c72146105255780633d0d81d6146105465761031f565b806333f175fc14610476578063364aed84146104a157806337bcd10f146104d55761031f565b80630dfe1681116102fe5780630dfe1681146104035780631da9a2bd1461040b5780631deb4995146104425761031f565b8062113e081461032457806305268cff1461034a5780630d6c9ad91461036e575b600080fd5b61032c610d58565b60408051938452602084019290925282820152519081900360600190f35b610352610f2b565b604080516001600160a01b039092168252519081900360200190f35b610401600480360360a081101561038457600080fd5b81351515916020810135916001600160a01b036040830135169160608101359181019060a0810160808201356401000000008111156103c257600080fd5b8201836020820111156103d457600080fd5b803590602001918460018302840111640100000000831117156103f657600080fd5b509092509050610f4f565b005b610352611264565b6104306004803603604081101561042157600080fd5b50803515159060200135611273565b60408051918252519081900360200190f35b6104306004803603606081101561045857600080fd5b5080351515906001600160a01b036020820135169060400135611297565b6104016004803603606081101561048c57600080fd5b508035151590602081013590604001356112d2565b610430600480360360608110156104b757600080fd5b5080351515906001600160a01b03602082013516906040013561179e565b610509600480360360608110156104eb57600080fd5b508035151590602081013590604001356001600160a01b03166117c3565b604080519115158252519081900360200190f35b6104306117e9565b61052d6117ef565b6040805192835260208301919091528051918290030190f35b6105716004803603606081101561055c57600080fd5b508035151590602081013590604001356117f9565b6040518080602001806020018060200180602001806020018060200187810387528d818151815260200191508051906020019060200280838360005b838110156105c55781810151838201526020016105ad565b5050505090500187810386528c818151815260200191508051906020019060200280838360005b838110156106045781810151838201526020016105ec565b5050505090500187810385528b818151815260200191508051906020019060200280838360005b8381101561064357818101518382015260200161062b565b5050505090500187810384528a818151815260200191508051906020019060200280838360005b8381101561068257818101518382015260200161066a565b50505050905001878103835289818151815260200191508051906020019060200280838360005b838110156106c15781810151838201526020016106a9565b50505050905001878103825288818151815260200191508051906020019060200280838360005b838110156107005781810151838201526020016106e8565b505050509050019c5050505050505050505050505060405180910390f35b6104016004803603604081101561073457600080fd5b506001600160a01b0381358116916020013516611826565b6103526004803603606081101561076257600080fd5b50803515159060208101359060400135611c06565b610401600480360360c081101561078d57600080fd5b506001600160a01b0381351690602081013515159060408101359060608101359060808101359060a00135611c48565b610430611dba565b610430611dc0565b610352611dc6565b610806600480360360808110156107eb57600080fd5b50803515159060208101359060408101359060600135611dea565b604051808060200180602001838103835285818151815260200191508051906020019060200280838360005b8381101561084a578181015183820152602001610832565b50505050905001838103825284818151815260200191508051906020019060200280838360005b83811015610889578181015183820152602001610871565b5050505090500194505050505060405180910390f35b610430600480360360c08110156108b557600080fd5b506001600160a01b03813516906020810135151590604081013515159060608101359060808101359060a00135611fbf565b61043061265b565b6104306004803603604081101561090557600080fd5b506001600160a01b0381351690602001351515612661565b61043061268a565b6104306004803603608081101561093b57600080fd5b6001600160a01b03823581169260208101359260408201359092169181019060808101606082013564010000000081111561097557600080fd5b82018360208201111561098757600080fd5b803590602001918460018302840111640100000000831117156109a957600080fd5b509092509050612690565b610509600480360360608110156109ca57600080fd5b508035151590602081013590604001356001600160a01b03166128dd565b610401600480360360408110156109fe57600080fd5b50803515159060200135612903565b61032c60048036036020811015610a2357600080fd5b50356001600160a01b0316612a3b565b610430612af3565b610401612af9565b61057160048036036080811015610a5957600080fd5b506001600160a01b0381351690602081013515159060408101359060600135612c51565b610352612c7f565b61043060048036036060811015610a9b57600080fd5b508035151590602081013590604001356001600160a01b0316612ca3565b61043060048036036020811015610acf57600080fd5b50351515612cc6565b610430612cd8565b610509612cde565b610509612ce7565b610352612d08565b61043060048036036040811015610b0e57600080fd5b50803515159060200135612d2c565b610352612d49565b61057160048036036080811015610b3b57600080fd5b506001600160a01b0381351690602081013515159060408101359060600135612d58565b610401600480360360a0811015610b7557600080fd5b8135916020810135916001600160a01b03604083013581169260608101359091169181019060a081016080820135640100000000811115610bb557600080fd5b820183602082011115610bc757600080fd5b80359060200191846001830284011164010000000083111715610be957600080fd5b509092509050612d6f565b610c1960048036036040811015610c0a57600080fd5b5080351515906020013561320f565b604080516001600160a01b0390991689529615156020890152941515878701526060870193909352608086019190915260a085015260c084015260e083015251908190036101000190f35b6103526132a5565b61043060048036036080811015610c8257600080fd5b6001600160a01b038235811692602081013592604082013590921691810190608081016060820135640100000000811115610cbc57600080fd5b820183602082011115610cce57600080fd5b80359060200191846001830284011164010000000083111715610cf057600080fd5b5090925090506132c9565b61032c60048036036040811015610d1157600080fd5b506001600160a01b0381351690602001351515613318565b61035261337e565b61040160048036036020811015610d4757600080fd5b503515156133a2565b610401613432565b60008060007f00000000000000000000000000000000000000000000000000000000000000006001600160a01b03166370a08231306040518263ffffffff1660e01b815260040180826001600160a01b03166001600160a01b0316815260200191505060206040518083038186803b158015610dd357600080fd5b505afa158015610de7573d6000803e3d6000fd5b505050506040513d6020811015610dfd57600080fd5b5051600954604080517f70a0823100000000000000000000000000000000000000000000000000000000815230600482015290516001600160a01b03909216916370a0823191602480820192602092909190829003018186803b158015610e6357600080fd5b505afa158015610e77573d6000803e3d6000fd5b505050506040513d6020811015610e8d57600080fd5b5051600a54604080517f70a0823100000000000000000000000000000000000000000000000000000000815230600482015290516001600160a01b03909216916370a0823191602480820192602092909190829003018186803b158015610ef357600080fd5b505afa158015610f07573d6000803e3d6000fd5b505050506040513d6020811015610f1d57600080fd5b505191945092509050909192565b7f000000000000000000000000000000000000000000000000000000000000000081565b851515600090815260136020908152604080832088845282528083206001600160a01b038816845290915290205460ff1615610fd2576040805162461bcd60e51b815260206004820152600b60248201527f616c726561647920736574000000000000000000000000000000000000000000604482015290519081900360640190fd5b851515600081815260136020908152604080832089845282528083206001600160a01b03891684528252808320805460ff19166001179055805160f89490941b84830152602184018990527fffffffffffffffffffffffffffffffffffffffff000000000000000000000000606089901b166041850152605580850188905281518086039091018152607585018083528151918401919091206095601f88018590049094028601840190925285815292936110a89391928791879182910183828082843760009201919091525061348592505050565b8715156000908152600360205260409020805491925090879081106110c957fe5b60009182526020909120600690910201546001600160a01b03828116911614611139576040805162461bcd60e51b815260206004820152601160248201527f696e76616c6964207369676e6174757265000000000000000000000000000000604482015290519081900360640190fd5b60007f00000000000000000000000000000000000000000000000000000000000000006001600160a01b031663bc14128f7f52657374726963746564506169722e66656550657254726164657200000000006040518263ffffffff1660e01b81526004018082815260200191505060206040518083038186803b1580156111bf57600080fd5b505afa1580156111d3573d6000803e3d6000fd5b505050506040513d60208110156111e957600080fd5b505188151560009081526012602090815260408083208b845290915290205490915061121b908263ffffffff6135ad16565b88151560009081526012602090815260408083208b845290915290205560115461124b908263ffffffff6135f616565b60115561125a88888888613650565b5050505050505050565b6009546001600160a01b031681565b81151560009081526005602090815260408083208484529091529020545b92915050565b600460205282600052604060002060205281600052604060002081815481106112bc57fe5b9060005260206000200160009250925050505481565b600154600114611312576040805162461bcd60e51b81526020600482015260066024820152651313d0d2d15160d21b604482015290519081900360640190fd5b60006001819055507f00000000000000000000000000000000000000000000000000000000000000006001600160a01b031663b8f7a6656040518163ffffffff1660e01b8152600401602060405180830381600087803b15801561137557600080fd5b505af1158015611389573d6000803e3d6000fd5b505050506040513d602081101561139f57600080fd5b50516113f2576040805162461bcd60e51b815260206004820152600f60248201527f474c4f42414c4c59205041555345440000000000000000000000000000000000604482015290519081900360640190fd5b60005460ff16611449576040805162461bcd60e51b815260206004820152600660248201527f5041555345440000000000000000000000000000000000000000000000000000604482015290519081900360640190fd5b821515600090815260036020526040812080548490811061146657fe5b906000526020600020906006020190507f00000000000000000000000000000000000000000000000000000000000000006001600160a01b0316336001600160a01b031614806114bf575080546001600160a01b031633145b611510576040805162461bcd60e51b815260206004820152601860248201527f4e6f742066726f6d20726f75746572206f72206f776e65720000000000000000604482015290519081900360640190fd5b600080600061151d610d58565b92509250925084611539600c54856135ad90919063ffffffff16565b101561158c576040805162461bcd60e51b815260206004820152600d60248201527f496e76616c696420666565496e00000000000000000000000000000000000000604482015290519081900360640190fd5b86151560009081526012602090815260408083208984529091528120546115b9908763ffffffff6135f616565b8815801560009081526012602090815260408083208c8452909152812083905591925061164657600e546115f490849063ffffffff6135ad16565b600a549091507f00000000000000000000000000000000000000000000000000000000000000006001600160a01b03908116911614156116415761163e818863ffffffff6135ad16565b90505b6116a7565b600d5461165a90859063ffffffff6135ad16565b6009549091507f00000000000000000000000000000000000000000000000000000000000000006001600160a01b03908116911614156116a7576116a4818863ffffffff6135ad16565b90505b60008111806116b65750600087115b611707576040805162461bcd60e51b815260206004820152600c60248201527f4e6f20616d6f756e7420696e0000000000000000000000000000000000000000604482015290519081900360640190fd5b600186015461171c908263ffffffff6135f616565b60018701908155600c869055600d859055600e849055865490546040805184815260208101929092528181018a905260608201859052518a928c1515926001600160a01b03909116917f875b40c6ec76efb782fcbf201d80c97d55ec88aeaf3f04ddcfff825a68eec7a89181900360800190a450506001805550505050505050565b600860205282600052604060002060205281600052604060002081815481106112bc57fe5b601360209081526000938452604080852082529284528284209052825290205460ff1681565b600b5481565b600d54600e549091565b6060806060806060806118106000808b8b8b613799565b949e939d50919b50995097509095509350505050565b336001600160a01b037f000000000000000000000000000000000000000000000000000000000000000016146118a3576040805162461bcd60e51b815260206004820152600960248201527f464f5242494444454e0000000000000000000000000000000000000000000000604482015290519081900360640190fd5b600980546001600160a01b038085167fffffffffffffffffffffffff00000000000000000000000000000000000000009283161792839055600a805485831693169290921791829055908116911610611943576040805162461bcd60e51b815260206004820152601860248201527f496e76616c696420746f6b656e2070616972206f726465720000000000000000604482015290519081900360640190fd5b600954600a54604080517f52a03c030000000000000000000000000000000000000000000000000000000081526001600160a01b0393841660048201529183166024830152516000927f000000000000000000000000000000000000000000000000000000000000000016916352a03c0391604480830192602092919082900301818787803b1580156119d557600080fd5b505af11580156119e9573d6000803e3d6000fd5b505050506040513d60208110156119ff57600080fd5b505190506001600160a01b038116611a5e576040805162461bcd60e51b815260206004820152600f60248201527f4e6f206f7261636c6520666f756e640000000000000000000000000000000000604482015290519081900360640190fd5b600954604080517f313ce56700000000000000000000000000000000000000000000000000000000815290516000926001600160a01b03169163313ce567916004808301926020929190829003018186803b158015611abc57600080fd5b505afa158015611ad0573d6000803e3d6000fd5b505050506040513d6020811015611ae657600080fd5b5051600a54604080517f313ce56700000000000000000000000000000000000000000000000000000000815290519293506000926001600160a01b039092169163313ce56791600480820192602092909190829003018186803b158015611b4c57600080fd5b505afa158015611b60573d6000803e3d6000fd5b505050506040513d6020811015611b7657600080fd5b5051905060ff8281169082161415611b92576001600b55611bff565b600a80547fffffffffffffffffffffff00ffffffffffffffffffffffffffffffffffffffff1660ff84811684821611740100000000000000000000000000000000000000009081029290921792839055910416611bf157808203611bf5565b8181035b60ff16600a0a600b555b5050505050565b60056020528260005260406000206020528160005260406000208181548110611c2b57fe5b6000918252602090912001546001600160a01b0316925083915050565b600154600114611c88576040805162461bcd60e51b81526020600482015260066024820152651313d0d2d15160d21b604482015290519081900360640190fd5b6000600155336001600160a01b037f0000000000000000000000000000000000000000000000000000000000000000161480611ccc5750336001600160a01b038716145b611d1d576040805162461bcd60e51b815260206004820152601860248201527f4e6f742066726f6d20726f75746572206f72206f776e65720000000000000000604482015290519081900360640190fd5b611d2b868686868686613c9e565b60008086611d4b57600954600a546001600160a01b039182169116611d5f565b600a546009546001600160a01b0391821691165b91509150611d6e823387613f01565b611d79813386613f01565b611da47f00000000000000000000000000000000000000000000000000000000000000003385613f01565b611dac6140e0565b505060018055505050505050565b60105481565b600d5481565b7f000000000000000000000000000000000000000000000000000000000000000081565b831515600090815260056020908152604080832086845290915290208054606091829180861015611f995780611e26878763ffffffff6135f616565b1115611e3f57611e3c818763ffffffff6135ad16565b94505b8467ffffffffffffffff81118015611e5657600080fd5b50604051908082528060200260200182016040528015611e80578160200160208202803683370190505b5093508467ffffffffffffffff81118015611e9a57600080fd5b50604051908082528060200260200182016040528015611ec4578160200160208202803683370190505b50925060005b85811015611f935788151560009081526007602090815260408083208b845290915281209084611f00848b63ffffffff6135f616565b81548110611f0a57fe5b9060005260206000200160009054906101000a90046001600160a01b0316878481518110611f3457fe5b60200260200101906001600160a01b031690816001600160a01b03168152506001600160a01b03166001600160a01b0316815260200190815260200160002054848281518110611f8057fe5b6020908102919091010152600101611eca565b50611fb4565b60408051600080825260208201908152818301909252945092505b505094509492505050565b6000600154600114612001576040805162461bcd60e51b81526020600482015260066024820152651313d0d2d15160d21b604482015290519081900360640190fd5b60006001819055507f00000000000000000000000000000000000000000000000000000000000000006001600160a01b031663b8f7a6656040518163ffffffff1660e01b8152600401602060405180830381600087803b15801561206457600080fd5b505af1158015612078573d6000803e3d6000fd5b505050506040513d602081101561208e57600080fd5b50516120e1576040805162461bcd60e51b815260206004820152600f60248201527f474c4f42414c4c59205041555345440000000000000000000000000000000000604482015290519081900360640190fd5b60005460ff16612138576040805162461bcd60e51b815260206004820152600660248201527f5041555345440000000000000000000000000000000000000000000000000000604482015290519081900360640190fd5b336001600160a01b037f00000000000000000000000000000000000000000000000000000000000000001614806121775750336001600160a01b038816145b6121c8576040805162461bcd60e51b815260206004820152601860248201527f4e6f742066726f6d20726f75746572206f72206f776e65720000000000000000604482015290519081900360640190fd5b8282101561221d576040805162461bcd60e51b815260206004820152600f60248201527f416c726561647920657870697265640000000000000000000000000000000000604482015290519081900360640190fd5b42821015612272576040805162461bcd60e51b815260206004820152600f60248201527f416c726561647920657870697265640000000000000000000000000000000000604482015290519081900360640190fd5b60007f00000000000000000000000000000000000000000000000000000000000000006001600160a01b031663bc14128f7f52657374726963746564506169722e6d617844757200000000000000000000006040518263ffffffff1660e01b81526004018082815260200191505060206040518083038186803b1580156122f857600080fd5b505afa15801561230c573d6000803e3d6000fd5b505050506040513d602081101561232257600080fd5b5051905042810183111561237d576040805162461bcd60e51b815260206004820152601360248201527f45787069726520746f6f20666172206177617900000000000000000000000000604482015290519081900360640190fd5b50600260008715151515815260200190815260200160002060008154600101919050819055905060046000871515151581526020019081526020016000206000886001600160a01b03166001600160a01b031681526020019081526020016000208190806001815401808255809150506001900390600052602060002001600090919091909150556003600087151515158152602001908152602001600020604051806101000160405280896001600160a01b031681526020016000151581526020018715158152602001600081526020016000815260200186815260200185815260200184815250908060018154018082558091505060019003906000526020600020906006020160009091909190915060008201518160000160006101000a8154816001600160a01b0302191690836001600160a01b0316021790555060208201518160000160146101000a81548160ff02191690831515021790555060408201518160000160156101000a81548160ff021916908315150217905550606082015181600101556080820151816002015560a0820151816003015560c0820151816004015560e08201518160050155505060007f00000000000000000000000000000000000000000000000000000000000000006001600160a01b031663bc14128f7f52657374726963746564506169722e6665655065724f726465720000000000006040518263ffffffff1660e01b81526004018082815260200191505060206040518083038186803b1580156125b657600080fd5b505afa1580156125ca573d6000803e3d6000fd5b505050506040513d60208110156125e057600080fd5b505190506125ee88826140f3565b60408051838152871515602082015280820187905260608101869052608081018590529051881515916001600160a01b038b16917f528317aa3a915641ec93963a99c0ef7d64d16e351d258904238e941a5af151da9181900360a00190a350600180559695505050505050565b60115481565b151560009081526004602090815260408083206001600160a01b03949094168352929052205490565b600e5481565b60008085116126e6576040805162461bcd60e51b815260206004820152601960248201527f494e53554646494349454e545f494e5055545f414d4f554e5400000000000000604482015290519081900360640190fd5b6060806126f360846143b9565b600954600a54604080517f069d188f0000000000000000000000000000000000000000000000000000000081526001600160a01b039384166004820181905292841660248201529051949650929450818c16149260009283927f0000000000000000000000000000000000000000000000000000000000000000169163069d188f91604480820192606092909190829003018186803b15801561279557600080fd5b505afa1580156127a9573d6000803e3d6000fd5b505050506040513d60608110156127bf57600080fd5b50805160209091015190925090506000805b86518110156128cd5760008782815181106127e857fe5b6020026020010151905060026000871515151581526020019081526020016000205481111561285e576040805162461bcd60e51b815260206004820152600f60248201527f4f66666572206e6f742065786973740000000000000000000000000000000000604482015290519081900360640190fd5b61289c670de0b6b3a76400006128908f8a868151811061287a57fe5b602002602001015161455390919063ffffffff16565b9063ffffffff6145ac16565b92506128ac86848e8489896145ee565b509093506128c29050898463ffffffff6135f616565b9850506001016127d1565b5050505050505095945050505050565b600660209081526000938452604080852082529284528284209052825290205460ff1681565b811515600090815260036020526040812080548390811061292057fe5b906000526020600020906006020190507f00000000000000000000000000000000000000000000000000000000000000006001600160a01b0316336001600160a01b03161480612979575080546001600160a01b031633145b6129ca576040805162461bcd60e51b815260206004820152601860248201527f4e6f742066726f6d20726f75746572206f72206f776e65720000000000000000604482015290519081900360640190fd5b80547fffffffffffffffffffffff00ffffffffffffffffffffffffffffffffffffffff16740100000000000000000000000000000000000000001781556040518290841515907f108c7d3c4d8ad208c92f4064bac678f032a0ac5bdbaaa1c0fdbd240b23b445ea90600090a3505050565b6000806000600154600114612a80576040805162461bcd60e51b81526020600482015260066024820152651313d0d2d15160d21b604482015290519081900360640190fd5b6000600181905550612a93846000614864565b9194509250905060008080612aa9876001614864565b91945092509050612ac0868363ffffffff6135f616565b9550612ad2858463ffffffff6135f616565b9450612ae4848263ffffffff6135f616565b60018055959794965050505050565b600f5481565b600154600114612b39576040805162461bcd60e51b81526020600482015260066024820152651313d0d2d15160d21b604482015290519081900360640190fd5b600060018190555060007f00000000000000000000000000000000000000000000000000000000000000006001600160a01b031663ef3692526040518163ffffffff1660e01b8152600401602060405180830381600087803b158015612b9e57600080fd5b505af1158015612bb2573d6000803e3d6000fd5b505050506040513d6020811015612bc857600080fd5b5051601154909150612bfd907f0000000000000000000000000000000000000000000000000000000000000000908390613f01565b600954600f54612c18916001600160a01b0316908390613f01565b600a54601054612c33916001600160a01b0316908390613f01565b60006011819055600f819055601055612c4a6140e0565b5060018055565b606080606080606080612c6860018b8b8b8b613799565b949f939e50919c509a509850909650945050505050565b7f000000000000000000000000000000000000000000000000000000000000000081565b600760209081526000938452604080852082529284528284209052825290205481565b60026020526000908152604090205481565b600c5481565b60005460ff1681565b600a5474010000000000000000000000000000000000000000900460ff1681565b7f000000000000000000000000000000000000000000000000000000000000000081565b601260209081526000928352604080842090915290825290205481565b600a546001600160a01b031681565b606080606080606080612c6860028b8b8b8b613799565b600154600114612daf576040805162461bcd60e51b81526020600482015260066024820152651313d0d2d15160d21b604482015290519081900360640190fd5b60006001819055604080517f3af32abf00000000000000000000000000000000000000000000000000000000815233600482015290516001600160a01b037f00000000000000000000000000000000000000000000000000000000000000001692633af32abf92602480820193602093909283900390910190829087803b158015612e3957600080fd5b505af1158015612e4d573d6000803e3d6000fd5b505050506040513d6020811015612e6357600080fd5b5051612ee3573233148015612e7e5750612e7c33614a80565b155b8015612e9257506001600160a01b03831633145b612ee3576040805162461bcd60e51b815260206004820152600e60248201527f496e76616c696420747261646572000000000000000000000000000000000000604482015290519081900360640190fd5b60005460ff16612f3a576040805162461bcd60e51b815260206004820152600660248201527f5041555345440000000000000000000000000000000000000000000000000000604482015290519081900360640190fd5b600d54600954604080517f70a082310000000000000000000000000000000000000000000000000000000081523060048201529051600093612fe29390926001600160a01b03909116916370a0823191602480820192602092909190829003018186803b158015612faa57600080fd5b505afa158015612fbe573d6000803e3d6000fd5b505050506040513d6020811015612fd457600080fd5b50519063ffffffff6135ad16565b600e54600a54604080517f70a08231000000000000000000000000000000000000000000000000000000008152306004820152905193945060009361305193926001600160a01b0316916370a08231916024808301926020929190829003018186803b158015612faa57600080fd5b90506000808915801561306357508815155b156131005761307460018589614a86565b9092509050888210156130ce576040805162461bcd60e51b815260206004820152601360248201527f494e53554646494349454e545f414d4f554e5400000000000000000000000000604482015290519081900360640190fd5b600a546130e5906001600160a01b03168984613f01565b600f546130f8908263ffffffff6135f616565b600f556131f7565b891580159061310d575088155b156131aa5761311e60008489614a86565b909250905089821015613178576040805162461bcd60e51b815260206004820152601360248201527f494e53554646494349454e545f414d4f554e5400000000000000000000000000604482015290519081900360640190fd5b60095461318f906001600160a01b03168984613f01565b6010546131a2908263ffffffff6135f616565b6010556131f7565b6040805162461bcd60e51b815260206004820152600d60248201527f4e6f7420737570706f7274656400000000000000000000000000000000000000604482015290519081900360640190fd5b6131ff6140e0565b5050600180555050505050505050565b6003602052816000526040600020818154811061322857fe5b60009182526020909120600690910201805460018201546002830154600384015460048501546005909501546001600160a01b038516975060ff7401000000000000000000000000000000000000000086048116975075010000000000000000000000000000000000000000009095049094169492939192909188565b7f000000000000000000000000000000000000000000000000000000000000000081565b6040805162461bcd60e51b815260206004820152600d60248201527f4e6f7420737570706f72746564000000000000000000000000000000000000006044820152905160009181900360640190fd5b600080600060015460011461335d576040805162461bcd60e51b81526020600482015260066024820152651313d0d2d15160d21b604482015290519081900360640190fd5b600060015561336c8585614864565b60018055919790965090945092505050565b7f000000000000000000000000000000000000000000000000000000000000000081565b336001600160a01b037f0000000000000000000000000000000000000000000000000000000000000000161461341f576040805162461bcd60e51b815260206004820152600960248201527f464f5242494444454e0000000000000000000000000000000000000000000000604482015290519081900360640190fd5b6000805460ff1916911515919091179055565b600154600114613472576040805162461bcd60e51b81526020600482015260066024820152651313d0d2d15160d21b604482015290519081900360640190fd5b600060015561347f6140e0565b60018055565b60008060008084516041146134a05760009350505050611291565b50505060208201516040830151606084015160001a601b8110156134c257601b015b8060ff16601b141580156134da57508060ff16601c14155b156134eb5760009350505050611291565b8560405160200180807f19457468657265756d205369676e6564204d6573736167653a0a333200000000815250601c0182815260200191505060405160208183030381529060405280519060200120955060018682858560405160008152602001604052604051808581526020018460ff1660ff1681526020018381526020018281526020019450505050506020604051602081039080840390855afa158015613599573d6000803e3d6000fd5b505050602060405103519350505050611291565b60006135ef83836040518060400160405280601e81526020017f536166654d6174683a207375627472616374696f6e206f766572666c6f770000815250614d0f565b9392505050565b6000828201838110156135ef576040805162461bcd60e51b815260206004820152601b60248201527f536166654d6174683a206164646974696f6e206f766572666c6f770000000000604482015290519081900360640190fd5b831515600090815260066020908152604080832086845282528083206001600160a01b038616845290915290205460ff1661372b57831515600081815260056020908152604080832087845282528083208054600180820183559185528385200180547fffffffffffffffffffffffff0000000000000000000000000000000000000000166001600160a01b0389169081179091558585526006845282852089865284528285208186528452828520805460ff1916831790559484526008835281842094845293825282208054938401815582529020018390555b831515600081815260076020908152604080832087845282528083206001600160a01b03871680855290835292819020859055805185815290519293879390927fe51457e789313604d11150ac77eade7d4c00b796eb6429e2de5bd9a6a9716a48928290030190a450505050565b606080808080806000808c6137d757505088151560008181526004602090815260408083208380528252808320938352600390915290205490613894565b8c6001141561380f57505088151560009081526008602090815260408083206001600160a01b038e1684529091529020805490613894565b8c6002141561384757505088151560009081526004602090815260408083206001600160a01b038e1684529091529020805490613894565b6040805162461bcd60e51b815260206004820152600c60248201527f556e6b6e6f776e206c6973740000000000000000000000000000000000000000604482015290519081900360640190fd5b8a151560009081526003602052604090208d90838c1015613c6157836138c08d8d63ffffffff6135f616565b11156138d9576138d6848d63ffffffff6135ad16565b9a505b8a67ffffffffffffffff811180156138f057600080fd5b5060405190808252806020026020018201604052801561391a578160200160208202803683370190505b5099508a67ffffffffffffffff8111801561393457600080fd5b5060405190808252806020026020018201604052801561395e578160200160208202803683370190505b5098508a67ffffffffffffffff8111801561397857600080fd5b506040519080825280602002602001820160405280156139a2578160200160208202803683370190505b5096508a60020293508367ffffffffffffffff811180156139c257600080fd5b506040519080825280602002602001820160405280156139ec578160200160208202803683370190505b5097508367ffffffffffffffff81118015613a0657600080fd5b50604051908082528060200260200182016040528015613a30578160200160208202803683370190505b5095508367ffffffffffffffff81118015613a4a57600080fd5b50604051908082528060200260200182016040528015613a74578160200160208202803683370190505b50945060005b8b811015613c5b57613a92818e63ffffffff6135f616565b94508215613adb5782600114613abe57838581548110613aae57fe5b9060005260206000200154613ad6565b838581548110613aca57fe5b90600052602060002001545b613add565b845b94506000828681548110613aed57fe5b90600052602060002090600602019050858c8381518110613b0a57fe5b6020908102919091010152613b25828e63ffffffff6135f616565b81548c519197506001600160a01b0316908c9084908110613b4257fe5b60200260200101906001600160a01b031690816001600160a01b0316815250508060000160149054906101000a900460ff168a8381518110613b8057fe5b6020026020010190151590811515815250508060000160159054906101000a900460ff168a8781518110613bb057fe5b6020026020010190151590811515815250508060020154898381518110613bd357fe5b6020026020010181815250508060010154888381518110613bf057fe5b6020026020010181815250508060030154888781518110613c0d57fe5b6020026020010181815250508060040154878381518110613c2a57fe5b6020026020010181815250508060050154878781518110613c4757fe5b602090810291909101015250600101613a7a565b50613c8d565b6040805160008082526020820181815282840191825260608301909352909a5090985096508695508594505b505050509550955095509550955095565b60008411613cf3576040805162461bcd60e51b815260206004820152601c60248201527f50726f7669646572206c6971756964697479206e6f7420666f756e6400000000604482015290519081900360640190fd5b8415156000908152600360205260408120805486908110613d1057fe5b6000918252602090912060069091020180549091506001600160a01b03888116911614613d84576040805162461bcd60e51b815260206004820152601160248201527f4e6f742066726f6d2070726f7669646572000000000000000000000000000000604482015290519081900360640190fd5b805474010000000000000000000000000000000000000000900460ff168015613dad5750600084115b15613e0a5742816005015410613e0a576040805162461bcd60e51b815260206004820152600b60248201527f4e6f742065787069726564000000000000000000000000000000000000000000604482015290519081900360640190fd5b6001810154613e1f908563ffffffff6135ad16565b60018201556002810154613e39908463ffffffff6135ad16565b60028201558515156000908152601260209081526040808320888452909152812054613e6b908463ffffffff6135ad16565b87151560008181526012602090815260408083208b84528252918290208490556001860154600287015483518b81529283018a90528284018990526060830191909152608082015260a08101849052905192935088926001600160a01b038c16917f8ef78c46dea1907785e0758d7a4c5dcb0187e8c7a5b10ecf7cb043f18688af2b919081900360c00190a45050505050505050565b604080518082018252601981527f7472616e7366657228616464726573732c75696e74323536290000000000000060209182015281516001600160a01b0385811660248301526044808301869052845180840390910181526064909201845291810180517bffffffffffffffffffffffffffffffffffffffffffffffffffffffff167fa9059cbb000000000000000000000000000000000000000000000000000000001781529251815160009460609489169392918291908083835b60208310613ffa57805182527fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe09092019160209182019101613fbd565b6001836020036101000a0380198251168184511680821785525050505050509050019150506000604051808303816000865af19150503d806000811461405c576040519150601f19603f3d011682016040523d82523d6000602084013e614061565b606091505b509150915081801561408f57508051158061408f575080806020019051602081101561408c57600080fd5b50515b611bff576040805162461bcd60e51b815260206004820152600f60248201527f5452414e534645525f4641494c45440000000000000000000000000000000000604482015290519081900360640190fd5b6140e8610d58565b600e55600d55600c55565b336001600160a01b03831614156141fd576141307f0000000000000000000000000000000000000000000000000000000000000000833084614da6565b601154614143908263ffffffff6135f616565b601155600c54614159908263ffffffff6135f616565b600c556009547f00000000000000000000000000000000000000000000000000000000000000006001600160a01b03908116911614156141aa57600d546141a6908263ffffffff6135f616565b600d555b600a547f00000000000000000000000000000000000000000000000000000000000000006001600160a01b03908116911614156141f857600e546141f4908263ffffffff6135f616565b600e555b6143b5565b604080517f70a0823100000000000000000000000000000000000000000000000000000000815230600482015290516000916001600160a01b037f000000000000000000000000000000000000000000000000000000000000000016916370a0823191602480820192602092909190829003018186803b15801561428057600080fd5b505afa158015614294573d6000803e3d6000fd5b505050506040513d60208110156142aa57600080fd5b5051600c549091506000906142c690839063ffffffff6135ad16565b90508281101561431d576040805162461bcd60e51b815260206004820152600e60248201527f4e6f7420656e6f75676820666565000000000000000000000000000000000000604482015290519081900360640190fd5b601154614330908263ffffffff6135f616565b601155600c8290556009547f00000000000000000000000000000000000000000000000000000000000000006001600160a01b039081169116141561437557600d8290555b600a547f00000000000000000000000000000000000000000000000000000000000000006001600160a01b03908116911614156143b257600e8290555b50505b5050565b60608060006143ce848363ffffffff6135f616565b361015614422576040805162461bcd60e51b815260206004820152601260248201527f496e76616c6964206f66666572206c6973740000000000000000000000000000604482015290519081900360640190fd5b60208401356020810280600202604087010136101561444057600080fd5b6040516020820160020281016040528281528160408801602083013780955081602001810190508281528182604089010160208301379350600202602090810192503691506144a590614499878563ffffffff6135f616565b9063ffffffff6135f616565b146144f7576040805162461bcd60e51b815260206004820152601360248201527f496e76616c69642064617461206c656e67746800000000000000000000000000604482015290519081900360640190fd5b600083511161454d576040805162461bcd60e51b815260206004820152601260248201527f496e76616c6964206f66666572206c6973740000000000000000000000000000604482015290519081900360640190fd5b50915091565b60008261456257506000611291565b8282028284828161456f57fe5b04146135ef5760405162461bcd60e51b81526004018080602001828103825260218152602001806154676021913960400191505060405180910390fd5b60006135ef83836040518060400160405280601a81526020017f536166654d6174683a206469766973696f6e206279207a65726f000000000000815250614f65565b60008080614609620186a06128908a8763ffffffff61455316565b905061461b888263ffffffff6135ad16565b9750600080866001600160a01b031663b80333ed8c61464557600a546001600160a01b0316614652565b6009546001600160a01b03165b8d614668576009546001600160a01b0316614675565b600a546001600160a01b03165b8d60008e8e604051602001808281526020019150506040516020818303038152906040526040518763ffffffff1660e01b815260040180876001600160a01b03166001600160a01b03168152602001866001600160a01b03166001600160a01b03168152602001858152602001848152602001836001600160a01b03166001600160a01b0316815260200180602001828103825283818151815260200191508051906020019080838360005b83811015614739578181015183820152602001614721565b50505050905090810190601f1680156147665780820380516001836020036101000a031916815260200191505b50975050505050505050604080518083038186803b15801561478757600080fd5b505afa15801561479b573d6000803e3d6000fd5b505050506040513d60408110156147b157600080fd5b50805160209091015190925090506147cf8a8363ffffffff61455316565b94506001600b54111561482657600a60149054906101000a900460ff1615158b15151461480f57600b5461480a90869063ffffffff6145ac16565b614823565b600b5461482390869063ffffffff61455316565b94505b614836858263ffffffff6145ac16565b94506148548161289084670de0b6b3a764000063ffffffff61455316565b9350505096509650969350505050565b60008080336001600160a01b037f00000000000000000000000000000000000000000000000000000000000000001614806148a75750336001600160a01b038616145b6148f8576040805162461bcd60e51b815260206004820152601860248201527f4e6f742066726f6d20726f75746572206f72206f776e65720000000000000000604482015290519081900360640190fd5b83151560009081526004602090815260408083206001600160a01b03891684529091528120805490915b818110156149fc57600083828154811061493857fe5b906000526020600020015490506000600360008a151515158152602001908152602001600020828154811061496957fe5b906000526020600020906006020190506149908160010154896135f690919063ffffffff16565b97506149a98160020154886135f690919063ffffffff16565b89151560009081526012602090815260408083208684529091529020549097506149d9878263ffffffff6135f616565b96506149f18b8b858560010154866002015486613c9e565b505050600101614922565b5060008087614a0c578686614a0f565b85875b6009549193509150614a2b906001600160a01b03163384613f01565b600a54614a42906001600160a01b03163383613f01565b614a6d7f00000000000000000000000000000000000000000000000000000000000000003387613f01565b614a756140e0565b505050509250925092565b3b151590565b600080606080614a9660a46143b9565b915091506000614aa461542a565b600954600a54604080517f069d188f0000000000000000000000000000000000000000000000000000000081526001600160a01b0393841660048201529183166024830152517f00000000000000000000000000000000000000000000000000000000000000009092169163069d188f91604480820192606092909190829003018186803b158015614b3557600080fd5b505afa158015614b49573d6000803e3d6000fd5b505050506040513d6060811015614b5f57600080fd5b508051602080830151604090930151908401529082529150600080805b8651811015614c4e57614bab868281518110614b9457fe5b6020026020010151846135f690919063ffffffff16565b9250614bb5615448565b6000614bd3670de0b6b3a76400006128908f8b878151811061287a57fe5b9050614bf68e8d8b8681518110614be657fe5b6020026020010151848b8b614fca565b60408501526020840152808352614c0e908c906135f6565b9a50614c288260016020020151859063ffffffff6135f616565b9350614c4282600260200201518b9063ffffffff6135f616565b99505050600101614b7c565b5081670de0b6b3a764000014614cab576040805162461bcd60e51b815260206004820152600d60248201527f496e76616c696420696e70757400000000000000000000000000000000000000604482015290519081900360640190fd5b604080518b8152602081018a90528082018390526060810189905290518c1515916001600160a01b038c16917fd55848f048ca7d5fd9869d414bb60a426c2b0125c8adb982fee123da3f841ed89181900360800190a3505050505050935093915050565b60008184841115614d9e5760405162461bcd60e51b81526004018080602001828103825283818151815260200191508051906020019080838360005b83811015614d63578181015183820152602001614d4b565b50505050905090810190601f168015614d905780820380516001836020036101000a031916815260200191505b509250505060405180910390fd5b505050900390565b604080516001600160a01b0385811660248301528481166044830152606480830185905283518084039091018152608490920183526020820180517bffffffffffffffffffffffffffffffffffffffffffffffffffffffff167f23b872dd0000000000000000000000000000000000000000000000000000000017815292518251600094606094938a169392918291908083835b60208310614e7757805182527fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe09092019160209182019101614e3a565b6001836020036101000a0380198251168184511680821785525050505050509050019150506000604051808303816000865af19150503d8060008114614ed9576040519150601f19603f3d011682016040523d82523d6000602084013e614ede565b606091505b5091509150818015614f0c575080511580614f0c5750808060200190516020811015614f0957600080fd5b50515b614f5d576040805162461bcd60e51b815260206004820152601460248201527f5452414e534645525f46524f4d5f4641494c4544000000000000000000000000604482015290519081900360640190fd5b505050505050565b60008183614fb45760405162461bcd60e51b8152602060048201818152835160248401528351909283926044909101919085019080838360008315614d63578181015183820152602001614d4b565b506000838581614fc057fe5b0495945050505050565b85151560009081526002602052604081205481908190871115615034576040805162461bcd60e51b815260206004820152600f60248201527f4f66666572206e6f742065786973740000000000000000000000000000000000604482015290519081900360640190fd5b881515600090815260036020526040812080548990811061505157fe5b6000918252602090912060069091020180549091507501000000000000000000000000000000000000000000900460ff16806150ba575089151560009081526006602090815260408083208b845282528083206001600160a01b038d16845290915290205460ff165b61510b576040805162461bcd60e51b815260206004820152601560248201527f4e6f74206120617070726f766564207472616465720000000000000000000000604482015290519081900360640190fd5b8060040154421015615164576040805162461bcd60e51b815260206004820152601360248201527f4f66666572206e6f7420626567696e2079657400000000000000000000000000604482015290519081900360640190fd5b80600501544211156151bd576040805162461bcd60e51b815260206004820152600d60248201527f4f66666572206578706972656400000000000000000000000000000000000000604482015290519081900360640190fd5b6000806151d48c8a8d8d8c8c8760200201516145ee565b60208a0151929850965092506151eb57508761521f565b61520a620186a06128908960016020020151889063ffffffff61455316565b935061521c898563ffffffff6135ad16565b90505b82547501000000000000000000000000000000000000000000900460ff16615325578b151560009081526007602090815260408083208d845282528083206001600160a01b038f168452909152902054808711156152c4576040805162461bcd60e51b815260206004820152601a60248201527f416d6f756e7420657863656564656420616c6c6f636174696f6e000000000000604482015290519081900360640190fd5b6152d4818863ffffffff6135ad16565b600760008f15151515815260200190815260200160002060008d815260200190815260200160002060008e6001600160a01b03166001600160a01b0316815260200190815260200160002081905550505b826001015486111561537e576040805162461bcd60e51b815260206004820152601d60248201527f416d6f756e74206578636565647320617661696c61626c652066756e64000000604482015290519081900360640190fd5b6001830154615393908763ffffffff6135ad16565b600184015560028301546153ad908263ffffffff6135f616565b600284018190558354600185015460408051868152602081018b90528082018690526060810192909252608082019390935291518c928f1515926001600160a01b0316917f2f27f755766c13db5798f9a3fa7501574d60c8d73dd30849515c312b0bf9cc7e9181900360a00190a450505096509650969350505050565b60405180604001604052806002906020820280368337509192915050565b6040518060600160405280600390602082028036833750919291505056fe536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f77a26469706673582212204d78af995cb9ee667eb97e69864de4c273099a93fd25b5b3936c251e15ddd87d64736f6c634300060b0033"
    };
});
define("@scom/scom-swap/contracts/oswap-openswap-contract/contracts/restricted/OSWAP_RestrictedPair3.ts", ["require", "exports", "@ijstech/eth-contract", "@scom/scom-swap/contracts/oswap-openswap-contract/contracts/restricted/OSWAP_RestrictedPair3.json.ts"], function (require, exports, eth_contract_44, OSWAP_RestrictedPair3_json_1) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.OSWAP_RestrictedPair3 = void 0;
    class OSWAP_RestrictedPair3 extends eth_contract_44.Contract {
        constructor(wallet, address) {
            super(wallet, address, OSWAP_RestrictedPair3_json_1.default.abi, OSWAP_RestrictedPair3_json_1.default.bytecode);
            this.assign();
        }
        deploy(options) {
            return this.__deploy([], options);
        }
        parseAddLiquidityEvent(receipt) {
            return this.parseEvents(receipt, "AddLiquidity").map(e => this.decodeAddLiquidityEvent(e));
        }
        decodeAddLiquidityEvent(event) {
            let result = event.data;
            return {
                provider: result.provider,
                direction: result.direction,
                index: new eth_contract_44.BigNumber(result.index),
                amount: new eth_contract_44.BigNumber(result.amount),
                newAmountBalance: new eth_contract_44.BigNumber(result.newAmountBalance),
                feeIn: new eth_contract_44.BigNumber(result.feeIn),
                newFeeBalance: new eth_contract_44.BigNumber(result.newFeeBalance),
                _event: event
            };
        }
        parseApprovedTraderEvent(receipt) {
            return this.parseEvents(receipt, "ApprovedTrader").map(e => this.decodeApprovedTraderEvent(e));
        }
        decodeApprovedTraderEvent(event) {
            let result = event.data;
            return {
                direction: result.direction,
                offerIndex: new eth_contract_44.BigNumber(result.offerIndex),
                trader: result.trader,
                allocation: new eth_contract_44.BigNumber(result.allocation),
                _event: event
            };
        }
        parseLockEvent(receipt) {
            return this.parseEvents(receipt, "Lock").map(e => this.decodeLockEvent(e));
        }
        decodeLockEvent(event) {
            let result = event.data;
            return {
                direction: result.direction,
                index: new eth_contract_44.BigNumber(result.index),
                _event: event
            };
        }
        parseNewProviderOfferEvent(receipt) {
            return this.parseEvents(receipt, "NewProviderOffer").map(e => this.decodeNewProviderOfferEvent(e));
        }
        decodeNewProviderOfferEvent(event) {
            let result = event.data;
            return {
                provider: result.provider,
                direction: result.direction,
                index: new eth_contract_44.BigNumber(result.index),
                allowAll: result.allowAll,
                restrictedPrice: new eth_contract_44.BigNumber(result.restrictedPrice),
                startDate: new eth_contract_44.BigNumber(result.startDate),
                expire: new eth_contract_44.BigNumber(result.expire),
                _event: event
            };
        }
        parseRemoveLiquidityEvent(receipt) {
            return this.parseEvents(receipt, "RemoveLiquidity").map(e => this.decodeRemoveLiquidityEvent(e));
        }
        decodeRemoveLiquidityEvent(event) {
            let result = event.data;
            return {
                provider: result.provider,
                direction: result.direction,
                index: new eth_contract_44.BigNumber(result.index),
                amountOut: new eth_contract_44.BigNumber(result.amountOut),
                receivingOut: new eth_contract_44.BigNumber(result.receivingOut),
                feeOut: new eth_contract_44.BigNumber(result.feeOut),
                newAmountBalance: new eth_contract_44.BigNumber(result.newAmountBalance),
                newReceivingBalance: new eth_contract_44.BigNumber(result.newReceivingBalance),
                newFeeBalance: new eth_contract_44.BigNumber(result.newFeeBalance),
                _event: event
            };
        }
        parseSwapEvent(receipt) {
            return this.parseEvents(receipt, "Swap").map(e => this.decodeSwapEvent(e));
        }
        decodeSwapEvent(event) {
            let result = event.data;
            return {
                to: result.to,
                direction: result.direction,
                amountIn: new eth_contract_44.BigNumber(result.amountIn),
                amountOut: new eth_contract_44.BigNumber(result.amountOut),
                tradeFee: new eth_contract_44.BigNumber(result.tradeFee),
                protocolFee: new eth_contract_44.BigNumber(result.protocolFee),
                _event: event
            };
        }
        parseSwappedOneOfferEvent(receipt) {
            return this.parseEvents(receipt, "SwappedOneOffer").map(e => this.decodeSwappedOneOfferEvent(e));
        }
        decodeSwappedOneOfferEvent(event) {
            let result = event.data;
            return {
                provider: result.provider,
                direction: result.direction,
                index: new eth_contract_44.BigNumber(result.index),
                price: new eth_contract_44.BigNumber(result.price),
                amountOut: new eth_contract_44.BigNumber(result.amountOut),
                amountIn: new eth_contract_44.BigNumber(result.amountIn),
                newAmountBalance: new eth_contract_44.BigNumber(result.newAmountBalance),
                newReceivingBalance: new eth_contract_44.BigNumber(result.newReceivingBalance),
                _event: event
            };
        }
        assign() {
            let allocationSetParams = (params) => [params.param1, this.wallet.utils.toString(params.param2), params.param3];
            let allocationSet_call = async (params, options) => {
                let result = await this.call('allocationSet', allocationSetParams(params), options);
                return result;
            };
            this.allocationSet = allocationSet_call;
            let approvedTraderParams = (params) => [params.param1, this.wallet.utils.toString(params.param2), this.wallet.utils.toString(params.param3)];
            let approvedTrader_call = async (params, options) => {
                let result = await this.call('approvedTrader', approvedTraderParams(params), options);
                return result;
            };
            this.approvedTrader = approvedTrader_call;
            let configStore_call = async (options) => {
                let result = await this.call('configStore', [], options);
                return result;
            };
            this.configStore = configStore_call;
            let counter_call = async (param1, options) => {
                let result = await this.call('counter', [param1], options);
                return new eth_contract_44.BigNumber(result);
            };
            this.counter = counter_call;
            let factory_call = async (options) => {
                let result = await this.call('factory', [], options);
                return result;
            };
            this.factory = factory_call;
            let feeBalance_call = async (options) => {
                let result = await this.call('feeBalance', [], options);
                return new eth_contract_44.BigNumber(result);
            };
            this.feeBalance = feeBalance_call;
            let getAmountInParams = (params) => [params.param1, this.wallet.utils.toString(params.param2), params.param3, this.wallet.utils.stringToBytes(params.param4)];
            let getAmountIn_call = async (params, options) => {
                let result = await this.call('getAmountIn', getAmountInParams(params), options);
                return new eth_contract_44.BigNumber(result);
            };
            this.getAmountIn = getAmountIn_call;
            let getAmountOutParams = (params) => [params.tokenIn, this.wallet.utils.toString(params.amountIn), params.trader, this.wallet.utils.stringToBytes(params.param4)];
            let getAmountOut_call = async (params, options) => {
                let result = await this.call('getAmountOut', getAmountOutParams(params), options);
                return new eth_contract_44.BigNumber(result);
            };
            this.getAmountOut = getAmountOut_call;
            let getApprovedTraderParams = (params) => [params.direction, this.wallet.utils.toString(params.offerIndex), this.wallet.utils.toString(params.start), this.wallet.utils.toString(params.length)];
            let getApprovedTrader_call = async (params, options) => {
                let result = await this.call('getApprovedTrader', getApprovedTraderParams(params), options);
                return {
                    trader: result.trader,
                    allocation: result.allocation.map(e => new eth_contract_44.BigNumber(e))
                };
            };
            this.getApprovedTrader = getApprovedTrader_call;
            let getApprovedTraderLengthParams = (params) => [params.direction, this.wallet.utils.toString(params.offerIndex)];
            let getApprovedTraderLength_call = async (params, options) => {
                let result = await this.call('getApprovedTraderLength', getApprovedTraderLengthParams(params), options);
                return new eth_contract_44.BigNumber(result);
            };
            this.getApprovedTraderLength = getApprovedTraderLength_call;
            let getBalances_call = async (options) => {
                let result = await this.call('getBalances', [], options);
                return {
                    param1: new eth_contract_44.BigNumber(result[0]),
                    param2: new eth_contract_44.BigNumber(result[1]),
                    param3: new eth_contract_44.BigNumber(result[2])
                };
            };
            this.getBalances = getBalances_call;
            let getLastBalances_call = async (options) => {
                let result = await this.call('getLastBalances', [], options);
                return {
                    param1: new eth_contract_44.BigNumber(result[0]),
                    param2: new eth_contract_44.BigNumber(result[1])
                };
            };
            this.getLastBalances = getLastBalances_call;
            let getOffersParams = (params) => [params.direction, this.wallet.utils.toString(params.start), this.wallet.utils.toString(params.length)];
            let getOffers_call = async (params, options) => {
                let result = await this.call('getOffers', getOffersParams(params), options);
                return {
                    index: result.index.map(e => new eth_contract_44.BigNumber(e)),
                    provider: result.provider,
                    lockedAndAllowAll: result.lockedAndAllowAll,
                    receiving: result.receiving.map(e => new eth_contract_44.BigNumber(e)),
                    amountAndPrice: result.amountAndPrice.map(e => new eth_contract_44.BigNumber(e)),
                    startDateAndExpire: result.startDateAndExpire.map(e => new eth_contract_44.BigNumber(e))
                };
            };
            this.getOffers = getOffers_call;
            let getProviderOfferParams = (params) => [params.provider, params.direction, this.wallet.utils.toString(params.start), this.wallet.utils.toString(params.length)];
            let getProviderOffer_call = async (params, options) => {
                let result = await this.call('getProviderOffer', getProviderOfferParams(params), options);
                return {
                    index: result.index.map(e => new eth_contract_44.BigNumber(e)),
                    provider: result.provider,
                    lockedAndAllowAll: result.lockedAndAllowAll,
                    receiving: result.receiving.map(e => new eth_contract_44.BigNumber(e)),
                    amountAndPrice: result.amountAndPrice.map(e => new eth_contract_44.BigNumber(e)),
                    startDateAndExpire: result.startDateAndExpire.map(e => new eth_contract_44.BigNumber(e))
                };
            };
            this.getProviderOffer = getProviderOffer_call;
            let getProviderOfferIndexLengthParams = (params) => [params.provider, params.direction];
            let getProviderOfferIndexLength_call = async (params, options) => {
                let result = await this.call('getProviderOfferIndexLength', getProviderOfferIndexLengthParams(params), options);
                return new eth_contract_44.BigNumber(result);
            };
            this.getProviderOfferIndexLength = getProviderOfferIndexLength_call;
            let getTraderOfferParams = (params) => [params.trader, params.direction, this.wallet.utils.toString(params.start), this.wallet.utils.toString(params.length)];
            let getTraderOffer_call = async (params, options) => {
                let result = await this.call('getTraderOffer', getTraderOfferParams(params), options);
                return {
                    index: result.index.map(e => new eth_contract_44.BigNumber(e)),
                    provider: result.provider,
                    lockedAndAllowAll: result.lockedAndAllowAll,
                    receiving: result.receiving.map(e => new eth_contract_44.BigNumber(e)),
                    amountAndPrice: result.amountAndPrice.map(e => new eth_contract_44.BigNumber(e)),
                    startDateAndExpire: result.startDateAndExpire.map(e => new eth_contract_44.BigNumber(e))
                };
            };
            this.getTraderOffer = getTraderOffer_call;
            let govToken_call = async (options) => {
                let result = await this.call('govToken', [], options);
                return result;
            };
            this.govToken = govToken_call;
            let governance_call = async (options) => {
                let result = await this.call('governance', [], options);
                return result;
            };
            this.governance = governance_call;
            let isApprovedTraderParams = (params) => [params.param1, this.wallet.utils.toString(params.param2), params.param3];
            let isApprovedTrader_call = async (params, options) => {
                let result = await this.call('isApprovedTrader', isApprovedTraderParams(params), options);
                return result;
            };
            this.isApprovedTrader = isApprovedTrader_call;
            let isLive_call = async (options) => {
                let result = await this.call('isLive', [], options);
                return result;
            };
            this.isLive = isLive_call;
            let lastGovBalance_call = async (options) => {
                let result = await this.call('lastGovBalance', [], options);
                return new eth_contract_44.BigNumber(result);
            };
            this.lastGovBalance = lastGovBalance_call;
            let lastToken0Balance_call = async (options) => {
                let result = await this.call('lastToken0Balance', [], options);
                return new eth_contract_44.BigNumber(result);
            };
            this.lastToken0Balance = lastToken0Balance_call;
            let lastToken1Balance_call = async (options) => {
                let result = await this.call('lastToken1Balance', [], options);
                return new eth_contract_44.BigNumber(result);
            };
            this.lastToken1Balance = lastToken1Balance_call;
            let offersParams = (params) => [params.param1, this.wallet.utils.toString(params.param2)];
            let offers_call = async (params, options) => {
                let result = await this.call('offers', offersParams(params), options);
                return {
                    provider: result.provider,
                    locked: result.locked,
                    allowAll: result.allowAll,
                    amount: new eth_contract_44.BigNumber(result.amount),
                    receiving: new eth_contract_44.BigNumber(result.receiving),
                    restrictedPrice: new eth_contract_44.BigNumber(result.restrictedPrice),
                    startDate: new eth_contract_44.BigNumber(result.startDate),
                    expire: new eth_contract_44.BigNumber(result.expire)
                };
            };
            this.offers = offers_call;
            let prepaidFeeBalanceParams = (params) => [params.param1, this.wallet.utils.toString(params.param2)];
            let prepaidFeeBalance_call = async (params, options) => {
                let result = await this.call('prepaidFeeBalance', prepaidFeeBalanceParams(params), options);
                return new eth_contract_44.BigNumber(result);
            };
            this.prepaidFeeBalance = prepaidFeeBalance_call;
            let protocolFeeBalance0_call = async (options) => {
                let result = await this.call('protocolFeeBalance0', [], options);
                return new eth_contract_44.BigNumber(result);
            };
            this.protocolFeeBalance0 = protocolFeeBalance0_call;
            let protocolFeeBalance1_call = async (options) => {
                let result = await this.call('protocolFeeBalance1', [], options);
                return new eth_contract_44.BigNumber(result);
            };
            this.protocolFeeBalance1 = protocolFeeBalance1_call;
            let providerOfferIndexParams = (params) => [params.param1, params.param2, this.wallet.utils.toString(params.param3)];
            let providerOfferIndex_call = async (params, options) => {
                let result = await this.call('providerOfferIndex', providerOfferIndexParams(params), options);
                return new eth_contract_44.BigNumber(result);
            };
            this.providerOfferIndex = providerOfferIndex_call;
            let restrictedLiquidityProvider_call = async (options) => {
                let result = await this.call('restrictedLiquidityProvider', [], options);
                return result;
            };
            this.restrictedLiquidityProvider = restrictedLiquidityProvider_call;
            let scaleDirection_call = async (options) => {
                let result = await this.call('scaleDirection', [], options);
                return result;
            };
            this.scaleDirection = scaleDirection_call;
            let scaler_call = async (options) => {
                let result = await this.call('scaler', [], options);
                return new eth_contract_44.BigNumber(result);
            };
            this.scaler = scaler_call;
            let token0_call = async (options) => {
                let result = await this.call('token0', [], options);
                return result;
            };
            this.token0 = token0_call;
            let token1_call = async (options) => {
                let result = await this.call('token1', [], options);
                return result;
            };
            this.token1 = token1_call;
            let traderAllocationParams = (params) => [params.param1, this.wallet.utils.toString(params.param2), params.param3];
            let traderAllocation_call = async (params, options) => {
                let result = await this.call('traderAllocation', traderAllocationParams(params), options);
                return new eth_contract_44.BigNumber(result);
            };
            this.traderAllocation = traderAllocation_call;
            let traderOfferParams = (params) => [params.param1, params.param2, this.wallet.utils.toString(params.param3)];
            let traderOffer_call = async (params, options) => {
                let result = await this.call('traderOffer', traderOfferParams(params), options);
                return new eth_contract_44.BigNumber(result);
            };
            this.traderOffer = traderOffer_call;
            let whitelistFactory_call = async (options) => {
                let result = await this.call('whitelistFactory', [], options);
                return result;
            };
            this.whitelistFactory = whitelistFactory_call;
            let addLiquidityParams = (params) => [params.direction, this.wallet.utils.toString(params.index), this.wallet.utils.toString(params.feeIn)];
            let addLiquidity_send = async (params, options) => {
                let result = await this.send('addLiquidity', addLiquidityParams(params), options);
                return result;
            };
            let addLiquidity_call = async (params, options) => {
                let result = await this.call('addLiquidity', addLiquidityParams(params), options);
                return;
            };
            let addLiquidity_txData = async (params, options) => {
                let result = await this.txData('addLiquidity', addLiquidityParams(params), options);
                return result;
            };
            this.addLiquidity = Object.assign(addLiquidity_send, {
                call: addLiquidity_call,
                txData: addLiquidity_txData
            });
            let createOrderParams = (params) => [params.provider, params.direction, params.allowAll, this.wallet.utils.toString(params.restrictedPrice), this.wallet.utils.toString(params.startDate), this.wallet.utils.toString(params.expire)];
            let createOrder_send = async (params, options) => {
                let result = await this.send('createOrder', createOrderParams(params), options);
                return result;
            };
            let createOrder_call = async (params, options) => {
                let result = await this.call('createOrder', createOrderParams(params), options);
                return new eth_contract_44.BigNumber(result);
            };
            let createOrder_txData = async (params, options) => {
                let result = await this.txData('createOrder', createOrderParams(params), options);
                return result;
            };
            this.createOrder = Object.assign(createOrder_send, {
                call: createOrder_call,
                txData: createOrder_txData
            });
            let initializeParams = (params) => [params.token0, params.token1];
            let initialize_send = async (params, options) => {
                let result = await this.send('initialize', initializeParams(params), options);
                return result;
            };
            let initialize_call = async (params, options) => {
                let result = await this.call('initialize', initializeParams(params), options);
                return;
            };
            let initialize_txData = async (params, options) => {
                let result = await this.txData('initialize', initializeParams(params), options);
                return result;
            };
            this.initialize = Object.assign(initialize_send, {
                call: initialize_call,
                txData: initialize_txData
            });
            let lockOfferParams = (params) => [params.direction, this.wallet.utils.toString(params.index)];
            let lockOffer_send = async (params, options) => {
                let result = await this.send('lockOffer', lockOfferParams(params), options);
                return result;
            };
            let lockOffer_call = async (params, options) => {
                let result = await this.call('lockOffer', lockOfferParams(params), options);
                return;
            };
            let lockOffer_txData = async (params, options) => {
                let result = await this.txData('lockOffer', lockOfferParams(params), options);
                return result;
            };
            this.lockOffer = Object.assign(lockOffer_send, {
                call: lockOffer_call,
                txData: lockOffer_txData
            });
            let redeemProtocolFee_send = async (options) => {
                let result = await this.send('redeemProtocolFee', [], options);
                return result;
            };
            let redeemProtocolFee_call = async (options) => {
                let result = await this.call('redeemProtocolFee', [], options);
                return;
            };
            let redeemProtocolFee_txData = async (options) => {
                let result = await this.txData('redeemProtocolFee', [], options);
                return result;
            };
            this.redeemProtocolFee = Object.assign(redeemProtocolFee_send, {
                call: redeemProtocolFee_call,
                txData: redeemProtocolFee_txData
            });
            let removeAllLiquidity_send = async (provider, options) => {
                let result = await this.send('removeAllLiquidity', [provider], options);
                return result;
            };
            let removeAllLiquidity_call = async (provider, options) => {
                let result = await this.call('removeAllLiquidity', [provider], options);
                return {
                    amount0: new eth_contract_44.BigNumber(result.amount0),
                    amount1: new eth_contract_44.BigNumber(result.amount1),
                    feeOut: new eth_contract_44.BigNumber(result.feeOut)
                };
            };
            let removeAllLiquidity_txData = async (provider, options) => {
                let result = await this.txData('removeAllLiquidity', [provider], options);
                return result;
            };
            this.removeAllLiquidity = Object.assign(removeAllLiquidity_send, {
                call: removeAllLiquidity_call,
                txData: removeAllLiquidity_txData
            });
            let removeAllLiquidity1DParams = (params) => [params.provider, params.direction];
            let removeAllLiquidity1D_send = async (params, options) => {
                let result = await this.send('removeAllLiquidity1D', removeAllLiquidity1DParams(params), options);
                return result;
            };
            let removeAllLiquidity1D_call = async (params, options) => {
                let result = await this.call('removeAllLiquidity1D', removeAllLiquidity1DParams(params), options);
                return {
                    totalAmount: new eth_contract_44.BigNumber(result.totalAmount),
                    totalReceiving: new eth_contract_44.BigNumber(result.totalReceiving),
                    totalRemainingFee: new eth_contract_44.BigNumber(result.totalRemainingFee)
                };
            };
            let removeAllLiquidity1D_txData = async (params, options) => {
                let result = await this.txData('removeAllLiquidity1D', removeAllLiquidity1DParams(params), options);
                return result;
            };
            this.removeAllLiquidity1D = Object.assign(removeAllLiquidity1D_send, {
                call: removeAllLiquidity1D_call,
                txData: removeAllLiquidity1D_txData
            });
            let removeLiquidityParams = (params) => [params.provider, params.direction, this.wallet.utils.toString(params.index), this.wallet.utils.toString(params.amountOut), this.wallet.utils.toString(params.receivingOut), this.wallet.utils.toString(params.feeOut)];
            let removeLiquidity_send = async (params, options) => {
                let result = await this.send('removeLiquidity', removeLiquidityParams(params), options);
                return result;
            };
            let removeLiquidity_call = async (params, options) => {
                let result = await this.call('removeLiquidity', removeLiquidityParams(params), options);
                return;
            };
            let removeLiquidity_txData = async (params, options) => {
                let result = await this.txData('removeLiquidity', removeLiquidityParams(params), options);
                return result;
            };
            this.removeLiquidity = Object.assign(removeLiquidity_send, {
                call: removeLiquidity_call,
                txData: removeLiquidity_txData
            });
            let setApprovedTraderBySignatureParams = (params) => [params.direction, this.wallet.utils.toString(params.offerIndex), params.trader, this.wallet.utils.toString(params.allocation), this.wallet.utils.stringToBytes(params.signature)];
            let setApprovedTraderBySignature_send = async (params, options) => {
                let result = await this.send('setApprovedTraderBySignature', setApprovedTraderBySignatureParams(params), options);
                return result;
            };
            let setApprovedTraderBySignature_call = async (params, options) => {
                let result = await this.call('setApprovedTraderBySignature', setApprovedTraderBySignatureParams(params), options);
                return;
            };
            let setApprovedTraderBySignature_txData = async (params, options) => {
                let result = await this.txData('setApprovedTraderBySignature', setApprovedTraderBySignatureParams(params), options);
                return result;
            };
            this.setApprovedTraderBySignature = Object.assign(setApprovedTraderBySignature_send, {
                call: setApprovedTraderBySignature_call,
                txData: setApprovedTraderBySignature_txData
            });
            let setLive_send = async (isLive, options) => {
                let result = await this.send('setLive', [isLive], options);
                return result;
            };
            let setLive_call = async (isLive, options) => {
                let result = await this.call('setLive', [isLive], options);
                return;
            };
            let setLive_txData = async (isLive, options) => {
                let result = await this.txData('setLive', [isLive], options);
                return result;
            };
            this.setLive = Object.assign(setLive_send, {
                call: setLive_call,
                txData: setLive_txData
            });
            let swapParams = (params) => [this.wallet.utils.toString(params.amount0Out), this.wallet.utils.toString(params.amount1Out), params.to, params.trader, this.wallet.utils.stringToBytes(params.param5)];
            let swap_send = async (params, options) => {
                let result = await this.send('swap', swapParams(params), options);
                return result;
            };
            let swap_call = async (params, options) => {
                let result = await this.call('swap', swapParams(params), options);
                return;
            };
            let swap_txData = async (params, options) => {
                let result = await this.txData('swap', swapParams(params), options);
                return result;
            };
            this.swap = Object.assign(swap_send, {
                call: swap_call,
                txData: swap_txData
            });
            let sync_send = async (options) => {
                let result = await this.send('sync', [], options);
                return result;
            };
            let sync_call = async (options) => {
                let result = await this.call('sync', [], options);
                return;
            };
            let sync_txData = async (options) => {
                let result = await this.txData('sync', [], options);
                return result;
            };
            this.sync = Object.assign(sync_send, {
                call: sync_call,
                txData: sync_txData
            });
        }
    }
    OSWAP_RestrictedPair3._abi = OSWAP_RestrictedPair3_json_1.default.abi;
    exports.OSWAP_RestrictedPair3 = OSWAP_RestrictedPair3;
});
define("@scom/scom-swap/contracts/oswap-openswap-contract/contracts/restricted/OSWAP_RestrictedPair4.json.ts", ["require", "exports"], function (require, exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    ///<amd-module name='@scom/scom-swap/contracts/oswap-openswap-contract/contracts/restricted/OSWAP_RestrictedPair4.json.ts'/> 
    exports.default = {
        "abi": [
            { "anonymous": false, "inputs": [{ "indexed": true, "internalType": "address", "name": "provider", "type": "address" }, { "indexed": true, "internalType": "bool", "name": "direction", "type": "bool" }, { "indexed": true, "internalType": "uint256", "name": "index", "type": "uint256" }, { "indexed": false, "internalType": "uint256", "name": "amount", "type": "uint256" }, { "indexed": false, "internalType": "uint256", "name": "newAmountBalance", "type": "uint256" }, { "indexed": false, "internalType": "uint256", "name": "feeIn", "type": "uint256" }, { "indexed": false, "internalType": "uint256", "name": "newFeeBalance", "type": "uint256" }], "name": "AddLiquidity", "type": "event" },
            { "anonymous": false, "inputs": [{ "indexed": true, "internalType": "bool", "name": "direction", "type": "bool" }, { "indexed": true, "internalType": "uint256", "name": "offerIndex", "type": "uint256" }, { "indexed": true, "internalType": "address", "name": "trader", "type": "address" }, { "indexed": false, "internalType": "uint256", "name": "allocation", "type": "uint256" }], "name": "ApprovedTrader", "type": "event" },
            { "anonymous": false, "inputs": [{ "indexed": true, "internalType": "bool", "name": "direction", "type": "bool" }, { "indexed": true, "internalType": "uint256", "name": "index", "type": "uint256" }], "name": "Lock", "type": "event" },
            { "anonymous": false, "inputs": [{ "indexed": true, "internalType": "address", "name": "provider", "type": "address" }, { "indexed": true, "internalType": "bool", "name": "direction", "type": "bool" }, { "indexed": false, "internalType": "uint256", "name": "index", "type": "uint256" }, { "indexed": false, "internalType": "bytes32", "name": "merkleRoot", "type": "bytes32" }, { "indexed": false, "internalType": "string", "name": "ipfsCid", "type": "string" }], "name": "MerkleRoot", "type": "event" },
            { "anonymous": false, "inputs": [{ "indexed": true, "internalType": "address", "name": "provider", "type": "address" }, { "indexed": true, "internalType": "bool", "name": "direction", "type": "bool" }, { "indexed": false, "internalType": "uint256", "name": "index", "type": "uint256" }, { "indexed": false, "internalType": "bool", "name": "allowAll", "type": "bool" }, { "indexed": false, "internalType": "uint256", "name": "restrictedPrice", "type": "uint256" }, { "indexed": false, "internalType": "uint256", "name": "startDate", "type": "uint256" }, { "indexed": false, "internalType": "uint256", "name": "expire", "type": "uint256" }], "name": "NewProviderOffer", "type": "event" },
            { "anonymous": false, "inputs": [{ "indexed": true, "internalType": "address", "name": "provider", "type": "address" }, { "indexed": true, "internalType": "bool", "name": "direction", "type": "bool" }, { "indexed": true, "internalType": "uint256", "name": "index", "type": "uint256" }, { "indexed": false, "internalType": "uint256", "name": "amountOut", "type": "uint256" }, { "indexed": false, "internalType": "uint256", "name": "receivingOut", "type": "uint256" }, { "indexed": false, "internalType": "uint256", "name": "feeOut", "type": "uint256" }, { "indexed": false, "internalType": "uint256", "name": "newAmountBalance", "type": "uint256" }, { "indexed": false, "internalType": "uint256", "name": "newReceivingBalance", "type": "uint256" }, { "indexed": false, "internalType": "uint256", "name": "newFeeBalance", "type": "uint256" }], "name": "RemoveLiquidity", "type": "event" },
            { "anonymous": false, "inputs": [{ "indexed": true, "internalType": "address", "name": "to", "type": "address" }, { "indexed": true, "internalType": "bool", "name": "direction", "type": "bool" }, { "indexed": false, "internalType": "uint256", "name": "amountIn", "type": "uint256" }, { "indexed": false, "internalType": "uint256", "name": "amountOut", "type": "uint256" }, { "indexed": false, "internalType": "uint256", "name": "tradeFee", "type": "uint256" }, { "indexed": false, "internalType": "uint256", "name": "protocolFee", "type": "uint256" }], "name": "Swap", "type": "event" },
            { "anonymous": false, "inputs": [{ "indexed": true, "internalType": "address", "name": "provider", "type": "address" }, { "indexed": true, "internalType": "bool", "name": "direction", "type": "bool" }, { "indexed": true, "internalType": "uint256", "name": "index", "type": "uint256" }, { "indexed": false, "internalType": "uint256", "name": "price", "type": "uint256" }, { "indexed": false, "internalType": "uint256", "name": "amountOut", "type": "uint256" }, { "indexed": false, "internalType": "uint256", "name": "amountIn", "type": "uint256" }, { "indexed": false, "internalType": "uint256", "name": "newAmountBalance", "type": "uint256" }, { "indexed": false, "internalType": "uint256", "name": "newReceivingBalance", "type": "uint256" }], "name": "SwappedOneOffer", "type": "event" },
            { "inputs": [{ "internalType": "bool", "name": "direction", "type": "bool" }, { "internalType": "uint256", "name": "index", "type": "uint256" }, { "internalType": "uint256", "name": "feeIn", "type": "uint256" }], "name": "addLiquidity", "outputs": [], "stateMutability": "nonpayable", "type": "function" },
            { "inputs": [{ "internalType": "bool", "name": "", "type": "bool" }, { "internalType": "uint256", "name": "", "type": "uint256" }, { "internalType": "uint256", "name": "", "type": "uint256" }], "name": "approvedTrader", "outputs": [{ "internalType": "address", "name": "", "type": "address" }], "stateMutability": "view", "type": "function" },
            { "inputs": [], "name": "configStore", "outputs": [{ "internalType": "address", "name": "", "type": "address" }], "stateMutability": "view", "type": "function" },
            { "inputs": [{ "internalType": "bool", "name": "", "type": "bool" }], "name": "counter", "outputs": [{ "internalType": "uint256", "name": "", "type": "uint256" }], "stateMutability": "view", "type": "function" },
            { "inputs": [{ "internalType": "address", "name": "provider", "type": "address" }, { "internalType": "bool", "name": "direction", "type": "bool" }, { "internalType": "bool", "name": "allowAll", "type": "bool" }, { "internalType": "uint256", "name": "restrictedPrice", "type": "uint256" }, { "internalType": "uint256", "name": "startDate", "type": "uint256" }, { "internalType": "uint256", "name": "expire", "type": "uint256" }], "name": "createOrder", "outputs": [{ "internalType": "uint256", "name": "index", "type": "uint256" }], "stateMutability": "nonpayable", "type": "function" },
            { "inputs": [], "name": "factory", "outputs": [{ "internalType": "address", "name": "", "type": "address" }], "stateMutability": "view", "type": "function" },
            { "inputs": [], "name": "feeBalance", "outputs": [{ "internalType": "uint256", "name": "", "type": "uint256" }], "stateMutability": "view", "type": "function" },
            { "inputs": [{ "internalType": "address", "name": "", "type": "address" }, { "internalType": "uint256", "name": "", "type": "uint256" }, { "internalType": "address", "name": "", "type": "address" }, { "internalType": "bytes", "name": "", "type": "bytes" }], "name": "getAmountIn", "outputs": [{ "internalType": "uint256", "name": "", "type": "uint256" }], "stateMutability": "view", "type": "function" },
            { "inputs": [{ "internalType": "address", "name": "tokenIn", "type": "address" }, { "internalType": "uint256", "name": "amountIn", "type": "uint256" }, { "internalType": "address", "name": "trader", "type": "address" }, { "internalType": "bytes", "name": "", "type": "bytes" }], "name": "getAmountOut", "outputs": [{ "internalType": "uint256", "name": "amountOut", "type": "uint256" }], "stateMutability": "view", "type": "function" },
            { "inputs": [{ "internalType": "bool", "name": "direction", "type": "bool" }, { "internalType": "uint256", "name": "offerIndex", "type": "uint256" }, { "internalType": "uint256", "name": "start", "type": "uint256" }, { "internalType": "uint256", "name": "length", "type": "uint256" }], "name": "getApprovedTrader", "outputs": [{ "internalType": "address[]", "name": "trader", "type": "address[]" }, { "internalType": "uint256[]", "name": "allocation", "type": "uint256[]" }], "stateMutability": "view", "type": "function" },
            { "inputs": [{ "internalType": "bool", "name": "direction", "type": "bool" }, { "internalType": "uint256", "name": "offerIndex", "type": "uint256" }], "name": "getApprovedTraderLength", "outputs": [{ "internalType": "uint256", "name": "", "type": "uint256" }], "stateMutability": "view", "type": "function" },
            { "inputs": [], "name": "getBalances", "outputs": [{ "internalType": "uint256", "name": "", "type": "uint256" }, { "internalType": "uint256", "name": "", "type": "uint256" }, { "internalType": "uint256", "name": "", "type": "uint256" }], "stateMutability": "view", "type": "function" },
            { "inputs": [], "name": "getLastBalances", "outputs": [{ "internalType": "uint256", "name": "", "type": "uint256" }, { "internalType": "uint256", "name": "", "type": "uint256" }], "stateMutability": "view", "type": "function" },
            { "inputs": [{ "internalType": "bool", "name": "direction", "type": "bool" }, { "internalType": "uint256", "name": "start", "type": "uint256" }, { "internalType": "uint256", "name": "length", "type": "uint256" }], "name": "getOffers", "outputs": [{ "internalType": "uint256[]", "name": "index", "type": "uint256[]" }, { "internalType": "address[]", "name": "provider", "type": "address[]" }, { "internalType": "bool[]", "name": "lockedAndAllowAll", "type": "bool[]" }, { "internalType": "uint256[]", "name": "receiving", "type": "uint256[]" }, { "internalType": "uint256[]", "name": "amountAndPrice", "type": "uint256[]" }, { "internalType": "uint256[]", "name": "startDateAndExpire", "type": "uint256[]" }], "stateMutability": "view", "type": "function" },
            { "inputs": [{ "internalType": "address", "name": "_provider", "type": "address" }, { "internalType": "bool", "name": "direction", "type": "bool" }, { "internalType": "uint256", "name": "start", "type": "uint256" }, { "internalType": "uint256", "name": "length", "type": "uint256" }], "name": "getProviderOffer", "outputs": [{ "internalType": "uint256[]", "name": "index", "type": "uint256[]" }, { "internalType": "address[]", "name": "provider", "type": "address[]" }, { "internalType": "bool[]", "name": "lockedAndAllowAll", "type": "bool[]" }, { "internalType": "uint256[]", "name": "receiving", "type": "uint256[]" }, { "internalType": "uint256[]", "name": "amountAndPrice", "type": "uint256[]" }, { "internalType": "uint256[]", "name": "startDateAndExpire", "type": "uint256[]" }], "stateMutability": "view", "type": "function" },
            { "inputs": [{ "internalType": "address", "name": "provider", "type": "address" }, { "internalType": "bool", "name": "direction", "type": "bool" }], "name": "getProviderOfferIndexLength", "outputs": [{ "internalType": "uint256", "name": "length", "type": "uint256" }], "stateMutability": "view", "type": "function" },
            { "inputs": [{ "internalType": "address", "name": "trader", "type": "address" }, { "internalType": "bool", "name": "direction", "type": "bool" }, { "internalType": "uint256", "name": "start", "type": "uint256" }, { "internalType": "uint256", "name": "length", "type": "uint256" }], "name": "getTraderOffer", "outputs": [{ "internalType": "uint256[]", "name": "index", "type": "uint256[]" }, { "internalType": "address[]", "name": "provider", "type": "address[]" }, { "internalType": "bool[]", "name": "lockedAndAllowAll", "type": "bool[]" }, { "internalType": "uint256[]", "name": "receiving", "type": "uint256[]" }, { "internalType": "uint256[]", "name": "amountAndPrice", "type": "uint256[]" }, { "internalType": "uint256[]", "name": "startDateAndExpire", "type": "uint256[]" }], "stateMutability": "view", "type": "function" },
            { "inputs": [], "name": "govToken", "outputs": [{ "internalType": "address", "name": "", "type": "address" }], "stateMutability": "view", "type": "function" },
            { "inputs": [], "name": "governance", "outputs": [{ "internalType": "address", "name": "", "type": "address" }], "stateMutability": "view", "type": "function" },
            { "inputs": [{ "internalType": "address", "name": "_token0", "type": "address" }, { "internalType": "address", "name": "_token1", "type": "address" }], "name": "initialize", "outputs": [], "stateMutability": "nonpayable", "type": "function" },
            { "inputs": [{ "internalType": "bool", "name": "", "type": "bool" }, { "internalType": "uint256", "name": "", "type": "uint256" }, { "internalType": "address", "name": "", "type": "address" }], "name": "isApprovedTrader", "outputs": [{ "internalType": "bool", "name": "", "type": "bool" }], "stateMutability": "view", "type": "function" },
            { "inputs": [], "name": "isLive", "outputs": [{ "internalType": "bool", "name": "", "type": "bool" }], "stateMutability": "view", "type": "function" },
            { "inputs": [], "name": "lastGovBalance", "outputs": [{ "internalType": "uint256", "name": "", "type": "uint256" }], "stateMutability": "view", "type": "function" },
            { "inputs": [], "name": "lastToken0Balance", "outputs": [{ "internalType": "uint256", "name": "", "type": "uint256" }], "stateMutability": "view", "type": "function" },
            { "inputs": [], "name": "lastToken1Balance", "outputs": [{ "internalType": "uint256", "name": "", "type": "uint256" }], "stateMutability": "view", "type": "function" },
            { "inputs": [{ "internalType": "bool", "name": "", "type": "bool" }, { "internalType": "uint256", "name": "", "type": "uint256" }, { "internalType": "address", "name": "", "type": "address" }], "name": "lastTraderAllocation", "outputs": [{ "internalType": "uint256", "name": "", "type": "uint256" }], "stateMutability": "view", "type": "function" },
            { "inputs": [{ "internalType": "bool", "name": "direction", "type": "bool" }, { "internalType": "uint256", "name": "index", "type": "uint256" }], "name": "lockOffer", "outputs": [], "stateMutability": "nonpayable", "type": "function" },
            { "inputs": [{ "internalType": "bool", "name": "", "type": "bool" }, { "internalType": "uint256", "name": "", "type": "uint256" }], "name": "offerAllowlistIpfsCid", "outputs": [{ "internalType": "string", "name": "", "type": "string" }], "stateMutability": "view", "type": "function" },
            { "inputs": [{ "internalType": "bool", "name": "", "type": "bool" }, { "internalType": "uint256", "name": "", "type": "uint256" }], "name": "offerMerkleRoot", "outputs": [{ "internalType": "bytes32", "name": "", "type": "bytes32" }], "stateMutability": "view", "type": "function" },
            { "inputs": [{ "internalType": "bool", "name": "", "type": "bool" }, { "internalType": "uint256", "name": "", "type": "uint256" }], "name": "offers", "outputs": [{ "internalType": "address", "name": "provider", "type": "address" }, { "internalType": "bool", "name": "locked", "type": "bool" }, { "internalType": "bool", "name": "allowAll", "type": "bool" }, { "internalType": "uint256", "name": "amount", "type": "uint256" }, { "internalType": "uint256", "name": "receiving", "type": "uint256" }, { "internalType": "uint256", "name": "restrictedPrice", "type": "uint256" }, { "internalType": "uint256", "name": "startDate", "type": "uint256" }, { "internalType": "uint256", "name": "expire", "type": "uint256" }], "stateMutability": "view", "type": "function" },
            { "inputs": [{ "internalType": "bool", "name": "", "type": "bool" }, { "internalType": "uint256", "name": "", "type": "uint256" }], "name": "prepaidFeeBalance", "outputs": [{ "internalType": "uint256", "name": "", "type": "uint256" }], "stateMutability": "view", "type": "function" },
            { "inputs": [], "name": "protocolFeeBalance0", "outputs": [{ "internalType": "uint256", "name": "", "type": "uint256" }], "stateMutability": "view", "type": "function" },
            { "inputs": [], "name": "protocolFeeBalance1", "outputs": [{ "internalType": "uint256", "name": "", "type": "uint256" }], "stateMutability": "view", "type": "function" },
            { "inputs": [{ "internalType": "bool", "name": "", "type": "bool" }, { "internalType": "address", "name": "", "type": "address" }, { "internalType": "uint256", "name": "", "type": "uint256" }], "name": "providerOfferIndex", "outputs": [{ "internalType": "uint256", "name": "", "type": "uint256" }], "stateMutability": "view", "type": "function" },
            { "inputs": [], "name": "redeemProtocolFee", "outputs": [], "stateMutability": "nonpayable", "type": "function" },
            { "inputs": [{ "internalType": "address", "name": "provider", "type": "address" }], "name": "removeAllLiquidity", "outputs": [{ "internalType": "uint256", "name": "amount0", "type": "uint256" }, { "internalType": "uint256", "name": "amount1", "type": "uint256" }, { "internalType": "uint256", "name": "feeOut", "type": "uint256" }], "stateMutability": "nonpayable", "type": "function" },
            { "inputs": [{ "internalType": "address", "name": "provider", "type": "address" }, { "internalType": "bool", "name": "direction", "type": "bool" }], "name": "removeAllLiquidity1D", "outputs": [{ "internalType": "uint256", "name": "totalAmount", "type": "uint256" }, { "internalType": "uint256", "name": "totalReceiving", "type": "uint256" }, { "internalType": "uint256", "name": "totalRemainingFee", "type": "uint256" }], "stateMutability": "nonpayable", "type": "function" },
            { "inputs": [{ "internalType": "address", "name": "provider", "type": "address" }, { "internalType": "bool", "name": "direction", "type": "bool" }, { "internalType": "uint256", "name": "index", "type": "uint256" }, { "internalType": "uint256", "name": "amountOut", "type": "uint256" }, { "internalType": "uint256", "name": "receivingOut", "type": "uint256" }, { "internalType": "uint256", "name": "feeOut", "type": "uint256" }], "name": "removeLiquidity", "outputs": [], "stateMutability": "nonpayable", "type": "function" },
            { "inputs": [], "name": "restrictedLiquidityProvider", "outputs": [{ "internalType": "address", "name": "", "type": "address" }], "stateMutability": "view", "type": "function" },
            { "inputs": [], "name": "scaleDirection", "outputs": [{ "internalType": "bool", "name": "", "type": "bool" }], "stateMutability": "view", "type": "function" },
            { "inputs": [], "name": "scaler", "outputs": [{ "internalType": "uint256", "name": "", "type": "uint256" }], "stateMutability": "view", "type": "function" },
            { "inputs": [{ "internalType": "bool", "name": "direction", "type": "bool" }, { "internalType": "uint256", "name": "offerIndex", "type": "uint256" }, { "internalType": "address", "name": "trader", "type": "address" }, { "internalType": "uint256", "name": "allocation", "type": "uint256" }, { "internalType": "bytes32[]", "name": "proof", "type": "bytes32[]" }], "name": "setApprovedTraderByMerkleProof", "outputs": [], "stateMutability": "nonpayable", "type": "function" },
            { "inputs": [{ "internalType": "bool", "name": "_isLive", "type": "bool" }], "name": "setLive", "outputs": [], "stateMutability": "nonpayable", "type": "function" },
            { "inputs": [{ "internalType": "bool", "name": "direction", "type": "bool" }, { "internalType": "uint256", "name": "index", "type": "uint256" }, { "internalType": "bytes32", "name": "merkleRoot", "type": "bytes32" }, { "internalType": "string", "name": "ipfsCid", "type": "string" }], "name": "setMerkleRoot", "outputs": [], "stateMutability": "nonpayable", "type": "function" },
            { "inputs": [{ "internalType": "uint256", "name": "amount0Out", "type": "uint256" }, { "internalType": "uint256", "name": "amount1Out", "type": "uint256" }, { "internalType": "address", "name": "to", "type": "address" }, { "internalType": "address", "name": "trader", "type": "address" }, { "internalType": "bytes", "name": "", "type": "bytes" }], "name": "swap", "outputs": [], "stateMutability": "nonpayable", "type": "function" },
            { "inputs": [], "name": "sync", "outputs": [], "stateMutability": "nonpayable", "type": "function" },
            { "inputs": [], "name": "token0", "outputs": [{ "internalType": "address", "name": "", "type": "address" }], "stateMutability": "view", "type": "function" },
            { "inputs": [], "name": "token1", "outputs": [{ "internalType": "address", "name": "", "type": "address" }], "stateMutability": "view", "type": "function" },
            { "inputs": [{ "internalType": "bool", "name": "", "type": "bool" }, { "internalType": "uint256", "name": "", "type": "uint256" }, { "internalType": "address", "name": "", "type": "address" }], "name": "traderAllocation", "outputs": [{ "internalType": "uint256", "name": "", "type": "uint256" }], "stateMutability": "view", "type": "function" },
            { "inputs": [{ "internalType": "bool", "name": "", "type": "bool" }, { "internalType": "address", "name": "", "type": "address" }, { "internalType": "uint256", "name": "", "type": "uint256" }], "name": "traderOffer", "outputs": [{ "internalType": "uint256", "name": "", "type": "uint256" }], "stateMutability": "view", "type": "function" },
            { "inputs": [], "name": "whitelistFactory", "outputs": [{ "internalType": "address", "name": "", "type": "address" }], "stateMutability": "view", "type": "function" }
        ],
        "bytecode": "610140604052600180553480156200001657600080fd5b5033606081901b60809081526000805460ff191660011781556040805163ea2ed2c160e01b81529051919384938493849363ea2ed2c1926004808301939192829003018186803b1580156200006a57600080fd5b505afa1580156200007f573d6000803e3d6000fd5b505050506040513d60808110156200009657600080fd5b5080516020808301516040808501516060958601516001600160601b031986881b811660a0529684901b90961660c052815163b716d46360e01b815291519499509197509095509293506001600160a01b0387169263b716d4639260048083019392829003018186803b1580156200010d57600080fd5b505afa15801562000122573d6000803e3d6000fd5b505050506040513d60208110156200013957600080fd5b81019080805190602001909291905050506001600160a01b0316610100816001600160a01b031660601b81525050816001600160a01b031660e0816001600160a01b031660601b81525050806001600160a01b0316610120816001600160a01b031660601b81525050600360006001151515158152602001908152602001600020604051806101000160405280306001600160a01b03168152602001600115158152602001600015158152602001600081526020016000815260200160008152602001600081526020016000815250908060018154018082558091505060019003906000526020600020906006020160009091909190915060008201518160000160006101000a8154816001600160a01b0302191690836001600160a01b0316021790555060208201518160000160146101000a81548160ff02191690831515021790555060408201518160000160156101000a81548160ff021916908315150217905550606082015181600101556080820151816002015560a0820151816003015560c0820151816004015560e0820151816005015550506003600080151515158152602001908152602001600020604051806101000160405280306001600160a01b03168152602001600115158152602001600015158152602001600081526020016000815260200160008152602001600081526020016000815250908060018154018082558091505060019003906000526020600020906006020160009091909190915060008201518160000160006101000a8154816001600160a01b0302191690836001600160a01b0316021790555060208201518160000160146101000a81548160ff02191690831515021790555060408201518160000160156101000a81548160ff021916908315150217905550606082015181600101556080820151816002015560a0820151816003015560c0820151816004015560e0820151816005015550505050505060805160601c60a05160601c60c05160601c60e05160601c6101005160601c6101205160601c61592f620004f760003980611c4b52806123a1528061265f5280612e8b525080610ec45280611092528061144c52806114b25280611ea95280612de05280614508528061456052806145ae5280614638528061473c52806147795280614e465250806112c85280611dc3528061226e5280612a5d5280612f66528061373d5280614c725250806132855280613816525080611ef352508061116c528061165b52806117b8528061213652806128795280612d4f52806131a052806138435280614eeb525061592f6000f3fe608060405234801561001057600080fd5b50600436106103405760003560e01c806379dd8fac116101bd578063bebf7a61116100f9578063db13653c116100a2578063ee13b8411161007c578063ee13b84114610e60578063f060d13914610e8e578063f5ee334814610e96578063fff6cae914610eb557610340565b8063db13653c14610d59578063e5d36ff614610dc9578063ea5dbbc414610dd157610340565b8063d21220a7116100d3578063d21220a714610c82578063d38550a714610c8a578063d7dc4e4314610cc457610340565b8063bebf7a6114610c4d578063c45a015514610c55578063cff2195e14610c5d57610340565b80639d69dc4e11610166578063a878769311610140578063a878769314610bea578063b2901aa314610c09578063b8f7a66514610c11578063bc7c9ec614610c1957610340565b80639d69dc4e14610b295780639f0a3cc114610b31578063a1d6fdf514610b6557610340565b8063835daf6c11610197578063835daf6c14610adf5780639749d21314610ae75780639cac76ac14610aef57610340565b806379dd8fac146109fa5780637a6a5e1b14610a945780637d5ca82e14610aba57610340565b80634fed6f441161028c5780635fd5e2fc116102355780636b4afee11161020f5780636b4afee1146108f657806372ca7372146108fe578063740134241461098d578063752bc9dc146109d557610340565b80635fd5e2fc1461087857806360b71d4e146108c0578063625b6ced146108c857610340565b80635a6af09d116102665780635a6af09d1461079e5780635aa6e675146107a65780635eff2d01146107ae57610340565b80634fed6f44146106bd5780635592bb5314610750578063577e6d081461079657610340565b8063364aed84116102ee5780633d0d81d6116102c85780633d0d81d61461048c578063485cc9551461066457806348c0902f1461069257610340565b8063364aed841461042f5780633c1e6ff5146104635780633c6d5c721461046b57610340565b80631da9a2bd1161031f5780631da9a2bd146103975780631deb4995146103ce57806333f175fc1461040257610340565b8062113e081461034557806305268cff1461036b5780630dfe16811461038f575b600080fd5b61034d610ebd565b60408051938452602084019290925282820152519081900360600190f35b610373611090565b604080516001600160a01b039092168252519081900360200190f35b6103736110b4565b6103bc600480360360408110156103ad57600080fd5b508035151590602001356110c3565b60408051918252519081900360200190f35b6103bc600480360360608110156103e457600080fd5b5080351515906001600160a01b0360208201351690604001356110e7565b61042d6004803603606081101561041857600080fd5b50803515159060208101359060400135611122565b005b6103bc6004803603606081101561044557600080fd5b5080351515906001600160a01b0360208201351690604001356115ee565b6103bc611613565b610473611619565b6040805192835260208301919091528051918290030190f35b6104b7600480360360608110156104a257600080fd5b50803515159060208101359060400135611623565b6040518080602001806020018060200180602001806020018060200187810387528d818151815260200191508051906020019060200280838360005b8381101561050b5781810151838201526020016104f3565b5050505090500187810386528c818151815260200191508051906020019060200280838360005b8381101561054a578181015183820152602001610532565b5050505090500187810385528b818151815260200191508051906020019060200280838360005b83811015610589578181015183820152602001610571565b5050505090500187810384528a818151815260200191508051906020019060200280838360005b838110156105c85781810151838201526020016105b0565b50505050905001878103835289818151815260200191508051906020019060200280838360005b838110156106075781810151838201526020016105ef565b50505050905001878103825288818151815260200191508051906020019060200280838360005b8381101561064657818101518382015260200161062e565b505050509050019c5050505050505050505050505060405180910390f35b61042d6004803603604081101561067a57600080fd5b506001600160a01b0381358116916020013516611650565b610373600480360360608110156106a857600080fd5b50803515159060208101359060400135611a30565b61042d600480360360a08110156106d357600080fd5b81351515916020810135916001600160a01b036040830135169160608101359181019060a08101608082013564010000000081111561071157600080fd5b82018360208201111561072357600080fd5b8035906020019184602083028401116401000000008311171561074557600080fd5b509092509050611a72565b61042d600480360360c081101561076657600080fd5b506001600160a01b0381351690602081013515159060408101359060608101359060808101359060a00135611d73565b6103bc611ee5565b6103bc611eeb565b610373611ef1565b6107df600480360360808110156107c457600080fd5b50803515159060208101359060408101359060600135611f15565b604051808060200180602001838103835285818151815260200191508051906020019060200280838360005b8381101561082357818101518382015260200161080b565b50505050905001838103825284818151815260200191508051906020019060200280838360005b8381101561086257818101518382015260200161084a565b5050505090500194505050505060405180910390f35b6103bc600480360360c081101561088e57600080fd5b506001600160a01b03813516906020810135151590604081013515159060608101359060808101359060a001356120ea565b6103bc612786565b6103bc600480360360408110156108de57600080fd5b506001600160a01b038135169060200135151561278c565b6103bc6127b5565b6103bc6004803603608081101561091457600080fd5b6001600160a01b03823581169260208101359260408201359092169181019060808101606082013564010000000081111561094e57600080fd5b82018360208201111561096057600080fd5b8035906020019184600183028401116401000000008311171561098257600080fd5b5090925090506127bb565b6109c1600480360360608110156109a357600080fd5b508035151590602081013590604001356001600160a01b0316612a08565b604080519115158252519081900360200190f35b61042d600480360360408110156109eb57600080fd5b50803515159060200135612a2e565b610a1f60048036036040811015610a1057600080fd5b50803515159060200135612b66565b6040805160208082528351818301528351919283929083019185019080838360005b83811015610a59578181015183820152602001610a41565b50505050905090810190601f168015610a865780820380516001836020036101000a031916815260200191505b509250505060405180910390f35b61034d60048036036020811015610aaa57600080fd5b50356001600160a01b0316612c28565b6103bc60048036036040811015610ad057600080fd5b50803515159060200135612ce0565b6103bc612cfd565b61042d612d03565b6104b760048036036080811015610b0557600080fd5b506001600160a01b0381351690602081013515159060408101359060600135612e5b565b610373612e89565b6103bc60048036036060811015610b4757600080fd5b508035151590602081013590604001356001600160a01b0316612ead565b61042d60048036036080811015610b7b57600080fd5b813515159160208101359160408201359190810190608081016060820135640100000000811115610bab57600080fd5b820183602082011115610bbd57600080fd5b80359060200191846001830284011164010000000083111715610bdf57600080fd5b509092509050612ed0565b6103bc60048036036020811015610c0057600080fd5b50351515613139565b6103bc61314b565b6109c1613151565b6103bc60048036036060811015610c2f57600080fd5b508035151590602081013590604001356001600160a01b031661315a565b6109c161317d565b61037361319e565b6103bc60048036036040811015610c7357600080fd5b508035151590602001356131c2565b6103736131df565b6104b760048036036080811015610ca057600080fd5b506001600160a01b03813516906020810135151590604081013590606001356131ee565b61042d600480360360a0811015610cda57600080fd5b8135916020810135916001600160a01b03604083013581169260608101359091169181019060a081016080820135640100000000811115610d1a57600080fd5b820183602082011115610d2c57600080fd5b80359060200191846001830284011164010000000083111715610d4e57600080fd5b509092509050613205565b610d7e60048036036040811015610d6f57600080fd5b508035151590602001356136a5565b604080516001600160a01b0390991689529615156020890152941515878701526060870193909352608086019190915260a085015260c084015260e083015251908190036101000190f35b61037361373b565b6103bc60048036036080811015610de757600080fd5b6001600160a01b038235811692602081013592604082013590921691810190608081016060820135640100000000811115610e2157600080fd5b820183602082011115610e3357600080fd5b80359060200191846001830284011164010000000083111715610e5557600080fd5b50909250905061375f565b61034d60048036036040811015610e7657600080fd5b506001600160a01b03813516906020013515156137ae565b610373613814565b61042d60048036036020811015610eac57600080fd5b50351515613838565b61042d6138c8565b60008060007f00000000000000000000000000000000000000000000000000000000000000006001600160a01b03166370a08231306040518263ffffffff1660e01b815260040180826001600160a01b03166001600160a01b0316815260200191505060206040518083038186803b158015610f3857600080fd5b505afa158015610f4c573d6000803e3d6000fd5b505050506040513d6020811015610f6257600080fd5b5051600954604080517f70a0823100000000000000000000000000000000000000000000000000000000815230600482015290516001600160a01b03909216916370a0823191602480820192602092909190829003018186803b158015610fc857600080fd5b505afa158015610fdc573d6000803e3d6000fd5b505050506040513d6020811015610ff257600080fd5b5051600a54604080517f70a0823100000000000000000000000000000000000000000000000000000000815230600482015290516001600160a01b03909216916370a0823191602480820192602092909190829003018186803b15801561105857600080fd5b505afa15801561106c573d6000803e3d6000fd5b505050506040513d602081101561108257600080fd5b505191945092509050909192565b7f000000000000000000000000000000000000000000000000000000000000000081565b6009546001600160a01b031681565b81151560009081526005602090815260408083208484529091529020545b92915050565b6004602052826000526040600020602052816000526040600020818154811061110c57fe5b9060005260206000200160009250925050505481565b600154600114611162576040805162461bcd60e51b81526020600482015260066024820152651313d0d2d15160d21b604482015290519081900360640190fd5b60006001819055507f00000000000000000000000000000000000000000000000000000000000000006001600160a01b031663b8f7a6656040518163ffffffff1660e01b8152600401602060405180830381600087803b1580156111c557600080fd5b505af11580156111d9573d6000803e3d6000fd5b505050506040513d60208110156111ef57600080fd5b5051611242576040805162461bcd60e51b815260206004820152600f60248201527f474c4f42414c4c59205041555345440000000000000000000000000000000000604482015290519081900360640190fd5b60005460ff16611299576040805162461bcd60e51b815260206004820152600660248201527f5041555345440000000000000000000000000000000000000000000000000000604482015290519081900360640190fd5b82151560009081526003602052604081208054849081106112b657fe5b906000526020600020906006020190507f00000000000000000000000000000000000000000000000000000000000000006001600160a01b0316336001600160a01b0316148061130f575080546001600160a01b031633145b611360576040805162461bcd60e51b815260206004820152601860248201527f4e6f742066726f6d20726f75746572206f72206f776e65720000000000000000604482015290519081900360640190fd5b600080600061136d610ebd565b92509250925084611389600c548561391b90919063ffffffff16565b10156113dc576040805162461bcd60e51b815260206004820152600d60248201527f496e76616c696420666565496e00000000000000000000000000000000000000604482015290519081900360640190fd5b8615156000908152601260209081526040808320898452909152812054611409908763ffffffff61396416565b8815801560009081526012602090815260408083208c8452909152812083905591925061149657600e5461144490849063ffffffff61391b16565b600a549091507f00000000000000000000000000000000000000000000000000000000000000006001600160a01b03908116911614156114915761148e818863ffffffff61391b16565b90505b6114f7565b600d546114aa90859063ffffffff61391b16565b6009549091507f00000000000000000000000000000000000000000000000000000000000000006001600160a01b03908116911614156114f7576114f4818863ffffffff61391b16565b90505b60008111806115065750600087115b611557576040805162461bcd60e51b815260206004820152600c60248201527f4e6f20616d6f756e7420696e0000000000000000000000000000000000000000604482015290519081900360640190fd5b600186015461156c908263ffffffff61396416565b60018701908155600c869055600d859055600e849055865490546040805184815260208101929092528181018a905260608201859052518a928c1515926001600160a01b03909116917f875b40c6ec76efb782fcbf201d80c97d55ec88aeaf3f04ddcfff825a68eec7a89181900360800190a450506001805550505050505050565b6008602052826000526040600020602052816000526040600020818154811061110c57fe5b600b5481565b600d54600e549091565b60608060608060608061163a6000808b8b8b6139be565b949e939d50919b50995097509095509350505050565b336001600160a01b037f000000000000000000000000000000000000000000000000000000000000000016146116cd576040805162461bcd60e51b815260206004820152600960248201527f464f5242494444454e0000000000000000000000000000000000000000000000604482015290519081900360640190fd5b600980546001600160a01b038085167fffffffffffffffffffffffff00000000000000000000000000000000000000009283161792839055600a80548583169316929092179182905590811691161061176d576040805162461bcd60e51b815260206004820152601860248201527f496e76616c696420746f6b656e2070616972206f726465720000000000000000604482015290519081900360640190fd5b600954600a54604080517f52a03c030000000000000000000000000000000000000000000000000000000081526001600160a01b0393841660048201529183166024830152516000927f000000000000000000000000000000000000000000000000000000000000000016916352a03c0391604480830192602092919082900301818787803b1580156117ff57600080fd5b505af1158015611813573d6000803e3d6000fd5b505050506040513d602081101561182957600080fd5b505190506001600160a01b038116611888576040805162461bcd60e51b815260206004820152600f60248201527f4e6f206f7261636c6520666f756e640000000000000000000000000000000000604482015290519081900360640190fd5b600954604080517f313ce56700000000000000000000000000000000000000000000000000000000815290516000926001600160a01b03169163313ce567916004808301926020929190829003018186803b1580156118e657600080fd5b505afa1580156118fa573d6000803e3d6000fd5b505050506040513d602081101561191057600080fd5b5051600a54604080517f313ce56700000000000000000000000000000000000000000000000000000000815290519293506000926001600160a01b039092169163313ce56791600480820192602092909190829003018186803b15801561197657600080fd5b505afa15801561198a573d6000803e3d6000fd5b505050506040513d60208110156119a057600080fd5b5051905060ff82811690821614156119bc576001600b55611a29565b600a80547fffffffffffffffffffffff00ffffffffffffffffffffffffffffffffffffffff1660ff84811684821611740100000000000000000000000000000000000000009081029290921792839055910416611a1b57808203611a1f565b8181035b60ff16600a0a600b555b5050505050565b60056020528260005260406000206020528160005260406000208181548110611a5557fe5b6000918252602090912001546001600160a01b0316925083915050565b8515156000908152601460209081526040808320888452909152902054611ae0576040805162461bcd60e51b815260206004820152601360248201527f6d65726b6c6520726f6f74206e6f742073657400000000000000000000000000604482015290519081900360640190fd5b85151560009081526014602090815260408083208884528252918290205482513360601b81840152603480820188905284518083039091018152605490910190935282519290910191909120611b3a918491849190613ec3565b611b8b576040805162461bcd60e51b815260206004820152601360248201527f6d65726b6c652070726f6f66206661696c656400000000000000000000000000604482015290519081900360640190fd5b851515600090815260136020908152604080832088845282528083206001600160a01b03881684528252808320548151606081019092526024808352611be3939192916158b59083013986919063ffffffff613edb16565b87151560008181526013602090815260408083208b845282528083206001600160a01b038b168085529083528184208a9055938352600782528083208b845282528083209383529290529081205491925090611c45908363ffffffff61396416565b905060007f00000000000000000000000000000000000000000000000000000000000000006001600160a01b031663bc14128f7f52657374726963746564506169722e66656550657254726164657200000000006040518263ffffffff1660e01b81526004018082815260200191505060206040518083038186803b158015611ccd57600080fd5b505afa158015611ce1573d6000803e3d6000fd5b505050506040513d6020811015611cf757600080fd5b505189151560009081526012602090815260408083208c8452909152902054909150611d29908263ffffffff61391b16565b89151560009081526012602090815260408083208c8452909152902055601154611d59908263ffffffff61396416565b601155611d6889898985613f72565b505050505050505050565b600154600114611db3576040805162461bcd60e51b81526020600482015260066024820152651313d0d2d15160d21b604482015290519081900360640190fd5b6000600155336001600160a01b037f0000000000000000000000000000000000000000000000000000000000000000161480611df75750336001600160a01b038716145b611e48576040805162461bcd60e51b815260206004820152601860248201527f4e6f742066726f6d20726f75746572206f72206f776e65720000000000000000604482015290519081900360640190fd5b611e568686868686866140bb565b60008086611e7657600954600a546001600160a01b039182169116611e8a565b600a546009546001600160a01b0391821691165b91509150611e9982338761431e565b611ea481338661431e565b611ecf7f0000000000000000000000000000000000000000000000000000000000000000338561431e565b611ed76144df565b505060018055505050505050565b60105481565b600d5481565b7f000000000000000000000000000000000000000000000000000000000000000081565b8315156000908152600560209081526040808320868452909152902080546060918291808610156120c45780611f51878763ffffffff61396416565b1115611f6a57611f67818763ffffffff61391b16565b94505b8467ffffffffffffffff81118015611f8157600080fd5b50604051908082528060200260200182016040528015611fab578160200160208202803683370190505b5093508467ffffffffffffffff81118015611fc557600080fd5b50604051908082528060200260200182016040528015611fef578160200160208202803683370190505b50925060005b858110156120be5788151560009081526007602090815260408083208b84529091528120908461202b848b63ffffffff61396416565b8154811061203557fe5b9060005260206000200160009054906101000a90046001600160a01b031687848151811061205f57fe5b60200260200101906001600160a01b031690816001600160a01b03168152506001600160a01b03166001600160a01b03168152602001908152602001600020548482815181106120ab57fe5b6020908102919091010152600101611ff5565b506120df565b60408051600080825260208201908152818301909252945092505b505094509492505050565b600060015460011461212c576040805162461bcd60e51b81526020600482015260066024820152651313d0d2d15160d21b604482015290519081900360640190fd5b60006001819055507f00000000000000000000000000000000000000000000000000000000000000006001600160a01b031663b8f7a6656040518163ffffffff1660e01b8152600401602060405180830381600087803b15801561218f57600080fd5b505af11580156121a3573d6000803e3d6000fd5b505050506040513d60208110156121b957600080fd5b505161220c576040805162461bcd60e51b815260206004820152600f60248201527f474c4f42414c4c59205041555345440000000000000000000000000000000000604482015290519081900360640190fd5b60005460ff16612263576040805162461bcd60e51b815260206004820152600660248201527f5041555345440000000000000000000000000000000000000000000000000000604482015290519081900360640190fd5b336001600160a01b037f00000000000000000000000000000000000000000000000000000000000000001614806122a25750336001600160a01b038816145b6122f3576040805162461bcd60e51b815260206004820152601860248201527f4e6f742066726f6d20726f75746572206f72206f776e65720000000000000000604482015290519081900360640190fd5b82821015612348576040805162461bcd60e51b815260206004820152600f60248201527f416c726561647920657870697265640000000000000000000000000000000000604482015290519081900360640190fd5b4282101561239d576040805162461bcd60e51b815260206004820152600f60248201527f416c726561647920657870697265640000000000000000000000000000000000604482015290519081900360640190fd5b60007f00000000000000000000000000000000000000000000000000000000000000006001600160a01b031663bc14128f7f52657374726963746564506169722e6d617844757200000000000000000000006040518263ffffffff1660e01b81526004018082815260200191505060206040518083038186803b15801561242357600080fd5b505afa158015612437573d6000803e3d6000fd5b505050506040513d602081101561244d57600080fd5b505190504281018311156124a8576040805162461bcd60e51b815260206004820152601360248201527f45787069726520746f6f20666172206177617900000000000000000000000000604482015290519081900360640190fd5b50600260008715151515815260200190815260200160002060008154600101919050819055905060046000871515151581526020019081526020016000206000886001600160a01b03166001600160a01b031681526020019081526020016000208190806001815401808255809150506001900390600052602060002001600090919091909150556003600087151515158152602001908152602001600020604051806101000160405280896001600160a01b031681526020016000151581526020018715158152602001600081526020016000815260200186815260200185815260200184815250908060018154018082558091505060019003906000526020600020906006020160009091909190915060008201518160000160006101000a8154816001600160a01b0302191690836001600160a01b0316021790555060208201518160000160146101000a81548160ff02191690831515021790555060408201518160000160156101000a81548160ff021916908315150217905550606082015181600101556080820151816002015560a0820151816003015560c0820151816004015560e08201518160050155505060007f00000000000000000000000000000000000000000000000000000000000000006001600160a01b031663bc14128f7f52657374726963746564506169722e6665655065724f726465720000000000006040518263ffffffff1660e01b81526004018082815260200191505060206040518083038186803b1580156126e157600080fd5b505afa1580156126f5573d6000803e3d6000fd5b505050506040513d602081101561270b57600080fd5b5051905061271988826144f2565b60408051838152871515602082015280820187905260608101869052608081018590529051881515916001600160a01b038b16917f528317aa3a915641ec93963a99c0ef7d64d16e351d258904238e941a5af151da9181900360a00190a350600180559695505050505050565b60115481565b151560009081526004602090815260408083206001600160a01b03949094168352929052205490565b600e5481565b6000808511612811576040805162461bcd60e51b815260206004820152601960248201527f494e53554646494349454e545f494e5055545f414d4f554e5400000000000000604482015290519081900360640190fd5b60608061281e60846147b8565b600954600a54604080517f069d188f0000000000000000000000000000000000000000000000000000000081526001600160a01b039384166004820181905292841660248201529051949650929450818c16149260009283927f0000000000000000000000000000000000000000000000000000000000000000169163069d188f91604480820192606092909190829003018186803b1580156128c057600080fd5b505afa1580156128d4573d6000803e3d6000fd5b505050506040513d60608110156128ea57600080fd5b50805160209091015190925090506000805b86518110156129f857600087828151811061291357fe5b60200260200101519050600260008715151515815260200190815260200160002054811115612989576040805162461bcd60e51b815260206004820152600f60248201527f4f66666572206e6f742065786973740000000000000000000000000000000000604482015290519081900360640190fd5b6129c7670de0b6b3a76400006129bb8f8a86815181106129a557fe5b602002602001015161495290919063ffffffff16565b9063ffffffff6149ab16565b92506129d786848e8489896149ed565b509093506129ed9050898463ffffffff61396416565b9850506001016128fc565b5050505050505095945050505050565b600660209081526000938452604080852082529284528284209052825290205460ff1681565b8115156000908152600360205260408120805483908110612a4b57fe5b906000526020600020906006020190507f00000000000000000000000000000000000000000000000000000000000000006001600160a01b0316336001600160a01b03161480612aa4575080546001600160a01b031633145b612af5576040805162461bcd60e51b815260206004820152601860248201527f4e6f742066726f6d20726f75746572206f72206f776e65720000000000000000604482015290519081900360640190fd5b80547fffffffffffffffffffffff00ffffffffffffffffffffffffffffffffffffffff16740100000000000000000000000000000000000000001781556040518290841515907f108c7d3c4d8ad208c92f4064bac678f032a0ac5bdbaaa1c0fdbd240b23b445ea90600090a3505050565b60156020908152600092835260408084208252918352918190208054825160026001831615610100027fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff0190921691909104601f810185900485028201850190935282815292909190830182828015612c205780601f10612bf557610100808354040283529160200191612c20565b820191906000526020600020905b815481529060010190602001808311612c0357829003601f168201915b505050505081565b6000806000600154600114612c6d576040805162461bcd60e51b81526020600482015260066024820152651313d0d2d15160d21b604482015290519081900360640190fd5b6000600181905550612c80846000614c63565b9194509250905060008080612c96876001614c63565b91945092509050612cad868363ffffffff61396416565b9550612cbf858463ffffffff61396416565b9450612cd1848263ffffffff61396416565b60018055959794965050505050565b601460209081526000928352604080842090915290825290205481565b600f5481565b600154600114612d43576040805162461bcd60e51b81526020600482015260066024820152651313d0d2d15160d21b604482015290519081900360640190fd5b600060018190555060007f00000000000000000000000000000000000000000000000000000000000000006001600160a01b031663ef3692526040518163ffffffff1660e01b8152600401602060405180830381600087803b158015612da857600080fd5b505af1158015612dbc573d6000803e3d6000fd5b505050506040513d6020811015612dd257600080fd5b5051601154909150612e07907f000000000000000000000000000000000000000000000000000000000000000090839061431e565b600954600f54612e22916001600160a01b031690839061431e565b600a54601054612e3d916001600160a01b031690839061431e565b60006011819055600f819055601055612e546144df565b5060018055565b606080606080606080612e7260018b8b8b8b6139be565b949f939e50919c509a509850909650945050505050565b7f000000000000000000000000000000000000000000000000000000000000000081565b600760209081526000938452604080852082529284528284209052825290205481565b600154600114612f10576040805162461bcd60e51b81526020600482015260066024820152651313d0d2d15160d21b604482015290519081900360640190fd5b600060018190558515158152601460209081526040808320878452909152902054831461312e578415156000908152600360205260408120805486908110612f5457fe5b906000526020600020906006020190507f00000000000000000000000000000000000000000000000000000000000000006001600160a01b0316336001600160a01b03161480612fad575080546001600160a01b031633145b612ffe576040805162461bcd60e51b815260206004820152601160248201527f6e6f742066726f6d2070726f7669646572000000000000000000000000000000604482015290519081900360640190fd5b805474010000000000000000000000000000000000000000900460ff161561306d576040805162461bcd60e51b815260206004820152600c60248201527f6f66666572206c6f636b65640000000000000000000000000000000000000000604482015290519081900360640190fd5b85151560008181526014602090815260408083208984528252808320889055928252601581528282208883529052206130a79084846157dd565b50805460408051878152602081018790526060918101828152918101859052881515926001600160a01b0316917f160ab2d76d8d1df956b0df573f9a7afff61ce0ee361cd8703326334205b8652e9189918991899189919060808201848480828437600083820152604051601f909101601f191690920182900397509095505050505050a3505b505060018055505050565b60026020526000908152604090205481565b600c5481565b60005460ff1681565b601360209081526000938452604080852082529284528284209052825290205481565b600a5474010000000000000000000000000000000000000000900460ff1681565b7f000000000000000000000000000000000000000000000000000000000000000081565b601260209081526000928352604080842090915290825290205481565b600a546001600160a01b031681565b606080606080606080612e7260028b8b8b8b6139be565b600154600114613245576040805162461bcd60e51b81526020600482015260066024820152651313d0d2d15160d21b604482015290519081900360640190fd5b60006001819055604080517f3af32abf00000000000000000000000000000000000000000000000000000000815233600482015290516001600160a01b037f00000000000000000000000000000000000000000000000000000000000000001692633af32abf92602480820193602093909283900390910190829087803b1580156132cf57600080fd5b505af11580156132e3573d6000803e3d6000fd5b505050506040513d60208110156132f957600080fd5b5051613379573233148015613314575061331233614e7f565b155b801561332857506001600160a01b03831633145b613379576040805162461bcd60e51b815260206004820152600e60248201527f496e76616c696420747261646572000000000000000000000000000000000000604482015290519081900360640190fd5b60005460ff166133d0576040805162461bcd60e51b815260206004820152600660248201527f5041555345440000000000000000000000000000000000000000000000000000604482015290519081900360640190fd5b600d54600954604080517f70a0823100000000000000000000000000000000000000000000000000000000815230600482015290516000936134789390926001600160a01b03909116916370a0823191602480820192602092909190829003018186803b15801561344057600080fd5b505afa158015613454573d6000803e3d6000fd5b505050506040513d602081101561346a57600080fd5b50519063ffffffff61391b16565b600e54600a54604080517f70a0823100000000000000000000000000000000000000000000000000000000815230600482015290519394506000936134e793926001600160a01b0316916370a08231916024808301926020929190829003018186803b15801561344057600080fd5b9050600080891580156134f957508815155b156135965761350a60018589614e85565b909250905088821015613564576040805162461bcd60e51b815260206004820152601360248201527f494e53554646494349454e545f414d4f554e5400000000000000000000000000604482015290519081900360640190fd5b600a5461357b906001600160a01b0316898461431e565b600f5461358e908263ffffffff61396416565b600f5561368d565b89158015906135a3575088155b15613640576135b460008489614e85565b90925090508982101561360e576040805162461bcd60e51b815260206004820152601360248201527f494e53554646494349454e545f414d4f554e5400000000000000000000000000604482015290519081900360640190fd5b600954613625906001600160a01b0316898461431e565b601054613638908263ffffffff61396416565b60105561368d565b6040805162461bcd60e51b815260206004820152600d60248201527f4e6f7420737570706f7274656400000000000000000000000000000000000000604482015290519081900360640190fd5b6136956144df565b5050600180555050505050505050565b600360205281600052604060002081815481106136be57fe5b60009182526020909120600690910201805460018201546002830154600384015460048501546005909501546001600160a01b038516975060ff7401000000000000000000000000000000000000000086048116975075010000000000000000000000000000000000000000009095049094169492939192909188565b7f000000000000000000000000000000000000000000000000000000000000000081565b6040805162461bcd60e51b815260206004820152600d60248201527f4e6f7420737570706f72746564000000000000000000000000000000000000006044820152905160009181900360640190fd5b60008060006001546001146137f3576040805162461bcd60e51b81526020600482015260066024820152651313d0d2d15160d21b604482015290519081900360640190fd5b60006001556138028585614c63565b60018055919790965090945092505050565b7f000000000000000000000000000000000000000000000000000000000000000081565b336001600160a01b037f000000000000000000000000000000000000000000000000000000000000000016146138b5576040805162461bcd60e51b815260206004820152600960248201527f464f5242494444454e0000000000000000000000000000000000000000000000604482015290519081900360640190fd5b6000805460ff1916911515919091179055565b600154600114613908576040805162461bcd60e51b81526020600482015260066024820152651313d0d2d15160d21b604482015290519081900360640190fd5b60006001556139156144df565b60018055565b600061395d83836040518060400160405280601e81526020017f536166654d6174683a207375627472616374696f6e206f766572666c6f770000815250613edb565b9392505050565b60008282018381101561395d576040805162461bcd60e51b815260206004820152601b60248201527f536166654d6174683a206164646974696f6e206f766572666c6f770000000000604482015290519081900360640190fd5b606080808080806000808c6139fc57505088151560008181526004602090815260408083208380528252808320938352600390915290205490613ab9565b8c60011415613a3457505088151560009081526008602090815260408083206001600160a01b038e1684529091529020805490613ab9565b8c60021415613a6c57505088151560009081526004602090815260408083206001600160a01b038e1684529091529020805490613ab9565b6040805162461bcd60e51b815260206004820152600c60248201527f556e6b6e6f776e206c6973740000000000000000000000000000000000000000604482015290519081900360640190fd5b8a151560009081526003602052604090208d90838c1015613e865783613ae58d8d63ffffffff61396416565b1115613afe57613afb848d63ffffffff61391b16565b9a505b8a67ffffffffffffffff81118015613b1557600080fd5b50604051908082528060200260200182016040528015613b3f578160200160208202803683370190505b5099508a67ffffffffffffffff81118015613b5957600080fd5b50604051908082528060200260200182016040528015613b83578160200160208202803683370190505b5098508a67ffffffffffffffff81118015613b9d57600080fd5b50604051908082528060200260200182016040528015613bc7578160200160208202803683370190505b5096508a60020293508367ffffffffffffffff81118015613be757600080fd5b50604051908082528060200260200182016040528015613c11578160200160208202803683370190505b5097508367ffffffffffffffff81118015613c2b57600080fd5b50604051908082528060200260200182016040528015613c55578160200160208202803683370190505b5095508367ffffffffffffffff81118015613c6f57600080fd5b50604051908082528060200260200182016040528015613c99578160200160208202803683370190505b50945060005b8b811015613e8057613cb7818e63ffffffff61396416565b94508215613d005782600114613ce357838581548110613cd357fe5b9060005260206000200154613cfb565b838581548110613cef57fe5b90600052602060002001545b613d02565b845b94506000828681548110613d1257fe5b90600052602060002090600602019050858c8381518110613d2f57fe5b6020908102919091010152613d4a828e63ffffffff61396416565b81548c519197506001600160a01b0316908c9084908110613d6757fe5b60200260200101906001600160a01b031690816001600160a01b0316815250508060000160149054906101000a900460ff168a8381518110613da557fe5b6020026020010190151590811515815250508060000160159054906101000a900460ff168a8781518110613dd557fe5b6020026020010190151590811515815250508060020154898381518110613df857fe5b6020026020010181815250508060010154888381518110613e1557fe5b6020026020010181815250508060030154888781518110613e3257fe5b6020026020010181815250508060040154878381518110613e4f57fe5b6020026020010181815250508060050154878781518110613e6c57fe5b602090810291909101015250600101613c9f565b50613eb2565b6040805160008082526020820181815282840191825260608301909352909a5090985096508695508594505b505050509550955095509550955095565b600082613ed186868561510e565b1495945050505050565b60008184841115613f6a5760405162461bcd60e51b81526004018080602001828103825283818151815260200191508051906020019080838360005b83811015613f2f578181015183820152602001613f17565b50505050905090810190601f168015613f5c5780820380516001836020036101000a031916815260200191505b509250505060405180910390fd5b505050900390565b831515600090815260066020908152604080832086845282528083206001600160a01b038616845290915290205460ff1661404d57831515600081815260056020908152604080832087845282528083208054600180820183559185528385200180547fffffffffffffffffffffffff0000000000000000000000000000000000000000166001600160a01b0389169081179091558585526006845282852089865284528285208186528452828520805460ff1916831790559484526008835281842094845293825282208054938401815582529020018390555b831515600081815260076020908152604080832087845282528083206001600160a01b03871680855290835292819020859055805185815290519293879390927fe51457e789313604d11150ac77eade7d4c00b796eb6429e2de5bd9a6a9716a48928290030190a450505050565b60008411614110576040805162461bcd60e51b815260206004820152601c60248201527f50726f7669646572206c6971756964697479206e6f7420666f756e6400000000604482015290519081900360640190fd5b841515600090815260036020526040812080548690811061412d57fe5b6000918252602090912060069091020180549091506001600160a01b038881169116146141a1576040805162461bcd60e51b815260206004820152601160248201527f4e6f742066726f6d2070726f7669646572000000000000000000000000000000604482015290519081900360640190fd5b805474010000000000000000000000000000000000000000900460ff1680156141ca5750600084115b156142275742816005015410614227576040805162461bcd60e51b815260206004820152600b60248201527f4e6f742065787069726564000000000000000000000000000000000000000000604482015290519081900360640190fd5b600181015461423c908563ffffffff61391b16565b60018201556002810154614256908463ffffffff61391b16565b60028201558515156000908152601260209081526040808320888452909152812054614288908463ffffffff61391b16565b87151560008181526012602090815260408083208b84528252918290208490556001860154600287015483518b81529283018a90528284018990526060830191909152608082015260a08101849052905192935088926001600160a01b038c16917f8ef78c46dea1907785e0758d7a4c5dcb0187e8c7a5b10ecf7cb043f18688af2b919081900360c00190a45050505050505050565b604080518082018252601981527f7472616e7366657228616464726573732c75696e74323536290000000000000060209182015281516001600160a01b0385811660248301526044808301869052845180840390910181526064909201845291810180517bffffffffffffffffffffffffffffffffffffffffffffffffffffffff167fa9059cbb000000000000000000000000000000000000000000000000000000001781529251815160009460609489169392918291908083835b602083106143f95780518252601f1990920191602091820191016143da565b6001836020036101000a0380198251168184511680821785525050505050509050019150506000604051808303816000865af19150503d806000811461445b576040519150601f19603f3d011682016040523d82523d6000602084013e614460565b606091505b509150915081801561448e57508051158061448e575080806020019051602081101561448b57600080fd5b50515b611a29576040805162461bcd60e51b815260206004820152600f60248201527f5452414e534645525f4641494c45440000000000000000000000000000000000604482015290519081900360640190fd5b6144e7610ebd565b600e55600d55600c55565b336001600160a01b03831614156145fc5761452f7f000000000000000000000000000000000000000000000000000000000000000083308461514a565b601154614542908263ffffffff61396416565b601155600c54614558908263ffffffff61396416565b600c556009547f00000000000000000000000000000000000000000000000000000000000000006001600160a01b03908116911614156145a957600d546145a5908263ffffffff61396416565b600d555b600a547f00000000000000000000000000000000000000000000000000000000000000006001600160a01b03908116911614156145f757600e546145f3908263ffffffff61396416565b600e555b6147b4565b604080517f70a0823100000000000000000000000000000000000000000000000000000000815230600482015290516000916001600160a01b037f000000000000000000000000000000000000000000000000000000000000000016916370a0823191602480820192602092909190829003018186803b15801561467f57600080fd5b505afa158015614693573d6000803e3d6000fd5b505050506040513d60208110156146a957600080fd5b5051600c549091506000906146c590839063ffffffff61391b16565b90508281101561471c576040805162461bcd60e51b815260206004820152600e60248201527f4e6f7420656e6f75676820666565000000000000000000000000000000000000604482015290519081900360640190fd5b60115461472f908263ffffffff61396416565b601155600c8290556009547f00000000000000000000000000000000000000000000000000000000000000006001600160a01b039081169116141561477457600d8290555b600a547f00000000000000000000000000000000000000000000000000000000000000006001600160a01b03908116911614156147b157600e8290555b50505b5050565b60608060006147cd848363ffffffff61396416565b361015614821576040805162461bcd60e51b815260206004820152601260248201527f496e76616c6964206f66666572206c6973740000000000000000000000000000604482015290519081900360640190fd5b60208401356020810280600202604087010136101561483f57600080fd5b6040516020820160020281016040528281528160408801602083013780955081602001810190508281528182604089010160208301379350600202602090810192503691506148a490614898878563ffffffff61396416565b9063ffffffff61396416565b146148f6576040805162461bcd60e51b815260206004820152601360248201527f496e76616c69642064617461206c656e67746800000000000000000000000000604482015290519081900360640190fd5b600083511161494c576040805162461bcd60e51b815260206004820152601260248201527f496e76616c6964206f66666572206c6973740000000000000000000000000000604482015290519081900360640190fd5b50915091565b600082614961575060006110e1565b8282028284828161496e57fe5b041461395d5760405162461bcd60e51b81526004018080602001828103825260218152602001806158d96021913960400191505060405180910390fd5b600061395d83836040518060400160405280601a81526020017f536166654d6174683a206469766973696f6e206279207a65726f0000000000008152506152eb565b60008080614a08620186a06129bb8a8763ffffffff61495216565b9050614a1a888263ffffffff61391b16565b9750600080866001600160a01b031663b80333ed8c614a4457600a546001600160a01b0316614a51565b6009546001600160a01b03165b8d614a67576009546001600160a01b0316614a74565b600a546001600160a01b03165b8d60008e8e604051602001808281526020019150506040516020818303038152906040526040518763ffffffff1660e01b815260040180876001600160a01b03166001600160a01b03168152602001866001600160a01b03166001600160a01b03168152602001858152602001848152602001836001600160a01b03166001600160a01b0316815260200180602001828103825283818151815260200191508051906020019080838360005b83811015614b38578181015183820152602001614b20565b50505050905090810190601f168015614b655780820380516001836020036101000a031916815260200191505b50975050505050505050604080518083038186803b158015614b8657600080fd5b505afa158015614b9a573d6000803e3d6000fd5b505050506040513d6040811015614bb057600080fd5b5080516020909101519092509050614bce8a8363ffffffff61495216565b94506001600b541115614c2557600a60149054906101000a900460ff1615158b151514614c0e57600b54614c0990869063ffffffff6149ab16565b614c22565b600b54614c2290869063ffffffff61495216565b94505b614c35858263ffffffff6149ab16565b9450614c53816129bb84670de0b6b3a764000063ffffffff61495216565b9350505096509650969350505050565b60008080336001600160a01b037f0000000000000000000000000000000000000000000000000000000000000000161480614ca65750336001600160a01b038616145b614cf7576040805162461bcd60e51b815260206004820152601860248201527f4e6f742066726f6d20726f75746572206f72206f776e65720000000000000000604482015290519081900360640190fd5b83151560009081526004602090815260408083206001600160a01b03891684529091528120805490915b81811015614dfb576000838281548110614d3757fe5b906000526020600020015490506000600360008a1515151581526020019081526020016000208281548110614d6857fe5b90600052602060002090600602019050614d8f81600101548961396490919063ffffffff16565b9750614da881600201548861396490919063ffffffff16565b8915156000908152601260209081526040808320868452909152902054909750614dd8878263ffffffff61396416565b9650614df08b8b8585600101548660020154866140bb565b505050600101614d21565b5060008087614e0b578686614e0e565b85875b6009549193509150614e2a906001600160a01b0316338461431e565b600a54614e41906001600160a01b0316338361431e565b614e6c7f0000000000000000000000000000000000000000000000000000000000000000338761431e565b614e746144df565b505050509250925092565b3b151590565b600080606080614e9560a46147b8565b915091506000614ea361585b565b600954600a54604080517f069d188f0000000000000000000000000000000000000000000000000000000081526001600160a01b0393841660048201529183166024830152517f00000000000000000000000000000000000000000000000000000000000000009092169163069d188f91604480820192606092909190829003018186803b158015614f3457600080fd5b505afa158015614f48573d6000803e3d6000fd5b505050506040513d6060811015614f5e57600080fd5b508051602080830151604090930151908401529082529150600080805b865181101561504d57614faa868281518110614f9357fe5b60200260200101518461396490919063ffffffff16565b9250614fb4615879565b6000614fd2670de0b6b3a76400006129bb8f8b87815181106129a557fe5b9050614ff58e8d8b8681518110614fe557fe5b6020026020010151848b8b615350565b6040850152602084015280835261500d908c90613964565b9a506150278260016020020151859063ffffffff61396416565b935061504182600260200201518b9063ffffffff61396416565b99505050600101614f7b565b5081670de0b6b3a7640000146150aa576040805162461bcd60e51b815260206004820152600d60248201527f496e76616c696420696e70757400000000000000000000000000000000000000604482015290519081900360640190fd5b604080518b8152602081018a90528082018390526060810189905290518c1515916001600160a01b038c16917fd55848f048ca7d5fd9869d414bb60a426c2b0125c8adb982fee123da3f841ed89181900360800190a3505050505050935093915050565b600081815b84811015615141576151378287878481811061512b57fe5b905060200201356157b0565b9150600101615113565b50949350505050565b604080516001600160a01b0385811660248301528481166044830152606480830185905283518084039091018152608490920183526020820180517bffffffffffffffffffffffffffffffffffffffffffffffffffffffff167f23b872dd0000000000000000000000000000000000000000000000000000000017815292518251600094606094938a169392918291908083835b602083106151fd5780518252601f1990920191602091820191016151de565b6001836020036101000a0380198251168184511680821785525050505050509050019150506000604051808303816000865af19150503d806000811461525f576040519150601f19603f3d011682016040523d82523d6000602084013e615264565b606091505b5091509150818015615292575080511580615292575080806020019051602081101561528f57600080fd5b50515b6152e3576040805162461bcd60e51b815260206004820152601460248201527f5452414e534645525f46524f4d5f4641494c4544000000000000000000000000604482015290519081900360640190fd5b505050505050565b6000818361533a5760405162461bcd60e51b8152602060048201818152835160248401528351909283926044909101919085019080838360008315613f2f578181015183820152602001613f17565b50600083858161534657fe5b0495945050505050565b851515600090815260026020526040812054819081908711156153ba576040805162461bcd60e51b815260206004820152600f60248201527f4f66666572206e6f742065786973740000000000000000000000000000000000604482015290519081900360640190fd5b88151560009081526003602052604081208054899081106153d757fe5b6000918252602090912060069091020180549091507501000000000000000000000000000000000000000000900460ff1680615440575089151560009081526006602090815260408083208b845282528083206001600160a01b038d16845290915290205460ff165b615491576040805162461bcd60e51b815260206004820152601560248201527f4e6f74206120617070726f766564207472616465720000000000000000000000604482015290519081900360640190fd5b80600401544210156154ea576040805162461bcd60e51b815260206004820152601360248201527f4f66666572206e6f7420626567696e2079657400000000000000000000000000604482015290519081900360640190fd5b8060050154421115615543576040805162461bcd60e51b815260206004820152600d60248201527f4f66666572206578706972656400000000000000000000000000000000000000604482015290519081900360640190fd5b60008061555a8c8a8d8d8c8c8760200201516149ed565b60208a0151929850965092506155715750876155a5565b615590620186a06129bb8960016020020151889063ffffffff61495216565b93506155a2898563ffffffff61391b16565b90505b82547501000000000000000000000000000000000000000000900460ff166156ab578b151560009081526007602090815260408083208d845282528083206001600160a01b038f1684529091529020548087111561564a576040805162461bcd60e51b815260206004820152601a60248201527f416d6f756e7420657863656564656420616c6c6f636174696f6e000000000000604482015290519081900360640190fd5b61565a818863ffffffff61391b16565b600760008f15151515815260200190815260200160002060008d815260200190815260200160002060008e6001600160a01b03166001600160a01b0316815260200190815260200160002081905550505b8260010154861115615704576040805162461bcd60e51b815260206004820152601d60248201527f416d6f756e74206578636565647320617661696c61626c652066756e64000000604482015290519081900360640190fd5b6001830154615719908763ffffffff61391b16565b60018401556002830154615733908263ffffffff61396416565b600284018190558354600185015460408051868152602081018b90528082018690526060810192909252608082019390935291518c928f1515926001600160a01b0316917f2f27f755766c13db5798f9a3fa7501574d60c8d73dd30849515c312b0bf9cc7e9181900360a00190a450505096509650969350505050565b60008183106157c8576157c382846157ce565b61395d565b61395d83835b60009182526020526040902090565b828054600181600116156101000203166002900490600052602060002090601f016020900481019282601f1061581e5782800160ff1982351617855561584b565b8280016001018555821561584b579182015b8281111561584b578235825591602001919060010190615830565b50615857929150615897565b5090565b60405180604001604052806002906020820280368337509192915050565b60405180606001604052806003906020820280368337509192915050565b6158b191905b80821115615857576000815560010161589d565b9056fe6e657720616c6c6f636174696f6e20736d616c6c6572207468616e206f726967696e616c536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f77a26469706673582212204f26a9f8da88288f7413031bf407413b7c22051fd2ed02533937e146a814d3cb64736f6c634300060b0033"
    };
});
define("@scom/scom-swap/contracts/oswap-openswap-contract/contracts/restricted/OSWAP_RestrictedPair4.ts", ["require", "exports", "@ijstech/eth-contract", "@scom/scom-swap/contracts/oswap-openswap-contract/contracts/restricted/OSWAP_RestrictedPair4.json.ts"], function (require, exports, eth_contract_45, OSWAP_RestrictedPair4_json_1) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.OSWAP_RestrictedPair4 = void 0;
    class OSWAP_RestrictedPair4 extends eth_contract_45.Contract {
        constructor(wallet, address) {
            super(wallet, address, OSWAP_RestrictedPair4_json_1.default.abi, OSWAP_RestrictedPair4_json_1.default.bytecode);
            this.assign();
        }
        deploy(options) {
            return this.__deploy([], options);
        }
        parseAddLiquidityEvent(receipt) {
            return this.parseEvents(receipt, "AddLiquidity").map(e => this.decodeAddLiquidityEvent(e));
        }
        decodeAddLiquidityEvent(event) {
            let result = event.data;
            return {
                provider: result.provider,
                direction: result.direction,
                index: new eth_contract_45.BigNumber(result.index),
                amount: new eth_contract_45.BigNumber(result.amount),
                newAmountBalance: new eth_contract_45.BigNumber(result.newAmountBalance),
                feeIn: new eth_contract_45.BigNumber(result.feeIn),
                newFeeBalance: new eth_contract_45.BigNumber(result.newFeeBalance),
                _event: event
            };
        }
        parseApprovedTraderEvent(receipt) {
            return this.parseEvents(receipt, "ApprovedTrader").map(e => this.decodeApprovedTraderEvent(e));
        }
        decodeApprovedTraderEvent(event) {
            let result = event.data;
            return {
                direction: result.direction,
                offerIndex: new eth_contract_45.BigNumber(result.offerIndex),
                trader: result.trader,
                allocation: new eth_contract_45.BigNumber(result.allocation),
                _event: event
            };
        }
        parseLockEvent(receipt) {
            return this.parseEvents(receipt, "Lock").map(e => this.decodeLockEvent(e));
        }
        decodeLockEvent(event) {
            let result = event.data;
            return {
                direction: result.direction,
                index: new eth_contract_45.BigNumber(result.index),
                _event: event
            };
        }
        parseMerkleRootEvent(receipt) {
            return this.parseEvents(receipt, "MerkleRoot").map(e => this.decodeMerkleRootEvent(e));
        }
        decodeMerkleRootEvent(event) {
            let result = event.data;
            return {
                provider: result.provider,
                direction: result.direction,
                index: new eth_contract_45.BigNumber(result.index),
                merkleRoot: result.merkleRoot,
                ipfsCid: result.ipfsCid,
                _event: event
            };
        }
        parseNewProviderOfferEvent(receipt) {
            return this.parseEvents(receipt, "NewProviderOffer").map(e => this.decodeNewProviderOfferEvent(e));
        }
        decodeNewProviderOfferEvent(event) {
            let result = event.data;
            return {
                provider: result.provider,
                direction: result.direction,
                index: new eth_contract_45.BigNumber(result.index),
                allowAll: result.allowAll,
                restrictedPrice: new eth_contract_45.BigNumber(result.restrictedPrice),
                startDate: new eth_contract_45.BigNumber(result.startDate),
                expire: new eth_contract_45.BigNumber(result.expire),
                _event: event
            };
        }
        parseRemoveLiquidityEvent(receipt) {
            return this.parseEvents(receipt, "RemoveLiquidity").map(e => this.decodeRemoveLiquidityEvent(e));
        }
        decodeRemoveLiquidityEvent(event) {
            let result = event.data;
            return {
                provider: result.provider,
                direction: result.direction,
                index: new eth_contract_45.BigNumber(result.index),
                amountOut: new eth_contract_45.BigNumber(result.amountOut),
                receivingOut: new eth_contract_45.BigNumber(result.receivingOut),
                feeOut: new eth_contract_45.BigNumber(result.feeOut),
                newAmountBalance: new eth_contract_45.BigNumber(result.newAmountBalance),
                newReceivingBalance: new eth_contract_45.BigNumber(result.newReceivingBalance),
                newFeeBalance: new eth_contract_45.BigNumber(result.newFeeBalance),
                _event: event
            };
        }
        parseSwapEvent(receipt) {
            return this.parseEvents(receipt, "Swap").map(e => this.decodeSwapEvent(e));
        }
        decodeSwapEvent(event) {
            let result = event.data;
            return {
                to: result.to,
                direction: result.direction,
                amountIn: new eth_contract_45.BigNumber(result.amountIn),
                amountOut: new eth_contract_45.BigNumber(result.amountOut),
                tradeFee: new eth_contract_45.BigNumber(result.tradeFee),
                protocolFee: new eth_contract_45.BigNumber(result.protocolFee),
                _event: event
            };
        }
        parseSwappedOneOfferEvent(receipt) {
            return this.parseEvents(receipt, "SwappedOneOffer").map(e => this.decodeSwappedOneOfferEvent(e));
        }
        decodeSwappedOneOfferEvent(event) {
            let result = event.data;
            return {
                provider: result.provider,
                direction: result.direction,
                index: new eth_contract_45.BigNumber(result.index),
                price: new eth_contract_45.BigNumber(result.price),
                amountOut: new eth_contract_45.BigNumber(result.amountOut),
                amountIn: new eth_contract_45.BigNumber(result.amountIn),
                newAmountBalance: new eth_contract_45.BigNumber(result.newAmountBalance),
                newReceivingBalance: new eth_contract_45.BigNumber(result.newReceivingBalance),
                _event: event
            };
        }
        assign() {
            let approvedTraderParams = (params) => [params.param1, this.wallet.utils.toString(params.param2), this.wallet.utils.toString(params.param3)];
            let approvedTrader_call = async (params, options) => {
                let result = await this.call('approvedTrader', approvedTraderParams(params), options);
                return result;
            };
            this.approvedTrader = approvedTrader_call;
            let configStore_call = async (options) => {
                let result = await this.call('configStore', [], options);
                return result;
            };
            this.configStore = configStore_call;
            let counter_call = async (param1, options) => {
                let result = await this.call('counter', [param1], options);
                return new eth_contract_45.BigNumber(result);
            };
            this.counter = counter_call;
            let factory_call = async (options) => {
                let result = await this.call('factory', [], options);
                return result;
            };
            this.factory = factory_call;
            let feeBalance_call = async (options) => {
                let result = await this.call('feeBalance', [], options);
                return new eth_contract_45.BigNumber(result);
            };
            this.feeBalance = feeBalance_call;
            let getAmountInParams = (params) => [params.param1, this.wallet.utils.toString(params.param2), params.param3, this.wallet.utils.stringToBytes(params.param4)];
            let getAmountIn_call = async (params, options) => {
                let result = await this.call('getAmountIn', getAmountInParams(params), options);
                return new eth_contract_45.BigNumber(result);
            };
            this.getAmountIn = getAmountIn_call;
            let getAmountOutParams = (params) => [params.tokenIn, this.wallet.utils.toString(params.amountIn), params.trader, this.wallet.utils.stringToBytes(params.param4)];
            let getAmountOut_call = async (params, options) => {
                let result = await this.call('getAmountOut', getAmountOutParams(params), options);
                return new eth_contract_45.BigNumber(result);
            };
            this.getAmountOut = getAmountOut_call;
            let getApprovedTraderParams = (params) => [params.direction, this.wallet.utils.toString(params.offerIndex), this.wallet.utils.toString(params.start), this.wallet.utils.toString(params.length)];
            let getApprovedTrader_call = async (params, options) => {
                let result = await this.call('getApprovedTrader', getApprovedTraderParams(params), options);
                return {
                    trader: result.trader,
                    allocation: result.allocation.map(e => new eth_contract_45.BigNumber(e))
                };
            };
            this.getApprovedTrader = getApprovedTrader_call;
            let getApprovedTraderLengthParams = (params) => [params.direction, this.wallet.utils.toString(params.offerIndex)];
            let getApprovedTraderLength_call = async (params, options) => {
                let result = await this.call('getApprovedTraderLength', getApprovedTraderLengthParams(params), options);
                return new eth_contract_45.BigNumber(result);
            };
            this.getApprovedTraderLength = getApprovedTraderLength_call;
            let getBalances_call = async (options) => {
                let result = await this.call('getBalances', [], options);
                return {
                    param1: new eth_contract_45.BigNumber(result[0]),
                    param2: new eth_contract_45.BigNumber(result[1]),
                    param3: new eth_contract_45.BigNumber(result[2])
                };
            };
            this.getBalances = getBalances_call;
            let getLastBalances_call = async (options) => {
                let result = await this.call('getLastBalances', [], options);
                return {
                    param1: new eth_contract_45.BigNumber(result[0]),
                    param2: new eth_contract_45.BigNumber(result[1])
                };
            };
            this.getLastBalances = getLastBalances_call;
            let getOffersParams = (params) => [params.direction, this.wallet.utils.toString(params.start), this.wallet.utils.toString(params.length)];
            let getOffers_call = async (params, options) => {
                let result = await this.call('getOffers', getOffersParams(params), options);
                return {
                    index: result.index.map(e => new eth_contract_45.BigNumber(e)),
                    provider: result.provider,
                    lockedAndAllowAll: result.lockedAndAllowAll,
                    receiving: result.receiving.map(e => new eth_contract_45.BigNumber(e)),
                    amountAndPrice: result.amountAndPrice.map(e => new eth_contract_45.BigNumber(e)),
                    startDateAndExpire: result.startDateAndExpire.map(e => new eth_contract_45.BigNumber(e))
                };
            };
            this.getOffers = getOffers_call;
            let getProviderOfferParams = (params) => [params.provider, params.direction, this.wallet.utils.toString(params.start), this.wallet.utils.toString(params.length)];
            let getProviderOffer_call = async (params, options) => {
                let result = await this.call('getProviderOffer', getProviderOfferParams(params), options);
                return {
                    index: result.index.map(e => new eth_contract_45.BigNumber(e)),
                    provider: result.provider,
                    lockedAndAllowAll: result.lockedAndAllowAll,
                    receiving: result.receiving.map(e => new eth_contract_45.BigNumber(e)),
                    amountAndPrice: result.amountAndPrice.map(e => new eth_contract_45.BigNumber(e)),
                    startDateAndExpire: result.startDateAndExpire.map(e => new eth_contract_45.BigNumber(e))
                };
            };
            this.getProviderOffer = getProviderOffer_call;
            let getProviderOfferIndexLengthParams = (params) => [params.provider, params.direction];
            let getProviderOfferIndexLength_call = async (params, options) => {
                let result = await this.call('getProviderOfferIndexLength', getProviderOfferIndexLengthParams(params), options);
                return new eth_contract_45.BigNumber(result);
            };
            this.getProviderOfferIndexLength = getProviderOfferIndexLength_call;
            let getTraderOfferParams = (params) => [params.trader, params.direction, this.wallet.utils.toString(params.start), this.wallet.utils.toString(params.length)];
            let getTraderOffer_call = async (params, options) => {
                let result = await this.call('getTraderOffer', getTraderOfferParams(params), options);
                return {
                    index: result.index.map(e => new eth_contract_45.BigNumber(e)),
                    provider: result.provider,
                    lockedAndAllowAll: result.lockedAndAllowAll,
                    receiving: result.receiving.map(e => new eth_contract_45.BigNumber(e)),
                    amountAndPrice: result.amountAndPrice.map(e => new eth_contract_45.BigNumber(e)),
                    startDateAndExpire: result.startDateAndExpire.map(e => new eth_contract_45.BigNumber(e))
                };
            };
            this.getTraderOffer = getTraderOffer_call;
            let govToken_call = async (options) => {
                let result = await this.call('govToken', [], options);
                return result;
            };
            this.govToken = govToken_call;
            let governance_call = async (options) => {
                let result = await this.call('governance', [], options);
                return result;
            };
            this.governance = governance_call;
            let isApprovedTraderParams = (params) => [params.param1, this.wallet.utils.toString(params.param2), params.param3];
            let isApprovedTrader_call = async (params, options) => {
                let result = await this.call('isApprovedTrader', isApprovedTraderParams(params), options);
                return result;
            };
            this.isApprovedTrader = isApprovedTrader_call;
            let isLive_call = async (options) => {
                let result = await this.call('isLive', [], options);
                return result;
            };
            this.isLive = isLive_call;
            let lastGovBalance_call = async (options) => {
                let result = await this.call('lastGovBalance', [], options);
                return new eth_contract_45.BigNumber(result);
            };
            this.lastGovBalance = lastGovBalance_call;
            let lastToken0Balance_call = async (options) => {
                let result = await this.call('lastToken0Balance', [], options);
                return new eth_contract_45.BigNumber(result);
            };
            this.lastToken0Balance = lastToken0Balance_call;
            let lastToken1Balance_call = async (options) => {
                let result = await this.call('lastToken1Balance', [], options);
                return new eth_contract_45.BigNumber(result);
            };
            this.lastToken1Balance = lastToken1Balance_call;
            let lastTraderAllocationParams = (params) => [params.param1, this.wallet.utils.toString(params.param2), params.param3];
            let lastTraderAllocation_call = async (params, options) => {
                let result = await this.call('lastTraderAllocation', lastTraderAllocationParams(params), options);
                return new eth_contract_45.BigNumber(result);
            };
            this.lastTraderAllocation = lastTraderAllocation_call;
            let offerAllowlistIpfsCidParams = (params) => [params.param1, this.wallet.utils.toString(params.param2)];
            let offerAllowlistIpfsCid_call = async (params, options) => {
                let result = await this.call('offerAllowlistIpfsCid', offerAllowlistIpfsCidParams(params), options);
                return result;
            };
            this.offerAllowlistIpfsCid = offerAllowlistIpfsCid_call;
            let offerMerkleRootParams = (params) => [params.param1, this.wallet.utils.toString(params.param2)];
            let offerMerkleRoot_call = async (params, options) => {
                let result = await this.call('offerMerkleRoot', offerMerkleRootParams(params), options);
                return result;
            };
            this.offerMerkleRoot = offerMerkleRoot_call;
            let offersParams = (params) => [params.param1, this.wallet.utils.toString(params.param2)];
            let offers_call = async (params, options) => {
                let result = await this.call('offers', offersParams(params), options);
                return {
                    provider: result.provider,
                    locked: result.locked,
                    allowAll: result.allowAll,
                    amount: new eth_contract_45.BigNumber(result.amount),
                    receiving: new eth_contract_45.BigNumber(result.receiving),
                    restrictedPrice: new eth_contract_45.BigNumber(result.restrictedPrice),
                    startDate: new eth_contract_45.BigNumber(result.startDate),
                    expire: new eth_contract_45.BigNumber(result.expire)
                };
            };
            this.offers = offers_call;
            let prepaidFeeBalanceParams = (params) => [params.param1, this.wallet.utils.toString(params.param2)];
            let prepaidFeeBalance_call = async (params, options) => {
                let result = await this.call('prepaidFeeBalance', prepaidFeeBalanceParams(params), options);
                return new eth_contract_45.BigNumber(result);
            };
            this.prepaidFeeBalance = prepaidFeeBalance_call;
            let protocolFeeBalance0_call = async (options) => {
                let result = await this.call('protocolFeeBalance0', [], options);
                return new eth_contract_45.BigNumber(result);
            };
            this.protocolFeeBalance0 = protocolFeeBalance0_call;
            let protocolFeeBalance1_call = async (options) => {
                let result = await this.call('protocolFeeBalance1', [], options);
                return new eth_contract_45.BigNumber(result);
            };
            this.protocolFeeBalance1 = protocolFeeBalance1_call;
            let providerOfferIndexParams = (params) => [params.param1, params.param2, this.wallet.utils.toString(params.param3)];
            let providerOfferIndex_call = async (params, options) => {
                let result = await this.call('providerOfferIndex', providerOfferIndexParams(params), options);
                return new eth_contract_45.BigNumber(result);
            };
            this.providerOfferIndex = providerOfferIndex_call;
            let restrictedLiquidityProvider_call = async (options) => {
                let result = await this.call('restrictedLiquidityProvider', [], options);
                return result;
            };
            this.restrictedLiquidityProvider = restrictedLiquidityProvider_call;
            let scaleDirection_call = async (options) => {
                let result = await this.call('scaleDirection', [], options);
                return result;
            };
            this.scaleDirection = scaleDirection_call;
            let scaler_call = async (options) => {
                let result = await this.call('scaler', [], options);
                return new eth_contract_45.BigNumber(result);
            };
            this.scaler = scaler_call;
            let token0_call = async (options) => {
                let result = await this.call('token0', [], options);
                return result;
            };
            this.token0 = token0_call;
            let token1_call = async (options) => {
                let result = await this.call('token1', [], options);
                return result;
            };
            this.token1 = token1_call;
            let traderAllocationParams = (params) => [params.param1, this.wallet.utils.toString(params.param2), params.param3];
            let traderAllocation_call = async (params, options) => {
                let result = await this.call('traderAllocation', traderAllocationParams(params), options);
                return new eth_contract_45.BigNumber(result);
            };
            this.traderAllocation = traderAllocation_call;
            let traderOfferParams = (params) => [params.param1, params.param2, this.wallet.utils.toString(params.param3)];
            let traderOffer_call = async (params, options) => {
                let result = await this.call('traderOffer', traderOfferParams(params), options);
                return new eth_contract_45.BigNumber(result);
            };
            this.traderOffer = traderOffer_call;
            let whitelistFactory_call = async (options) => {
                let result = await this.call('whitelistFactory', [], options);
                return result;
            };
            this.whitelistFactory = whitelistFactory_call;
            let addLiquidityParams = (params) => [params.direction, this.wallet.utils.toString(params.index), this.wallet.utils.toString(params.feeIn)];
            let addLiquidity_send = async (params, options) => {
                let result = await this.send('addLiquidity', addLiquidityParams(params), options);
                return result;
            };
            let addLiquidity_call = async (params, options) => {
                let result = await this.call('addLiquidity', addLiquidityParams(params), options);
                return;
            };
            let addLiquidity_txData = async (params, options) => {
                let result = await this.txData('addLiquidity', addLiquidityParams(params), options);
                return result;
            };
            this.addLiquidity = Object.assign(addLiquidity_send, {
                call: addLiquidity_call,
                txData: addLiquidity_txData
            });
            let createOrderParams = (params) => [params.provider, params.direction, params.allowAll, this.wallet.utils.toString(params.restrictedPrice), this.wallet.utils.toString(params.startDate), this.wallet.utils.toString(params.expire)];
            let createOrder_send = async (params, options) => {
                let result = await this.send('createOrder', createOrderParams(params), options);
                return result;
            };
            let createOrder_call = async (params, options) => {
                let result = await this.call('createOrder', createOrderParams(params), options);
                return new eth_contract_45.BigNumber(result);
            };
            let createOrder_txData = async (params, options) => {
                let result = await this.txData('createOrder', createOrderParams(params), options);
                return result;
            };
            this.createOrder = Object.assign(createOrder_send, {
                call: createOrder_call,
                txData: createOrder_txData
            });
            let initializeParams = (params) => [params.token0, params.token1];
            let initialize_send = async (params, options) => {
                let result = await this.send('initialize', initializeParams(params), options);
                return result;
            };
            let initialize_call = async (params, options) => {
                let result = await this.call('initialize', initializeParams(params), options);
                return;
            };
            let initialize_txData = async (params, options) => {
                let result = await this.txData('initialize', initializeParams(params), options);
                return result;
            };
            this.initialize = Object.assign(initialize_send, {
                call: initialize_call,
                txData: initialize_txData
            });
            let lockOfferParams = (params) => [params.direction, this.wallet.utils.toString(params.index)];
            let lockOffer_send = async (params, options) => {
                let result = await this.send('lockOffer', lockOfferParams(params), options);
                return result;
            };
            let lockOffer_call = async (params, options) => {
                let result = await this.call('lockOffer', lockOfferParams(params), options);
                return;
            };
            let lockOffer_txData = async (params, options) => {
                let result = await this.txData('lockOffer', lockOfferParams(params), options);
                return result;
            };
            this.lockOffer = Object.assign(lockOffer_send, {
                call: lockOffer_call,
                txData: lockOffer_txData
            });
            let redeemProtocolFee_send = async (options) => {
                let result = await this.send('redeemProtocolFee', [], options);
                return result;
            };
            let redeemProtocolFee_call = async (options) => {
                let result = await this.call('redeemProtocolFee', [], options);
                return;
            };
            let redeemProtocolFee_txData = async (options) => {
                let result = await this.txData('redeemProtocolFee', [], options);
                return result;
            };
            this.redeemProtocolFee = Object.assign(redeemProtocolFee_send, {
                call: redeemProtocolFee_call,
                txData: redeemProtocolFee_txData
            });
            let removeAllLiquidity_send = async (provider, options) => {
                let result = await this.send('removeAllLiquidity', [provider], options);
                return result;
            };
            let removeAllLiquidity_call = async (provider, options) => {
                let result = await this.call('removeAllLiquidity', [provider], options);
                return {
                    amount0: new eth_contract_45.BigNumber(result.amount0),
                    amount1: new eth_contract_45.BigNumber(result.amount1),
                    feeOut: new eth_contract_45.BigNumber(result.feeOut)
                };
            };
            let removeAllLiquidity_txData = async (provider, options) => {
                let result = await this.txData('removeAllLiquidity', [provider], options);
                return result;
            };
            this.removeAllLiquidity = Object.assign(removeAllLiquidity_send, {
                call: removeAllLiquidity_call,
                txData: removeAllLiquidity_txData
            });
            let removeAllLiquidity1DParams = (params) => [params.provider, params.direction];
            let removeAllLiquidity1D_send = async (params, options) => {
                let result = await this.send('removeAllLiquidity1D', removeAllLiquidity1DParams(params), options);
                return result;
            };
            let removeAllLiquidity1D_call = async (params, options) => {
                let result = await this.call('removeAllLiquidity1D', removeAllLiquidity1DParams(params), options);
                return {
                    totalAmount: new eth_contract_45.BigNumber(result.totalAmount),
                    totalReceiving: new eth_contract_45.BigNumber(result.totalReceiving),
                    totalRemainingFee: new eth_contract_45.BigNumber(result.totalRemainingFee)
                };
            };
            let removeAllLiquidity1D_txData = async (params, options) => {
                let result = await this.txData('removeAllLiquidity1D', removeAllLiquidity1DParams(params), options);
                return result;
            };
            this.removeAllLiquidity1D = Object.assign(removeAllLiquidity1D_send, {
                call: removeAllLiquidity1D_call,
                txData: removeAllLiquidity1D_txData
            });
            let removeLiquidityParams = (params) => [params.provider, params.direction, this.wallet.utils.toString(params.index), this.wallet.utils.toString(params.amountOut), this.wallet.utils.toString(params.receivingOut), this.wallet.utils.toString(params.feeOut)];
            let removeLiquidity_send = async (params, options) => {
                let result = await this.send('removeLiquidity', removeLiquidityParams(params), options);
                return result;
            };
            let removeLiquidity_call = async (params, options) => {
                let result = await this.call('removeLiquidity', removeLiquidityParams(params), options);
                return;
            };
            let removeLiquidity_txData = async (params, options) => {
                let result = await this.txData('removeLiquidity', removeLiquidityParams(params), options);
                return result;
            };
            this.removeLiquidity = Object.assign(removeLiquidity_send, {
                call: removeLiquidity_call,
                txData: removeLiquidity_txData
            });
            let setApprovedTraderByMerkleProofParams = (params) => [params.direction, this.wallet.utils.toString(params.offerIndex), params.trader, this.wallet.utils.toString(params.allocation), this.wallet.utils.stringToBytes32(params.proof)];
            let setApprovedTraderByMerkleProof_send = async (params, options) => {
                let result = await this.send('setApprovedTraderByMerkleProof', setApprovedTraderByMerkleProofParams(params), options);
                return result;
            };
            let setApprovedTraderByMerkleProof_call = async (params, options) => {
                let result = await this.call('setApprovedTraderByMerkleProof', setApprovedTraderByMerkleProofParams(params), options);
                return;
            };
            let setApprovedTraderByMerkleProof_txData = async (params, options) => {
                let result = await this.txData('setApprovedTraderByMerkleProof', setApprovedTraderByMerkleProofParams(params), options);
                return result;
            };
            this.setApprovedTraderByMerkleProof = Object.assign(setApprovedTraderByMerkleProof_send, {
                call: setApprovedTraderByMerkleProof_call,
                txData: setApprovedTraderByMerkleProof_txData
            });
            let setLive_send = async (isLive, options) => {
                let result = await this.send('setLive', [isLive], options);
                return result;
            };
            let setLive_call = async (isLive, options) => {
                let result = await this.call('setLive', [isLive], options);
                return;
            };
            let setLive_txData = async (isLive, options) => {
                let result = await this.txData('setLive', [isLive], options);
                return result;
            };
            this.setLive = Object.assign(setLive_send, {
                call: setLive_call,
                txData: setLive_txData
            });
            let setMerkleRootParams = (params) => [params.direction, this.wallet.utils.toString(params.index), this.wallet.utils.stringToBytes32(params.merkleRoot), params.ipfsCid];
            let setMerkleRoot_send = async (params, options) => {
                let result = await this.send('setMerkleRoot', setMerkleRootParams(params), options);
                return result;
            };
            let setMerkleRoot_call = async (params, options) => {
                let result = await this.call('setMerkleRoot', setMerkleRootParams(params), options);
                return;
            };
            let setMerkleRoot_txData = async (params, options) => {
                let result = await this.txData('setMerkleRoot', setMerkleRootParams(params), options);
                return result;
            };
            this.setMerkleRoot = Object.assign(setMerkleRoot_send, {
                call: setMerkleRoot_call,
                txData: setMerkleRoot_txData
            });
            let swapParams = (params) => [this.wallet.utils.toString(params.amount0Out), this.wallet.utils.toString(params.amount1Out), params.to, params.trader, this.wallet.utils.stringToBytes(params.param5)];
            let swap_send = async (params, options) => {
                let result = await this.send('swap', swapParams(params), options);
                return result;
            };
            let swap_call = async (params, options) => {
                let result = await this.call('swap', swapParams(params), options);
                return;
            };
            let swap_txData = async (params, options) => {
                let result = await this.txData('swap', swapParams(params), options);
                return result;
            };
            this.swap = Object.assign(swap_send, {
                call: swap_call,
                txData: swap_txData
            });
            let sync_send = async (options) => {
                let result = await this.send('sync', [], options);
                return result;
            };
            let sync_call = async (options) => {
                let result = await this.call('sync', [], options);
                return;
            };
            let sync_txData = async (options) => {
                let result = await this.txData('sync', [], options);
                return result;
            };
            this.sync = Object.assign(sync_send, {
                call: sync_call,
                txData: sync_txData
            });
        }
    }
    OSWAP_RestrictedPair4._abi = OSWAP_RestrictedPair4_json_1.default.abi;
    exports.OSWAP_RestrictedPair4 = OSWAP_RestrictedPair4;
});
define("@scom/scom-swap/contracts/oswap-openswap-contract/contracts/restricted/OSWAP_RestrictedPairCreator1.json.ts", ["require", "exports"], function (require, exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    ///<amd-module name='@scom/scom-swap/contracts/oswap-openswap-contract/contracts/restricted/OSWAP_RestrictedPairCreator1.json.ts'/> 
    exports.default = {
        "abi": [
            { "inputs": [{ "internalType": "bytes32", "name": "salt", "type": "bytes32" }], "name": "createPair", "outputs": [{ "internalType": "address", "name": "pair", "type": "address" }], "stateMutability": "nonpayable", "type": "function" }
        ],
        "bytecode": "608060405234801561001057600080fd5b5061573f806100206000396000f3fe608060405234801561001057600080fd5b506004361061002b5760003560e01c8063ed25a5a214610030575b600080fd5b61004d6004803603602081101561004657600080fd5b5035610076565b6040805173ffffffffffffffffffffffffffffffffffffffff9092168252519081900360200190f35b600060606040518060200161008a906100b1565b6020820181038252601f19601f820116604052509050828151602083016000f59392505050565b61564b806100bf8339019056fe610140604052600180553480156200001657600080fd5b5033606081901b60809081526000805460ff191660011781556040805163ea2ed2c160e01b81529051919384938493849363ea2ed2c1926004808301939192829003018186803b1580156200006a57600080fd5b505afa1580156200007f573d6000803e3d6000fd5b505050506040513d60808110156200009657600080fd5b5080516020808301516040808501516060958601516001600160601b031986881b811660a0529684901b90961660c052815163b716d46360e01b815291519499509197509095509293506001600160a01b0387169263b716d4639260048083019392829003018186803b1580156200010d57600080fd5b505afa15801562000122573d6000803e3d6000fd5b505050506040513d60208110156200013957600080fd5b81019080805190602001909291905050506001600160a01b0316610100816001600160a01b031660601b81525050816001600160a01b031660e0816001600160a01b031660601b81525050806001600160a01b0316610120816001600160a01b031660601b81525050600360006001151515158152602001908152602001600020604051806101000160405280306001600160a01b03168152602001600115158152602001600015158152602001600081526020016000815260200160008152602001600081526020016000815250908060018154018082558091505060019003906000526020600020906006020160009091909190915060008201518160000160006101000a8154816001600160a01b0302191690836001600160a01b0316021790555060208201518160000160146101000a81548160ff02191690831515021790555060408201518160000160156101000a81548160ff021916908315150217905550606082015181600101556080820151816002015560a0820151816003015560c0820151816004015560e0820151816005015550506003600080151515158152602001908152602001600020604051806101000160405280306001600160a01b03168152602001600115158152602001600015158152602001600081526020016000815260200160008152602001600081526020016000815250908060018154018082558091505060019003906000526020600020906006020160009091909190915060008201518160000160006101000a8154816001600160a01b0302191690836001600160a01b0316021790555060208201518160000160146101000a81548160ff02191690831515021790555060408201518160000160156101000a81548160ff021916908315150217905550606082015181600101556080820151816002015560a0820151816003015560c0820151816004015560e0820151816005015550505050505060805160601c60a05160601c60c05160601c60e05160601c6101005160601c6101205160601c615168620004e3600039806119045280611bc252806127135280613a8a525080610d665280610f3452806126685280613634528061368c52806136da5280613764528061386852806138a55250806117d1528061207652806123255280612d3a5280612f2e528061390f528061417f5250806128645280612e0e525080611456525080611031528061118e52806116995280611e9252806121c952806125d7528061279c5280612e3b528061458d52506151686000f3fe608060405234801561001057600080fd5b50600436106103145760003560e01c806376701636116101a7578063d21220a7116100ee578063ea5dbbc411610097578063f5ee334811610071578063f5ee334814610cf8578063fa69ce2b14610d17578063fff6cae914610d5757610314565b8063ea5dbbc414610c33578063ee13b84114610cc2578063f060d13914610cf057610314565b8063db13653c116100c8578063db13653c14610b81578063db47533e14610bf1578063e5d36ff614610c2b57610314565b8063d21220a714610aaa578063d38550a714610ab2578063d7dc4e4314610aec57610314565b80639f0a3cc111610150578063b8f7a6651161012a578063b8f7a66514610a92578063bebf7a6114610a9a578063c45a015514610aa257610314565b80639f0a3cc114610a37578063a878769314610a6b578063b2901aa314610a8a57610314565b80639749d213116101815780639749d213146109ed5780639cac76ac146109f55780639d69dc4e14610a2f57610314565b8063767016361461099a5780637a6a5e1b146109bf578063835daf6c146109e557610314565b8063577e6d081161026b578063625b6ced1161021457806372ca7372116101ee57806372ca73721461089e578063740134241461092d578063752bc9dc1461097557610314565b8063625b6ced146107985780636322fa32146107c65780636b4afee11461089657610314565b80635eff2d01116102455780635eff2d011461067e5780635fd5e2fc1461074857806360b71d4e1461079057610314565b8063577e6d08146106665780635a6af09d1461066e5780635aa6e6751461067657610314565b8063364aed84116102cd5780633d0d81d6116102a75780633d0d81d614610433578063485cc9551461060b57806348c0902f1461063b57610314565b8063364aed84146103d65780633c1e6ff51461040a5780633c6d5c721461041257610314565b80630dfe1681116102fe5780630dfe1681146103635780631da9a2bd1461036b5780631deb4995146103a257610314565b8062113e081461031957806305268cff1461033f575b600080fd5b610321610d5f565b60408051938452602084019290925282820152519081900360600190f35b610347610f32565b604080516001600160a01b039092168252519081900360200190f35b610347610f56565b6103906004803603604081101561038157600080fd5b50803515159060200135610f65565b60408051918252519081900360200190f35b610390600480360360608110156103b857600080fd5b5080351515906001600160a01b036020820135169060400135610f89565b610390600480360360608110156103ec57600080fd5b5080351515906001600160a01b036020820135169060400135610fc4565b610390610fe9565b61041a610fef565b6040805192835260208301919091528051918290030190f35b61045e6004803603606081101561044957600080fd5b50803515159060208101359060400135610ff9565b6040518080602001806020018060200180602001806020018060200187810387528d818151815260200191508051906020019060200280838360005b838110156104b257818101518382015260200161049a565b5050505090500187810386528c818151815260200191508051906020019060200280838360005b838110156104f15781810151838201526020016104d9565b5050505090500187810385528b818151815260200191508051906020019060200280838360005b83811015610530578181015183820152602001610518565b5050505090500187810384528a818151815260200191508051906020019060200280838360005b8381101561056f578181015183820152602001610557565b50505050905001878103835289818151815260200191508051906020019060200280838360005b838110156105ae578181015183820152602001610596565b50505050905001878103825288818151815260200191508051906020019060200280838360005b838110156105ed5781810151838201526020016105d5565b505050509050019c5050505050505050505050505060405180910390f35b6106396004803603604081101561062157600080fd5b506001600160a01b0381358116916020013516611026565b005b6103476004803603606081101561065157600080fd5b50803515159060208101359060400135611406565b610390611448565b61039061144e565b610347611454565b6106af6004803603608081101561069457600080fd5b50803515159060208101359060408101359060600135611478565b604051808060200180602001838103835285818151815260200191508051906020019060200280838360005b838110156106f35781810151838201526020016106db565b50505050905001838103825284818151815260200191508051906020019060200280838360005b8381101561073257818101518382015260200161071a565b5050505090500194505050505060405180910390f35b610390600480360360c081101561075e57600080fd5b506001600160a01b03813516906020810135151590604081013515159060608101359060808101359060a0013561164d565b610390611ce9565b610390600480360360408110156107ae57600080fd5b506001600160a01b0381351690602001351515611cef565b610639600480360360808110156107dc57600080fd5b813515159160208101359181019060608101604082013564010000000081111561080557600080fd5b82018360208201111561081757600080fd5b8035906020019184602083028401116401000000008311171561083957600080fd5b91939092909160208101903564010000000081111561085757600080fd5b82018360208201111561086957600080fd5b8035906020019184602083028401116401000000008311171561088b57600080fd5b509092509050611d18565b610390611dce565b610390600480360360808110156108b457600080fd5b6001600160a01b0382358116926020810135926040820135909216918101906080810160608201356401000000008111156108ee57600080fd5b82018360208201111561090057600080fd5b8035906020019184600183028401116401000000008311171561092257600080fd5b509092509050611dd4565b6109616004803603606081101561094357600080fd5b508035151590602081013590604001356001600160a01b0316612021565b604080519115158252519081900360200190f35b6106396004803603604081101561098b57600080fd5b50803515159060200135612047565b610639600480360360408110156109b057600080fd5b5080351515906020013561217f565b61041a600480360360208110156109d557600080fd5b50356001600160a01b03166124e7565b610390612585565b61063961258b565b61045e60048036036080811015610a0b57600080fd5b506001600160a01b03813516906020810135151590604081013590606001356126e3565b610347612711565b61039060048036036060811015610a4d57600080fd5b508035151590602081013590604001356001600160a01b0316612735565b61039060048036036020811015610a8157600080fd5b50351515612758565b61039061276a565b610961612770565b610961612779565b61034761279a565b6103476127be565b61045e60048036036080811015610ac857600080fd5b506001600160a01b03813516906020810135151590604081013590606001356127cd565b610639600480360360a0811015610b0257600080fd5b8135916020810135916001600160a01b03604083013581169260608101359091169181019060a081016080820135640100000000811115610b4257600080fd5b820183602082011115610b5457600080fd5b80359060200191846001830284011164010000000083111715610b7657600080fd5b5090925090506127e4565b610ba660048036036040811015610b9757600080fd5b50803515159060200135612c84565b604080516001600160a01b0390991689529615156020890152941515878701526060870193909352608086019190915260a085015260c084015260e083015251908190036101000190f35b61063960048036036080811015610c0757600080fd5b5080351515906020810135906001600160a01b036040820135169060600135612d1a565b610347612d38565b61039060048036036080811015610c4957600080fd5b6001600160a01b038235811692602081013592604082013590921691810190608081016060820135640100000000811115610c8357600080fd5b820183602082011115610c9557600080fd5b80359060200191846001830284011164010000000083111715610cb757600080fd5b509092509050612d5c565b61041a60048036036040811015610cd857600080fd5b506001600160a01b0381351690602001351515612dab565b610347612e0c565b61063960048036036020811015610d0e57600080fd5b50351515612e30565b610639600480360360a0811015610d2d57600080fd5b506001600160a01b0381351690602081013515159060408101359060608101359060800135612ede565b610639613023565b60008060007f00000000000000000000000000000000000000000000000000000000000000006001600160a01b03166370a08231306040518263ffffffff1660e01b815260040180826001600160a01b03166001600160a01b0316815260200191505060206040518083038186803b158015610dda57600080fd5b505afa158015610dee573d6000803e3d6000fd5b505050506040513d6020811015610e0457600080fd5b5051600954604080517f70a0823100000000000000000000000000000000000000000000000000000000815230600482015290516001600160a01b03909216916370a0823191602480820192602092909190829003018186803b158015610e6a57600080fd5b505afa158015610e7e573d6000803e3d6000fd5b505050506040513d6020811015610e9457600080fd5b5051600a54604080517f70a0823100000000000000000000000000000000000000000000000000000000815230600482015290516001600160a01b03909216916370a0823191602480820192602092909190829003018186803b158015610efa57600080fd5b505afa158015610f0e573d6000803e3d6000fd5b505050506040513d6020811015610f2457600080fd5b505191945092509050909192565b7f000000000000000000000000000000000000000000000000000000000000000081565b6009546001600160a01b031681565b81151560009081526005602090815260408083208484529091529020545b92915050565b60046020528260005260406000206020528160005260406000208181548110610fae57fe5b9060005260206000200160009250925050505481565b60086020528260005260406000206020528160005260406000208181548110610fae57fe5b600b5481565b600d54600e549091565b6060806060806060806110106000808b8b8b613076565b949e939d50919b50995097509095509350505050565b336001600160a01b037f000000000000000000000000000000000000000000000000000000000000000016146110a3576040805162461bcd60e51b815260206004820152600960248201527f464f5242494444454e0000000000000000000000000000000000000000000000604482015290519081900360640190fd5b600980546001600160a01b038085167fffffffffffffffffffffffff00000000000000000000000000000000000000009283161792839055600a805485831693169290921791829055908116911610611143576040805162461bcd60e51b815260206004820152601860248201527f496e76616c696420746f6b656e2070616972206f726465720000000000000000604482015290519081900360640190fd5b600954600a54604080517f52a03c030000000000000000000000000000000000000000000000000000000081526001600160a01b0393841660048201529183166024830152516000927f000000000000000000000000000000000000000000000000000000000000000016916352a03c0391604480830192602092919082900301818787803b1580156111d557600080fd5b505af11580156111e9573d6000803e3d6000fd5b505050506040513d60208110156111ff57600080fd5b505190506001600160a01b03811661125e576040805162461bcd60e51b815260206004820152600f60248201527f4e6f206f7261636c6520666f756e640000000000000000000000000000000000604482015290519081900360640190fd5b600954604080517f313ce56700000000000000000000000000000000000000000000000000000000815290516000926001600160a01b03169163313ce567916004808301926020929190829003018186803b1580156112bc57600080fd5b505afa1580156112d0573d6000803e3d6000fd5b505050506040513d60208110156112e657600080fd5b5051600a54604080517f313ce56700000000000000000000000000000000000000000000000000000000815290519293506000926001600160a01b039092169163313ce56791600480820192602092909190829003018186803b15801561134c57600080fd5b505afa158015611360573d6000803e3d6000fd5b505050506040513d602081101561137657600080fd5b5051905060ff8281169082161415611392576001600b556113ff565b600a80547fffffffffffffffffffffff00ffffffffffffffffffffffffffffffffffffffff1660ff848116848216117401000000000000000000000000000000000000000090810292909217928390559104166113f1578082036113f5565b8181035b60ff16600a0a600b555b5050505050565b6005602052826000526040600020602052816000526040600020818154811061142b57fe5b6000918252602090912001546001600160a01b0316925083915050565b60105481565b600d5481565b7f000000000000000000000000000000000000000000000000000000000000000081565b83151560009081526005602090815260408083208684529091529020805460609182918086101561162757806114b4878763ffffffff61357b16565b11156114cd576114ca818763ffffffff6135dc16565b94505b8467ffffffffffffffff811180156114e457600080fd5b5060405190808252806020026020018201604052801561150e578160200160208202803683370190505b5093508467ffffffffffffffff8111801561152857600080fd5b50604051908082528060200260200182016040528015611552578160200160208202803683370190505b50925060005b858110156116215788151560009081526007602090815260408083208b84529091528120908461158e848b63ffffffff61357b16565b8154811061159857fe5b9060005260206000200160009054906101000a90046001600160a01b03168784815181106115c257fe5b60200260200101906001600160a01b031690816001600160a01b03168152506001600160a01b03166001600160a01b031681526020019081526020016000205484828151811061160e57fe5b6020908102919091010152600101611558565b50611642565b60408051600080825260208201908152818301909252945092505b505094509492505050565b600060015460011461168f576040805162461bcd60e51b81526020600482015260066024820152651313d0d2d15160d21b604482015290519081900360640190fd5b60006001819055507f00000000000000000000000000000000000000000000000000000000000000006001600160a01b031663b8f7a6656040518163ffffffff1660e01b8152600401602060405180830381600087803b1580156116f257600080fd5b505af1158015611706573d6000803e3d6000fd5b505050506040513d602081101561171c57600080fd5b505161176f576040805162461bcd60e51b815260206004820152600f60248201527f474c4f42414c4c59205041555345440000000000000000000000000000000000604482015290519081900360640190fd5b60005460ff166117c6576040805162461bcd60e51b815260206004820152600660248201527f5041555345440000000000000000000000000000000000000000000000000000604482015290519081900360640190fd5b336001600160a01b037f00000000000000000000000000000000000000000000000000000000000000001614806118055750336001600160a01b038816145b611856576040805162461bcd60e51b815260206004820152601860248201527f4e6f742066726f6d20726f75746572206f72206f776e65720000000000000000604482015290519081900360640190fd5b828210156118ab576040805162461bcd60e51b815260206004820152600f60248201527f416c726561647920657870697265640000000000000000000000000000000000604482015290519081900360640190fd5b42821015611900576040805162461bcd60e51b815260206004820152600f60248201527f416c726561647920657870697265640000000000000000000000000000000000604482015290519081900360640190fd5b60007f00000000000000000000000000000000000000000000000000000000000000006001600160a01b031663bc14128f7f52657374726963746564506169722e6d617844757200000000000000000000006040518263ffffffff1660e01b81526004018082815260200191505060206040518083038186803b15801561198657600080fd5b505afa15801561199a573d6000803e3d6000fd5b505050506040513d60208110156119b057600080fd5b50519050428101831115611a0b576040805162461bcd60e51b815260206004820152601360248201527f45787069726520746f6f20666172206177617900000000000000000000000000604482015290519081900360640190fd5b50600260008715151515815260200190815260200160002060008154600101919050819055905060046000871515151581526020019081526020016000206000886001600160a01b03166001600160a01b031681526020019081526020016000208190806001815401808255809150506001900390600052602060002001600090919091909150556003600087151515158152602001908152602001600020604051806101000160405280896001600160a01b031681526020016000151581526020018715158152602001600081526020016000815260200186815260200185815260200184815250908060018154018082558091505060019003906000526020600020906006020160009091909190915060008201518160000160006101000a8154816001600160a01b0302191690836001600160a01b0316021790555060208201518160000160146101000a81548160ff02191690831515021790555060408201518160000160156101000a81548160ff021916908315150217905550606082015181600101556080820151816002015560a0820151816003015560c0820151816004015560e08201518160050155505060007f00000000000000000000000000000000000000000000000000000000000000006001600160a01b031663bc14128f7f52657374726963746564506169722e6665655065724f726465720000000000006040518263ffffffff1660e01b81526004018082815260200191505060206040518083038186803b158015611c4457600080fd5b505afa158015611c58573d6000803e3d6000fd5b505050506040513d6020811015611c6e57600080fd5b50519050611c7c888261361e565b60408051838152871515602082015280820187905260608101869052608081018590529051881515916001600160a01b038b16917f528317aa3a915641ec93963a99c0ef7d64d16e351d258904238e941a5af151da9181900360a00190a350600180559695505050505050565b60115481565b151560009081526004602090815260408083206001600160a01b03949094168352929052205490565b82818114611d6d576040805162461bcd60e51b815260206004820152601060248201527f6c656e677468206e6f74206d6174636800000000000000000000000000000000604482015290519081900360640190fd5b611d788787836138e0565b60005b81811015611dc457611dbc8888888885818110611d9457fe5b905060200201356001600160a01b0316878786818110611db057fe5b90506020020135613b5f565b600101611d7b565b5050505050505050565b600e5481565b6000808511611e2a576040805162461bcd60e51b815260206004820152601960248201527f494e53554646494349454e545f494e5055545f414d4f554e5400000000000000604482015290519081900360640190fd5b606080611e376084613cc6565b600954600a54604080517f069d188f0000000000000000000000000000000000000000000000000000000081526001600160a01b039384166004820181905292841660248201529051949650929450818c16149260009283927f0000000000000000000000000000000000000000000000000000000000000000169163069d188f91604480820192606092909190829003018186803b158015611ed957600080fd5b505afa158015611eed573d6000803e3d6000fd5b505050506040513d6060811015611f0357600080fd5b50805160209091015190925090506000805b8651811015612011576000878281518110611f2c57fe5b60200260200101519050600260008715151515815260200190815260200160002054811115611fa2576040805162461bcd60e51b815260206004820152600f60248201527f4f66666572206e6f742065786973740000000000000000000000000000000000604482015290519081900360640190fd5b611fe0670de0b6b3a7640000611fd48f8a8681518110611fbe57fe5b6020026020010151613e6090919063ffffffff16565b9063ffffffff613eb916565b9250611ff086848e848989613efb565b509093506120069050898463ffffffff61357b16565b985050600101611f15565b5050505050505095945050505050565b600660209081526000938452604080852082529284528284209052825290205460ff1681565b811515600090815260036020526040812080548390811061206457fe5b906000526020600020906006020190507f00000000000000000000000000000000000000000000000000000000000000006001600160a01b0316336001600160a01b031614806120bd575080546001600160a01b031633145b61210e576040805162461bcd60e51b815260206004820152601860248201527f4e6f742066726f6d20726f75746572206f72206f776e65720000000000000000604482015290519081900360640190fd5b80547fffffffffffffffffffffff00ffffffffffffffffffffffffffffffffffffffff16740100000000000000000000000000000000000000001781556040518290841515907f108c7d3c4d8ad208c92f4064bac678f032a0ac5bdbaaa1c0fdbd240b23b445ea90600090a3505050565b6001546001146121bf576040805162461bcd60e51b81526020600482015260066024820152651313d0d2d15160d21b604482015290519081900360640190fd5b60006001819055507f00000000000000000000000000000000000000000000000000000000000000006001600160a01b031663b8f7a6656040518163ffffffff1660e01b8152600401602060405180830381600087803b15801561222257600080fd5b505af1158015612236573d6000803e3d6000fd5b505050506040513d602081101561224c57600080fd5b505161229f576040805162461bcd60e51b815260206004820152600f60248201527f474c4f42414c4c59205041555345440000000000000000000000000000000000604482015290519081900360640190fd5b60005460ff166122f6576040805162461bcd60e51b815260206004820152600660248201527f5041555345440000000000000000000000000000000000000000000000000000604482015290519081900360640190fd5b811515600090815260036020526040812080548390811061231357fe5b906000526020600020906006020190507f00000000000000000000000000000000000000000000000000000000000000006001600160a01b0316336001600160a01b0316148061236c575080546001600160a01b031633145b6123bd576040805162461bcd60e51b815260206004820152601860248201527f4e6f742066726f6d20726f75746572206f72206f776e65720000000000000000604482015290519081900360640190fd5b60008060006123ca610d5f565b925092509250600086156123f357600e546123ec90839063ffffffff6135dc16565b905061240a565b600d5461240790849063ffffffff6135dc16565b90505b6000811161245f576040805162461bcd60e51b815260206004820152600c60248201527f4e6f20616d6f756e7420696e0000000000000000000000000000000000000000604482015290519081900360640190fd5b6001850154612474908263ffffffff61357b16565b60018601908155600c859055600d849055600e83905585549054604080518481526020810192909252805189938b1515936001600160a01b03909116927ffb32bd9fa1413efecfb3f4b7ef2a5b60f1b61b33bb3bcd74970cb23fb2762d1992918290030190a45050600180555050505050565b60008060015460011461252a576040805162461bcd60e51b81526020600482015260066024820152651313d0d2d15160d21b604482015290519081900360640190fd5b600060018190555061253d836000614171565b9092509050600080612550856001614171565b9092509050612565848263ffffffff61357b16565b9350612577838363ffffffff61357b16565b600180559395939450505050565b600f5481565b6001546001146125cb576040805162461bcd60e51b81526020600482015260066024820152651313d0d2d15160d21b604482015290519081900360640190fd5b600060018190555060007f00000000000000000000000000000000000000000000000000000000000000006001600160a01b031663ef3692526040518163ffffffff1660e01b8152600401602060405180830381600087803b15801561263057600080fd5b505af1158015612644573d6000803e3d6000fd5b505050506040513d602081101561265a57600080fd5b505160115490915061268f907f000000000000000000000000000000000000000000000000000000000000000090839061432f565b600954600f546126aa916001600160a01b031690839061432f565b600a546010546126c5916001600160a01b031690839061432f565b60006011819055600f8190556010556126dc61450e565b5060018055565b6060806060806060806126fa60018b8b8b8b613076565b949f939e50919c509a509850909650945050505050565b7f000000000000000000000000000000000000000000000000000000000000000081565b600760209081526000938452604080852082529284528284209052825290205481565b60026020526000908152604090205481565b600c5481565b60005460ff1681565b600a5474010000000000000000000000000000000000000000900460ff1681565b7f000000000000000000000000000000000000000000000000000000000000000081565b600a546001600160a01b031681565b6060806060806060806126fa60028b8b8b8b613076565b600154600114612824576040805162461bcd60e51b81526020600482015260066024820152651313d0d2d15160d21b604482015290519081900360640190fd5b60006001819055604080517f3af32abf00000000000000000000000000000000000000000000000000000000815233600482015290516001600160a01b037f00000000000000000000000000000000000000000000000000000000000000001692633af32abf92602480820193602093909283900390910190829087803b1580156128ae57600080fd5b505af11580156128c2573d6000803e3d6000fd5b505050506040513d60208110156128d857600080fd5b50516129585732331480156128f357506128f133614521565b155b801561290757506001600160a01b03831633145b612958576040805162461bcd60e51b815260206004820152600e60248201527f496e76616c696420747261646572000000000000000000000000000000000000604482015290519081900360640190fd5b60005460ff166129af576040805162461bcd60e51b815260206004820152600660248201527f5041555345440000000000000000000000000000000000000000000000000000604482015290519081900360640190fd5b600d54600954604080517f70a082310000000000000000000000000000000000000000000000000000000081523060048201529051600093612a579390926001600160a01b03909116916370a0823191602480820192602092909190829003018186803b158015612a1f57600080fd5b505afa158015612a33573d6000803e3d6000fd5b505050506040513d6020811015612a4957600080fd5b50519063ffffffff6135dc16565b600e54600a54604080517f70a082310000000000000000000000000000000000000000000000000000000081523060048201529051939450600093612ac693926001600160a01b0316916370a08231916024808301926020929190829003018186803b158015612a1f57600080fd5b905060008089158015612ad857508815155b15612b7557612ae960018589614527565b909250905088821015612b43576040805162461bcd60e51b815260206004820152601360248201527f494e53554646494349454e545f414d4f554e5400000000000000000000000000604482015290519081900360640190fd5b600a54612b5a906001600160a01b0316898461432f565b600f54612b6d908263ffffffff61357b16565b600f55612c6c565b8915801590612b82575088155b15612c1f57612b9360008489614527565b909250905089821015612bed576040805162461bcd60e51b815260206004820152601360248201527f494e53554646494349454e545f414d4f554e5400000000000000000000000000604482015290519081900360640190fd5b600954612c04906001600160a01b0316898461432f565b601054612c17908263ffffffff61357b16565b601055612c6c565b6040805162461bcd60e51b815260206004820152600d60248201527f4e6f7420737570706f7274656400000000000000000000000000000000000000604482015290519081900360640190fd5b612c7461450e565b5050600180555050505050505050565b60036020528160005260406000208181548110612c9d57fe5b60009182526020909120600690910201805460018201546002830154600384015460048501546005909501546001600160a01b038516975060ff7401000000000000000000000000000000000000000086048116975075010000000000000000000000000000000000000000009095049094169492939192909188565b612d26848460016138e0565b612d3284848484613b5f565b50505050565b7f000000000000000000000000000000000000000000000000000000000000000081565b6040805162461bcd60e51b815260206004820152600d60248201527f4e6f7420737570706f72746564000000000000000000000000000000000000006044820152905160009181900360640190fd5b600080600154600114612dee576040805162461bcd60e51b81526020600482015260066024820152651313d0d2d15160d21b604482015290519081900360640190fd5b6000600155612dfd8484614171565b60018055909590945092505050565b7f000000000000000000000000000000000000000000000000000000000000000081565b336001600160a01b037f00000000000000000000000000000000000000000000000000000000000000001614612ead576040805162461bcd60e51b815260206004820152600960248201527f464f5242494444454e0000000000000000000000000000000000000000000000604482015290519081900360640190fd5b600080547fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff0016911515919091179055565b600154600114612f1e576040805162461bcd60e51b81526020600482015260066024820152651313d0d2d15160d21b604482015290519081900360640190fd5b6000600155336001600160a01b037f0000000000000000000000000000000000000000000000000000000000000000161480612f625750336001600160a01b038616145b612fb3576040805162461bcd60e51b815260206004820152601860248201527f4e6f742066726f6d20726f75746572206f72206f776e65720000000000000000604482015290519081900360640190fd5b612fc085858585856147b0565b60008085612fe057600954600a546001600160a01b039182169116612ff4565b600a546009546001600160a01b0391821691165b9150915061300382338661432f565b61300e81338561432f565b61301661450e565b5050600180555050505050565b600154600114613063576040805162461bcd60e51b81526020600482015260066024820152651313d0d2d15160d21b604482015290519081900360640190fd5b600060015561307061450e565b60018055565b606080808080806000808c6130b457505088151560008181526004602090815260408083208380528252808320938352600390915290205490613171565b8c600114156130ec57505088151560009081526008602090815260408083206001600160a01b038e1684529091529020805490613171565b8c6002141561312457505088151560009081526004602090815260408083206001600160a01b038e1684529091529020805490613171565b6040805162461bcd60e51b815260206004820152600c60248201527f556e6b6e6f776e206c6973740000000000000000000000000000000000000000604482015290519081900360640190fd5b8a151560009081526003602052604090208d90838c101561353e578361319d8d8d63ffffffff61357b16565b11156131b6576131b3848d63ffffffff6135dc16565b9a505b8a67ffffffffffffffff811180156131cd57600080fd5b506040519080825280602002602001820160405280156131f7578160200160208202803683370190505b5099508a67ffffffffffffffff8111801561321157600080fd5b5060405190808252806020026020018201604052801561323b578160200160208202803683370190505b5098508a67ffffffffffffffff8111801561325557600080fd5b5060405190808252806020026020018201604052801561327f578160200160208202803683370190505b5096508a60020293508367ffffffffffffffff8111801561329f57600080fd5b506040519080825280602002602001820160405280156132c9578160200160208202803683370190505b5097508367ffffffffffffffff811180156132e357600080fd5b5060405190808252806020026020018201604052801561330d578160200160208202803683370190505b5095508367ffffffffffffffff8111801561332757600080fd5b50604051908082528060200260200182016040528015613351578160200160208202803683370190505b50945060005b8b8110156135385761336f818e63ffffffff61357b16565b945082156133b8578260011461339b5783858154811061338b57fe5b90600052602060002001546133b3565b8385815481106133a757fe5b90600052602060002001545b6133ba565b845b945060008286815481106133ca57fe5b90600052602060002090600602019050858c83815181106133e757fe5b6020908102919091010152613402828e63ffffffff61357b16565b81548c519197506001600160a01b0316908c908490811061341f57fe5b60200260200101906001600160a01b031690816001600160a01b0316815250508060000160149054906101000a900460ff168a838151811061345d57fe5b6020026020010190151590811515815250508060000160159054906101000a900460ff168a878151811061348d57fe5b60200260200101901515908115158152505080600201548983815181106134b057fe5b60200260200101818152505080600101548883815181106134cd57fe5b60200260200101818152505080600301548887815181106134ea57fe5b602002602001018181525050806004015487838151811061350757fe5b602002602001018181525050806005015487878151811061352457fe5b602090810291909101015250600101613357565b5061356a565b6040805160008082526020820181815282840191825260608301909352909a5090985096508695508594505b505050509550955095509550955095565b6000828201838110156135d5576040805162461bcd60e51b815260206004820152601b60248201527f536166654d6174683a206164646974696f6e206f766572666c6f770000000000604482015290519081900360640190fd5b9392505050565b60006135d583836040518060400160405280601e81526020017f536166654d6174683a207375627472616374696f6e206f766572666c6f7700008152506149ba565b336001600160a01b03831614156137285761365b7f0000000000000000000000000000000000000000000000000000000000000000833084614a51565b60115461366e908263ffffffff61357b16565b601155600c54613684908263ffffffff61357b16565b600c556009547f00000000000000000000000000000000000000000000000000000000000000006001600160a01b03908116911614156136d557600d546136d1908263ffffffff61357b16565b600d555b600a547f00000000000000000000000000000000000000000000000000000000000000006001600160a01b039081169116141561372357600e5461371f908263ffffffff61357b16565b600e555b6138dc565b604080517f70a0823100000000000000000000000000000000000000000000000000000000815230600482015290516000916001600160a01b037f000000000000000000000000000000000000000000000000000000000000000016916370a0823191602480820192602092909190829003018186803b1580156137ab57600080fd5b505afa1580156137bf573d6000803e3d6000fd5b505050506040513d60208110156137d557600080fd5b5051600c549091506000906137f190839063ffffffff6135dc16565b905082811015613848576040805162461bcd60e51b815260206004820152600e60248201527f4e6f7420656e6f75676820666565000000000000000000000000000000000000604482015290519081900360640190fd5b60115461385b908263ffffffff61357b16565b601155600c8290556009547f00000000000000000000000000000000000000000000000000000000000000006001600160a01b03908116911614156138a057600d8290555b600a547f00000000000000000000000000000000000000000000000000000000000000006001600160a01b0390811691161415612d325750600e555b5050565b82151560009081526003602052604081208054849081106138fd57fe5b906000526020600020906006020190507f00000000000000000000000000000000000000000000000000000000000000006001600160a01b0316336001600160a01b03161480613956575080546001600160a01b031633145b6139a7576040805162461bcd60e51b815260206004820152601860248201527f4e6f742066726f6d20726f75746572206f72206f776e65720000000000000000604482015290519081900360640190fd5b805474010000000000000000000000000000000000000000900460ff1615613a16576040805162461bcd60e51b815260206004820152600c60248201527f4f66666572206c6f636b65640000000000000000000000000000000000000000604482015290519081900360640190fd5b80547501000000000000000000000000000000000000000000900460ff1615613a86576040805162461bcd60e51b815260206004820152601a60248201527f4f66666572207761732073657420746f20616c6c6f7720616c6c000000000000604482015290519081900360640190fd5b60007f00000000000000000000000000000000000000000000000000000000000000006001600160a01b031663bc14128f7f52657374726963746564506169722e66656550657254726164657200000000006040518263ffffffff1660e01b81526004018082815260200191505060206040518083038186803b158015613b0c57600080fd5b505afa158015613b20573d6000803e3d6000fd5b505050506040513d6020811015613b3657600080fd5b505182549091506113ff906001600160a01b0316613b5a838663ffffffff613e6016565b61361e565b831515600090815260066020908152604080832086845282528083206001600160a01b038616845290915290205460ff16613c5857831515600081815260056020908152604080832087845282528083208054600180820183559185528385200180547fffffffffffffffffffffffff0000000000000000000000000000000000000000166001600160a01b038916908117909155858552600684528285208986528452828520818652845282852080547fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff0016831790559484526008835281842094845293825282208054938401815582529020018390555b831515600081815260076020908152604080832087845282528083206001600160a01b03871680855290835292819020859055805185815290519293879390927fe51457e789313604d11150ac77eade7d4c00b796eb6429e2de5bd9a6a9716a48928290030190a450505050565b6060806000613cdb848363ffffffff61357b16565b361015613d2f576040805162461bcd60e51b815260206004820152601260248201527f496e76616c6964206f66666572206c6973740000000000000000000000000000604482015290519081900360640190fd5b602084013560208102806002026040870101361015613d4d57600080fd5b604051602082016002028101604052828152816040880160208301378095508160200181019050828152818260408901016020830137935060020260209081019250369150613db290613da6878563ffffffff61357b16565b9063ffffffff61357b16565b14613e04576040805162461bcd60e51b815260206004820152601360248201527f496e76616c69642064617461206c656e67746800000000000000000000000000604482015290519081900360640190fd5b6000835111613e5a576040805162461bcd60e51b815260206004820152601260248201527f496e76616c6964206f66666572206c6973740000000000000000000000000000604482015290519081900360640190fd5b50915091565b600082613e6f57506000610f83565b82820282848281613e7c57fe5b04146135d55760405162461bcd60e51b81526004018080602001828103825260218152602001806151126021913960400191505060405180910390fd5b60006135d583836040518060400160405280601a81526020017f536166654d6174683a206469766973696f6e206279207a65726f000000000000815250614c10565b60008080613f16620186a0611fd48a8763ffffffff613e6016565b9050613f28888263ffffffff6135dc16565b9750600080866001600160a01b031663b80333ed8c613f5257600a546001600160a01b0316613f5f565b6009546001600160a01b03165b8d613f75576009546001600160a01b0316613f82565b600a546001600160a01b03165b8d60008e8e604051602001808281526020019150506040516020818303038152906040526040518763ffffffff1660e01b815260040180876001600160a01b03166001600160a01b03168152602001866001600160a01b03166001600160a01b03168152602001858152602001848152602001836001600160a01b03166001600160a01b0316815260200180602001828103825283818151815260200191508051906020019080838360005b8381101561404657818101518382015260200161402e565b50505050905090810190601f1680156140735780820380516001836020036101000a031916815260200191505b50975050505050505050604080518083038186803b15801561409457600080fd5b505afa1580156140a8573d6000803e3d6000fd5b505050506040513d60408110156140be57600080fd5b50805160209091015190925090506140dc8a8363ffffffff613e6016565b94506001600b54111561413357600a60149054906101000a900460ff1615158b15151461411c57600b5461411790869063ffffffff613eb916565b614130565b600b5461413090869063ffffffff613e6016565b94505b614143858263ffffffff613eb916565b945061416181611fd484670de0b6b3a764000063ffffffff613e6016565b9350505096509650969350505050565b600080336001600160a01b037f00000000000000000000000000000000000000000000000000000000000000001614806141b35750336001600160a01b038516145b614204576040805162461bcd60e51b815260206004820152601860248201527f4e6f742066726f6d20726f75746572206f72206f776e65720000000000000000604482015290519081900360640190fd5b82151560009081526004602090815260408083206001600160a01b03881684529091528120805490915b818110156142d657600083828154811061424457fe5b9060005260206000200154905060006003600089151515158152602001908152602001600020828154811061427557fe5b9060005260206000209060060201905061429c81600101548861357b90919063ffffffff16565b96506142b581600201548761357b90919063ffffffff16565b95506142cc898984846001015485600201546147b0565b505060010161422e565b50600080866142e65785856142e9565b84865b6009549193509150614305906001600160a01b0316338461432f565b600a5461431c906001600160a01b0316338361432f565b61432461450e565b505050509250929050565b604080518082018252601981527f7472616e7366657228616464726573732c75696e74323536290000000000000060209182015281516001600160a01b0385811660248301526044808301869052845180840390910181526064909201845291810180517bffffffffffffffffffffffffffffffffffffffffffffffffffffffff167fa9059cbb000000000000000000000000000000000000000000000000000000001781529251815160009460609489169392918291908083835b6020831061442857805182527fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe090920191602091820191016143eb565b6001836020036101000a0380198251168184511680821785525050505050509050019150506000604051808303816000865af19150503d806000811461448a576040519150601f19603f3d011682016040523d82523d6000602084013e61448f565b606091505b50915091508180156144bd5750805115806144bd57508080602001905160208110156144ba57600080fd5b50515b6113ff576040805162461bcd60e51b815260206004820152600f60248201527f5452414e534645525f4641494c45440000000000000000000000000000000000604482015290519081900360640190fd5b614516610d5f565b600e55600d55600c55565b3b151590565b60008060608061453760a4613cc6565b9150915060006145456150d5565b600954600a54604080517f069d188f0000000000000000000000000000000000000000000000000000000081526001600160a01b0393841660048201529183166024830152517f00000000000000000000000000000000000000000000000000000000000000009092169163069d188f91604480820192606092909190829003018186803b1580156145d657600080fd5b505afa1580156145ea573d6000803e3d6000fd5b505050506040513d606081101561460057600080fd5b508051602080830151604090930151908401529082529150600080805b86518110156146ef5761464c86828151811061463557fe5b60200260200101518461357b90919063ffffffff16565b92506146566150f3565b6000614674670de0b6b3a7640000611fd48f8b8781518110611fbe57fe5b90506146978e8d8b868151811061468757fe5b6020026020010151848b8b614c75565b604085015260208401528083526146af908c9061357b565b9a506146c98260016020020151859063ffffffff61357b16565b93506146e382600260200201518b9063ffffffff61357b16565b9950505060010161461d565b5081670de0b6b3a76400001461474c576040805162461bcd60e51b815260206004820152600d60248201527f496e76616c696420696e70757400000000000000000000000000000000000000604482015290519081900360640190fd5b604080518b8152602081018a90528082018390526060810189905290518c1515916001600160a01b038c16917fd55848f048ca7d5fd9869d414bb60a426c2b0125c8adb982fee123da3f841ed89181900360800190a3505050505050935093915050565b60008311614805576040805162461bcd60e51b815260206004820152601c60248201527f50726f7669646572206c6971756964697479206e6f7420666f756e6400000000604482015290519081900360640190fd5b831515600090815260036020526040812080548590811061482257fe5b6000918252602090912060069091020180549091506001600160a01b03878116911614614896576040805162461bcd60e51b815260206004820152601160248201527f4e6f742066726f6d2070726f7669646572000000000000000000000000000000604482015290519081900360640190fd5b805474010000000000000000000000000000000000000000900460ff1680156148bf5750600083115b1561491c574281600501541061491c576040805162461bcd60e51b815260206004820152600b60248201527f4e6f742065787069726564000000000000000000000000000000000000000000604482015290519081900360640190fd5b6001810154614931908463ffffffff6135dc16565b6001820155600281015461494b908363ffffffff6135dc16565b600282018190556001820154604080518681526020810186905280820192909252606082019290925290518591871515916001600160a01b038a16917f4036cb0ba867fe695e855b2d73d97fe96c1ff8c45e6490c12181cb5650be546e919081900360800190a4505050505050565b60008184841115614a495760405162461bcd60e51b81526004018080602001828103825283818151815260200191508051906020019080838360005b83811015614a0e5781810151838201526020016149f6565b50505050905090810190601f168015614a3b5780820380516001836020036101000a031916815260200191505b509250505060405180910390fd5b505050900390565b604080516001600160a01b0385811660248301528481166044830152606480830185905283518084039091018152608490920183526020820180517bffffffffffffffffffffffffffffffffffffffffffffffffffffffff167f23b872dd0000000000000000000000000000000000000000000000000000000017815292518251600094606094938a169392918291908083835b60208310614b2257805182527fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe09092019160209182019101614ae5565b6001836020036101000a0380198251168184511680821785525050505050509050019150506000604051808303816000865af19150503d8060008114614b84576040519150601f19603f3d011682016040523d82523d6000602084013e614b89565b606091505b5091509150818015614bb7575080511580614bb75750808060200190516020811015614bb457600080fd5b50515b614c08576040805162461bcd60e51b815260206004820152601460248201527f5452414e534645525f46524f4d5f4641494c4544000000000000000000000000604482015290519081900360640190fd5b505050505050565b60008183614c5f5760405162461bcd60e51b8152602060048201818152835160248401528351909283926044909101919085019080838360008315614a0e5781810151838201526020016149f6565b506000838581614c6b57fe5b0495945050505050565b85151560009081526002602052604081205481908190871115614cdf576040805162461bcd60e51b815260206004820152600f60248201527f4f66666572206e6f742065786973740000000000000000000000000000000000604482015290519081900360640190fd5b8815156000908152600360205260408120805489908110614cfc57fe5b6000918252602090912060069091020180549091507501000000000000000000000000000000000000000000900460ff1680614d65575089151560009081526006602090815260408083208b845282528083206001600160a01b038d16845290915290205460ff165b614db6576040805162461bcd60e51b815260206004820152601560248201527f4e6f74206120617070726f766564207472616465720000000000000000000000604482015290519081900360640190fd5b8060040154421015614e0f576040805162461bcd60e51b815260206004820152601360248201527f4f66666572206e6f7420626567696e2079657400000000000000000000000000604482015290519081900360640190fd5b8060050154421115614e68576040805162461bcd60e51b815260206004820152600d60248201527f4f66666572206578706972656400000000000000000000000000000000000000604482015290519081900360640190fd5b600080614e7f8c8a8d8d8c8c876020020151613efb565b60208a015192985096509250614e96575087614eca565b614eb5620186a0611fd48960016020020151889063ffffffff613e6016565b9350614ec7898563ffffffff6135dc16565b90505b82547501000000000000000000000000000000000000000000900460ff16614fd0578b151560009081526007602090815260408083208d845282528083206001600160a01b038f16845290915290205480871115614f6f576040805162461bcd60e51b815260206004820152601a60248201527f416d6f756e7420657863656564656420616c6c6f636174696f6e000000000000604482015290519081900360640190fd5b614f7f818863ffffffff6135dc16565b600760008f15151515815260200190815260200160002060008d815260200190815260200160002060008e6001600160a01b03166001600160a01b0316815260200190815260200160002081905550505b8260010154861115615029576040805162461bcd60e51b815260206004820152601d60248201527f416d6f756e74206578636565647320617661696c61626c652066756e64000000604482015290519081900360640190fd5b600183015461503e908763ffffffff6135dc16565b60018401556002830154615058908263ffffffff61357b16565b600284018190558354600185015460408051868152602081018b90528082018690526060810192909252608082019390935291518c928f1515926001600160a01b0316917f2f27f755766c13db5798f9a3fa7501574d60c8d73dd30849515c312b0bf9cc7e9181900360a00190a450505096509650969350505050565b60405180604001604052806002906020820280368337509192915050565b6040518060600160405280600390602082028036833750919291505056fe536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f77a26469706673582212201b78e872033d198137035d2e93dcaa89467ccdd75e71fc79e099ed42d5397caa64736f6c634300060b0033a26469706673582212209ba4afaf5071899ae1accdbba46adbbbf40d3b12a6af703b64f45705ae3d9f9764736f6c634300060b0033"
    };
});
define("@scom/scom-swap/contracts/oswap-openswap-contract/contracts/restricted/OSWAP_RestrictedPairCreator1.ts", ["require", "exports", "@ijstech/eth-contract", "@scom/scom-swap/contracts/oswap-openswap-contract/contracts/restricted/OSWAP_RestrictedPairCreator1.json.ts"], function (require, exports, eth_contract_46, OSWAP_RestrictedPairCreator1_json_1) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.OSWAP_RestrictedPairCreator1 = void 0;
    class OSWAP_RestrictedPairCreator1 extends eth_contract_46.Contract {
        constructor(wallet, address) {
            super(wallet, address, OSWAP_RestrictedPairCreator1_json_1.default.abi, OSWAP_RestrictedPairCreator1_json_1.default.bytecode);
            this.assign();
        }
        deploy(options) {
            return this.__deploy([], options);
        }
        assign() {
            let createPair_send = async (salt, options) => {
                let result = await this.send('createPair', [this.wallet.utils.stringToBytes32(salt)], options);
                return result;
            };
            let createPair_call = async (salt, options) => {
                let result = await this.call('createPair', [this.wallet.utils.stringToBytes32(salt)], options);
                return result;
            };
            let createPair_txData = async (salt, options) => {
                let result = await this.txData('createPair', [this.wallet.utils.stringToBytes32(salt)], options);
                return result;
            };
            this.createPair = Object.assign(createPair_send, {
                call: createPair_call,
                txData: createPair_txData
            });
        }
    }
    OSWAP_RestrictedPairCreator1._abi = OSWAP_RestrictedPairCreator1_json_1.default.abi;
    exports.OSWAP_RestrictedPairCreator1 = OSWAP_RestrictedPairCreator1;
});
define("@scom/scom-swap/contracts/oswap-openswap-contract/contracts/restricted/OSWAP_RestrictedPairCreator4.json.ts", ["require", "exports"], function (require, exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    ///<amd-module name='@scom/scom-swap/contracts/oswap-openswap-contract/contracts/restricted/OSWAP_RestrictedPairCreator4.json.ts'/> 
    exports.default = {
        "abi": [
            { "inputs": [{ "internalType": "bytes32", "name": "salt", "type": "bytes32" }], "name": "createPair", "outputs": [{ "internalType": "address", "name": "pair", "type": "address" }], "stateMutability": "nonpayable", "type": "function" }
        ],
        "bytecode": "608060405234801561001057600080fd5b50615f1a806100206000396000f3fe608060405234801561001057600080fd5b506004361061002b5760003560e01c8063ed25a5a214610030575b600080fd5b61004d6004803603602081101561004657600080fd5b5035610076565b6040805173ffffffffffffffffffffffffffffffffffffffff9092168252519081900360200190f35b600060606040518060200161008a906100b1565b6020820181038252601f19601f820116604052509050828151602083016000f59392505050565b615e26806100bf8339019056fe610140604052600180553480156200001657600080fd5b5033606081901b60809081526000805460ff191660011781556040805163ea2ed2c160e01b81529051919384938493849363ea2ed2c1926004808301939192829003018186803b1580156200006a57600080fd5b505afa1580156200007f573d6000803e3d6000fd5b505050506040513d60808110156200009657600080fd5b5080516020808301516040808501516060958601516001600160601b031986881b811660a0529684901b90961660c052815163b716d46360e01b815291519499509197509095509293506001600160a01b0387169263b716d4639260048083019392829003018186803b1580156200010d57600080fd5b505afa15801562000122573d6000803e3d6000fd5b505050506040513d60208110156200013957600080fd5b81019080805190602001909291905050506001600160a01b0316610100816001600160a01b031660601b81525050816001600160a01b031660e0816001600160a01b031660601b81525050806001600160a01b0316610120816001600160a01b031660601b81525050600360006001151515158152602001908152602001600020604051806101000160405280306001600160a01b03168152602001600115158152602001600015158152602001600081526020016000815260200160008152602001600081526020016000815250908060018154018082558091505060019003906000526020600020906006020160009091909190915060008201518160000160006101000a8154816001600160a01b0302191690836001600160a01b0316021790555060208201518160000160146101000a81548160ff02191690831515021790555060408201518160000160156101000a81548160ff021916908315150217905550606082015181600101556080820151816002015560a0820151816003015560c0820151816004015560e0820151816005015550506003600080151515158152602001908152602001600020604051806101000160405280306001600160a01b03168152602001600115158152602001600015158152602001600081526020016000815260200160008152602001600081526020016000815250908060018154018082558091505060019003906000526020600020906006020160009091909190915060008201518160000160006101000a8154816001600160a01b0302191690836001600160a01b0316021790555060208201518160000160146101000a81548160ff02191690831515021790555060408201518160000160156101000a81548160ff021916908315150217905550606082015181600101556080820151816002015560a0820151816003015560c0820151816004015560e0820151816005015550505050505060805160601c60a05160601c60c05160601c60e05160601c6101005160601c6101205160601c61592f620004f760003980611c4b52806123a1528061265f5280612e8b525080610ec45280611092528061144c52806114b25280611ea95280612de05280614508528061456052806145ae5280614638528061473c52806147795280614e465250806112c85280611dc3528061226e5280612a5d5280612f66528061373d5280614c725250806132855280613816525080611ef352508061116c528061165b52806117b8528061213652806128795280612d4f52806131a052806138435280614eeb525061592f6000f3fe608060405234801561001057600080fd5b50600436106103405760003560e01c806379dd8fac116101bd578063bebf7a61116100f9578063db13653c116100a2578063ee13b8411161007c578063ee13b84114610e60578063f060d13914610e8e578063f5ee334814610e96578063fff6cae914610eb557610340565b8063db13653c14610d59578063e5d36ff614610dc9578063ea5dbbc414610dd157610340565b8063d21220a7116100d3578063d21220a714610c82578063d38550a714610c8a578063d7dc4e4314610cc457610340565b8063bebf7a6114610c4d578063c45a015514610c55578063cff2195e14610c5d57610340565b80639d69dc4e11610166578063a878769311610140578063a878769314610bea578063b2901aa314610c09578063b8f7a66514610c11578063bc7c9ec614610c1957610340565b80639d69dc4e14610b295780639f0a3cc114610b31578063a1d6fdf514610b6557610340565b8063835daf6c11610197578063835daf6c14610adf5780639749d21314610ae75780639cac76ac14610aef57610340565b806379dd8fac146109fa5780637a6a5e1b14610a945780637d5ca82e14610aba57610340565b80634fed6f441161028c5780635fd5e2fc116102355780636b4afee11161020f5780636b4afee1146108f657806372ca7372146108fe578063740134241461098d578063752bc9dc146109d557610340565b80635fd5e2fc1461087857806360b71d4e146108c0578063625b6ced146108c857610340565b80635a6af09d116102665780635a6af09d1461079e5780635aa6e675146107a65780635eff2d01146107ae57610340565b80634fed6f44146106bd5780635592bb5314610750578063577e6d081461079657610340565b8063364aed84116102ee5780633d0d81d6116102c85780633d0d81d61461048c578063485cc9551461066457806348c0902f1461069257610340565b8063364aed841461042f5780633c1e6ff5146104635780633c6d5c721461046b57610340565b80631da9a2bd1161031f5780631da9a2bd146103975780631deb4995146103ce57806333f175fc1461040257610340565b8062113e081461034557806305268cff1461036b5780630dfe16811461038f575b600080fd5b61034d610ebd565b60408051938452602084019290925282820152519081900360600190f35b610373611090565b604080516001600160a01b039092168252519081900360200190f35b6103736110b4565b6103bc600480360360408110156103ad57600080fd5b508035151590602001356110c3565b60408051918252519081900360200190f35b6103bc600480360360608110156103e457600080fd5b5080351515906001600160a01b0360208201351690604001356110e7565b61042d6004803603606081101561041857600080fd5b50803515159060208101359060400135611122565b005b6103bc6004803603606081101561044557600080fd5b5080351515906001600160a01b0360208201351690604001356115ee565b6103bc611613565b610473611619565b6040805192835260208301919091528051918290030190f35b6104b7600480360360608110156104a257600080fd5b50803515159060208101359060400135611623565b6040518080602001806020018060200180602001806020018060200187810387528d818151815260200191508051906020019060200280838360005b8381101561050b5781810151838201526020016104f3565b5050505090500187810386528c818151815260200191508051906020019060200280838360005b8381101561054a578181015183820152602001610532565b5050505090500187810385528b818151815260200191508051906020019060200280838360005b83811015610589578181015183820152602001610571565b5050505090500187810384528a818151815260200191508051906020019060200280838360005b838110156105c85781810151838201526020016105b0565b50505050905001878103835289818151815260200191508051906020019060200280838360005b838110156106075781810151838201526020016105ef565b50505050905001878103825288818151815260200191508051906020019060200280838360005b8381101561064657818101518382015260200161062e565b505050509050019c5050505050505050505050505060405180910390f35b61042d6004803603604081101561067a57600080fd5b506001600160a01b0381358116916020013516611650565b610373600480360360608110156106a857600080fd5b50803515159060208101359060400135611a30565b61042d600480360360a08110156106d357600080fd5b81351515916020810135916001600160a01b036040830135169160608101359181019060a08101608082013564010000000081111561071157600080fd5b82018360208201111561072357600080fd5b8035906020019184602083028401116401000000008311171561074557600080fd5b509092509050611a72565b61042d600480360360c081101561076657600080fd5b506001600160a01b0381351690602081013515159060408101359060608101359060808101359060a00135611d73565b6103bc611ee5565b6103bc611eeb565b610373611ef1565b6107df600480360360808110156107c457600080fd5b50803515159060208101359060408101359060600135611f15565b604051808060200180602001838103835285818151815260200191508051906020019060200280838360005b8381101561082357818101518382015260200161080b565b50505050905001838103825284818151815260200191508051906020019060200280838360005b8381101561086257818101518382015260200161084a565b5050505090500194505050505060405180910390f35b6103bc600480360360c081101561088e57600080fd5b506001600160a01b03813516906020810135151590604081013515159060608101359060808101359060a001356120ea565b6103bc612786565b6103bc600480360360408110156108de57600080fd5b506001600160a01b038135169060200135151561278c565b6103bc6127b5565b6103bc6004803603608081101561091457600080fd5b6001600160a01b03823581169260208101359260408201359092169181019060808101606082013564010000000081111561094e57600080fd5b82018360208201111561096057600080fd5b8035906020019184600183028401116401000000008311171561098257600080fd5b5090925090506127bb565b6109c1600480360360608110156109a357600080fd5b508035151590602081013590604001356001600160a01b0316612a08565b604080519115158252519081900360200190f35b61042d600480360360408110156109eb57600080fd5b50803515159060200135612a2e565b610a1f60048036036040811015610a1057600080fd5b50803515159060200135612b66565b6040805160208082528351818301528351919283929083019185019080838360005b83811015610a59578181015183820152602001610a41565b50505050905090810190601f168015610a865780820380516001836020036101000a031916815260200191505b509250505060405180910390f35b61034d60048036036020811015610aaa57600080fd5b50356001600160a01b0316612c28565b6103bc60048036036040811015610ad057600080fd5b50803515159060200135612ce0565b6103bc612cfd565b61042d612d03565b6104b760048036036080811015610b0557600080fd5b506001600160a01b0381351690602081013515159060408101359060600135612e5b565b610373612e89565b6103bc60048036036060811015610b4757600080fd5b508035151590602081013590604001356001600160a01b0316612ead565b61042d60048036036080811015610b7b57600080fd5b813515159160208101359160408201359190810190608081016060820135640100000000811115610bab57600080fd5b820183602082011115610bbd57600080fd5b80359060200191846001830284011164010000000083111715610bdf57600080fd5b509092509050612ed0565b6103bc60048036036020811015610c0057600080fd5b50351515613139565b6103bc61314b565b6109c1613151565b6103bc60048036036060811015610c2f57600080fd5b508035151590602081013590604001356001600160a01b031661315a565b6109c161317d565b61037361319e565b6103bc60048036036040811015610c7357600080fd5b508035151590602001356131c2565b6103736131df565b6104b760048036036080811015610ca057600080fd5b506001600160a01b03813516906020810135151590604081013590606001356131ee565b61042d600480360360a0811015610cda57600080fd5b8135916020810135916001600160a01b03604083013581169260608101359091169181019060a081016080820135640100000000811115610d1a57600080fd5b820183602082011115610d2c57600080fd5b80359060200191846001830284011164010000000083111715610d4e57600080fd5b509092509050613205565b610d7e60048036036040811015610d6f57600080fd5b508035151590602001356136a5565b604080516001600160a01b0390991689529615156020890152941515878701526060870193909352608086019190915260a085015260c084015260e083015251908190036101000190f35b61037361373b565b6103bc60048036036080811015610de757600080fd5b6001600160a01b038235811692602081013592604082013590921691810190608081016060820135640100000000811115610e2157600080fd5b820183602082011115610e3357600080fd5b80359060200191846001830284011164010000000083111715610e5557600080fd5b50909250905061375f565b61034d60048036036040811015610e7657600080fd5b506001600160a01b03813516906020013515156137ae565b610373613814565b61042d60048036036020811015610eac57600080fd5b50351515613838565b61042d6138c8565b60008060007f00000000000000000000000000000000000000000000000000000000000000006001600160a01b03166370a08231306040518263ffffffff1660e01b815260040180826001600160a01b03166001600160a01b0316815260200191505060206040518083038186803b158015610f3857600080fd5b505afa158015610f4c573d6000803e3d6000fd5b505050506040513d6020811015610f6257600080fd5b5051600954604080517f70a0823100000000000000000000000000000000000000000000000000000000815230600482015290516001600160a01b03909216916370a0823191602480820192602092909190829003018186803b158015610fc857600080fd5b505afa158015610fdc573d6000803e3d6000fd5b505050506040513d6020811015610ff257600080fd5b5051600a54604080517f70a0823100000000000000000000000000000000000000000000000000000000815230600482015290516001600160a01b03909216916370a0823191602480820192602092909190829003018186803b15801561105857600080fd5b505afa15801561106c573d6000803e3d6000fd5b505050506040513d602081101561108257600080fd5b505191945092509050909192565b7f000000000000000000000000000000000000000000000000000000000000000081565b6009546001600160a01b031681565b81151560009081526005602090815260408083208484529091529020545b92915050565b6004602052826000526040600020602052816000526040600020818154811061110c57fe5b9060005260206000200160009250925050505481565b600154600114611162576040805162461bcd60e51b81526020600482015260066024820152651313d0d2d15160d21b604482015290519081900360640190fd5b60006001819055507f00000000000000000000000000000000000000000000000000000000000000006001600160a01b031663b8f7a6656040518163ffffffff1660e01b8152600401602060405180830381600087803b1580156111c557600080fd5b505af11580156111d9573d6000803e3d6000fd5b505050506040513d60208110156111ef57600080fd5b5051611242576040805162461bcd60e51b815260206004820152600f60248201527f474c4f42414c4c59205041555345440000000000000000000000000000000000604482015290519081900360640190fd5b60005460ff16611299576040805162461bcd60e51b815260206004820152600660248201527f5041555345440000000000000000000000000000000000000000000000000000604482015290519081900360640190fd5b82151560009081526003602052604081208054849081106112b657fe5b906000526020600020906006020190507f00000000000000000000000000000000000000000000000000000000000000006001600160a01b0316336001600160a01b0316148061130f575080546001600160a01b031633145b611360576040805162461bcd60e51b815260206004820152601860248201527f4e6f742066726f6d20726f75746572206f72206f776e65720000000000000000604482015290519081900360640190fd5b600080600061136d610ebd565b92509250925084611389600c548561391b90919063ffffffff16565b10156113dc576040805162461bcd60e51b815260206004820152600d60248201527f496e76616c696420666565496e00000000000000000000000000000000000000604482015290519081900360640190fd5b8615156000908152601260209081526040808320898452909152812054611409908763ffffffff61396416565b8815801560009081526012602090815260408083208c8452909152812083905591925061149657600e5461144490849063ffffffff61391b16565b600a549091507f00000000000000000000000000000000000000000000000000000000000000006001600160a01b03908116911614156114915761148e818863ffffffff61391b16565b90505b6114f7565b600d546114aa90859063ffffffff61391b16565b6009549091507f00000000000000000000000000000000000000000000000000000000000000006001600160a01b03908116911614156114f7576114f4818863ffffffff61391b16565b90505b60008111806115065750600087115b611557576040805162461bcd60e51b815260206004820152600c60248201527f4e6f20616d6f756e7420696e0000000000000000000000000000000000000000604482015290519081900360640190fd5b600186015461156c908263ffffffff61396416565b60018701908155600c869055600d859055600e849055865490546040805184815260208101929092528181018a905260608201859052518a928c1515926001600160a01b03909116917f875b40c6ec76efb782fcbf201d80c97d55ec88aeaf3f04ddcfff825a68eec7a89181900360800190a450506001805550505050505050565b6008602052826000526040600020602052816000526040600020818154811061110c57fe5b600b5481565b600d54600e549091565b60608060608060608061163a6000808b8b8b6139be565b949e939d50919b50995097509095509350505050565b336001600160a01b037f000000000000000000000000000000000000000000000000000000000000000016146116cd576040805162461bcd60e51b815260206004820152600960248201527f464f5242494444454e0000000000000000000000000000000000000000000000604482015290519081900360640190fd5b600980546001600160a01b038085167fffffffffffffffffffffffff00000000000000000000000000000000000000009283161792839055600a80548583169316929092179182905590811691161061176d576040805162461bcd60e51b815260206004820152601860248201527f496e76616c696420746f6b656e2070616972206f726465720000000000000000604482015290519081900360640190fd5b600954600a54604080517f52a03c030000000000000000000000000000000000000000000000000000000081526001600160a01b0393841660048201529183166024830152516000927f000000000000000000000000000000000000000000000000000000000000000016916352a03c0391604480830192602092919082900301818787803b1580156117ff57600080fd5b505af1158015611813573d6000803e3d6000fd5b505050506040513d602081101561182957600080fd5b505190506001600160a01b038116611888576040805162461bcd60e51b815260206004820152600f60248201527f4e6f206f7261636c6520666f756e640000000000000000000000000000000000604482015290519081900360640190fd5b600954604080517f313ce56700000000000000000000000000000000000000000000000000000000815290516000926001600160a01b03169163313ce567916004808301926020929190829003018186803b1580156118e657600080fd5b505afa1580156118fa573d6000803e3d6000fd5b505050506040513d602081101561191057600080fd5b5051600a54604080517f313ce56700000000000000000000000000000000000000000000000000000000815290519293506000926001600160a01b039092169163313ce56791600480820192602092909190829003018186803b15801561197657600080fd5b505afa15801561198a573d6000803e3d6000fd5b505050506040513d60208110156119a057600080fd5b5051905060ff82811690821614156119bc576001600b55611a29565b600a80547fffffffffffffffffffffff00ffffffffffffffffffffffffffffffffffffffff1660ff84811684821611740100000000000000000000000000000000000000009081029290921792839055910416611a1b57808203611a1f565b8181035b60ff16600a0a600b555b5050505050565b60056020528260005260406000206020528160005260406000208181548110611a5557fe5b6000918252602090912001546001600160a01b0316925083915050565b8515156000908152601460209081526040808320888452909152902054611ae0576040805162461bcd60e51b815260206004820152601360248201527f6d65726b6c6520726f6f74206e6f742073657400000000000000000000000000604482015290519081900360640190fd5b85151560009081526014602090815260408083208884528252918290205482513360601b81840152603480820188905284518083039091018152605490910190935282519290910191909120611b3a918491849190613ec3565b611b8b576040805162461bcd60e51b815260206004820152601360248201527f6d65726b6c652070726f6f66206661696c656400000000000000000000000000604482015290519081900360640190fd5b851515600090815260136020908152604080832088845282528083206001600160a01b03881684528252808320548151606081019092526024808352611be3939192916158b59083013986919063ffffffff613edb16565b87151560008181526013602090815260408083208b845282528083206001600160a01b038b168085529083528184208a9055938352600782528083208b845282528083209383529290529081205491925090611c45908363ffffffff61396416565b905060007f00000000000000000000000000000000000000000000000000000000000000006001600160a01b031663bc14128f7f52657374726963746564506169722e66656550657254726164657200000000006040518263ffffffff1660e01b81526004018082815260200191505060206040518083038186803b158015611ccd57600080fd5b505afa158015611ce1573d6000803e3d6000fd5b505050506040513d6020811015611cf757600080fd5b505189151560009081526012602090815260408083208c8452909152902054909150611d29908263ffffffff61391b16565b89151560009081526012602090815260408083208c8452909152902055601154611d59908263ffffffff61396416565b601155611d6889898985613f72565b505050505050505050565b600154600114611db3576040805162461bcd60e51b81526020600482015260066024820152651313d0d2d15160d21b604482015290519081900360640190fd5b6000600155336001600160a01b037f0000000000000000000000000000000000000000000000000000000000000000161480611df75750336001600160a01b038716145b611e48576040805162461bcd60e51b815260206004820152601860248201527f4e6f742066726f6d20726f75746572206f72206f776e65720000000000000000604482015290519081900360640190fd5b611e568686868686866140bb565b60008086611e7657600954600a546001600160a01b039182169116611e8a565b600a546009546001600160a01b0391821691165b91509150611e9982338761431e565b611ea481338661431e565b611ecf7f0000000000000000000000000000000000000000000000000000000000000000338561431e565b611ed76144df565b505060018055505050505050565b60105481565b600d5481565b7f000000000000000000000000000000000000000000000000000000000000000081565b8315156000908152600560209081526040808320868452909152902080546060918291808610156120c45780611f51878763ffffffff61396416565b1115611f6a57611f67818763ffffffff61391b16565b94505b8467ffffffffffffffff81118015611f8157600080fd5b50604051908082528060200260200182016040528015611fab578160200160208202803683370190505b5093508467ffffffffffffffff81118015611fc557600080fd5b50604051908082528060200260200182016040528015611fef578160200160208202803683370190505b50925060005b858110156120be5788151560009081526007602090815260408083208b84529091528120908461202b848b63ffffffff61396416565b8154811061203557fe5b9060005260206000200160009054906101000a90046001600160a01b031687848151811061205f57fe5b60200260200101906001600160a01b031690816001600160a01b03168152506001600160a01b03166001600160a01b03168152602001908152602001600020548482815181106120ab57fe5b6020908102919091010152600101611ff5565b506120df565b60408051600080825260208201908152818301909252945092505b505094509492505050565b600060015460011461212c576040805162461bcd60e51b81526020600482015260066024820152651313d0d2d15160d21b604482015290519081900360640190fd5b60006001819055507f00000000000000000000000000000000000000000000000000000000000000006001600160a01b031663b8f7a6656040518163ffffffff1660e01b8152600401602060405180830381600087803b15801561218f57600080fd5b505af11580156121a3573d6000803e3d6000fd5b505050506040513d60208110156121b957600080fd5b505161220c576040805162461bcd60e51b815260206004820152600f60248201527f474c4f42414c4c59205041555345440000000000000000000000000000000000604482015290519081900360640190fd5b60005460ff16612263576040805162461bcd60e51b815260206004820152600660248201527f5041555345440000000000000000000000000000000000000000000000000000604482015290519081900360640190fd5b336001600160a01b037f00000000000000000000000000000000000000000000000000000000000000001614806122a25750336001600160a01b038816145b6122f3576040805162461bcd60e51b815260206004820152601860248201527f4e6f742066726f6d20726f75746572206f72206f776e65720000000000000000604482015290519081900360640190fd5b82821015612348576040805162461bcd60e51b815260206004820152600f60248201527f416c726561647920657870697265640000000000000000000000000000000000604482015290519081900360640190fd5b4282101561239d576040805162461bcd60e51b815260206004820152600f60248201527f416c726561647920657870697265640000000000000000000000000000000000604482015290519081900360640190fd5b60007f00000000000000000000000000000000000000000000000000000000000000006001600160a01b031663bc14128f7f52657374726963746564506169722e6d617844757200000000000000000000006040518263ffffffff1660e01b81526004018082815260200191505060206040518083038186803b15801561242357600080fd5b505afa158015612437573d6000803e3d6000fd5b505050506040513d602081101561244d57600080fd5b505190504281018311156124a8576040805162461bcd60e51b815260206004820152601360248201527f45787069726520746f6f20666172206177617900000000000000000000000000604482015290519081900360640190fd5b50600260008715151515815260200190815260200160002060008154600101919050819055905060046000871515151581526020019081526020016000206000886001600160a01b03166001600160a01b031681526020019081526020016000208190806001815401808255809150506001900390600052602060002001600090919091909150556003600087151515158152602001908152602001600020604051806101000160405280896001600160a01b031681526020016000151581526020018715158152602001600081526020016000815260200186815260200185815260200184815250908060018154018082558091505060019003906000526020600020906006020160009091909190915060008201518160000160006101000a8154816001600160a01b0302191690836001600160a01b0316021790555060208201518160000160146101000a81548160ff02191690831515021790555060408201518160000160156101000a81548160ff021916908315150217905550606082015181600101556080820151816002015560a0820151816003015560c0820151816004015560e08201518160050155505060007f00000000000000000000000000000000000000000000000000000000000000006001600160a01b031663bc14128f7f52657374726963746564506169722e6665655065724f726465720000000000006040518263ffffffff1660e01b81526004018082815260200191505060206040518083038186803b1580156126e157600080fd5b505afa1580156126f5573d6000803e3d6000fd5b505050506040513d602081101561270b57600080fd5b5051905061271988826144f2565b60408051838152871515602082015280820187905260608101869052608081018590529051881515916001600160a01b038b16917f528317aa3a915641ec93963a99c0ef7d64d16e351d258904238e941a5af151da9181900360a00190a350600180559695505050505050565b60115481565b151560009081526004602090815260408083206001600160a01b03949094168352929052205490565b600e5481565b6000808511612811576040805162461bcd60e51b815260206004820152601960248201527f494e53554646494349454e545f494e5055545f414d4f554e5400000000000000604482015290519081900360640190fd5b60608061281e60846147b8565b600954600a54604080517f069d188f0000000000000000000000000000000000000000000000000000000081526001600160a01b039384166004820181905292841660248201529051949650929450818c16149260009283927f0000000000000000000000000000000000000000000000000000000000000000169163069d188f91604480820192606092909190829003018186803b1580156128c057600080fd5b505afa1580156128d4573d6000803e3d6000fd5b505050506040513d60608110156128ea57600080fd5b50805160209091015190925090506000805b86518110156129f857600087828151811061291357fe5b60200260200101519050600260008715151515815260200190815260200160002054811115612989576040805162461bcd60e51b815260206004820152600f60248201527f4f66666572206e6f742065786973740000000000000000000000000000000000604482015290519081900360640190fd5b6129c7670de0b6b3a76400006129bb8f8a86815181106129a557fe5b602002602001015161495290919063ffffffff16565b9063ffffffff6149ab16565b92506129d786848e8489896149ed565b509093506129ed9050898463ffffffff61396416565b9850506001016128fc565b5050505050505095945050505050565b600660209081526000938452604080852082529284528284209052825290205460ff1681565b8115156000908152600360205260408120805483908110612a4b57fe5b906000526020600020906006020190507f00000000000000000000000000000000000000000000000000000000000000006001600160a01b0316336001600160a01b03161480612aa4575080546001600160a01b031633145b612af5576040805162461bcd60e51b815260206004820152601860248201527f4e6f742066726f6d20726f75746572206f72206f776e65720000000000000000604482015290519081900360640190fd5b80547fffffffffffffffffffffff00ffffffffffffffffffffffffffffffffffffffff16740100000000000000000000000000000000000000001781556040518290841515907f108c7d3c4d8ad208c92f4064bac678f032a0ac5bdbaaa1c0fdbd240b23b445ea90600090a3505050565b60156020908152600092835260408084208252918352918190208054825160026001831615610100027fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff0190921691909104601f810185900485028201850190935282815292909190830182828015612c205780601f10612bf557610100808354040283529160200191612c20565b820191906000526020600020905b815481529060010190602001808311612c0357829003601f168201915b505050505081565b6000806000600154600114612c6d576040805162461bcd60e51b81526020600482015260066024820152651313d0d2d15160d21b604482015290519081900360640190fd5b6000600181905550612c80846000614c63565b9194509250905060008080612c96876001614c63565b91945092509050612cad868363ffffffff61396416565b9550612cbf858463ffffffff61396416565b9450612cd1848263ffffffff61396416565b60018055959794965050505050565b601460209081526000928352604080842090915290825290205481565b600f5481565b600154600114612d43576040805162461bcd60e51b81526020600482015260066024820152651313d0d2d15160d21b604482015290519081900360640190fd5b600060018190555060007f00000000000000000000000000000000000000000000000000000000000000006001600160a01b031663ef3692526040518163ffffffff1660e01b8152600401602060405180830381600087803b158015612da857600080fd5b505af1158015612dbc573d6000803e3d6000fd5b505050506040513d6020811015612dd257600080fd5b5051601154909150612e07907f000000000000000000000000000000000000000000000000000000000000000090839061431e565b600954600f54612e22916001600160a01b031690839061431e565b600a54601054612e3d916001600160a01b031690839061431e565b60006011819055600f819055601055612e546144df565b5060018055565b606080606080606080612e7260018b8b8b8b6139be565b949f939e50919c509a509850909650945050505050565b7f000000000000000000000000000000000000000000000000000000000000000081565b600760209081526000938452604080852082529284528284209052825290205481565b600154600114612f10576040805162461bcd60e51b81526020600482015260066024820152651313d0d2d15160d21b604482015290519081900360640190fd5b600060018190558515158152601460209081526040808320878452909152902054831461312e578415156000908152600360205260408120805486908110612f5457fe5b906000526020600020906006020190507f00000000000000000000000000000000000000000000000000000000000000006001600160a01b0316336001600160a01b03161480612fad575080546001600160a01b031633145b612ffe576040805162461bcd60e51b815260206004820152601160248201527f6e6f742066726f6d2070726f7669646572000000000000000000000000000000604482015290519081900360640190fd5b805474010000000000000000000000000000000000000000900460ff161561306d576040805162461bcd60e51b815260206004820152600c60248201527f6f66666572206c6f636b65640000000000000000000000000000000000000000604482015290519081900360640190fd5b85151560008181526014602090815260408083208984528252808320889055928252601581528282208883529052206130a79084846157dd565b50805460408051878152602081018790526060918101828152918101859052881515926001600160a01b0316917f160ab2d76d8d1df956b0df573f9a7afff61ce0ee361cd8703326334205b8652e9189918991899189919060808201848480828437600083820152604051601f909101601f191690920182900397509095505050505050a3505b505060018055505050565b60026020526000908152604090205481565b600c5481565b60005460ff1681565b601360209081526000938452604080852082529284528284209052825290205481565b600a5474010000000000000000000000000000000000000000900460ff1681565b7f000000000000000000000000000000000000000000000000000000000000000081565b601260209081526000928352604080842090915290825290205481565b600a546001600160a01b031681565b606080606080606080612e7260028b8b8b8b6139be565b600154600114613245576040805162461bcd60e51b81526020600482015260066024820152651313d0d2d15160d21b604482015290519081900360640190fd5b60006001819055604080517f3af32abf00000000000000000000000000000000000000000000000000000000815233600482015290516001600160a01b037f00000000000000000000000000000000000000000000000000000000000000001692633af32abf92602480820193602093909283900390910190829087803b1580156132cf57600080fd5b505af11580156132e3573d6000803e3d6000fd5b505050506040513d60208110156132f957600080fd5b5051613379573233148015613314575061331233614e7f565b155b801561332857506001600160a01b03831633145b613379576040805162461bcd60e51b815260206004820152600e60248201527f496e76616c696420747261646572000000000000000000000000000000000000604482015290519081900360640190fd5b60005460ff166133d0576040805162461bcd60e51b815260206004820152600660248201527f5041555345440000000000000000000000000000000000000000000000000000604482015290519081900360640190fd5b600d54600954604080517f70a0823100000000000000000000000000000000000000000000000000000000815230600482015290516000936134789390926001600160a01b03909116916370a0823191602480820192602092909190829003018186803b15801561344057600080fd5b505afa158015613454573d6000803e3d6000fd5b505050506040513d602081101561346a57600080fd5b50519063ffffffff61391b16565b600e54600a54604080517f70a0823100000000000000000000000000000000000000000000000000000000815230600482015290519394506000936134e793926001600160a01b0316916370a08231916024808301926020929190829003018186803b15801561344057600080fd5b9050600080891580156134f957508815155b156135965761350a60018589614e85565b909250905088821015613564576040805162461bcd60e51b815260206004820152601360248201527f494e53554646494349454e545f414d4f554e5400000000000000000000000000604482015290519081900360640190fd5b600a5461357b906001600160a01b0316898461431e565b600f5461358e908263ffffffff61396416565b600f5561368d565b89158015906135a3575088155b15613640576135b460008489614e85565b90925090508982101561360e576040805162461bcd60e51b815260206004820152601360248201527f494e53554646494349454e545f414d4f554e5400000000000000000000000000604482015290519081900360640190fd5b600954613625906001600160a01b0316898461431e565b601054613638908263ffffffff61396416565b60105561368d565b6040805162461bcd60e51b815260206004820152600d60248201527f4e6f7420737570706f7274656400000000000000000000000000000000000000604482015290519081900360640190fd5b6136956144df565b5050600180555050505050505050565b600360205281600052604060002081815481106136be57fe5b60009182526020909120600690910201805460018201546002830154600384015460048501546005909501546001600160a01b038516975060ff7401000000000000000000000000000000000000000086048116975075010000000000000000000000000000000000000000009095049094169492939192909188565b7f000000000000000000000000000000000000000000000000000000000000000081565b6040805162461bcd60e51b815260206004820152600d60248201527f4e6f7420737570706f72746564000000000000000000000000000000000000006044820152905160009181900360640190fd5b60008060006001546001146137f3576040805162461bcd60e51b81526020600482015260066024820152651313d0d2d15160d21b604482015290519081900360640190fd5b60006001556138028585614c63565b60018055919790965090945092505050565b7f000000000000000000000000000000000000000000000000000000000000000081565b336001600160a01b037f000000000000000000000000000000000000000000000000000000000000000016146138b5576040805162461bcd60e51b815260206004820152600960248201527f464f5242494444454e0000000000000000000000000000000000000000000000604482015290519081900360640190fd5b6000805460ff1916911515919091179055565b600154600114613908576040805162461bcd60e51b81526020600482015260066024820152651313d0d2d15160d21b604482015290519081900360640190fd5b60006001556139156144df565b60018055565b600061395d83836040518060400160405280601e81526020017f536166654d6174683a207375627472616374696f6e206f766572666c6f770000815250613edb565b9392505050565b60008282018381101561395d576040805162461bcd60e51b815260206004820152601b60248201527f536166654d6174683a206164646974696f6e206f766572666c6f770000000000604482015290519081900360640190fd5b606080808080806000808c6139fc57505088151560008181526004602090815260408083208380528252808320938352600390915290205490613ab9565b8c60011415613a3457505088151560009081526008602090815260408083206001600160a01b038e1684529091529020805490613ab9565b8c60021415613a6c57505088151560009081526004602090815260408083206001600160a01b038e1684529091529020805490613ab9565b6040805162461bcd60e51b815260206004820152600c60248201527f556e6b6e6f776e206c6973740000000000000000000000000000000000000000604482015290519081900360640190fd5b8a151560009081526003602052604090208d90838c1015613e865783613ae58d8d63ffffffff61396416565b1115613afe57613afb848d63ffffffff61391b16565b9a505b8a67ffffffffffffffff81118015613b1557600080fd5b50604051908082528060200260200182016040528015613b3f578160200160208202803683370190505b5099508a67ffffffffffffffff81118015613b5957600080fd5b50604051908082528060200260200182016040528015613b83578160200160208202803683370190505b5098508a67ffffffffffffffff81118015613b9d57600080fd5b50604051908082528060200260200182016040528015613bc7578160200160208202803683370190505b5096508a60020293508367ffffffffffffffff81118015613be757600080fd5b50604051908082528060200260200182016040528015613c11578160200160208202803683370190505b5097508367ffffffffffffffff81118015613c2b57600080fd5b50604051908082528060200260200182016040528015613c55578160200160208202803683370190505b5095508367ffffffffffffffff81118015613c6f57600080fd5b50604051908082528060200260200182016040528015613c99578160200160208202803683370190505b50945060005b8b811015613e8057613cb7818e63ffffffff61396416565b94508215613d005782600114613ce357838581548110613cd357fe5b9060005260206000200154613cfb565b838581548110613cef57fe5b90600052602060002001545b613d02565b845b94506000828681548110613d1257fe5b90600052602060002090600602019050858c8381518110613d2f57fe5b6020908102919091010152613d4a828e63ffffffff61396416565b81548c519197506001600160a01b0316908c9084908110613d6757fe5b60200260200101906001600160a01b031690816001600160a01b0316815250508060000160149054906101000a900460ff168a8381518110613da557fe5b6020026020010190151590811515815250508060000160159054906101000a900460ff168a8781518110613dd557fe5b6020026020010190151590811515815250508060020154898381518110613df857fe5b6020026020010181815250508060010154888381518110613e1557fe5b6020026020010181815250508060030154888781518110613e3257fe5b6020026020010181815250508060040154878381518110613e4f57fe5b6020026020010181815250508060050154878781518110613e6c57fe5b602090810291909101015250600101613c9f565b50613eb2565b6040805160008082526020820181815282840191825260608301909352909a5090985096508695508594505b505050509550955095509550955095565b600082613ed186868561510e565b1495945050505050565b60008184841115613f6a5760405162461bcd60e51b81526004018080602001828103825283818151815260200191508051906020019080838360005b83811015613f2f578181015183820152602001613f17565b50505050905090810190601f168015613f5c5780820380516001836020036101000a031916815260200191505b509250505060405180910390fd5b505050900390565b831515600090815260066020908152604080832086845282528083206001600160a01b038616845290915290205460ff1661404d57831515600081815260056020908152604080832087845282528083208054600180820183559185528385200180547fffffffffffffffffffffffff0000000000000000000000000000000000000000166001600160a01b0389169081179091558585526006845282852089865284528285208186528452828520805460ff1916831790559484526008835281842094845293825282208054938401815582529020018390555b831515600081815260076020908152604080832087845282528083206001600160a01b03871680855290835292819020859055805185815290519293879390927fe51457e789313604d11150ac77eade7d4c00b796eb6429e2de5bd9a6a9716a48928290030190a450505050565b60008411614110576040805162461bcd60e51b815260206004820152601c60248201527f50726f7669646572206c6971756964697479206e6f7420666f756e6400000000604482015290519081900360640190fd5b841515600090815260036020526040812080548690811061412d57fe5b6000918252602090912060069091020180549091506001600160a01b038881169116146141a1576040805162461bcd60e51b815260206004820152601160248201527f4e6f742066726f6d2070726f7669646572000000000000000000000000000000604482015290519081900360640190fd5b805474010000000000000000000000000000000000000000900460ff1680156141ca5750600084115b156142275742816005015410614227576040805162461bcd60e51b815260206004820152600b60248201527f4e6f742065787069726564000000000000000000000000000000000000000000604482015290519081900360640190fd5b600181015461423c908563ffffffff61391b16565b60018201556002810154614256908463ffffffff61391b16565b60028201558515156000908152601260209081526040808320888452909152812054614288908463ffffffff61391b16565b87151560008181526012602090815260408083208b84528252918290208490556001860154600287015483518b81529283018a90528284018990526060830191909152608082015260a08101849052905192935088926001600160a01b038c16917f8ef78c46dea1907785e0758d7a4c5dcb0187e8c7a5b10ecf7cb043f18688af2b919081900360c00190a45050505050505050565b604080518082018252601981527f7472616e7366657228616464726573732c75696e74323536290000000000000060209182015281516001600160a01b0385811660248301526044808301869052845180840390910181526064909201845291810180517bffffffffffffffffffffffffffffffffffffffffffffffffffffffff167fa9059cbb000000000000000000000000000000000000000000000000000000001781529251815160009460609489169392918291908083835b602083106143f95780518252601f1990920191602091820191016143da565b6001836020036101000a0380198251168184511680821785525050505050509050019150506000604051808303816000865af19150503d806000811461445b576040519150601f19603f3d011682016040523d82523d6000602084013e614460565b606091505b509150915081801561448e57508051158061448e575080806020019051602081101561448b57600080fd5b50515b611a29576040805162461bcd60e51b815260206004820152600f60248201527f5452414e534645525f4641494c45440000000000000000000000000000000000604482015290519081900360640190fd5b6144e7610ebd565b600e55600d55600c55565b336001600160a01b03831614156145fc5761452f7f000000000000000000000000000000000000000000000000000000000000000083308461514a565b601154614542908263ffffffff61396416565b601155600c54614558908263ffffffff61396416565b600c556009547f00000000000000000000000000000000000000000000000000000000000000006001600160a01b03908116911614156145a957600d546145a5908263ffffffff61396416565b600d555b600a547f00000000000000000000000000000000000000000000000000000000000000006001600160a01b03908116911614156145f757600e546145f3908263ffffffff61396416565b600e555b6147b4565b604080517f70a0823100000000000000000000000000000000000000000000000000000000815230600482015290516000916001600160a01b037f000000000000000000000000000000000000000000000000000000000000000016916370a0823191602480820192602092909190829003018186803b15801561467f57600080fd5b505afa158015614693573d6000803e3d6000fd5b505050506040513d60208110156146a957600080fd5b5051600c549091506000906146c590839063ffffffff61391b16565b90508281101561471c576040805162461bcd60e51b815260206004820152600e60248201527f4e6f7420656e6f75676820666565000000000000000000000000000000000000604482015290519081900360640190fd5b60115461472f908263ffffffff61396416565b601155600c8290556009547f00000000000000000000000000000000000000000000000000000000000000006001600160a01b039081169116141561477457600d8290555b600a547f00000000000000000000000000000000000000000000000000000000000000006001600160a01b03908116911614156147b157600e8290555b50505b5050565b60608060006147cd848363ffffffff61396416565b361015614821576040805162461bcd60e51b815260206004820152601260248201527f496e76616c6964206f66666572206c6973740000000000000000000000000000604482015290519081900360640190fd5b60208401356020810280600202604087010136101561483f57600080fd5b6040516020820160020281016040528281528160408801602083013780955081602001810190508281528182604089010160208301379350600202602090810192503691506148a490614898878563ffffffff61396416565b9063ffffffff61396416565b146148f6576040805162461bcd60e51b815260206004820152601360248201527f496e76616c69642064617461206c656e67746800000000000000000000000000604482015290519081900360640190fd5b600083511161494c576040805162461bcd60e51b815260206004820152601260248201527f496e76616c6964206f66666572206c6973740000000000000000000000000000604482015290519081900360640190fd5b50915091565b600082614961575060006110e1565b8282028284828161496e57fe5b041461395d5760405162461bcd60e51b81526004018080602001828103825260218152602001806158d96021913960400191505060405180910390fd5b600061395d83836040518060400160405280601a81526020017f536166654d6174683a206469766973696f6e206279207a65726f0000000000008152506152eb565b60008080614a08620186a06129bb8a8763ffffffff61495216565b9050614a1a888263ffffffff61391b16565b9750600080866001600160a01b031663b80333ed8c614a4457600a546001600160a01b0316614a51565b6009546001600160a01b03165b8d614a67576009546001600160a01b0316614a74565b600a546001600160a01b03165b8d60008e8e604051602001808281526020019150506040516020818303038152906040526040518763ffffffff1660e01b815260040180876001600160a01b03166001600160a01b03168152602001866001600160a01b03166001600160a01b03168152602001858152602001848152602001836001600160a01b03166001600160a01b0316815260200180602001828103825283818151815260200191508051906020019080838360005b83811015614b38578181015183820152602001614b20565b50505050905090810190601f168015614b655780820380516001836020036101000a031916815260200191505b50975050505050505050604080518083038186803b158015614b8657600080fd5b505afa158015614b9a573d6000803e3d6000fd5b505050506040513d6040811015614bb057600080fd5b5080516020909101519092509050614bce8a8363ffffffff61495216565b94506001600b541115614c2557600a60149054906101000a900460ff1615158b151514614c0e57600b54614c0990869063ffffffff6149ab16565b614c22565b600b54614c2290869063ffffffff61495216565b94505b614c35858263ffffffff6149ab16565b9450614c53816129bb84670de0b6b3a764000063ffffffff61495216565b9350505096509650969350505050565b60008080336001600160a01b037f0000000000000000000000000000000000000000000000000000000000000000161480614ca65750336001600160a01b038616145b614cf7576040805162461bcd60e51b815260206004820152601860248201527f4e6f742066726f6d20726f75746572206f72206f776e65720000000000000000604482015290519081900360640190fd5b83151560009081526004602090815260408083206001600160a01b03891684529091528120805490915b81811015614dfb576000838281548110614d3757fe5b906000526020600020015490506000600360008a1515151581526020019081526020016000208281548110614d6857fe5b90600052602060002090600602019050614d8f81600101548961396490919063ffffffff16565b9750614da881600201548861396490919063ffffffff16565b8915156000908152601260209081526040808320868452909152902054909750614dd8878263ffffffff61396416565b9650614df08b8b8585600101548660020154866140bb565b505050600101614d21565b5060008087614e0b578686614e0e565b85875b6009549193509150614e2a906001600160a01b0316338461431e565b600a54614e41906001600160a01b0316338361431e565b614e6c7f0000000000000000000000000000000000000000000000000000000000000000338761431e565b614e746144df565b505050509250925092565b3b151590565b600080606080614e9560a46147b8565b915091506000614ea361585b565b600954600a54604080517f069d188f0000000000000000000000000000000000000000000000000000000081526001600160a01b0393841660048201529183166024830152517f00000000000000000000000000000000000000000000000000000000000000009092169163069d188f91604480820192606092909190829003018186803b158015614f3457600080fd5b505afa158015614f48573d6000803e3d6000fd5b505050506040513d6060811015614f5e57600080fd5b508051602080830151604090930151908401529082529150600080805b865181101561504d57614faa868281518110614f9357fe5b60200260200101518461396490919063ffffffff16565b9250614fb4615879565b6000614fd2670de0b6b3a76400006129bb8f8b87815181106129a557fe5b9050614ff58e8d8b8681518110614fe557fe5b6020026020010151848b8b615350565b6040850152602084015280835261500d908c90613964565b9a506150278260016020020151859063ffffffff61396416565b935061504182600260200201518b9063ffffffff61396416565b99505050600101614f7b565b5081670de0b6b3a7640000146150aa576040805162461bcd60e51b815260206004820152600d60248201527f496e76616c696420696e70757400000000000000000000000000000000000000604482015290519081900360640190fd5b604080518b8152602081018a90528082018390526060810189905290518c1515916001600160a01b038c16917fd55848f048ca7d5fd9869d414bb60a426c2b0125c8adb982fee123da3f841ed89181900360800190a3505050505050935093915050565b600081815b84811015615141576151378287878481811061512b57fe5b905060200201356157b0565b9150600101615113565b50949350505050565b604080516001600160a01b0385811660248301528481166044830152606480830185905283518084039091018152608490920183526020820180517bffffffffffffffffffffffffffffffffffffffffffffffffffffffff167f23b872dd0000000000000000000000000000000000000000000000000000000017815292518251600094606094938a169392918291908083835b602083106151fd5780518252601f1990920191602091820191016151de565b6001836020036101000a0380198251168184511680821785525050505050509050019150506000604051808303816000865af19150503d806000811461525f576040519150601f19603f3d011682016040523d82523d6000602084013e615264565b606091505b5091509150818015615292575080511580615292575080806020019051602081101561528f57600080fd5b50515b6152e3576040805162461bcd60e51b815260206004820152601460248201527f5452414e534645525f46524f4d5f4641494c4544000000000000000000000000604482015290519081900360640190fd5b505050505050565b6000818361533a5760405162461bcd60e51b8152602060048201818152835160248401528351909283926044909101919085019080838360008315613f2f578181015183820152602001613f17565b50600083858161534657fe5b0495945050505050565b851515600090815260026020526040812054819081908711156153ba576040805162461bcd60e51b815260206004820152600f60248201527f4f66666572206e6f742065786973740000000000000000000000000000000000604482015290519081900360640190fd5b88151560009081526003602052604081208054899081106153d757fe5b6000918252602090912060069091020180549091507501000000000000000000000000000000000000000000900460ff1680615440575089151560009081526006602090815260408083208b845282528083206001600160a01b038d16845290915290205460ff165b615491576040805162461bcd60e51b815260206004820152601560248201527f4e6f74206120617070726f766564207472616465720000000000000000000000604482015290519081900360640190fd5b80600401544210156154ea576040805162461bcd60e51b815260206004820152601360248201527f4f66666572206e6f7420626567696e2079657400000000000000000000000000604482015290519081900360640190fd5b8060050154421115615543576040805162461bcd60e51b815260206004820152600d60248201527f4f66666572206578706972656400000000000000000000000000000000000000604482015290519081900360640190fd5b60008061555a8c8a8d8d8c8c8760200201516149ed565b60208a0151929850965092506155715750876155a5565b615590620186a06129bb8960016020020151889063ffffffff61495216565b93506155a2898563ffffffff61391b16565b90505b82547501000000000000000000000000000000000000000000900460ff166156ab578b151560009081526007602090815260408083208d845282528083206001600160a01b038f1684529091529020548087111561564a576040805162461bcd60e51b815260206004820152601a60248201527f416d6f756e7420657863656564656420616c6c6f636174696f6e000000000000604482015290519081900360640190fd5b61565a818863ffffffff61391b16565b600760008f15151515815260200190815260200160002060008d815260200190815260200160002060008e6001600160a01b03166001600160a01b0316815260200190815260200160002081905550505b8260010154861115615704576040805162461bcd60e51b815260206004820152601d60248201527f416d6f756e74206578636565647320617661696c61626c652066756e64000000604482015290519081900360640190fd5b6001830154615719908763ffffffff61391b16565b60018401556002830154615733908263ffffffff61396416565b600284018190558354600185015460408051868152602081018b90528082018690526060810192909252608082019390935291518c928f1515926001600160a01b0316917f2f27f755766c13db5798f9a3fa7501574d60c8d73dd30849515c312b0bf9cc7e9181900360a00190a450505096509650969350505050565b60008183106157c8576157c382846157ce565b61395d565b61395d83835b60009182526020526040902090565b828054600181600116156101000203166002900490600052602060002090601f016020900481019282601f1061581e5782800160ff1982351617855561584b565b8280016001018555821561584b579182015b8281111561584b578235825591602001919060010190615830565b50615857929150615897565b5090565b60405180604001604052806002906020820280368337509192915050565b60405180606001604052806003906020820280368337509192915050565b6158b191905b80821115615857576000815560010161589d565b9056fe6e657720616c6c6f636174696f6e20736d616c6c6572207468616e206f726967696e616c536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f77a26469706673582212204f26a9f8da88288f7413031bf407413b7c22051fd2ed02533937e146a814d3cb64736f6c634300060b0033a2646970667358221220bbc1d458a31a0caab8ce4d0fa43b885331b709170314f0b2f82e62ee9727c3ad64736f6c634300060b0033"
    };
});
define("@scom/scom-swap/contracts/oswap-openswap-contract/contracts/restricted/OSWAP_RestrictedPairCreator4.ts", ["require", "exports", "@ijstech/eth-contract", "@scom/scom-swap/contracts/oswap-openswap-contract/contracts/restricted/OSWAP_RestrictedPairCreator4.json.ts"], function (require, exports, eth_contract_47, OSWAP_RestrictedPairCreator4_json_1) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.OSWAP_RestrictedPairCreator4 = void 0;
    class OSWAP_RestrictedPairCreator4 extends eth_contract_47.Contract {
        constructor(wallet, address) {
            super(wallet, address, OSWAP_RestrictedPairCreator4_json_1.default.abi, OSWAP_RestrictedPairCreator4_json_1.default.bytecode);
            this.assign();
        }
        deploy(options) {
            return this.__deploy([], options);
        }
        assign() {
            let createPair_send = async (salt, options) => {
                let result = await this.send('createPair', [this.wallet.utils.stringToBytes32(salt)], options);
                return result;
            };
            let createPair_call = async (salt, options) => {
                let result = await this.call('createPair', [this.wallet.utils.stringToBytes32(salt)], options);
                return result;
            };
            let createPair_txData = async (salt, options) => {
                let result = await this.txData('createPair', [this.wallet.utils.stringToBytes32(salt)], options);
                return result;
            };
            this.createPair = Object.assign(createPair_send, {
                call: createPair_call,
                txData: createPair_txData
            });
        }
    }
    OSWAP_RestrictedPairCreator4._abi = OSWAP_RestrictedPairCreator4_json_1.default.abi;
    exports.OSWAP_RestrictedPairCreator4 = OSWAP_RestrictedPairCreator4;
});
define("@scom/scom-swap/contracts/oswap-openswap-contract/contracts/router/OSWAP_HybridRouter2.json.ts", ["require", "exports"], function (require, exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    ///<amd-module name='@scom/scom-swap/contracts/oswap-openswap-contract/contracts/router/OSWAP_HybridRouter2.json.ts'/> 
    exports.default = {
        "abi": [
            { "inputs": [{ "internalType": "address", "name": "_registry", "type": "address" }, { "internalType": "address", "name": "_WETH", "type": "address" }], "stateMutability": "nonpayable", "type": "constructor" },
            { "inputs": [], "name": "WETH", "outputs": [{ "internalType": "address", "name": "", "type": "address" }], "stateMutability": "view", "type": "function" },
            { "inputs": [{ "internalType": "uint256", "name": "amountOut", "type": "uint256" }, { "internalType": "address[]", "name": "pair", "type": "address[]" }, { "internalType": "address", "name": "tokenOut", "type": "address" }, { "internalType": "bytes", "name": "data", "type": "bytes" }], "name": "getAmountsInEndsWith", "outputs": [{ "internalType": "uint256[]", "name": "amounts", "type": "uint256[]" }], "stateMutability": "view", "type": "function" },
            { "inputs": [{ "internalType": "uint256", "name": "amountOut", "type": "uint256" }, { "internalType": "address[]", "name": "pair", "type": "address[]" }, { "internalType": "address", "name": "tokenIn", "type": "address" }, { "internalType": "bytes", "name": "data", "type": "bytes" }], "name": "getAmountsInStartsWith", "outputs": [{ "internalType": "uint256[]", "name": "amounts", "type": "uint256[]" }], "stateMutability": "view", "type": "function" },
            { "inputs": [{ "internalType": "uint256", "name": "amountIn", "type": "uint256" }, { "internalType": "address[]", "name": "pair", "type": "address[]" }, { "internalType": "address", "name": "tokenOut", "type": "address" }, { "internalType": "bytes", "name": "data", "type": "bytes" }], "name": "getAmountsOutEndsWith", "outputs": [{ "internalType": "uint256[]", "name": "amounts", "type": "uint256[]" }], "stateMutability": "view", "type": "function" },
            { "inputs": [{ "internalType": "uint256", "name": "amountIn", "type": "uint256" }, { "internalType": "address[]", "name": "pair", "type": "address[]" }, { "internalType": "address", "name": "tokenIn", "type": "address" }, { "internalType": "bytes", "name": "data", "type": "bytes" }], "name": "getAmountsOutStartsWith", "outputs": [{ "internalType": "uint256[]", "name": "amounts", "type": "uint256[]" }], "stateMutability": "view", "type": "function" },
            { "inputs": [{ "internalType": "address[]", "name": "pair", "type": "address[]" }, { "internalType": "address", "name": "tokenIn", "type": "address" }], "name": "getPathIn", "outputs": [{ "internalType": "address[]", "name": "path", "type": "address[]" }], "stateMutability": "view", "type": "function" },
            { "inputs": [{ "internalType": "address[]", "name": "pair", "type": "address[]" }, { "internalType": "address", "name": "tokenOut", "type": "address" }], "name": "getPathOut", "outputs": [{ "internalType": "address[]", "name": "path", "type": "address[]" }], "stateMutability": "view", "type": "function" },
            { "inputs": [], "name": "registry", "outputs": [{ "internalType": "address", "name": "", "type": "address" }], "stateMutability": "view", "type": "function" },
            { "inputs": [{ "internalType": "uint256", "name": "amountOut", "type": "uint256" }, { "internalType": "address[]", "name": "pair", "type": "address[]" }, { "internalType": "address", "name": "to", "type": "address" }, { "internalType": "uint256", "name": "deadline", "type": "uint256" }, { "internalType": "bytes", "name": "data", "type": "bytes" }], "name": "swapETHForExactTokens", "outputs": [{ "internalType": "address[]", "name": "path", "type": "address[]" }, { "internalType": "uint256[]", "name": "amounts", "type": "uint256[]" }], "stateMutability": "payable", "type": "function" },
            { "inputs": [{ "internalType": "uint256", "name": "amountOutMin", "type": "uint256" }, { "internalType": "address[]", "name": "pair", "type": "address[]" }, { "internalType": "address", "name": "to", "type": "address" }, { "internalType": "uint256", "name": "deadline", "type": "uint256" }, { "internalType": "bytes", "name": "data", "type": "bytes" }], "name": "swapExactETHForTokens", "outputs": [{ "internalType": "address[]", "name": "path", "type": "address[]" }, { "internalType": "uint256[]", "name": "amounts", "type": "uint256[]" }], "stateMutability": "payable", "type": "function" },
            { "inputs": [{ "internalType": "uint256", "name": "amountOutMin", "type": "uint256" }, { "internalType": "address[]", "name": "pair", "type": "address[]" }, { "internalType": "address", "name": "to", "type": "address" }, { "internalType": "uint256", "name": "deadline", "type": "uint256" }, { "internalType": "bytes", "name": "data", "type": "bytes" }], "name": "swapExactETHForTokensSupportingFeeOnTransferTokens", "outputs": [], "stateMutability": "payable", "type": "function" },
            { "inputs": [{ "internalType": "uint256", "name": "amountIn", "type": "uint256" }, { "internalType": "uint256", "name": "amountOutMin", "type": "uint256" }, { "internalType": "address[]", "name": "pair", "type": "address[]" }, { "internalType": "address", "name": "to", "type": "address" }, { "internalType": "uint256", "name": "deadline", "type": "uint256" }, { "internalType": "bytes", "name": "data", "type": "bytes" }], "name": "swapExactTokensForETH", "outputs": [{ "internalType": "address[]", "name": "path", "type": "address[]" }, { "internalType": "uint256[]", "name": "amounts", "type": "uint256[]" }], "stateMutability": "nonpayable", "type": "function" },
            { "inputs": [{ "internalType": "uint256", "name": "amountIn", "type": "uint256" }, { "internalType": "uint256", "name": "amountOutMin", "type": "uint256" }, { "internalType": "address[]", "name": "pair", "type": "address[]" }, { "internalType": "address", "name": "to", "type": "address" }, { "internalType": "uint256", "name": "deadline", "type": "uint256" }, { "internalType": "bytes", "name": "data", "type": "bytes" }], "name": "swapExactTokensForETHSupportingFeeOnTransferTokens", "outputs": [], "stateMutability": "nonpayable", "type": "function" },
            { "inputs": [{ "internalType": "uint256", "name": "amountIn", "type": "uint256" }, { "internalType": "uint256", "name": "amountOutMin", "type": "uint256" }, { "internalType": "address[]", "name": "pair", "type": "address[]" }, { "internalType": "address", "name": "tokenIn", "type": "address" }, { "internalType": "address", "name": "to", "type": "address" }, { "internalType": "uint256", "name": "deadline", "type": "uint256" }, { "internalType": "bytes", "name": "data", "type": "bytes" }], "name": "swapExactTokensForTokens", "outputs": [{ "internalType": "address[]", "name": "path", "type": "address[]" }, { "internalType": "uint256[]", "name": "amounts", "type": "uint256[]" }], "stateMutability": "nonpayable", "type": "function" },
            { "inputs": [{ "internalType": "uint256", "name": "amountIn", "type": "uint256" }, { "internalType": "uint256", "name": "amountOutMin", "type": "uint256" }, { "internalType": "address[]", "name": "pair", "type": "address[]" }, { "internalType": "address", "name": "tokenIn", "type": "address" }, { "internalType": "address", "name": "to", "type": "address" }, { "internalType": "uint256", "name": "deadline", "type": "uint256" }, { "internalType": "bytes", "name": "data", "type": "bytes" }], "name": "swapExactTokensForTokensSupportingFeeOnTransferTokens", "outputs": [], "stateMutability": "nonpayable", "type": "function" },
            { "inputs": [{ "internalType": "uint256", "name": "amountOut", "type": "uint256" }, { "internalType": "uint256", "name": "amountInMax", "type": "uint256" }, { "internalType": "address[]", "name": "pair", "type": "address[]" }, { "internalType": "address", "name": "to", "type": "address" }, { "internalType": "uint256", "name": "deadline", "type": "uint256" }, { "internalType": "bytes", "name": "data", "type": "bytes" }], "name": "swapTokensForExactETH", "outputs": [{ "internalType": "address[]", "name": "path", "type": "address[]" }, { "internalType": "uint256[]", "name": "amounts", "type": "uint256[]" }], "stateMutability": "nonpayable", "type": "function" },
            { "inputs": [{ "internalType": "uint256", "name": "amountOut", "type": "uint256" }, { "internalType": "uint256", "name": "amountInMax", "type": "uint256" }, { "internalType": "address[]", "name": "pair", "type": "address[]" }, { "internalType": "address", "name": "tokenOut", "type": "address" }, { "internalType": "address", "name": "to", "type": "address" }, { "internalType": "uint256", "name": "deadline", "type": "uint256" }, { "internalType": "bytes", "name": "data", "type": "bytes" }], "name": "swapTokensForExactTokens", "outputs": [{ "internalType": "address[]", "name": "path", "type": "address[]" }, { "internalType": "uint256[]", "name": "amounts", "type": "uint256[]" }], "stateMutability": "nonpayable", "type": "function" },
            { "stateMutability": "payable", "type": "receive" }
        ],
        "bytecode": ""
    };
});
define("@scom/scom-swap/contracts/oswap-openswap-contract/contracts/router/OSWAP_HybridRouter2.ts", ["require", "exports", "@ijstech/eth-contract", "@scom/scom-swap/contracts/oswap-openswap-contract/contracts/router/OSWAP_HybridRouter2.json.ts"], function (require, exports, eth_contract_48, OSWAP_HybridRouter2_json_1) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.OSWAP_HybridRouter2 = void 0;
    class OSWAP_HybridRouter2 extends eth_contract_48.Contract {
        constructor(wallet, address) {
            super(wallet, address, OSWAP_HybridRouter2_json_1.default.abi, OSWAP_HybridRouter2_json_1.default.bytecode);
            this.assign();
        }
        deploy(params, options) {
            return this.__deploy([params.registry, params.WETH], options);
        }
        assign() {
            let WETH_call = async (options) => {
                let result = await this.call('WETH', [], options);
                return result;
            };
            this.WETH = WETH_call;
            let getAmountsInEndsWithParams = (params) => [this.wallet.utils.toString(params.amountOut), params.pair, params.tokenOut, this.wallet.utils.stringToBytes(params.data)];
            let getAmountsInEndsWith_call = async (params, options) => {
                let result = await this.call('getAmountsInEndsWith', getAmountsInEndsWithParams(params), options);
                return result.map(e => new eth_contract_48.BigNumber(e));
            };
            this.getAmountsInEndsWith = getAmountsInEndsWith_call;
            let getAmountsInStartsWithParams = (params) => [this.wallet.utils.toString(params.amountOut), params.pair, params.tokenIn, this.wallet.utils.stringToBytes(params.data)];
            let getAmountsInStartsWith_call = async (params, options) => {
                let result = await this.call('getAmountsInStartsWith', getAmountsInStartsWithParams(params), options);
                return result.map(e => new eth_contract_48.BigNumber(e));
            };
            this.getAmountsInStartsWith = getAmountsInStartsWith_call;
            let getAmountsOutEndsWithParams = (params) => [this.wallet.utils.toString(params.amountIn), params.pair, params.tokenOut, this.wallet.utils.stringToBytes(params.data)];
            let getAmountsOutEndsWith_call = async (params, options) => {
                let result = await this.call('getAmountsOutEndsWith', getAmountsOutEndsWithParams(params), options);
                return result.map(e => new eth_contract_48.BigNumber(e));
            };
            this.getAmountsOutEndsWith = getAmountsOutEndsWith_call;
            let getAmountsOutStartsWithParams = (params) => [this.wallet.utils.toString(params.amountIn), params.pair, params.tokenIn, this.wallet.utils.stringToBytes(params.data)];
            let getAmountsOutStartsWith_call = async (params, options) => {
                let result = await this.call('getAmountsOutStartsWith', getAmountsOutStartsWithParams(params), options);
                return result.map(e => new eth_contract_48.BigNumber(e));
            };
            this.getAmountsOutStartsWith = getAmountsOutStartsWith_call;
            let getPathInParams = (params) => [params.pair, params.tokenIn];
            let getPathIn_call = async (params, options) => {
                let result = await this.call('getPathIn', getPathInParams(params), options);
                return result;
            };
            this.getPathIn = getPathIn_call;
            let getPathOutParams = (params) => [params.pair, params.tokenOut];
            let getPathOut_call = async (params, options) => {
                let result = await this.call('getPathOut', getPathOutParams(params), options);
                return result;
            };
            this.getPathOut = getPathOut_call;
            let registry_call = async (options) => {
                let result = await this.call('registry', [], options);
                return result;
            };
            this.registry = registry_call;
            let swapETHForExactTokensParams = (params) => [this.wallet.utils.toString(params.amountOut), params.pair, params.to, this.wallet.utils.toString(params.deadline), this.wallet.utils.stringToBytes(params.data)];
            let swapETHForExactTokens_send = async (params, options) => {
                let result = await this.send('swapETHForExactTokens', swapETHForExactTokensParams(params), options);
                return result;
            };
            let swapETHForExactTokens_call = async (params, options) => {
                let result = await this.call('swapETHForExactTokens', swapETHForExactTokensParams(params), options);
                return {
                    path: result.path,
                    amounts: result.amounts.map(e => new eth_contract_48.BigNumber(e))
                };
            };
            let swapETHForExactTokens_txData = async (params, options) => {
                let result = await this.txData('swapETHForExactTokens', swapETHForExactTokensParams(params), options);
                return result;
            };
            this.swapETHForExactTokens = Object.assign(swapETHForExactTokens_send, {
                call: swapETHForExactTokens_call,
                txData: swapETHForExactTokens_txData
            });
            let swapExactETHForTokensParams = (params) => [this.wallet.utils.toString(params.amountOutMin), params.pair, params.to, this.wallet.utils.toString(params.deadline), this.wallet.utils.stringToBytes(params.data)];
            let swapExactETHForTokens_send = async (params, options) => {
                let result = await this.send('swapExactETHForTokens', swapExactETHForTokensParams(params), options);
                return result;
            };
            let swapExactETHForTokens_call = async (params, options) => {
                let result = await this.call('swapExactETHForTokens', swapExactETHForTokensParams(params), options);
                return {
                    path: result.path,
                    amounts: result.amounts.map(e => new eth_contract_48.BigNumber(e))
                };
            };
            let swapExactETHForTokens_txData = async (params, options) => {
                let result = await this.txData('swapExactETHForTokens', swapExactETHForTokensParams(params), options);
                return result;
            };
            this.swapExactETHForTokens = Object.assign(swapExactETHForTokens_send, {
                call: swapExactETHForTokens_call,
                txData: swapExactETHForTokens_txData
            });
            let swapExactETHForTokensSupportingFeeOnTransferTokensParams = (params) => [this.wallet.utils.toString(params.amountOutMin), params.pair, params.to, this.wallet.utils.toString(params.deadline), this.wallet.utils.stringToBytes(params.data)];
            let swapExactETHForTokensSupportingFeeOnTransferTokens_send = async (params, options) => {
                let result = await this.send('swapExactETHForTokensSupportingFeeOnTransferTokens', swapExactETHForTokensSupportingFeeOnTransferTokensParams(params), options);
                return result;
            };
            let swapExactETHForTokensSupportingFeeOnTransferTokens_call = async (params, options) => {
                let result = await this.call('swapExactETHForTokensSupportingFeeOnTransferTokens', swapExactETHForTokensSupportingFeeOnTransferTokensParams(params), options);
                return;
            };
            let swapExactETHForTokensSupportingFeeOnTransferTokens_txData = async (params, options) => {
                let result = await this.txData('swapExactETHForTokensSupportingFeeOnTransferTokens', swapExactETHForTokensSupportingFeeOnTransferTokensParams(params), options);
                return result;
            };
            this.swapExactETHForTokensSupportingFeeOnTransferTokens = Object.assign(swapExactETHForTokensSupportingFeeOnTransferTokens_send, {
                call: swapExactETHForTokensSupportingFeeOnTransferTokens_call,
                txData: swapExactETHForTokensSupportingFeeOnTransferTokens_txData
            });
            let swapExactTokensForETHParams = (params) => [this.wallet.utils.toString(params.amountIn), this.wallet.utils.toString(params.amountOutMin), params.pair, params.to, this.wallet.utils.toString(params.deadline), this.wallet.utils.stringToBytes(params.data)];
            let swapExactTokensForETH_send = async (params, options) => {
                let result = await this.send('swapExactTokensForETH', swapExactTokensForETHParams(params), options);
                return result;
            };
            let swapExactTokensForETH_call = async (params, options) => {
                let result = await this.call('swapExactTokensForETH', swapExactTokensForETHParams(params), options);
                return {
                    path: result.path,
                    amounts: result.amounts.map(e => new eth_contract_48.BigNumber(e))
                };
            };
            let swapExactTokensForETH_txData = async (params, options) => {
                let result = await this.txData('swapExactTokensForETH', swapExactTokensForETHParams(params), options);
                return result;
            };
            this.swapExactTokensForETH = Object.assign(swapExactTokensForETH_send, {
                call: swapExactTokensForETH_call,
                txData: swapExactTokensForETH_txData
            });
            let swapExactTokensForETHSupportingFeeOnTransferTokensParams = (params) => [this.wallet.utils.toString(params.amountIn), this.wallet.utils.toString(params.amountOutMin), params.pair, params.to, this.wallet.utils.toString(params.deadline), this.wallet.utils.stringToBytes(params.data)];
            let swapExactTokensForETHSupportingFeeOnTransferTokens_send = async (params, options) => {
                let result = await this.send('swapExactTokensForETHSupportingFeeOnTransferTokens', swapExactTokensForETHSupportingFeeOnTransferTokensParams(params), options);
                return result;
            };
            let swapExactTokensForETHSupportingFeeOnTransferTokens_call = async (params, options) => {
                let result = await this.call('swapExactTokensForETHSupportingFeeOnTransferTokens', swapExactTokensForETHSupportingFeeOnTransferTokensParams(params), options);
                return;
            };
            let swapExactTokensForETHSupportingFeeOnTransferTokens_txData = async (params, options) => {
                let result = await this.txData('swapExactTokensForETHSupportingFeeOnTransferTokens', swapExactTokensForETHSupportingFeeOnTransferTokensParams(params), options);
                return result;
            };
            this.swapExactTokensForETHSupportingFeeOnTransferTokens = Object.assign(swapExactTokensForETHSupportingFeeOnTransferTokens_send, {
                call: swapExactTokensForETHSupportingFeeOnTransferTokens_call,
                txData: swapExactTokensForETHSupportingFeeOnTransferTokens_txData
            });
            let swapExactTokensForTokensParams = (params) => [this.wallet.utils.toString(params.amountIn), this.wallet.utils.toString(params.amountOutMin), params.pair, params.tokenIn, params.to, this.wallet.utils.toString(params.deadline), this.wallet.utils.stringToBytes(params.data)];
            let swapExactTokensForTokens_send = async (params, options) => {
                let result = await this.send('swapExactTokensForTokens', swapExactTokensForTokensParams(params), options);
                return result;
            };
            let swapExactTokensForTokens_call = async (params, options) => {
                let result = await this.call('swapExactTokensForTokens', swapExactTokensForTokensParams(params), options);
                return {
                    path: result.path,
                    amounts: result.amounts.map(e => new eth_contract_48.BigNumber(e))
                };
            };
            let swapExactTokensForTokens_txData = async (params, options) => {
                let result = await this.txData('swapExactTokensForTokens', swapExactTokensForTokensParams(params), options);
                return result;
            };
            this.swapExactTokensForTokens = Object.assign(swapExactTokensForTokens_send, {
                call: swapExactTokensForTokens_call,
                txData: swapExactTokensForTokens_txData
            });
            let swapExactTokensForTokensSupportingFeeOnTransferTokensParams = (params) => [this.wallet.utils.toString(params.amountIn), this.wallet.utils.toString(params.amountOutMin), params.pair, params.tokenIn, params.to, this.wallet.utils.toString(params.deadline), this.wallet.utils.stringToBytes(params.data)];
            let swapExactTokensForTokensSupportingFeeOnTransferTokens_send = async (params, options) => {
                let result = await this.send('swapExactTokensForTokensSupportingFeeOnTransferTokens', swapExactTokensForTokensSupportingFeeOnTransferTokensParams(params), options);
                return result;
            };
            let swapExactTokensForTokensSupportingFeeOnTransferTokens_call = async (params, options) => {
                let result = await this.call('swapExactTokensForTokensSupportingFeeOnTransferTokens', swapExactTokensForTokensSupportingFeeOnTransferTokensParams(params), options);
                return;
            };
            let swapExactTokensForTokensSupportingFeeOnTransferTokens_txData = async (params, options) => {
                let result = await this.txData('swapExactTokensForTokensSupportingFeeOnTransferTokens', swapExactTokensForTokensSupportingFeeOnTransferTokensParams(params), options);
                return result;
            };
            this.swapExactTokensForTokensSupportingFeeOnTransferTokens = Object.assign(swapExactTokensForTokensSupportingFeeOnTransferTokens_send, {
                call: swapExactTokensForTokensSupportingFeeOnTransferTokens_call,
                txData: swapExactTokensForTokensSupportingFeeOnTransferTokens_txData
            });
            let swapTokensForExactETHParams = (params) => [this.wallet.utils.toString(params.amountOut), this.wallet.utils.toString(params.amountInMax), params.pair, params.to, this.wallet.utils.toString(params.deadline), this.wallet.utils.stringToBytes(params.data)];
            let swapTokensForExactETH_send = async (params, options) => {
                let result = await this.send('swapTokensForExactETH', swapTokensForExactETHParams(params), options);
                return result;
            };
            let swapTokensForExactETH_call = async (params, options) => {
                let result = await this.call('swapTokensForExactETH', swapTokensForExactETHParams(params), options);
                return {
                    path: result.path,
                    amounts: result.amounts.map(e => new eth_contract_48.BigNumber(e))
                };
            };
            let swapTokensForExactETH_txData = async (params, options) => {
                let result = await this.txData('swapTokensForExactETH', swapTokensForExactETHParams(params), options);
                return result;
            };
            this.swapTokensForExactETH = Object.assign(swapTokensForExactETH_send, {
                call: swapTokensForExactETH_call,
                txData: swapTokensForExactETH_txData
            });
            let swapTokensForExactTokensParams = (params) => [this.wallet.utils.toString(params.amountOut), this.wallet.utils.toString(params.amountInMax), params.pair, params.tokenOut, params.to, this.wallet.utils.toString(params.deadline), this.wallet.utils.stringToBytes(params.data)];
            let swapTokensForExactTokens_send = async (params, options) => {
                let result = await this.send('swapTokensForExactTokens', swapTokensForExactTokensParams(params), options);
                return result;
            };
            let swapTokensForExactTokens_call = async (params, options) => {
                let result = await this.call('swapTokensForExactTokens', swapTokensForExactTokensParams(params), options);
                return {
                    path: result.path,
                    amounts: result.amounts.map(e => new eth_contract_48.BigNumber(e))
                };
            };
            let swapTokensForExactTokens_txData = async (params, options) => {
                let result = await this.txData('swapTokensForExactTokens', swapTokensForExactTokensParams(params), options);
                return result;
            };
            this.swapTokensForExactTokens = Object.assign(swapTokensForExactTokens_send, {
                call: swapTokensForExactTokens_call,
                txData: swapTokensForExactTokens_txData
            });
        }
    }
    OSWAP_HybridRouter2._abi = OSWAP_HybridRouter2_json_1.default.abi;
    exports.OSWAP_HybridRouter2 = OSWAP_HybridRouter2;
});
define("@scom/scom-swap/contracts/oswap-openswap-contract/contracts/index.ts", ["require", "exports", "@scom/scom-swap/contracts/oswap-openswap-contract/contracts/OpenSwap.ts", "@scom/scom-swap/contracts/oswap-openswap-contract/contracts/amm/OSWAP_ERC20.ts", "@scom/scom-swap/contracts/oswap-openswap-contract/contracts/amm/OSWAP_Factory.ts", "@scom/scom-swap/contracts/oswap-openswap-contract/contracts/amm/OSWAP_Pair.ts", "@scom/scom-swap/contracts/oswap-openswap-contract/contracts/amm/OSWAP_PairCreator.ts", "@scom/scom-swap/contracts/oswap-openswap-contract/contracts/amm/OSWAP_Router.ts", "@scom/scom-swap/contracts/oswap-openswap-contract/contracts/amm/OSWAP_VotingExecutor1.ts", "@scom/scom-swap/contracts/oswap-openswap-contract/contracts/commons/OSWAP_FactoryBase.ts", "@scom/scom-swap/contracts/oswap-openswap-contract/contracts/commons/OSWAP_PausableFactory.ts", "@scom/scom-swap/contracts/oswap-openswap-contract/contracts/commons/OSWAP_PausablePair.ts", "@scom/scom-swap/contracts/oswap-openswap-contract/contracts/gov/OAXDEX_Administrator.ts", "@scom/scom-swap/contracts/oswap-openswap-contract/contracts/gov/OAXDEX_Governance.ts", "@scom/scom-swap/contracts/oswap-openswap-contract/contracts/gov/OAXDEX_VotingContract.ts", "@scom/scom-swap/contracts/oswap-openswap-contract/contracts/gov/OAXDEX_VotingExecutor.ts", "@scom/scom-swap/contracts/oswap-openswap-contract/contracts/gov/OAXDEX_VotingRegistry.ts", "@scom/scom-swap/contracts/oswap-openswap-contract/contracts/libraries/ERC20.ts", "@scom/scom-swap/contracts/oswap-openswap-contract/contracts/oracle/OSWAP_CertiKSecurityOracle.ts", "@scom/scom-swap/contracts/oswap-openswap-contract/contracts/oracle/OSWAP_OracleFactory.ts", "@scom/scom-swap/contracts/oswap-openswap-contract/contracts/oracle/OSWAP_OracleLiquidityProvider.ts", "@scom/scom-swap/contracts/oswap-openswap-contract/contracts/oracle/OSWAP_OraclePair.ts", "@scom/scom-swap/contracts/oswap-openswap-contract/contracts/oracle/OSWAP_OraclePairCreator.ts", "@scom/scom-swap/contracts/oswap-openswap-contract/contracts/oracle/OSWAP_VotingExecutor2.ts", "@scom/scom-swap/contracts/oswap-openswap-contract/contracts/range/OSWAP_RangeFactory.ts", "@scom/scom-swap/contracts/oswap-openswap-contract/contracts/range/OSWAP_RangeLiquidityProvider.ts", "@scom/scom-swap/contracts/oswap-openswap-contract/contracts/range/OSWAP_RangePair.ts", "@scom/scom-swap/contracts/oswap-openswap-contract/contracts/range/OSWAP_RangePairCreator.ts", "@scom/scom-swap/contracts/oswap-openswap-contract/contracts/range/OSWAP_VotingExecutor3.ts", "@scom/scom-swap/contracts/oswap-openswap-contract/contracts/restricted/OSWAP_ConfigStore.ts", "@scom/scom-swap/contracts/oswap-openswap-contract/contracts/restricted/OSWAP_OtcLiquidityProvider.ts", "@scom/scom-swap/contracts/oswap-openswap-contract/contracts/restricted/OSWAP_OtcPairOracle.ts", "@scom/scom-swap/contracts/oswap-openswap-contract/contracts/restricted/OSWAP_RestrictedFactory.ts", "@scom/scom-swap/contracts/oswap-openswap-contract/contracts/restricted/OSWAP_RestrictedLiquidityProvider1.ts", "@scom/scom-swap/contracts/oswap-openswap-contract/contracts/restricted/OSWAP_RestrictedLiquidityProvider3.ts", "@scom/scom-swap/contracts/oswap-openswap-contract/contracts/restricted/OSWAP_RestrictedLiquidityProvider4.ts", "@scom/scom-swap/contracts/oswap-openswap-contract/contracts/restricted/OSWAP_RestrictedPair.ts", "@scom/scom-swap/contracts/oswap-openswap-contract/contracts/restricted/OSWAP_RestrictedPairOracle.ts", "@scom/scom-swap/contracts/oswap-openswap-contract/contracts/restricted/OSWAP_VotingExecutor4.ts", "@scom/scom-swap/contracts/oswap-openswap-contract/contracts/router/OSWAP_HybridRouter.ts", "@scom/scom-swap/contracts/oswap-openswap-contract/contracts/router/OSWAP_HybridRouterRegistry.ts", "@scom/scom-swap/contracts/oswap-openswap-contract/contracts/router/OSWAP_OracleRouter.ts", "@scom/scom-swap/contracts/oswap-openswap-contract/contracts/restricted/OSWAP_OtcPair.ts", "@scom/scom-swap/contracts/oswap-openswap-contract/contracts/restricted/OSWAP_OtcPairCreator.ts", "@scom/scom-swap/contracts/oswap-openswap-contract/contracts/restricted/OSWAP_RestrictedPair1.ts", "@scom/scom-swap/contracts/oswap-openswap-contract/contracts/restricted/OSWAP_RestrictedPair3.ts", "@scom/scom-swap/contracts/oswap-openswap-contract/contracts/restricted/OSWAP_RestrictedPair4.ts", "@scom/scom-swap/contracts/oswap-openswap-contract/contracts/restricted/OSWAP_RestrictedPairCreator1.ts", "@scom/scom-swap/contracts/oswap-openswap-contract/contracts/restricted/OSWAP_RestrictedPairCreator4.ts", "@scom/scom-swap/contracts/oswap-openswap-contract/contracts/router/OSWAP_HybridRouter2.ts"], function (require, exports, OpenSwap_1, OSWAP_ERC20_1, OSWAP_Factory_1, OSWAP_Pair_1, OSWAP_PairCreator_1, OSWAP_Router_1, OSWAP_VotingExecutor1_1, OSWAP_FactoryBase_1, OSWAP_PausableFactory_1, OSWAP_PausablePair_1, OAXDEX_Administrator_1, OAXDEX_Governance_1, OAXDEX_VotingContract_1, OAXDEX_VotingExecutor_1, OAXDEX_VotingRegistry_1, ERC20_1, OSWAP_CertiKSecurityOracle_1, OSWAP_OracleFactory_1, OSWAP_OracleLiquidityProvider_1, OSWAP_OraclePair_1, OSWAP_OraclePairCreator_1, OSWAP_VotingExecutor2_1, OSWAP_RangeFactory_1, OSWAP_RangeLiquidityProvider_1, OSWAP_RangePair_1, OSWAP_RangePairCreator_1, OSWAP_VotingExecutor3_1, OSWAP_ConfigStore_1, OSWAP_OtcLiquidityProvider_1, OSWAP_OtcPairOracle_1, OSWAP_RestrictedFactory_1, OSWAP_RestrictedLiquidityProvider1_1, OSWAP_RestrictedLiquidityProvider3_1, OSWAP_RestrictedLiquidityProvider4_1, OSWAP_RestrictedPair_1, OSWAP_RestrictedPairOracle_1, OSWAP_VotingExecutor4_1, OSWAP_HybridRouter_1, OSWAP_HybridRouterRegistry_1, OSWAP_OracleRouter_1, OSWAP_OtcPair_1, OSWAP_OtcPairCreator_1, OSWAP_RestrictedPair1_1, OSWAP_RestrictedPair3_1, OSWAP_RestrictedPair4_1, OSWAP_RestrictedPairCreator1_1, OSWAP_RestrictedPairCreator4_1, OSWAP_HybridRouter2_1) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.OSWAP_HybridRouter2 = exports.OSWAP_RestrictedPairCreator4 = exports.OSWAP_RestrictedPairCreator1 = exports.OSWAP_RestrictedPair4 = exports.OSWAP_RestrictedPair3 = exports.OSWAP_RestrictedPair1 = exports.OSWAP_OtcPairCreator = exports.OSWAP_OtcPair = exports.OSWAP_OracleRouter = exports.OSWAP_HybridRouterRegistry = exports.OSWAP_HybridRouter = exports.OSWAP_VotingExecutor4 = exports.OSWAP_RestrictedPairOracle = exports.OSWAP_RestrictedPair = exports.OSWAP_RestrictedLiquidityProvider4 = exports.OSWAP_RestrictedLiquidityProvider3 = exports.OSWAP_RestrictedLiquidityProvider1 = exports.OSWAP_RestrictedFactory = exports.OSWAP_OtcPairOracle = exports.OSWAP_OtcLiquidityProvider = exports.OSWAP_ConfigStore = exports.OSWAP_VotingExecutor3 = exports.OSWAP_RangePairCreator = exports.OSWAP_RangePair = exports.OSWAP_RangeLiquidityProvider = exports.OSWAP_RangeFactory = exports.OSWAP_VotingExecutor2 = exports.OSWAP_OraclePairCreator = exports.OSWAP_OraclePair = exports.OSWAP_OracleLiquidityProvider = exports.OSWAP_OracleFactory = exports.OSWAP_CertiKSecurityOracle = exports.ERC20 = exports.OAXDEX_VotingRegistry = exports.OAXDEX_VotingExecutor = exports.OAXDEX_VotingContract = exports.OAXDEX_Governance = exports.OAXDEX_Administrator = exports.OSWAP_PausablePair = exports.OSWAP_PausableFactory = exports.OSWAP_FactoryBase = exports.OSWAP_VotingExecutor1 = exports.OSWAP_Router = exports.OSWAP_PairCreator = exports.OSWAP_Pair = exports.OSWAP_Factory = exports.OSWAP_ERC20 = exports.OpenSwap = void 0;
    Object.defineProperty(exports, "OpenSwap", { enumerable: true, get: function () { return OpenSwap_1.OpenSwap; } });
    Object.defineProperty(exports, "OSWAP_ERC20", { enumerable: true, get: function () { return OSWAP_ERC20_1.OSWAP_ERC20; } });
    Object.defineProperty(exports, "OSWAP_Factory", { enumerable: true, get: function () { return OSWAP_Factory_1.OSWAP_Factory; } });
    Object.defineProperty(exports, "OSWAP_Pair", { enumerable: true, get: function () { return OSWAP_Pair_1.OSWAP_Pair; } });
    Object.defineProperty(exports, "OSWAP_PairCreator", { enumerable: true, get: function () { return OSWAP_PairCreator_1.OSWAP_PairCreator; } });
    Object.defineProperty(exports, "OSWAP_Router", { enumerable: true, get: function () { return OSWAP_Router_1.OSWAP_Router; } });
    Object.defineProperty(exports, "OSWAP_VotingExecutor1", { enumerable: true, get: function () { return OSWAP_VotingExecutor1_1.OSWAP_VotingExecutor1; } });
    Object.defineProperty(exports, "OSWAP_FactoryBase", { enumerable: true, get: function () { return OSWAP_FactoryBase_1.OSWAP_FactoryBase; } });
    Object.defineProperty(exports, "OSWAP_PausableFactory", { enumerable: true, get: function () { return OSWAP_PausableFactory_1.OSWAP_PausableFactory; } });
    Object.defineProperty(exports, "OSWAP_PausablePair", { enumerable: true, get: function () { return OSWAP_PausablePair_1.OSWAP_PausablePair; } });
    Object.defineProperty(exports, "OAXDEX_Administrator", { enumerable: true, get: function () { return OAXDEX_Administrator_1.OAXDEX_Administrator; } });
    Object.defineProperty(exports, "OAXDEX_Governance", { enumerable: true, get: function () { return OAXDEX_Governance_1.OAXDEX_Governance; } });
    Object.defineProperty(exports, "OAXDEX_VotingContract", { enumerable: true, get: function () { return OAXDEX_VotingContract_1.OAXDEX_VotingContract; } });
    Object.defineProperty(exports, "OAXDEX_VotingExecutor", { enumerable: true, get: function () { return OAXDEX_VotingExecutor_1.OAXDEX_VotingExecutor; } });
    Object.defineProperty(exports, "OAXDEX_VotingRegistry", { enumerable: true, get: function () { return OAXDEX_VotingRegistry_1.OAXDEX_VotingRegistry; } });
    Object.defineProperty(exports, "ERC20", { enumerable: true, get: function () { return ERC20_1.ERC20; } });
    Object.defineProperty(exports, "OSWAP_CertiKSecurityOracle", { enumerable: true, get: function () { return OSWAP_CertiKSecurityOracle_1.OSWAP_CertiKSecurityOracle; } });
    Object.defineProperty(exports, "OSWAP_OracleFactory", { enumerable: true, get: function () { return OSWAP_OracleFactory_1.OSWAP_OracleFactory; } });
    Object.defineProperty(exports, "OSWAP_OracleLiquidityProvider", { enumerable: true, get: function () { return OSWAP_OracleLiquidityProvider_1.OSWAP_OracleLiquidityProvider; } });
    Object.defineProperty(exports, "OSWAP_OraclePair", { enumerable: true, get: function () { return OSWAP_OraclePair_1.OSWAP_OraclePair; } });
    Object.defineProperty(exports, "OSWAP_OraclePairCreator", { enumerable: true, get: function () { return OSWAP_OraclePairCreator_1.OSWAP_OraclePairCreator; } });
    Object.defineProperty(exports, "OSWAP_VotingExecutor2", { enumerable: true, get: function () { return OSWAP_VotingExecutor2_1.OSWAP_VotingExecutor2; } });
    Object.defineProperty(exports, "OSWAP_RangeFactory", { enumerable: true, get: function () { return OSWAP_RangeFactory_1.OSWAP_RangeFactory; } });
    Object.defineProperty(exports, "OSWAP_RangeLiquidityProvider", { enumerable: true, get: function () { return OSWAP_RangeLiquidityProvider_1.OSWAP_RangeLiquidityProvider; } });
    Object.defineProperty(exports, "OSWAP_RangePair", { enumerable: true, get: function () { return OSWAP_RangePair_1.OSWAP_RangePair; } });
    Object.defineProperty(exports, "OSWAP_RangePairCreator", { enumerable: true, get: function () { return OSWAP_RangePairCreator_1.OSWAP_RangePairCreator; } });
    Object.defineProperty(exports, "OSWAP_VotingExecutor3", { enumerable: true, get: function () { return OSWAP_VotingExecutor3_1.OSWAP_VotingExecutor3; } });
    Object.defineProperty(exports, "OSWAP_ConfigStore", { enumerable: true, get: function () { return OSWAP_ConfigStore_1.OSWAP_ConfigStore; } });
    Object.defineProperty(exports, "OSWAP_OtcLiquidityProvider", { enumerable: true, get: function () { return OSWAP_OtcLiquidityProvider_1.OSWAP_OtcLiquidityProvider; } });
    Object.defineProperty(exports, "OSWAP_OtcPairOracle", { enumerable: true, get: function () { return OSWAP_OtcPairOracle_1.OSWAP_OtcPairOracle; } });
    Object.defineProperty(exports, "OSWAP_RestrictedFactory", { enumerable: true, get: function () { return OSWAP_RestrictedFactory_1.OSWAP_RestrictedFactory; } });
    Object.defineProperty(exports, "OSWAP_RestrictedLiquidityProvider1", { enumerable: true, get: function () { return OSWAP_RestrictedLiquidityProvider1_1.OSWAP_RestrictedLiquidityProvider1; } });
    Object.defineProperty(exports, "OSWAP_RestrictedLiquidityProvider3", { enumerable: true, get: function () { return OSWAP_RestrictedLiquidityProvider3_1.OSWAP_RestrictedLiquidityProvider3; } });
    Object.defineProperty(exports, "OSWAP_RestrictedLiquidityProvider4", { enumerable: true, get: function () { return OSWAP_RestrictedLiquidityProvider4_1.OSWAP_RestrictedLiquidityProvider4; } });
    Object.defineProperty(exports, "OSWAP_RestrictedPair", { enumerable: true, get: function () { return OSWAP_RestrictedPair_1.OSWAP_RestrictedPair; } });
    Object.defineProperty(exports, "OSWAP_RestrictedPairOracle", { enumerable: true, get: function () { return OSWAP_RestrictedPairOracle_1.OSWAP_RestrictedPairOracle; } });
    Object.defineProperty(exports, "OSWAP_VotingExecutor4", { enumerable: true, get: function () { return OSWAP_VotingExecutor4_1.OSWAP_VotingExecutor4; } });
    Object.defineProperty(exports, "OSWAP_HybridRouter", { enumerable: true, get: function () { return OSWAP_HybridRouter_1.OSWAP_HybridRouter; } });
    Object.defineProperty(exports, "OSWAP_HybridRouterRegistry", { enumerable: true, get: function () { return OSWAP_HybridRouterRegistry_1.OSWAP_HybridRouterRegistry; } });
    Object.defineProperty(exports, "OSWAP_OracleRouter", { enumerable: true, get: function () { return OSWAP_OracleRouter_1.OSWAP_OracleRouter; } });
    Object.defineProperty(exports, "OSWAP_OtcPair", { enumerable: true, get: function () { return OSWAP_OtcPair_1.OSWAP_OtcPair; } });
    Object.defineProperty(exports, "OSWAP_OtcPairCreator", { enumerable: true, get: function () { return OSWAP_OtcPairCreator_1.OSWAP_OtcPairCreator; } });
    Object.defineProperty(exports, "OSWAP_RestrictedPair1", { enumerable: true, get: function () { return OSWAP_RestrictedPair1_1.OSWAP_RestrictedPair1; } });
    Object.defineProperty(exports, "OSWAP_RestrictedPair3", { enumerable: true, get: function () { return OSWAP_RestrictedPair3_1.OSWAP_RestrictedPair3; } });
    Object.defineProperty(exports, "OSWAP_RestrictedPair4", { enumerable: true, get: function () { return OSWAP_RestrictedPair4_1.OSWAP_RestrictedPair4; } });
    Object.defineProperty(exports, "OSWAP_RestrictedPairCreator1", { enumerable: true, get: function () { return OSWAP_RestrictedPairCreator1_1.OSWAP_RestrictedPairCreator1; } });
    Object.defineProperty(exports, "OSWAP_RestrictedPairCreator4", { enumerable: true, get: function () { return OSWAP_RestrictedPairCreator4_1.OSWAP_RestrictedPairCreator4; } });
    Object.defineProperty(exports, "OSWAP_HybridRouter2", { enumerable: true, get: function () { return OSWAP_HybridRouter2_1.OSWAP_HybridRouter2; } });
});
define("@scom/scom-swap/contracts/oswap-openswap-contract/OpenSwap.ts", ["require", "exports", "@scom/scom-swap/contracts/oswap-openswap-contract/contracts/index.ts"], function (require, exports, index_1) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.OpenSwap = void 0;
    class OpenSwap {
        constructor(wallet, address) {
            this.wallet = wallet;
            this.address = address;
            this._oswap = new index_1.OpenSwap(wallet, address);
        }
        async deploy(params) {
            params.initSupply = this.wallet.utils.toDecimals(params.initSupply);
            params.totalSupply = this.wallet.utils.toDecimals(params.totalSupply);
            this.address = await this._oswap.deploy(params);
            return this.address;
        }
        async allowance(params) {
            return this.wallet.utils.fromDecimals(await this._oswap.allowance(params));
        }
        async approve(params) {
            params.amount = this.wallet.utils.toDecimals(params.amount);
            let receipt = await this._oswap.approve(params);
            let event = this._oswap.parseApprovalEvent(receipt)[0];
            event.value = this.wallet.utils.fromDecimals(event.value);
            return event;
        }
        async balanceOf(account) {
            return this.wallet.utils.fromDecimals(await this._oswap.balanceOf(account));
        }
        get cap() {
            return (async () => { return this.wallet.utils.fromDecimals(await this._oswap.cap()); })();
        }
        get decimals() {
            return (async () => { return (await this._oswap.decimals()).toNumber(); })();
        }
        async decreaseAllowance(params) {
            params.subtractedValue = this.wallet.utils.toDecimals(params.subtractedValue);
            let receipt = await this._oswap.decreaseAllowance(params);
            let event = this._oswap.parseApprovalEvent(receipt)[0];
            event.value = this.wallet.utils.fromDecimals(event.value);
            return event;
        }
        async increaseAllowance(params) {
            params.addedValue = this.wallet.utils.toDecimals(params.addedValue);
            let receipt = await this._oswap.increaseAllowance(params);
            let event = this._oswap.parseApprovalEvent(receipt)[0];
            event.value = this.wallet.utils.fromDecimals(event.value);
            return event;
        }
        async mint(params) {
            let receipt = await this._oswap.mint({ account: params.address, amount: this.wallet.utils.toDecimals(params.amount) });
            let event = this._oswap.parseTransferEvent(receipt)[0];
            event.value = this.wallet.utils.fromDecimals(event.value);
            return event;
        }
        get minter() {
            return this._oswap.minter();
        }
        get name() {
            return this._oswap.name();
        }
        get symbol() {
            return this._oswap.symbol();
        }
        get totalSupply() {
            return (async () => { return this.wallet.utils.fromDecimals(await this._oswap.totalSupply()); })();
        }
        async transfer(params) {
            let receipt = await this._oswap.transfer({ recipient: params.address, amount: this.wallet.utils.toDecimals(params.amount) });
            let event = this._oswap.parseTransferEvent(receipt)[0];
            event.value = this.wallet.utils.fromDecimals(event.value);
            return event;
        }
        async transferFrom(params) {
            params.amount = this.wallet.utils.toDecimals(params.amount);
            let receipt = await this._oswap.transferFrom(params);
            let transfer = this._oswap.parseTransferEvent(receipt)[0];
            transfer.value = this.wallet.utils.fromDecimals(transfer.value);
            let approval = this._oswap.parseApprovalEvent(receipt)[0];
            approval.value = this.wallet.utils.fromDecimals(approval.value);
            return { transfer, approval };
        }
    }
    exports.OpenSwap = OpenSwap;
});
define("@scom/scom-swap/contracts/oswap-openswap-contract/deploy.ts", ["require", "exports", "@ijstech/eth-contract", "@scom/scom-swap/contracts/oswap-openswap-contract/contracts/index.ts", "@scom/scom-swap/contracts/oswap-openswap-contract/contracts/restricted/OSWAP_OtcLiquidityProvider.ts", "@scom/scom-swap/contracts/oswap-openswap-contract/contracts/restricted/OSWAP_OtcPairCreator.ts", "@scom/scom-swap/contracts/oswap-openswap-contract/contracts/restricted/OSWAP_OtcPairOracle.ts", "@scom/scom-swap/contracts/oswap-openswap-contract/OpenSwap.ts"], function (require, exports, eth_contract_49, index_2, OSWAP_OtcLiquidityProvider_2, OSWAP_OtcPairCreator_2, OSWAP_OtcPairOracle_2, OpenSwap_2) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.deploy = exports.deployHybridRouter = exports.initHybridRouterRegistry = exports.deployRestrictedPairOracle = exports.deployRestrictedContracts = exports.deployRangeContracts = exports.deployOracleContracts = exports.deployCoreContracts = exports.toDeploymentContracts = exports.DefaultGovTokenOptions = exports.DefaultGovOptions = void 0;
    exports.DefaultGovOptions = {
        minStakePeriod: 1,
        tradeFee: 0.2,
        protocolFee: 0,
        protocolFeeTo: '',
        profiles: {
            name: ['poll', 'vote', 'addOldOracleToNewPair'],
            minExeDelay: [1, 1, 1],
            minVoteDuration: [0, 0, 0],
            maxVoteDuration: [1209600, 1209600, 1209600],
            minGovTokenToCreateVote: ['100000', '100000', '100000'],
            minQuorum: ['0', '10000000', '100']
        }
    };
    exports.DefaultGovTokenOptions = {
        initSupply: 0,
        initSupplyTo: '',
        minter: '',
        totalSupply: 1000000000
    };
    function toDeploymentContracts(wallet, result) {
        return {
            openSwap: new OpenSwap_2.OpenSwap(wallet, result.oswap),
            governance: new index_2.OAXDEX_Governance(wallet, result.governance),
            administrator: new index_2.OAXDEX_Administrator(wallet, result.administrator),
            registry: new index_2.OAXDEX_VotingRegistry(wallet, result.votingRegistry),
            pairCreator: new index_2.OSWAP_PairCreator(wallet, result.pairCreator),
            factory: new index_2.OSWAP_Factory(wallet, result.factory),
            oraclePairCreator: new index_2.OSWAP_OraclePairCreator(wallet, result.oraclePairCreator),
            router: new index_2.OSWAP_Router(wallet, result.router),
            oracleFactory: new index_2.OSWAP_OracleFactory(wallet, result.oracleFactory),
            oracleRouter: new index_2.OSWAP_OracleRouter(wallet, result.oracleRouter),
            oracleLiquidityProvider: new index_2.OSWAP_OracleLiquidityProvider(wallet, result.oracleLiquidityProvider),
            hybridRouterRegistry: new index_2.OSWAP_HybridRouterRegistry(wallet, result.hybridRouterRegistry),
            hybridRouter: new index_2.OSWAP_HybridRouter2(wallet, result.hybridRouter),
            executor: new index_2.OAXDEX_VotingExecutor(wallet, result.votingExecutor),
            executor1: new index_2.OSWAP_VotingExecutor1(wallet, result.votingExecutor1),
            executor2: new index_2.OSWAP_VotingExecutor2(wallet, result.votingExecutor2)
        };
    }
    exports.toDeploymentContracts = toDeploymentContracts;
    async function deployCoreContracts(wallet, options) {
        let result = {};
        //oswap
        if (!options.tokens.oswap) {
            let oswap = new OpenSwap_2.OpenSwap(wallet);
            result.oswap = await oswap.deploy(options.govTokenOptions);
        }
        else
            result.oswap = options.tokens.oswap;
        //votingToken
        if (!options.tokens.votingToken) {
            result.votingToken = result.oswap;
        }
        else {
            result.votingToken = options.tokens.votingToken;
        }
        //weth            
        if (options.tokens.weth)
            result.weth = options.tokens.weth;
        //governance
        let governance = new index_2.OAXDEX_Governance(wallet);
        result.governance = await governance.deploy({
            names: options.govOptions.profiles.name,
            maxVoteDuration: options.govOptions.profiles.maxVoteDuration,
            minExeDelay: options.govOptions.profiles.minExeDelay,
            minOaxTokenToCreateVote: options.govOptions.profiles.minGovTokenToCreateVote.map(v => wallet.utils.toDecimals(v)),
            minQuorum: options.govOptions.profiles.minQuorum.map(v => wallet.utils.toDecimals(v)),
            minStakePeriod: options.govOptions.minStakePeriod,
            minVoteDuration: options.govOptions.profiles.minVoteDuration,
            oaxToken: result.oswap,
            votingToken: result.votingToken
        });
        //administrator
        let administrator = new index_2.OAXDEX_Administrator(wallet);
        result.administrator = await administrator.deploy(governance.address);
        await governance.initAdmin(result.administrator);
        //VotingRegistry	
        let votingRegistry = new index_2.OAXDEX_VotingRegistry(wallet);
        result.votingRegistry = await votingRegistry.deploy(result.governance);
        await governance.setVotingRegister(result.votingRegistry);
        //PairCreator
        let pairCreator = new index_2.OSWAP_PairCreator(wallet);
        result.pairCreator = await pairCreator.deploy();
        //Factory
        let factory = new index_2.OSWAP_Factory(wallet);
        result.factory = await factory.deploy({
            governance: options.amm.governance || result.governance,
            pairCreator: result.pairCreator,
            protocolFee: 0,
            protocolFeeTo: options.amm.protocolFeeTo || eth_contract_49.nullAddress,
            tradeFee: 0
        });
        //Router
        let router = new index_2.OSWAP_Router(wallet);
        result.router = await router.deploy({
            WETH: result.weth,
            factory: result.factory
        });
        //VotingExecutor
        let votingExecutor = new index_2.OAXDEX_VotingExecutor(wallet);
        result.votingExecutor = await votingExecutor.deploy({
            admin: result.administrator,
            governance: result.governance
        });
        //VotingExecutor1
        let votingExecutor1 = new index_2.OSWAP_VotingExecutor1(wallet);
        result.votingExecutor1 = await votingExecutor1.deploy(factory.address);
        return result;
    }
    exports.deployCoreContracts = deployCoreContracts;
    async function deployOracleContracts(wallet, options, coreContractsResult) {
        let result = {};
        //OraclePairCreator
        let oraclePairCreator = new index_2.OSWAP_OraclePairCreator(wallet);
        result.oraclePairCreator = await oraclePairCreator.deploy();
        //OracleFactory
        let oracleFactory = new index_2.OSWAP_OracleFactory(wallet);
        result.oracleFactory = await oracleFactory.deploy({
            feePerDelegator: options.feePerDelegator || 0,
            governance: options.governance || coreContractsResult.governance,
            pairCreator: options.pairCreator || result.oraclePairCreator,
            protocolFee: options.protocolFee || 0,
            protocolFeeTo: options.protocolFeeTo || eth_contract_49.nullAddress,
            tradeFee: options.tradeFee || 0
        });
        //OracleRouter
        let oracleRouter = new index_2.OSWAP_OracleRouter(wallet);
        result.oracleRouter = await oracleRouter.deploy({
            WETH: coreContractsResult.weth,
            ammFactory: coreContractsResult.factory,
            oracleFactory: result.oracleFactory
        });
        //OracleLiquidityProvider
        let oracleLiquidityProvider = new index_2.OSWAP_OracleLiquidityProvider(wallet);
        result.oracleLiquidityProvider = await oracleLiquidityProvider.deploy({
            WETH: coreContractsResult.weth,
            factory: result.oracleFactory
        });
        await oracleFactory.setOracleLiquidityProvider({
            oracleLiquidityProvider: result.oracleLiquidityProvider,
            oracleRouter: result.oracleRouter
        });
        //VotingExecutor2
        let votingExecutor2 = new index_2.OSWAP_VotingExecutor2(wallet);
        result.votingExecutor2 = await votingExecutor2.deploy(oracleFactory.address);
        return result;
    }
    exports.deployOracleContracts = deployOracleContracts;
    async function deployRangeContracts(wallet, options, weth, hybridRegistry) {
        let result = {};
        //RangePairCreator
        let rangePairCreator = new index_2.OSWAP_RangePairCreator(wallet);
        result.rangePairCreator = await rangePairCreator.deploy();
        //RangeFactory
        let rangeFactory = new index_2.OSWAP_RangeFactory(wallet);
        result.rangeFactory = await rangeFactory.deploy({
            governance: options.governance,
            oracleFactory: options.oracleFactory,
            pairCreator: options.pairCreator || result.rangePairCreator,
            tradeFee: options.tradeFee || 0,
            stakeAmount: options.stakeAmount || [],
            liquidityProviderShare: options.liquidityProviderShare || [],
            protocolFeeTo: options.protocolFeeTo || eth_contract_49.nullAddress
        });
        //RangeLiquidityProvider
        let rangeLiquidityProvider = new index_2.OSWAP_RangeLiquidityProvider(wallet);
        result.rangeLiquidityProvider = await rangeLiquidityProvider.deploy({
            WETH: weth,
            factory: result.rangeFactory
        });
        await rangeFactory.setRangeLiquidityProvider(result.rangeLiquidityProvider);
        //VotingExecutor3
        let votingExecutor3 = new index_2.OSWAP_VotingExecutor3(wallet);
        result.votingExecutor3 = await votingExecutor3.deploy({
            governance: options.governance,
            factory: rangeFactory.address,
            hybridRegistry: hybridRegistry
        });
        return result;
    }
    exports.deployRangeContracts = deployRangeContracts;
    async function deployRestrictedContracts(wallet, options, weth) {
        let result = {};
        //ConfigStore
        if (!options.configStore) {
            let configStore = new index_2.OSWAP_ConfigStore(wallet);
            result.configStore = await configStore.deploy(options.governance);
        }
        else {
            result.configStore = options.configStore;
        }
        //RestrictedPairCreator
        if (!options.pairCreator) {
            let restrictedPairCreator;
            if (options.type == 'Otc') {
                restrictedPairCreator = new OSWAP_OtcPairCreator_2.OSWAP_OtcPairCreator(wallet);
            }
            else {
                restrictedPairCreator = new index_2.OSWAP_RestrictedPairCreator1(wallet);
            }
            result.restrictedPairCreator = await restrictedPairCreator.deploy();
        }
        else {
            result.restrictedPairCreator = options.pairCreator;
        }
        //RestrictedFactory
        let restrictedFactory = new index_2.OSWAP_RestrictedFactory(wallet);
        result.restrictedFactory = await restrictedFactory.deploy({
            governance: options.governance,
            whitelistFactory: options.whitelistFactory,
            pairCreator: result.restrictedPairCreator,
            tradeFee: options.tradeFee || 0,
            configStore: result.configStore,
            protocolFee: options.protocolFee || 0,
            protocolFeeTo: options.protocolFeeTo || eth_contract_49.nullAddress
        });
        //RestrictedLiquidityProvider
        let restrictedLiquidityProvider;
        if (options.type == 'Otc') {
            restrictedLiquidityProvider = new OSWAP_OtcLiquidityProvider_2.OSWAP_OtcLiquidityProvider(wallet);
        }
        else {
            restrictedLiquidityProvider = new index_2.OSWAP_RestrictedLiquidityProvider1(wallet);
        }
        result.restrictedLiquidityProvider = await restrictedLiquidityProvider.deploy({
            WETH: weth,
            factory: result.restrictedFactory
        });
        await restrictedFactory.init(result.restrictedLiquidityProvider);
        //VotingExecutor4
        let votingExecutor4 = new index_2.OSWAP_VotingExecutor4(wallet);
        result.votingExecutor4 = await votingExecutor4.deploy({
            governance: options.governance,
            factory: restrictedFactory.address,
            configStore: result.configStore
        });
        return result;
    }
    exports.deployRestrictedContracts = deployRestrictedContracts;
    async function deployRestrictedPairOracle(wallet, isOtc) {
        let restrictedPairOracle;
        if (isOtc) {
            restrictedPairOracle = new OSWAP_OtcPairOracle_2.OSWAP_OtcPairOracle(wallet);
        }
        else {
            restrictedPairOracle = new index_2.OSWAP_RestrictedPairOracle(wallet);
        }
        let result = await restrictedPairOracle.deploy();
        return result;
    }
    exports.deployRestrictedPairOracle = deployRestrictedPairOracle;
    async function initHybridRouterRegistry(wallet, options) {
        let hybridRouterRegistry = new index_2.OSWAP_HybridRouterRegistry(wallet, options.registryAddress);
        let { name, factory, fee, feeBase, typeCode } = options;
        await hybridRouterRegistry.init({
            name,
            factory,
            fee,
            feeBase,
            typeCode
        });
    }
    exports.initHybridRouterRegistry = initHybridRouterRegistry;
    async function deployHybridRouter(wallet, options) {
        let result = {};
        //HybridRouterRegistry
        if (!options.registryAddress) {
            let hybridRouterRegistry = new index_2.OSWAP_HybridRouterRegistry(wallet);
            result.hybridRouterRegistry = await hybridRouterRegistry.deploy(options.governance);
        }
        else {
            result.hybridRouterRegistry = options.registryAddress;
        }
        //HybridRouter
        let hybridRouter = new index_2.OSWAP_HybridRouter2(wallet);
        result.hybridRouter = await hybridRouter.deploy({
            WETH: options.weth,
            registry: result.hybridRouterRegistry
        });
        return result;
    }
    exports.deployHybridRouter = deployHybridRouter;
    function deploy(wallet, options) {
        options = options || {};
        if (!options.govOptions)
            options.govOptions = exports.DefaultGovOptions;
        if (!options.govTokenOptions) {
            options.govTokenOptions = exports.DefaultGovTokenOptions;
            options.govTokenOptions.initSupplyTo = wallet.address;
            options.govTokenOptions.minter = wallet.address;
        }
        if (!options.tokens)
            options.tokens = {};
        if (!options.amm)
            options.amm = {};
        if (!options.oracle)
            options.oracle = {};
        return new Promise(async function (resolve, reject) {
            try {
                let coreContractsResult = await deployCoreContracts(wallet, options);
                let oracleContractsResult = await deployOracleContracts(wallet, options.oracle, coreContractsResult);
                let result = Object.assign(Object.assign({}, coreContractsResult), oracleContractsResult);
                if (options.hybridRouter) {
                    options.hybridRouter.governance = coreContractsResult.governance;
                    options.hybridRouter.weth = coreContractsResult.weth;
                    let hybridRouterResult = await deployHybridRouter(wallet, options.hybridRouter);
                    result = Object.assign(Object.assign({}, result), hybridRouterResult);
                    if (options.range) {
                        options.range.governance = coreContractsResult.governance;
                        options.range.oracleFactory = oracleContractsResult.oracleFactory;
                        let rangeContractsResult = await deployRangeContracts(wallet, options.range, coreContractsResult.weth, hybridRouterResult.hybridRouterRegistry);
                        result = Object.assign(Object.assign({}, result), rangeContractsResult);
                    }
                    if (options.restricted) {
                        options.restricted.governance = coreContractsResult.governance;
                        options.restricted.whitelistFactory = oracleContractsResult.oracleFactory;
                        let restrictedContractsResult = await deployRestrictedContracts(wallet, options.restricted, coreContractsResult.weth);
                        result = Object.assign(Object.assign({}, result), restrictedContractsResult);
                    }
                }
                let governance = new index_2.OAXDEX_Governance(wallet, coreContractsResult.governance);
                await governance.initVotingExecutor([
                    result.votingExecutor,
                    result.votingExecutor1,
                    result.votingExecutor2,
                    result.votingExecutor3,
                    result.votingExecutor4,
                    result.hybridRouterRegistry
                ].filter(Boolean));
                console.dir(result);
                resolve(result);
            }
            catch (err) {
                reject(err);
            }
        });
    }
    exports.deploy = deploy;
});
define("@scom/scom-swap/contracts/oswap-openswap-contract/index.ts", ["require", "exports", "@scom/scom-swap/contracts/oswap-openswap-contract/contracts/index.ts", "@scom/scom-swap/contracts/oswap-openswap-contract/deploy.ts", "@scom/scom-swap/contracts/oswap-openswap-contract/OpenSwap.ts"], function (require, exports, Contracts, deploy_1, OpenSwap_3) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.OpenSwap = exports.toDeploymentContracts = exports.deployRestrictedPairOracle = exports.initHybridRouterRegistry = exports.deployHybridRouter = exports.deployRestrictedContracts = exports.deployRangeContracts = exports.deployOracleContracts = exports.deployCoreContracts = exports.deploy = exports.Contracts = void 0;
    ///<amd-module name='@scom/scom-swap/contracts/oswap-openswap-contract/index.ts'/> 
    exports.Contracts = Contracts;
    Object.defineProperty(exports, "deploy", { enumerable: true, get: function () { return deploy_1.deploy; } });
    Object.defineProperty(exports, "deployCoreContracts", { enumerable: true, get: function () { return deploy_1.deployCoreContracts; } });
    Object.defineProperty(exports, "deployOracleContracts", { enumerable: true, get: function () { return deploy_1.deployOracleContracts; } });
    Object.defineProperty(exports, "deployRangeContracts", { enumerable: true, get: function () { return deploy_1.deployRangeContracts; } });
    Object.defineProperty(exports, "deployRestrictedContracts", { enumerable: true, get: function () { return deploy_1.deployRestrictedContracts; } });
    Object.defineProperty(exports, "deployHybridRouter", { enumerable: true, get: function () { return deploy_1.deployHybridRouter; } });
    Object.defineProperty(exports, "initHybridRouterRegistry", { enumerable: true, get: function () { return deploy_1.initHybridRouterRegistry; } });
    Object.defineProperty(exports, "deployRestrictedPairOracle", { enumerable: true, get: function () { return deploy_1.deployRestrictedPairOracle; } });
    Object.defineProperty(exports, "toDeploymentContracts", { enumerable: true, get: function () { return deploy_1.toDeploymentContracts; } });
    Object.defineProperty(exports, "OpenSwap", { enumerable: true, get: function () { return OpenSwap_3.OpenSwap; } });
});
define("@scom/scom-swap/global/utils/common.ts", ["require", "exports", "@ijstech/eth-wallet", "@scom/scom-swap/contracts/oswap-openswap-contract/index.ts"], function (require, exports, eth_wallet_1, index_3) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.getERC20Allowance = exports.approveERC20Max = exports.getERC20Amount = exports.registerSendTxEvents = exports.isTransactionConfirmed = void 0;
    ;
    const isTransactionConfirmed = async (txHash) => {
        const tx = await eth_wallet_1.Wallet.getClientInstance().getTransactionReceipt(txHash);
        return tx && !!tx.blockNumber;
    };
    exports.isTransactionConfirmed = isTransactionConfirmed;
    const registerSendTxEvents = (sendTxEventHandlers) => {
        const wallet = eth_wallet_1.Wallet.getClientInstance();
        wallet.registerSendTxEvents({
            transactionHash: (error, receipt) => {
                if (sendTxEventHandlers.transactionHash) {
                    sendTxEventHandlers.transactionHash(error, receipt);
                }
            },
            confirmation: (receipt) => {
                if (sendTxEventHandlers.confirmation) {
                    sendTxEventHandlers.confirmation(receipt);
                }
            },
        });
    };
    exports.registerSendTxEvents = registerSendTxEvents;
    async function getERC20Amount(wallet, token, decimals) {
        let erc20 = new eth_wallet_1.Erc20(wallet, token, decimals);
        return await erc20.balance;
    }
    exports.getERC20Amount = getERC20Amount;
    const approveERC20Max = async (token, spenderAddress, callback, confirmationCallback) => {
        let wallet = eth_wallet_1.Wallet.getClientInstance();
        let amount = new eth_wallet_1.BigNumber(2).pow(256).minus(1);
        let erc20 = new index_3.Contracts.ERC20(wallet, token.address);
        (0, exports.registerSendTxEvents)({
            transactionHash: callback,
            confirmation: confirmationCallback
        });
        let receipt = await erc20.approve({
            spender: spenderAddress,
            amount
        });
        return receipt;
    };
    exports.approveERC20Max = approveERC20Max;
    const getERC20Allowance = async (token, spenderAddress) => {
        if (!(token === null || token === void 0 ? void 0 : token.address))
            return null;
        let wallet = eth_wallet_1.Wallet.getClientInstance();
        let erc20 = new index_3.Contracts.ERC20(wallet, token.address);
        let allowance = await erc20.allowance({
            owner: wallet.account.address,
            spender: spenderAddress
        });
        return allowance;
    };
    exports.getERC20Allowance = getERC20Allowance;
});
define("@scom/scom-swap/global/utils/helper.ts", ["require", "exports", "@ijstech/eth-wallet", "@ijstech/components"], function (require, exports, eth_wallet_2, components_1) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.isWalletAddress = exports.downloadJsonFile = exports.renderBalanceTooltip = exports.getWeekDays = exports.uniqWith = exports.formatNumberValue = exports.getParamsFromUrl = exports.numberToBytes32 = exports.padLeft = exports.toWeiInv = exports.getAPI = exports.limitDecimals = exports.limitInputNumber = exports.isInvalidInput = exports.isValidNumber = exports.formatNumberWithSeparators = exports.formatPercentNumber = exports.formatNumber = exports.compareDate = exports.formatUTCDate = exports.formatDate = exports.DefaultDateFormat = exports.DefaultDateTimeFormat = void 0;
    exports.DefaultDateTimeFormat = 'DD/MM/YYYY HH:mm:ss';
    exports.DefaultDateFormat = 'DD/MM/YYYY';
    const formatDate = (date, customType, showTimezone) => {
        const formatType = customType || exports.DefaultDateFormat;
        const formatted = (0, components_1.moment)(date).format(formatType);
        if (showTimezone) {
            return `${formatted} (UTC+${(0, components_1.moment)().utcOffset() / 60})`;
        }
        return formatted;
    };
    exports.formatDate = formatDate;
    const formatUTCDate = (date, customType, showTimezone) => {
        const formatType = customType || exports.DefaultDateFormat;
        const formatted = (0, components_1.moment)(date).utc().format(formatType);
        return showTimezone ? `${formatted} (UTC)` : formatted;
    };
    exports.formatUTCDate = formatUTCDate;
    const compareDate = (fromDate, toDate) => {
        if (!toDate) {
            toDate = (0, components_1.moment)();
        }
        return (0, components_1.moment)(fromDate).isSameOrBefore(toDate);
    };
    exports.compareDate = compareDate;
    const formatNumber = (value, decimals) => {
        let val = value;
        const minValue = '0.0000001';
        if (typeof value === 'string') {
            val = new eth_wallet_2.BigNumber(value).toNumber();
        }
        else if (typeof value === 'object') {
            val = value.toNumber();
        }
        if (val != 0 && new eth_wallet_2.BigNumber(val).lt(minValue)) {
            return `<${minValue}`;
        }
        return (0, exports.formatNumberWithSeparators)(val, decimals || 4);
    };
    exports.formatNumber = formatNumber;
    const formatPercentNumber = (value, decimals) => {
        let val = value;
        if (typeof value === 'string') {
            val = new eth_wallet_2.BigNumber(value).toNumber();
        }
        else if (typeof value === 'object') {
            val = value.toNumber();
        }
        return (0, exports.formatNumberWithSeparators)(val, decimals || 2);
    };
    exports.formatPercentNumber = formatPercentNumber;
    const formatNumberWithSeparators = (value, precision) => {
        if (!value)
            value = 0;
        if (precision) {
            let outputStr = '';
            if (value >= 1) {
                outputStr = value.toLocaleString('en-US', { maximumFractionDigits: precision });
            }
            else {
                outputStr = value.toLocaleString('en-US', { maximumSignificantDigits: precision });
            }
            if (outputStr.length > 18) {
                outputStr = outputStr.substr(0, 18) + '...';
            }
            return outputStr;
            // let parts = parseFloat(value.toPrecision(precision)).toString().split(".");
            // parts[0] = parts[0].replace(/\B(?=(\d{3})+(?!\d))/g, ",");
            // return parts.join(".");
        }
        else {
            return value.toLocaleString('en-US');
            // let parts = value.toString().split(".");
            // parts[0] = parts[0].replace(/\B(?=(\d{3})+(?!\d))/g, ",");
            // return parts.join(".");
        }
    };
    exports.formatNumberWithSeparators = formatNumberWithSeparators;
    const isValidNumber = (value) => {
        const val = new eth_wallet_2.BigNumber(value);
        return val.gte(0);
    };
    exports.isValidNumber = isValidNumber;
    const isInvalidInput = (val) => {
        const value = new eth_wallet_2.BigNumber(val);
        if (value.lt(0))
            return true;
        return (val || '').toString().substring(0, 2) === '00' || val === '-';
    };
    exports.isInvalidInput = isInvalidInput;
    const limitInputNumber = (input, decimals) => {
        const amount = input.value;
        if ((0, exports.isInvalidInput)(amount)) {
            input.value = '0';
            return;
        }
        if (!new eth_wallet_2.BigNumber(amount).isNaN()) {
            input.value = (0, exports.limitDecimals)(amount, decimals || 18);
        }
    };
    exports.limitInputNumber = limitInputNumber;
    const limitDecimals = (value, decimals) => {
        let val = value;
        if (typeof value !== 'string') {
            val = val.toString();
        }
        let chart;
        if (val.includes('.')) {
            chart = '.';
        }
        else if (val.includes(',')) {
            chart = ',';
        }
        else {
            return value;
        }
        const parts = val.split(chart);
        let decimalsPart = parts[1];
        if (decimalsPart && decimalsPart.length > decimals) {
            parts[1] = decimalsPart.substr(0, decimals);
        }
        return parts.join(chart);
    };
    exports.limitDecimals = limitDecimals;
    async function getAPI(url, paramsObj) {
        let queries = '';
        if (paramsObj) {
            try {
                queries = new URLSearchParams(paramsObj).toString();
            }
            catch (err) {
                console.log('err', err);
            }
        }
        let fullURL = url + (queries ? `?${queries}` : '');
        const response = await fetch(fullURL, {
            method: "GET",
            headers: {
                "Content-Type": "application/json"
            },
        });
        return response.json();
    }
    exports.getAPI = getAPI;
    const toWeiInv = (n, unit) => {
        if (new eth_wallet_2.BigNumber(n).eq(0))
            return new eth_wallet_2.BigNumber('0xffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff');
        return new eth_wallet_2.BigNumber('1').shiftedBy((unit || 18) * 2).idiv(new eth_wallet_2.BigNumber(n).shiftedBy(unit || 18));
    };
    exports.toWeiInv = toWeiInv;
    const padLeft = function (string, chars, sign) {
        return new Array(chars - string.length + 1).join(sign ? sign : "0") + string;
    };
    exports.padLeft = padLeft;
    const numberToBytes32 = (value, prefix) => {
        if (!value)
            return;
        let v = value;
        if (typeof value == "number") {
            // covert to a hex string
            v = value.toString(16);
        }
        else if (/^[0-9]*$/.test(value)) {
            // assuming value to be a decimal number, value could be a hex
            v = new eth_wallet_2.BigNumber(value).toString(16);
        }
        else if (/^(0x)?[0-9A-Fa-f]*$/.test(value)) {
            // value already a hex
            v = value;
        }
        else if (eth_wallet_2.BigNumber.isBigNumber(value)) {
            v = value.toString(16);
        }
        v = v.replace("0x", "");
        v = (0, exports.padLeft)(v, 64);
        if (prefix)
            v = '0x' + v;
        return v;
    };
    exports.numberToBytes32 = numberToBytes32;
    const getParamsFromUrl = () => {
        const startIdx = window.location.href.indexOf("?");
        const search = window.location.href.substring(startIdx, window.location.href.length);
        const queryString = search;
        const urlParams = new URLSearchParams(queryString);
        return urlParams;
    };
    exports.getParamsFromUrl = getParamsFromUrl;
    const formatNumberValue = (data, tokenMap) => {
        const { title, value, symbol, icon, prefix, isWrapped } = data;
        try {
            let limitDecimals = 18;
            if (symbol) {
                let symb = symbol;
                if (symb.includes('/')) {
                    symb = symb.split('/')[0];
                }
                if (symbol === 'USD') {
                    limitDecimals = 2;
                }
                else {
                    const tokenObj = Object.values(tokenMap).find((token) => token.symbol === symb);
                    if (tokenObj) {
                        limitDecimals = tokenObj.decimals || 18;
                    }
                }
            }
            const val = parseFloat(value);
            const minValue = 0.0001;
            let result;
            let tooltip = `${value}`;
            if (val === 0) {
                result = `0`;
            }
            else if (val < minValue) {
                if (prefix === '$') {
                    result = `< ${prefix}${minValue}`;
                }
                else if (prefix) {
                    result = `${prefix.replace('=', '')} < ${minValue}`;
                }
                else {
                    result = `< ${minValue}`;
                }
                tooltip = val.toLocaleString('en-US', { maximumFractionDigits: limitDecimals });
            }
            else {
                const stringValue = value.toString();
                const decimalsIndex = stringValue.indexOf('.');
                const length = decimalsIndex < 0 ? stringValue.length : stringValue.length - 1;
                let valueFormatted = val.toLocaleString('en-US', { maximumFractionDigits: limitDecimals });
                const arr = valueFormatted.split('.');
                valueFormatted = arr[0];
                if (arr[1]) {
                    valueFormatted = `${arr[0]}.${arr[1].substr(0, 4)}`;
                }
                if (length <= 7) {
                    result = valueFormatted;
                }
                else if (decimalsIndex > 7) {
                    result = `${valueFormatted.substr(0, 9)}...`;
                }
                else if (decimalsIndex > -1) {
                    result = valueFormatted;
                }
                else {
                    const finalVal = valueFormatted.substr(0, 13);
                    result = `${finalVal}${length > 10 ? '...' : ''}`;
                }
                if (result.length > 20 && !result.includes('...')) {
                    result = `${result.substr(0, 13)}...`;
                }
                // Format value for the tooltip
                const parts = stringValue.split('.');
                const intVal = parseInt(parts[0]).toLocaleString('en-US');
                tooltip = `${intVal}`;
                if (parts[1]) {
                    let decVal = parts[1];
                    if (parts[1].length > limitDecimals) {
                        decVal = parseFloat(`0.${parts[1]}`).toLocaleString('en-US', { maximumFractionDigits: limitDecimals });
                        if (decVal == 1) {
                            decVal = parts[1].substr(0, limitDecimals);
                        }
                        else {
                            decVal = decVal.substr(2);
                        }
                    }
                    tooltip += `.${decVal}`;
                }
            }
            if (icon) {
                result += ` <img width="20" src="${icon}" style="padding-bottom: 0.15rem" />`;
            }
            if (symbol) {
                result += ` ${symbol}`;
                tooltip += ` ${symbol}`;
            }
            if (prefix) {
                result = `${val < minValue ? '' : prefix}${result}`;
                tooltip = `${prefix}${tooltip}`;
            }
            if (title) {
                result = `${title}: ${result}`;
            }
            if (isWrapped) {
                result = `(${result})`;
            }
            if (symbol === 'USD') {
                return result;
            }
            else {
                return { result, tooltip };
            }
        }
        catch (_a) {
            return '-';
        }
    };
    exports.formatNumberValue = formatNumberValue;
    const uniqWith = (array, compareFn) => {
        const unique = [];
        for (const cur of array) {
            const isDuplicate = unique.some((oth) => compareFn(cur, oth));
            if (!isDuplicate)
                unique.push(cur);
        }
        return unique;
    };
    exports.uniqWith = uniqWith;
    const getWeekDays = () => {
        const d = new Date();
        d.setDate(d.getDate() - 7);
        let days = [];
        let day = d;
        for (let i = 0; i < 7; i++) {
            days.push(day.setDate(day.getDate() + 1));
        }
        return days;
    };
    exports.getWeekDays = getWeekDays;
    const renderBalanceTooltip = (params, tokenMap, isBold) => {
        const data = (0, exports.formatNumberValue)(params, tokenMap);
        if (typeof data === "object") {
            const { result, tooltip } = data;
            if (isBold) {
                return `<i-label class="bold" tooltip='${JSON.stringify({ content: tooltip })}'>${result}</i-label>`;
            }
            return `<i-label tooltip='${JSON.stringify({ content: tooltip })}'>${result}</i-label>`;
        }
        return data;
    };
    exports.renderBalanceTooltip = renderBalanceTooltip;
    const replacer = (key, value) => {
        if (['minLockTime', 'campaignStart', 'campaignEnd', 'perAddressCap', 'maxTotalLock', 'multiplier', 'initialReward', 'vestingPeriod', 'claimDeadline', 'vestingStartDate', 'rewardAmount', 'value'].includes(key)) {
            const val = Number(value);
            return isNaN(val) ? value : val;
        }
        return value;
    };
    const downloadJsonFile = (name, obj) => {
        const link = document.createElement("a");
        const text = JSON.stringify(obj, replacer, 2);
        link.download = name;
        const jsonContent = `data:application/json;charset=utf-8,${encodeURIComponent(text)}`;
        link.href = jsonContent;
        link.click();
    };
    exports.downloadJsonFile = downloadJsonFile;
    function isWalletAddress(address) {
        return /^0x[a-fA-F0-9]{40}$/.test(address);
    }
    exports.isWalletAddress = isWalletAddress;
});
define("@scom/scom-swap/global/utils/error.ts", ["require", "exports"], function (require, exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.parseContractError = void 0;
    ///<amd-module name='@scom/scom-swap/global/utils/error.ts'/> 
    async function parseContractError(oMessage, tokens) {
        var _a;
        const staticMessageMap = {
            'execution reverted: OAXDEX: K': 'x * y = k Violated',
            'execution reverted: OAXDEX: FORBIDDEN': 'Forbidden',
            'execution reverted: OAXDEX: INSUFFICIENT_INPUT_AMOUNT': 'Insufficient input amount',
            'execution reverted: OAXDEX: INVALID_TO': 'Invalid to',
            'execution reverted: OAXDEX: INSUFFICIENT_LIQUIDITY': 'Insufficient liquidity',
            'execution reverted: OAXDEX: INSUFFICIENT_OUTPUT_AMOUNT': 'Insufficient output amount',
            'execution reverted: OAXDEX: PAIR PAUSED': 'Pair paused',
            'execution reverted: OAXDEX: GLOBALLY PAUSED': 'Globally paused',
            'execution reverted: OAXDEX: INSUFFICIENT_LIQUIDITY_BURNED': 'Insufficient liquidity burned',
            'execution reverted: OAXDEX: INSUFFICIENT_LIQUIDITY_MINTED': 'Insufficient liquidity minted',
            'execution reverted: OAXDEX: OVERFLOW': 'Overflow',
            'execution reverted: OAXDEX_Pair: INSUFFICIENT_LIQUIDITY': 'Insufficient liquidity',
            'execution reverted: OAXDEX_Pair: INSUFFICIENT_OUTPUT_AMOUNT': 'Insufficient output amount',
            'execution reverted: OAXDEX_Pair: INSUFFICIENT_INPUT_AMOUNT': 'Insufficient input amount',
            'execution reverted: OAXDEX: LOCKED': 'Locked',
            'execution reverted: OAXDEX: INVALID_SIGNATURE': 'Invalid signature',
            'execution reverted: OAXDEX: EXPIRED': 'Expired',
            'MetaMask Tx Signature: User denied transaction signature.': 'User denied transaction signature',
            'execution reverted: OracleAdaptor: Price outside allowed range': 'Circuit Breaker: Exceeds Price Protection Range',
            'execution reverted: PAIR_NOT_MATCH': 'Pair Not Match',
            'execution reverted: Cap exceeded': 'Trolls have been sold out',
            'execution reverted: No oracle found': 'No Oracle found',
            'execution reverted: Amount exceeds available fund': 'Insufficient liquidity',
        };
        return (_a = staticMessageMap[oMessage]) !== null && _a !== void 0 ? _a : `Unknown Error: ${oMessage}`;
    }
    exports.parseContractError = parseContractError;
});
define("@scom/scom-swap/global/utils/pageBlock.ts", ["require", "exports"], function (require, exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
});
define("@scom/scom-swap/global/utils/approvalModel.ts", ["require", "exports", "@ijstech/eth-wallet", "@scom/scom-swap/global/utils/common.ts"], function (require, exports, eth_wallet_3, common_1) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.ERC20ApprovalModel = exports.ApprovalStatus = void 0;
    ;
    var ApprovalStatus;
    (function (ApprovalStatus) {
        ApprovalStatus[ApprovalStatus["TO_BE_APPROVED"] = 0] = "TO_BE_APPROVED";
        ApprovalStatus[ApprovalStatus["APPROVING"] = 1] = "APPROVING";
        ApprovalStatus[ApprovalStatus["NONE"] = 2] = "NONE";
    })(ApprovalStatus = exports.ApprovalStatus || (exports.ApprovalStatus = {}));
    class ERC20ApprovalModel {
        constructor(options) {
            this.options = {
                sender: null,
                spenderAddress: '',
                payAction: async () => { },
                onToBeApproved: async (token) => { },
                onToBePaid: async (token) => { },
                onApproving: async (token, receipt, data) => { },
                onApproved: async (token, data) => { },
                onPaying: async (receipt, data) => { },
                onPaid: async (data) => { },
                onApprovingError: async (token, err) => { },
                onPayingError: async (err) => { }
            };
            this.checkAllowance = async (token, inputAmount) => {
                let allowance = await (0, common_1.getERC20Allowance)(token, this.options.spenderAddress);
                if (!allowance) {
                    await this.options.onToBePaid.bind(this.options.sender)(token);
                }
                else if (new eth_wallet_3.BigNumber(inputAmount).gt(allowance)) {
                    await this.options.onToBeApproved.bind(this.options.sender)(token);
                }
                else {
                    await this.options.onToBePaid.bind(this.options.sender)(token);
                }
            };
            this.doApproveAction = async (token, inputAmount, data) => {
                const txHashCallback = async (err, receipt) => {
                    if (err) {
                        await this.options.onApprovingError.bind(this.options.sender)(token, err);
                    }
                    else {
                        await this.options.onApproving.bind(this.options.sender)(token, receipt, data);
                    }
                };
                const confirmationCallback = async (receipt) => {
                    await this.options.onApproved.bind(this.options.sender)(token, data);
                    await this.checkAllowance(token, inputAmount);
                };
                (0, common_1.approveERC20Max)(token, this.options.spenderAddress, txHashCallback, confirmationCallback);
            };
            this.doPayAction = async (data) => {
                const txHashCallback = async (err, receipt) => {
                    if (err) {
                        await this.options.onPayingError.bind(this.options.sender)(err);
                    }
                    else {
                        await this.options.onPaying.bind(this.options.sender)(receipt, data);
                    }
                };
                const confirmationCallback = async (receipt) => {
                    await this.options.onPaid.bind(this.options.sender)(data);
                };
                (0, common_1.registerSendTxEvents)({
                    transactionHash: txHashCallback,
                    confirmation: confirmationCallback
                });
                await this.options.payAction.bind(this.options.sender)();
            };
            this.getAction = () => {
                return {
                    doApproveAction: this.doApproveAction,
                    doPayAction: this.doPayAction,
                    checkAllowance: this.checkAllowance
                };
            };
            this.options = options;
        }
        set spenderAddress(value) {
            this.options.spenderAddress = value;
        }
    }
    exports.ERC20ApprovalModel = ERC20ApprovalModel;
});
define("@scom/scom-swap/global/utils/swapInterface.ts", ["require", "exports"], function (require, exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
});
define("@scom/scom-swap/global/utils/index.ts", ["require", "exports", "@scom/scom-swap/global/utils/helper.ts", "@scom/scom-swap/global/utils/error.ts", "@scom/scom-swap/global/utils/common.ts", "@scom/scom-swap/global/utils/approvalModel.ts"], function (require, exports, helper_1, error_1, common_2, approvalModel_1) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.ERC20ApprovalModel = exports.ApprovalStatus = exports.getERC20Amount = exports.getERC20Allowance = exports.approveERC20Max = exports.registerSendTxEvents = exports.isTransactionConfirmed = exports.parseContractError = exports.isWalletAddress = exports.downloadJsonFile = exports.formatPercentNumber = exports.renderBalanceTooltip = exports.compareDate = exports.getWeekDays = exports.uniqWith = exports.formatNumberValue = exports.getParamsFromUrl = exports.numberToBytes32 = exports.toWeiInv = exports.isValidNumber = exports.isInvalidInput = exports.limitInputNumber = exports.limitDecimals = exports.formatUTCDate = exports.formatDate = exports.DefaultDateFormat = exports.DefaultDateTimeFormat = exports.formatNumberWithSeparators = exports.formatNumber = exports.getAPI = void 0;
    Object.defineProperty(exports, "getAPI", { enumerable: true, get: function () { return helper_1.getAPI; } });
    Object.defineProperty(exports, "formatNumber", { enumerable: true, get: function () { return helper_1.formatNumber; } });
    Object.defineProperty(exports, "formatNumberWithSeparators", { enumerable: true, get: function () { return helper_1.formatNumberWithSeparators; } });
    Object.defineProperty(exports, "DefaultDateTimeFormat", { enumerable: true, get: function () { return helper_1.DefaultDateTimeFormat; } });
    Object.defineProperty(exports, "DefaultDateFormat", { enumerable: true, get: function () { return helper_1.DefaultDateFormat; } });
    Object.defineProperty(exports, "formatDate", { enumerable: true, get: function () { return helper_1.formatDate; } });
    Object.defineProperty(exports, "formatUTCDate", { enumerable: true, get: function () { return helper_1.formatUTCDate; } });
    Object.defineProperty(exports, "limitDecimals", { enumerable: true, get: function () { return helper_1.limitDecimals; } });
    Object.defineProperty(exports, "limitInputNumber", { enumerable: true, get: function () { return helper_1.limitInputNumber; } });
    Object.defineProperty(exports, "isInvalidInput", { enumerable: true, get: function () { return helper_1.isInvalidInput; } });
    Object.defineProperty(exports, "isValidNumber", { enumerable: true, get: function () { return helper_1.isValidNumber; } });
    Object.defineProperty(exports, "toWeiInv", { enumerable: true, get: function () { return helper_1.toWeiInv; } });
    Object.defineProperty(exports, "numberToBytes32", { enumerable: true, get: function () { return helper_1.numberToBytes32; } });
    Object.defineProperty(exports, "getParamsFromUrl", { enumerable: true, get: function () { return helper_1.getParamsFromUrl; } });
    Object.defineProperty(exports, "formatNumberValue", { enumerable: true, get: function () { return helper_1.formatNumberValue; } });
    Object.defineProperty(exports, "uniqWith", { enumerable: true, get: function () { return helper_1.uniqWith; } });
    Object.defineProperty(exports, "getWeekDays", { enumerable: true, get: function () { return helper_1.getWeekDays; } });
    Object.defineProperty(exports, "compareDate", { enumerable: true, get: function () { return helper_1.compareDate; } });
    Object.defineProperty(exports, "renderBalanceTooltip", { enumerable: true, get: function () { return helper_1.renderBalanceTooltip; } });
    Object.defineProperty(exports, "formatPercentNumber", { enumerable: true, get: function () { return helper_1.formatPercentNumber; } });
    Object.defineProperty(exports, "downloadJsonFile", { enumerable: true, get: function () { return helper_1.downloadJsonFile; } });
    Object.defineProperty(exports, "isWalletAddress", { enumerable: true, get: function () { return helper_1.isWalletAddress; } });
    Object.defineProperty(exports, "parseContractError", { enumerable: true, get: function () { return error_1.parseContractError; } });
    Object.defineProperty(exports, "isTransactionConfirmed", { enumerable: true, get: function () { return common_2.isTransactionConfirmed; } });
    Object.defineProperty(exports, "registerSendTxEvents", { enumerable: true, get: function () { return common_2.registerSendTxEvents; } });
    Object.defineProperty(exports, "approveERC20Max", { enumerable: true, get: function () { return common_2.approveERC20Max; } });
    Object.defineProperty(exports, "getERC20Allowance", { enumerable: true, get: function () { return common_2.getERC20Allowance; } });
    Object.defineProperty(exports, "getERC20Amount", { enumerable: true, get: function () { return common_2.getERC20Amount; } });
    Object.defineProperty(exports, "ApprovalStatus", { enumerable: true, get: function () { return approvalModel_1.ApprovalStatus; } });
    Object.defineProperty(exports, "ERC20ApprovalModel", { enumerable: true, get: function () { return approvalModel_1.ERC20ApprovalModel; } });
});
define("@scom/scom-swap/global/index.ts", ["require", "exports", "@scom/scom-swap/global/utils/index.ts"], function (require, exports, index_4) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.QueueType = void 0;
    ;
    var QueueType;
    (function (QueueType) {
        QueueType[QueueType["PRIORITY_QUEUE"] = 0] = "PRIORITY_QUEUE";
        QueueType[QueueType["RANGE_QUEUE"] = 1] = "RANGE_QUEUE";
        QueueType[QueueType["GROUP_QUEUE"] = 2] = "GROUP_QUEUE";
        QueueType[QueueType["PEGGED_QUEUE"] = 3] = "PEGGED_QUEUE";
    })(QueueType = exports.QueueType || (exports.QueueType = {}));
    __exportStar(index_4, exports);
});
define("@scom/scom-swap/assets.ts", ["require", "exports", "@ijstech/components"], function (require, exports, components_2) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    const moduleDir = components_2.application.currentModuleDir;
    function fullPath(path) {
        return `${moduleDir}/${path}`;
    }
    ;
    const TokenFolderName = {
        1: "ethereum",
        25: "cronos",
        56: "bsc",
        97: "bsc-testnet",
        137: "polygon",
        338: "cronos-testnet",
        31337: "amino",
        80001: "mumbai",
        43113: "fuji",
        43114: "avalanche",
        250: "fantom",
        4002: "fantom-testnet",
        13370: "aminox-testnet"
    };
    function tokenPath(tokenObj, chainId) {
        var _a;
        const pathPrefix = 'img/tokens';
        if (tokenObj && chainId && chainId >= 0) {
            let folderName = TokenFolderName[chainId];
            let fileName = (!tokenObj.isNative ? (_a = tokenObj === null || tokenObj === void 0 ? void 0 : tokenObj.address) === null || _a === void 0 ? void 0 : _a.toLowerCase() : tokenObj.symbol) + '.png';
            return fullPath(`${pathPrefix}/${folderName}/${fileName}`);
        }
        else {
            return fullPath(`${pathPrefix}/Custom.png`);
        }
    }
    exports.default = {
        logo: fullPath('img/logo.svg'),
        fullPath,
        tokenPath
    };
});
define("@scom/scom-swap/index.css.ts", ["require", "exports", "@ijstech/components", "@scom/scom-swap/assets.ts"], function (require, exports, components_3, assets_1) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    const Theme = components_3.Styles.Theme.ThemeVars;
    const colorVar = {
        primaryButton: 'transparent linear-gradient(90deg, #AC1D78 0%, #E04862 100%) 0% 0% no-repeat padding-box',
        primaryGradient: 'linear-gradient(255deg,#f15e61,#b52082)',
        darkBg: '#181E3E 0% 0% no-repeat padding-box',
        primaryDisabled: 'transparent linear-gradient(270deg,#351f52,#552a42) 0% 0% no-repeat padding-box !important'
    };
    components_3.Styles.fontFace({
        fontFamily: "Montserrat Regular",
        src: `url("${assets_1.default.fullPath('fonts/montserrat/Montserrat-Regular.ttf')}") format("truetype")`,
        fontWeight: 'nomal',
        fontStyle: 'normal'
    });
    components_3.Styles.fontFace({
        fontFamily: "Montserrat Bold",
        src: `url("${assets_1.default.fullPath('fonts/montserrat/Montserrat-Bold.ttf')}") format("truetype")`,
        fontWeight: 'bold',
        fontStyle: 'normal'
    });
    components_3.Styles.fontFace({
        fontFamily: "Montserrat Light",
        src: `url("${assets_1.default.fullPath('fonts/montserrat/Montserrat-Light.ttf')}") format("truetype")`,
        fontStyle: 'normal'
    });
    components_3.Styles.fontFace({
        fontFamily: "Montserrat Medium",
        src: `url("${assets_1.default.fullPath('fonts/montserrat/Montserrat-Medium.ttf')}") format("truetype")`,
        fontStyle: 'normal'
    });
    components_3.Styles.fontFace({
        fontFamily: "Montserrat SemiBold",
        src: `url("${assets_1.default.fullPath('fonts/montserrat/Montserrat-SemiBold.ttf')}") format("truetype")`,
        fontStyle: 'normal'
    });
    components_3.Styles.fontFace({
        fontFamily: "Raleway Regular",
        src: `url("${assets_1.default.fullPath('fonts/raleway/Raleway-Regular.ttf')}") format("truetype")`,
        fontWeight: 'nomal',
        fontStyle: 'normal'
    });
    components_3.Styles.fontFace({
        fontFamily: "Raleway Bold",
        src: `url("${assets_1.default.fullPath('fonts/raleway/Raleway-Bold.ttf')}") format("truetype")`,
        fontWeight: 'bold',
        fontStyle: 'normal'
    });
    components_3.Styles.fontFace({
        fontFamily: "Raleway Light",
        src: `url("${assets_1.default.fullPath('fonts/raleway/Raleway-Light.ttf')}") format("truetype")`,
        fontStyle: 'normal'
    });
    components_3.Styles.fontFace({
        fontFamily: "Raleway Medium",
        src: `url("${assets_1.default.fullPath('fonts/raleway/Raleway-Medium.ttf')}") format("truetype")`,
        fontStyle: 'normal'
    });
    components_3.Styles.fontFace({
        fontFamily: "Raleway SemiBold",
        src: `url("${assets_1.default.fullPath('fonts/raleway/Raleway-SemiBold.ttf')}") format("truetype")`,
        fontStyle: 'normal'
    });
    components_3.Styles.cssRule('.pageblock-swap', {
        $nest: {
            // 'i-label': {
            //   color: Theme.text.primary
            // },
            '.btn-register': {
                padding: '0.75rem',
                display: 'flex',
                alignItems: 'center',
                opacity: 1,
                color: Theme.colors.primary.contrastText,
                $nest: {
                    'i-icon': {
                        marginInline: '0.25rem',
                        display: 'flex',
                        alignItems: 'center',
                    }
                }
            },
            'i-icon': {
                display: 'inline-block'
            },
            '.register-panel': {
                padding: '10px',
                border: '2px solid #F15E61',
                borderRadius: '12px'
            },
            '::-webkit-scrollbar': {
                width: '3px',
            },
            '::-webkit-scrollbar-thumb': {
                background: Theme.colors.primary.main,
                borderRadius: '5px',
            },
            '*': {
                boxSizing: 'border-box',
                // margin: 0,
                // padding: 0
            },
            '.flex-1': {
                flex: '1 1 0%!important'
            },
            '.my-2': {
                marginTop: '0.5rem!important',
                marginBottom: '0.5rem!important',
            },
            '.ml-auto': {
                marginLeft: 'auto'
            },
            '#swapContainer i-button': {
                fontWeight: 600,
                verticalAlign: 'middle',
                lineHeight: 1.5,
            },
            '#swapContainer i-button.disabled': {
                opacity: 0.4,
            },
            '#swapContainer i-button:not(.disabled):hover': {
                transition: 'all .2s ease-out',
                background: 'linear-gradient(255deg,#f15e61,#b52082)',
                color: Theme.colors.primary.contrastText
            },
            '#swapContainer i-button:focus': {
                outline: 0,
                boxShadow: '0 0 0 0.2rem rgb(0 123 255 / 25%)'
            },
            '#swapContainer': {
                width: 720,
                maxWidth: '100%',
                minHeight: 340,
                padding: '1rem',
                marginInline: 'auto'
            },
            '.swap-flex--col': {
                flexDirection: 'column',
                $nest: {
                    '& > i-vstack': {
                        width: '100% !important'
                    },
                    '.custom-ic--swap': {
                        bottom: '0 !important',
                        transform: 'none !important'
                    }
                }
            },
            '.visibility-hidden': {
                visibility: 'hidden'
            },
            '.icon-list': {
                display: 'flex',
                flexWrap: 'wrap',
                alignItems: 'center',
                maxWidth: 'calc(100% - 4rem)',
            },
            '.icon-item': {
                paddingBottom: 0,
                paddingTop: '0.25rem',
                marginRight: '0.25rem',
                border: '2px solid transparent',
                borderRadius: '50%',
                padding: '0.25rem',
                $nest: {
                    '> img': {
                        width: 30,
                        height: 30
                    }
                }
            },
            '.content-swap': {
                marginTop: '0.5rem',
                marginBottom: '1rem',
                borderRadius: '1rem',
                $nest: {
                    'i-label.custom-label *': {
                        fontSize: '1.125rem',
                        // color: Theme.text.primary,
                    }
                }
            },
            // '.input--token-container': {
            //   padding: '0.5rem 1rem',
            //   marginLeft: '-15px',
            //   marginRight: '-15px',
            // },
            'i-label.text--grey *': {
                color: Theme.text.primary,
                opacity: 0.55, // 'hsla(0,0%,100%,0.55)'
            },
            '.btn-max': {
                position: 'relative',
                borderRadius: '0.5rem',
                fontSize: '1rem',
                padding: '0 0.5rem',
                marginLeft: '0.5rem',
                bottom: '1.5px',
                background: 'transparent linear-gradient(255deg,#e75b66,#b52082) 0% 0% no-repeat padding-box',
                color: Theme.colors.primary.contrastText
            },
            '.custom--slider': {
                width: '100%',
                margin: '0px 6px 22px',
                display: 'flex',
                alignItems: 'center',
                $nest: {
                    'i-range, i-range > .slider': {
                        width: '100% !important'
                    },
                    'input[type="range"]': {
                        background: Theme.background.main,
                        backgroundImage: `linear-gradient(#f15e61, #f15e61)`,
                        backgroundSize: '0% 100%',
                    },
                    'input[type="range"]::-webkit-slider-thumb': {
                        backgroundColor: '#F15E61',
                        border: '2px solid #e83e8c'
                    },
                    'input[type="range"]:focus::-webkit-slider-thumb': {
                        outline: 0,
                    },
                    'input[type="range"]::-webkit-slider-runnable-track': {
                        height: '4px'
                    }
                }
            },
            '.bg-box': {
                margin: '0.5rem 0',
                border: '2px solid transparent',
                borderRadius: '1rem',
                $nest: {
                    '&.bg-box--active': {
                        borderColor: '#E53780'
                    }
                }
            },
            '#swapContainer .input--token-box': {
                padding: '0.5rem 0.25rem',
                $nest: {
                    '#btnToken': {
                        height: 'auto !important'
                    },
                    'i-button.custom-btn': {
                        // background: '#ffffff30',
                        padding: '0.5rem',
                        borderRadius: '8px',
                        fontSize: '1rem',
                        fontWeight: 700,
                        lineHeight: 1.5,
                        alignSelf: 'center',
                        textAlign: 'center',
                        opacity: 1,
                        color: Theme.input.fontColor,
                        $nest: {
                            '&:not(.disabled):hover': {
                                color: Theme.input.fontColor,
                                // background: '#ffffff35'
                            },
                            '&> span': {
                                verticalAlign: 'middle',
                            },
                            '&> i-icon': {
                                maxWidth: 10,
                                height: '16px !important',
                                opacity: 0.5,
                                marginRight: 'unset',
                                fill: Theme.input.fontColor,
                                $nest: {
                                    'svg': {
                                        fill: `${Theme.input.fontColor} !important`
                                    }
                                }
                            },
                            '&> :not(:last-child)': {
                                marginRight: '0.5rem'
                            }
                        }
                    },
                    '.text-value': {
                        display: 'block',
                        $nest: {
                            '> *': {
                                fontSize: '1.25rem',
                                paddingRight: '0.25rem'
                            }
                        }
                    },
                    '.token-input': {
                        width: '100%'
                    },
                    '.token-input > input': {
                        width: '100%',
                        height: 'auto !important',
                        padding: '.375rem .75rem',
                        paddingRight: '0.25rem',
                        paddingLeft: 0,
                        borderRadius: '0.25rem',
                        border: 'none',
                        background: 'transparent',
                        color: Theme.input.fontColor,
                        fontSize: '1.125rem',
                        textAlign: 'right'
                    }
                }
            },
            '.toggle-reverse': {
                margin: '1rem 0 0.5rem',
                fontSize: '20px',
                textAlign: 'center',
                $nest: {
                    '> .icon-swap': {
                        display: 'inline-flex',
                        padding: '0.25rem',
                    },
                    '.custom-ic--swap': {
                        bottom: -60,
                        transform: 'rotate(90deg)',
                        padding: '0.45rem !important'
                    }
                }
            },
            '.rounded-icon': {
                display: 'inline-flex',
                padding: '3px',
                background: Theme.input.background,
                border: '2px solid transparent',
                borderRadius: '50%',
                cursor: 'pointer'
            },
            '.total-routes': {
                padding: '0.25rem 1rem 0.5rem'
            },
            '.swap-btn-container': {
                marginTop: 10,
                $nest: {
                    '.btn-swap': {
                        position: 'relative',
                        width: '100%',
                        borderRadius: '0.65rem',
                        fontSize: '1.125rem',
                        padding: '0.5rem 0.75rem',
                        opacity: 1,
                        color: Theme.colors.primary.contrastText
                    }
                }
            },
            '#payCol, #receiveCol': {
                maxWidth: 'calc(100% - 9rem)',
            },
            '#tokenModal': {
                $nest: {
                    '.modal': {
                        background: Theme.background.modal,
                        width: 492,
                        padding: '0.75rem 1rem',
                        borderRadius: '1rem',
                        // color: Theme.text.primary
                    },
                    '.i-modal_header': {
                        marginBottom: '1.5rem',
                        paddingBottom: '0.5rem',
                        borderBottom: `2px soid ${Theme.background.main}`,
                        color: Theme.colors.primary.main,
                        fontSize: '1.25rem',
                        fontWeight: 700,
                    },
                    '.i-modal_header > i-icon': {
                        fill: `${Theme.colors.primary.main} !important`
                    },
                    '.search': {
                        position: 'relative',
                        marginBottom: '1.5rem',
                        $nest: {
                            'i-icon': {
                                position: 'absolute',
                                top: 'calc(50% - 8px)',
                                left: '1rem',
                                transform: 'rotate(90deg)',
                                opacity: 0.7
                            },
                            'i-input': {
                                width: '100%'
                            },
                            'i-input > input': {
                                width: '100%',
                                height: 'auto !important',
                                padding: '1rem 1.5rem 1rem 2.25rem',
                                borderRadius: '0.5rem',
                                border: '2px solid #2a3675',
                                background: 'transparent',
                                color: 'inherit',
                                fontSize: 'inherit',
                            }
                        }
                    },
                    '.common-token': {
                        $nest: {
                            '.common-list': {
                                margin: '0.5rem -0.5rem 0'
                            },
                            '.grid-item': {
                                padding: '0.35rem 0.5rem',
                                borderRadius: '1rem',
                                border: '2px solid transparent',
                                $nest: {
                                    '&:hover': {
                                        borderColor: Theme.divider,
                                        transform: 'none'
                                    },
                                    'i-image': {
                                        marginRight: '0.5rem'
                                    }
                                }
                            },
                        }
                    },
                    '.token-list': {
                        margin: '0.5rem -0.5rem',
                        maxHeight: '45vh',
                        overflowY: 'auto',
                        $nest: {
                            '.token-info': {
                                display: 'flex',
                                flexDirection: 'column',
                                fontSize: '1rem',
                                marginRight: '0.5rem',
                            },
                            '.token-item': {
                                padding: '0.5rem',
                                overflow: 'unset',
                                animation: 'none',
                                $nest: {
                                    '&:hover': {
                                        background: 'linear-gradient(254.8deg,rgba(231,91,102,.1) -8.08%,rgba(181,32,130,.1) 84.35%) !important',
                                        transform: 'none !important'
                                    },
                                    'i-image': {
                                        marginRight: '0.5rem'
                                    },
                                    '&:not(:first-child)': {
                                        marginTop: 0
                                    }
                                }
                            },
                            '.token-name i-label > *': {
                                fontSize: '0.75rem',
                                // color: 'rgba(255,255,255,0.55)'
                                color: Theme.text.primary,
                                opacity: 0.55
                            }
                        }
                    },
                }
            },
            '.list-routing': {
                maxHeight: '27.5rem',
                overflowY: 'auto'
            },
            '.routing-item': {
                position: 'relative',
                // color: "#fff",
                background: Theme.background.modal,
                border: '2px solid #2a3675',
                padding: '1.25rem 1rem 1rem',
                borderRadius: '0.75rem',
                margin: '1rem'
            },
            '#listRouting': {
                maxHeight: '27.5rem',
                overflowY: 'auto',
            },
            '#listRouting.active': {
                $nest: {
                    '.pnl-routing': {
                        marginRight: 'calc(1rem - 3px)',
                    }
                }
            },
            '.routing-selected': {
                borderColor: Theme.divider
            },
            '.best-price': {
                color: Theme.colors.primary.contrastText,
                position: 'absolute',
                top: '-10px',
                left: '30px',
                background: 'linear-gradient(255deg,#f15e61,#b52082)',
                borderRadius: ' 0.75rem',
                padding: '0.15rem 1rem',
                zIndex: 1,
                $nest: {
                    '&>*': {
                        fontSize: 'inherit'
                    }
                }
            },
            '.toggle-routes': {
                display: 'flex',
                alignItems: 'center',
                cursor: 'pointer',
                $nest: {
                    'i-label': {
                        fontSize: '14px',
                        // color: Theme.text.primary,
                        marginRight: '8px'
                    },
                    'i-icon': {
                        display: 'inline-block',
                    }
                }
            },
            '.toggle-routes.hidden': {
                display: 'none',
            },
            '.pnl-routing': {
                position: 'relative',
                // color: Theme.text.primary,
                background: Theme.background.modal,
                border: '2px solid #2a3675',
                padding: '1.25rem 1rem 1rem',
                borderRadius: '0.75rem',
                margin: '1rem',
                lineHeight: 1.5,
                $nest: {
                    '.routing-name': {
                        marginRight: '0.25rem',
                        fontSize: '0.875rem',
                    },
                    '.routing-caption > *': {
                        marginRight: '0.25rem',
                        color: '#ffffff8c',
                        fontSize: '0.875rem',
                        whiteSpace: 'nowrap',
                    },
                    '.route-icon': {
                        marginRight: '0.25rem',
                        display: 'inline-block'
                    },
                    '&.routing-disabled': {
                        opacity: 0.8,
                    },
                }
            },
            '.pnl-routing.routing-selected': {
                borderColor: Theme.divider
            },
            '.balanceValue': {
                textAlign: 'right',
                display: 'block'
            },
            '.price-percent *': {
                color: Theme.colors.secondary.main,
                whiteSpace: 'nowrap',
                textAlign: 'right'
            },
            '.w-100': {
                width: '100%',
            },
            '.text-pink': {
                color: Theme.colors.primary.main,
                $nest: {
                    '*': {
                        color: Theme.colors.primary.main,
                    },
                },
            },
            '.hints': {
                display: 'flex',
                alignItems: 'start',
                marginTop: '-0.5rem',
                $nest: {
                    '*': {
                        fontSize: '0.8rem',
                        opacity: 0.9,
                    },
                    'i-label *': {
                        color: Theme.colors.secondary.main,
                        marginLeft: '0.25rem',
                    },
                },
            },
            '.chain-icon': {
                margin: '0.25rem 0.5rem 0 0',
                borderRadius: '50%',
                border: '2px solid transparent',
                padding: '0.25rem',
                cursor: 'pointer',
                filter: 'grayscale(1)',
                $nest: {
                    '&.icon-disabled': {
                        cursor: 'default',
                    },
                    '&.icon-selected': {
                        borderColor: Theme.divider,
                        cursor: 'default',
                        filter: 'inherit',
                    },
                    'img': {
                        width: '32px',
                        height: '32px',
                    },
                },
            },
            '.cursor-default': {
                cursor: 'default !important',
            },
            '.hidden': {
                display: 'none !important'
            },
            '.custom-modal': {
                $nest: {
                    '.modal': {
                        background: Theme.background.modal,
                        width: 490,
                        maxWidth: '100%',
                        padding: '0.75rem 1rem',
                        borderRadius: '1rem',
                        color: Theme.text.primary
                    },
                    '.i-modal_header': {
                        marginBottom: '1.5rem',
                        paddingBottom: '0.5rem',
                        borderBottom: `2px soid ${Theme.background.main}`,
                        color: Theme.colors.primary.main,
                        fontSize: '1.25rem',
                        fontWeight: 700,
                        $nest: {
                            '&> span': {
                                color: Theme.colors.primary.main,
                            },
                            '&> i-icon': {
                                fill: `${Theme.colors.primary.main} !important`
                            },
                            '& ~ i-icon': {
                                display: 'inline-block',
                                margin: '0.75rem 0',
                                background: Theme.input.background,
                                border: '2px solid transparent',
                                borderRadius: '50%',
                                padding: '0.25rem'
                            }
                        }
                    },
                }
            },
            '#registerPairModal': {
                $nest: {
                    '.modal': {
                        background: Theme.background.modal,
                        width: 420,
                        maxWidth: '100%',
                        padding: '0.75rem 1rem 1.25rem 1rem',
                        borderRadius: '1rem',
                        color: Theme.text.primary
                    },
                    '.i-modal_header': {
                        marginBottom: '1.5rem',
                        paddingBottom: '0.5rem',
                        borderBottom: `2px soid ${Theme.background.main}`,
                        color: Theme.colors.primary.main,
                        fontSize: '1.25rem',
                        fontWeight: 700,
                        $nest: {
                            '&> span': {
                                color: Theme.colors.primary.main,
                            },
                            '.i-modal-close': {
                                fill: `${Theme.colors.primary.main} !important`,
                            }
                        }
                    },
                }
            },
            '#swapModal': {
                $nest: {
                    '.icon-swap': {
                        margin: 0
                    },
                    'i-image:not(.rounded-icon)': {
                        display: 'inline-block',
                        marginRight: '0.5rem'
                    },
                    '#tokenReceiveValue': {
                        margin: '0 5px'
                    },
                    '#payOrReceiveValue': {
                        marginInline: '0.25rem',
                    },
                    '.text-primary *': {
                        color: Theme.colors.primary.main,
                    },
                    '.price-info': {
                        padding: '1rem'
                    },
                    '.arrow-down': {
                        display: 'inline-block',
                        margin: '0.75rem 0',
                        background: Theme.input.background,
                        border: '2px solid transparent',
                        borderRadius: '50%',
                        padding: '0.25rem'
                    },
                    '.arrow-down--chain': {
                        margin: '0.75rem 6rem !important',
                    },
                    '.token-value': {
                        marginLeft: 'auto',
                    },
                    '.token-value > *, #swapModal .token-name > *': {
                        fontSize: '1.1rem'
                    },
                    '.row-chain': {
                        display: 'flex',
                        alignItems: 'center',
                    },
                    'i-icon.custom-icon--fill': {
                        fill: Theme.input.fontColor,
                        $nest: {
                            'svg': {
                                fill: `${Theme.input.fontColor} !important`
                            }
                        }
                    }
                }
            },
            '#openswapResult': {
                $nest: {
                    '.modal': {
                        background: Theme.background.modal,
                        width: '440px',
                        maxWidth: '100%',
                        padding: '0.5rem',
                        borderRadius: '12px'
                    },
                    'i-label:nth-child(2)': {
                        marginBottom: '0.25rem'
                    },
                    '.waiting-txt > *': {
                        fontSize: '22px'
                    },
                    'i-loading': {
                        marginTop: '3rem',
                        marginBottom: '0.5rem'
                    },
                    'i-loading .i-loading-spinner_icon': {
                        width: '50px',
                        height: '48px'
                    }
                }
            },
            '#modalFees': {
                $nest: {
                    '.i-modal_header': {
                        marginBottom: '0.5rem !important',
                    },
                    '.i-modal_content': {
                        $nest: {
                            'i-label *': {
                                fontSize: '0.875rem',
                            },
                            'i-button': {
                                width: '150px',
                                paddingBlock: '0.25rem',
                                textAlign: 'center',
                            },
                        },
                    },
                },
            },
            '.action-setting': {
                margin: 'auto 0 0 auto',
                $nest: {
                    '> i-icon': {
                        marginLeft: '0.5rem'
                    },
                    '> i-label': {
                        opacity: 0.75
                    }
                }
            },
            '.btn-os': {
                background: colorVar.primaryButton,
                height: 'auto !important',
                color: Theme.text.primary,
                transition: 'background .3s ease',
                fontSize: '1rem',
                fontWeight: 'bold',
                fontFamily: 'Raleway Bold',
                $nest: {
                    'i-icon.loading-icon': {
                        marginInline: '0.25rem',
                        width: '16px !important',
                        height: '16px !important',
                    },
                    'i-icon.is-spin': {
                        fill: Theme.colors.primary.contrastText,
                        $nest: {
                            'svg': {
                                fill: Theme.colors.primary.contrastText
                            }
                        }
                    }
                },
            },
            '.btn-os:not(.disabled):not(.is-spinning):hover, .btn-os:not(.disabled):not(.is-spinning):focus': {
                background: colorVar.primaryGradient,
                backgroundColor: 'transparent',
                boxShadow: 'none',
                opacity: .9
            },
            '.btn-os:not(.disabled):not(.is-spinning):focus': {
                boxShadow: '0 0 0 0.2rem rgb(0 123 255 / 25%)'
            },
            '.btn-os.disabled, .btn-os.is-spinning': {
                background: colorVar.primaryDisabled,
                opacity: 1
            },
            '.dark-bg, .dark-modal > div > div': {
                background: colorVar.darkBg,
                borderRadius: 5
            },
            '.btn-transparent, .btn-transparent:not(.disabled):focus, .btn-transparent:not(.disabled):hover': {
                background: 'transparent',
                boxShadow: 'none',
                backgroundColor: 'transparent'
            }
        }
    });
});
define("@scom/scom-swap/store/utils.ts", ["require", "exports", "@ijstech/components", "@ijstech/eth-wallet", "@scom/scom-token-list", "@scom/scom-network-list"], function (require, exports, components_4, eth_wallet_4, scom_token_list_1, scom_network_list_1) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.getChainNativeToken = exports.getChainId = exports.truncateAddress = exports.hasMetaMask = exports.switchNetwork = exports.isWalletConnected = exports.getWalletProvider = exports.viewOnExplorerByAddress = exports.viewOnExplorerByTxHash = exports.getProviderByKey = exports.getProviderList = exports.setProviderList = exports.getDexInfoList = exports.setDexInfoList = exports.hasUserToken = exports.setUserTokens = exports.getNetworkExplorerName = exports.getMatchNetworks = exports.addUserTokens = exports.getUserTokens = exports.getNetworkInfo = exports.getSupportedNetworks = exports.getInfuraId = exports.setTransactionDeadline = exports.getTransactionDeadline = exports.setSlippageTolerance = exports.getSlippageTolerance = exports.toggleExpertMode = exports.isExpertMode = exports.getCurrentChainId = exports.setCurrentChainId = exports.getEmbedderCommissionFee = exports.setAPIGatewayUrls = exports.getIPFSGatewayUrl = exports.setIPFSGatewayUrl = exports.getProxyAddress = exports.setProxyAddresses = exports.setDataFromConfig = exports.state = exports.WalletPlugin = void 0;
    var WalletPlugin;
    (function (WalletPlugin) {
        WalletPlugin["MetaMask"] = "metamask";
        WalletPlugin["WalletConnect"] = "walletconnect";
    })(WalletPlugin = exports.WalletPlugin || (exports.WalletPlugin = {}));
    const TOKENS = "oswap_user_tokens_";
    exports.state = {
        currentChainId: 0,
        isExpertMode: false,
        slippageTolerance: 0.5,
        transactionDeadline: 30,
        userTokens: {},
        infuraId: "",
        networkMap: {},
        dexInfoList: [],
        providerList: [],
        proxyAddresses: {},
        ipfsGatewayUrl: "",
        apiGatewayUrls: {},
        embedderCommissionFee: "0",
        tokens: []
    };
    const setDataFromConfig = (options) => {
        if (options.infuraId) {
            setInfuraId(options.infuraId);
        }
        if (options.networks) {
            setNetworkList(options.networks, options.infuraId);
        }
        if (options.proxyAddresses) {
            (0, exports.setProxyAddresses)(options.proxyAddresses);
        }
        if (options.ipfsGatewayUrl) {
            (0, exports.setIPFSGatewayUrl)(options.ipfsGatewayUrl);
        }
        if (options.apiGatewayUrls) {
            (0, exports.setAPIGatewayUrls)(options.apiGatewayUrls);
        }
        if (options.embedderCommissionFee) {
            setEmbedderCommissionFee(options.embedderCommissionFee);
        }
    };
    exports.setDataFromConfig = setDataFromConfig;
    const setProxyAddresses = (data) => {
        exports.state.proxyAddresses = data;
    };
    exports.setProxyAddresses = setProxyAddresses;
    const getProxyAddress = (chainId) => {
        const _chainId = chainId || eth_wallet_4.Wallet.getInstance().chainId;
        const proxyAddresses = exports.state.proxyAddresses;
        if (proxyAddresses) {
            return proxyAddresses[_chainId];
        }
        return null;
    };
    exports.getProxyAddress = getProxyAddress;
    const setIPFSGatewayUrl = (url) => {
        exports.state.ipfsGatewayUrl = url;
    };
    exports.setIPFSGatewayUrl = setIPFSGatewayUrl;
    const getIPFSGatewayUrl = () => {
        return exports.state.ipfsGatewayUrl;
    };
    exports.getIPFSGatewayUrl = getIPFSGatewayUrl;
    const setAPIGatewayUrls = (urls) => {
        exports.state.apiGatewayUrls = urls;
    };
    exports.setAPIGatewayUrls = setAPIGatewayUrls;
    const setEmbedderCommissionFee = (fee) => {
        exports.state.embedderCommissionFee = fee;
    };
    const getEmbedderCommissionFee = () => {
        return exports.state.embedderCommissionFee;
    };
    exports.getEmbedderCommissionFee = getEmbedderCommissionFee;
    const setCurrentChainId = (value) => {
        exports.state.currentChainId = value;
    };
    exports.setCurrentChainId = setCurrentChainId;
    const getCurrentChainId = () => {
        return exports.state.currentChainId;
    };
    exports.getCurrentChainId = getCurrentChainId;
    const isExpertMode = () => {
        return exports.state.isExpertMode;
    };
    exports.isExpertMode = isExpertMode;
    function toggleExpertMode() {
        exports.state.isExpertMode = !exports.state.isExpertMode;
    }
    exports.toggleExpertMode = toggleExpertMode;
    const getSlippageTolerance = () => {
        return exports.state.slippageTolerance;
    };
    exports.getSlippageTolerance = getSlippageTolerance;
    const setSlippageTolerance = (value) => {
        exports.state.slippageTolerance = value;
    };
    exports.setSlippageTolerance = setSlippageTolerance;
    const getTransactionDeadline = () => {
        return exports.state.transactionDeadline;
    };
    exports.getTransactionDeadline = getTransactionDeadline;
    const setTransactionDeadline = (value) => {
        exports.state.transactionDeadline = value;
    };
    exports.setTransactionDeadline = setTransactionDeadline;
    const setInfuraId = (infuraId) => {
        exports.state.infuraId = infuraId;
    };
    const getInfuraId = () => {
        return exports.state.infuraId;
    };
    exports.getInfuraId = getInfuraId;
    const setNetworkList = (networkList, infuraId) => {
        const wallet = eth_wallet_4.Wallet.getClientInstance();
        exports.state.networkMap = {};
        const defaultNetworkList = (0, scom_network_list_1.default)();
        const defaultNetworkMap = defaultNetworkList.reduce((acc, cur) => {
            acc[cur.chainId] = cur;
            return acc;
        }, {});
        for (let network of networkList) {
            const networkInfo = defaultNetworkMap[network.chainId];
            if (!networkInfo)
                continue;
            if (infuraId && network.rpcUrls && network.rpcUrls.length > 0) {
                for (let i = 0; i < network.rpcUrls.length; i++) {
                    network.rpcUrls[i] = network.rpcUrls[i].replace(/{InfuraId}/g, infuraId);
                }
            }
            exports.state.networkMap[network.chainId] = Object.assign(Object.assign({}, networkInfo), network);
            wallet.setNetworkInfo(exports.state.networkMap[network.chainId]);
        }
    };
    const getSupportedNetworks = () => {
        return Object.values(exports.state.networkMap);
    };
    exports.getSupportedNetworks = getSupportedNetworks;
    const getNetworkInfo = (chainId) => {
        return exports.state.networkMap[chainId];
    };
    exports.getNetworkInfo = getNetworkInfo;
    const getUserTokens = (chainId) => {
        let tokens = localStorage[TOKENS + chainId];
        if (tokens) {
            tokens = JSON.parse(tokens);
        }
        else {
            tokens = [];
        }
        const userTokens = exports.state.userTokens[chainId];
        if (userTokens && userTokens.length) {
            tokens = tokens.concat(userTokens);
        }
        return tokens.length ? tokens : null;
    };
    exports.getUserTokens = getUserTokens;
    const addUserTokens = (token) => {
        const chainId = getChainId();
        let tokens = localStorage[TOKENS + chainId];
        let i = -1;
        if (tokens) {
            tokens = JSON.parse(tokens);
            i = tokens.findIndex((item) => item.address == token.address);
        }
        else {
            tokens = [];
        }
        if (i == -1) {
            tokens.push(token);
        }
        localStorage[TOKENS + chainId] = JSON.stringify(tokens);
    };
    exports.addUserTokens = addUserTokens;
    function matchFilter(list, filter) {
        let filters = Object.keys(filter);
        return list.filter(item => filters.every(f => {
            switch (typeof filter[f]) {
                case 'boolean':
                    if (filter[f] === false) {
                        return item[f] === undefined || item[f] === null;
                    }
                // also case for filter[f] === true 
                case 'string':
                case 'number':
                    return filter[f] === item[f];
                case 'object': // have not implemented yet
                default:
                    console.log(`matchFilter do not support ${typeof filter[f]} yet!`);
                    return false;
            }
        }));
    }
    const getMatchNetworks = (conditions) => {
        let networkFullList = Object.values(exports.state.networkMap);
        let out = matchFilter(networkFullList, conditions);
        return out;
    };
    exports.getMatchNetworks = getMatchNetworks;
    const getNetworkExplorerName = (chainId) => {
        if ((0, exports.getNetworkInfo)(chainId)) {
            return (0, exports.getNetworkInfo)(chainId).explorerName;
        }
        return 'Unknown';
    };
    exports.getNetworkExplorerName = getNetworkExplorerName;
    const setUserTokens = (token, chainId) => {
        if (!exports.state.userTokens[chainId]) {
            exports.state.userTokens[chainId] = [token];
        }
        else {
            exports.state.userTokens[chainId].push(token);
        }
    };
    exports.setUserTokens = setUserTokens;
    const hasUserToken = (address, chainId) => {
        var _a;
        return (_a = exports.state.userTokens[chainId]) === null || _a === void 0 ? void 0 : _a.some((token) => { var _a; return ((_a = token.address) === null || _a === void 0 ? void 0 : _a.toLocaleLowerCase()) === (address === null || address === void 0 ? void 0 : address.toLocaleLowerCase()); });
    };
    exports.hasUserToken = hasUserToken;
    const setDexInfoList = (value) => {
        exports.state.dexInfoList = value;
    };
    exports.setDexInfoList = setDexInfoList;
    const getDexInfoList = () => {
        return exports.state.dexInfoList || [];
    };
    exports.getDexInfoList = getDexInfoList;
    const setProviderList = (value) => {
        exports.state.providerList = value;
    };
    exports.setProviderList = setProviderList;
    const getProviderList = () => {
        return exports.state.providerList || [];
    };
    exports.getProviderList = getProviderList;
    const getProviderByKey = (providerKey) => {
        const providers = exports.state.providerList || [];
        return providers.find(item => item.key === providerKey) || null;
    };
    exports.getProviderByKey = getProviderByKey;
    const viewOnExplorerByTxHash = (chainId, txHash) => {
        let network = (0, exports.getNetworkInfo)(chainId);
        if (network && network.explorerTxUrl) {
            let url = `${network.explorerTxUrl}${txHash}`;
            window.open(url);
        }
    };
    exports.viewOnExplorerByTxHash = viewOnExplorerByTxHash;
    const viewOnExplorerByAddress = (chainId, address) => {
        let network = (0, exports.getNetworkInfo)(chainId);
        if (network && network.explorerAddressUrl) {
            let url = `${network.explorerAddressUrl}${address}`;
            window.open(url);
        }
    };
    exports.viewOnExplorerByAddress = viewOnExplorerByAddress;
    // wallet
    function getWalletProvider() {
        return localStorage.getItem('walletProvider') || '';
    }
    exports.getWalletProvider = getWalletProvider;
    function isWalletConnected() {
        const wallet = eth_wallet_4.Wallet.getClientInstance();
        return wallet.isConnected;
    }
    exports.isWalletConnected = isWalletConnected;
    async function switchNetwork(chainId) {
        var _a;
        const wallet = eth_wallet_4.Wallet.getClientInstance();
        if (!isWalletConnected()) {
            (0, exports.setCurrentChainId)(chainId);
            wallet.chainId = chainId;
            components_4.application.EventBus.dispatch("chainChanged" /* EventId.chainChanged */, chainId);
            return;
        }
        if (((_a = wallet === null || wallet === void 0 ? void 0 : wallet.clientSideProvider) === null || _a === void 0 ? void 0 : _a.name) === WalletPlugin.MetaMask) {
            await wallet.switchNetwork(chainId);
        }
    }
    exports.switchNetwork = switchNetwork;
    const hasMetaMask = function () {
        var _a;
        const wallet = eth_wallet_4.Wallet.getClientInstance();
        return ((_a = wallet === null || wallet === void 0 ? void 0 : wallet.clientSideProvider) === null || _a === void 0 ? void 0 : _a.name) === WalletPlugin.MetaMask;
    };
    exports.hasMetaMask = hasMetaMask;
    const truncateAddress = (address) => {
        if (address === undefined || address === null)
            return '';
        return address.substr(0, 6) + '...' + address.substr(-4);
    };
    exports.truncateAddress = truncateAddress;
    function getChainId() {
        return eth_wallet_4.Wallet.getInstance().chainId;
    }
    exports.getChainId = getChainId;
    const getChainNativeToken = (chainId) => {
        return scom_token_list_1.ChainNativeTokenByChainId[chainId];
    };
    exports.getChainNativeToken = getChainNativeToken;
});
define("@scom/scom-swap/store/index.ts", ["require", "exports", "@scom/scom-swap/store/utils.ts", "@scom/scom-token-list", "@scom/scom-swap/store/utils.ts"], function (require, exports, utils_1, scom_token_list_2, utils_2) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.getSupportedTokens = exports.tokenName = exports.tokenSymbol = exports.getTokenIcon = exports.getTokenDecimals = exports.getWETH = exports.nullAddress = void 0;
    exports.nullAddress = "0x0000000000000000000000000000000000000000";
    const getWETH = (chainId) => {
        let wrappedToken = scom_token_list_2.WETHByChainId[chainId];
        return wrappedToken;
    };
    exports.getWETH = getWETH;
    const getTokenDecimals = (address) => {
        let chainId = (0, utils_1.getChainId)();
        const WETHAddress = (0, exports.getWETH)(chainId).address;
        const ChainNativeToken = (0, utils_1.getChainNativeToken)(chainId);
        const tokenObject = (!address || address.toLowerCase() === WETHAddress.toLowerCase()) ? ChainNativeToken : scom_token_list_2.tokenStore.tokenMap[address.toLowerCase()];
        return tokenObject ? tokenObject.decimals : 18;
    };
    exports.getTokenDecimals = getTokenDecimals;
    const getTokenIcon = (address) => {
        if (!address)
            return '';
        const tokenMap = scom_token_list_2.tokenStore.tokenMap;
        let ChainNativeToken;
        let tokenObject;
        if ((0, utils_1.isWalletConnected)()) {
            ChainNativeToken = (0, utils_1.getChainNativeToken)((0, utils_1.getChainId)());
            tokenObject = address == ChainNativeToken.symbol ? ChainNativeToken : tokenMap[address.toLowerCase()];
        }
        else {
            tokenObject = tokenMap[address.toLowerCase()];
        }
        return scom_token_list_2.assets.tokenPath(tokenObject, (0, utils_1.getChainId)());
    };
    exports.getTokenIcon = getTokenIcon;
    const tokenSymbol = (address) => {
        const tokenMap = scom_token_list_2.tokenStore.tokenMap;
        if (!address || !tokenMap)
            return '';
        let tokenObject = tokenMap[address.toLowerCase()];
        if (!tokenObject)
            tokenObject = tokenMap[address];
        return tokenObject ? tokenObject.symbol : '';
    };
    exports.tokenSymbol = tokenSymbol;
    const tokenName = (address) => {
        const tokenMap = scom_token_list_2.tokenStore.tokenMap;
        if (!address || !tokenMap)
            return '';
        let tokenObject = tokenMap[address.toLowerCase()];
        if (!tokenObject)
            tokenObject = tokenMap[address];
        return (tokenObject === null || tokenObject === void 0 ? void 0 : tokenObject.name) || '';
    };
    exports.tokenName = tokenName;
    __exportStar(utils_2, exports);
    const getSupportedTokens = (tokens, chainId) => {
        return tokens.filter(token => token.chainId === chainId) || [];
    };
    exports.getSupportedTokens = getSupportedTokens;
});
define("@scom/scom-swap/contracts/scom-commission-proxy-contract/contracts/Proxy.json.ts", ["require", "exports"], function (require, exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    ///<amd-module name='@scom/scom-swap/contracts/scom-commission-proxy-contract/contracts/Proxy.json.ts'/> 
    exports.default = {
        "abi": [
            { "anonymous": false, "inputs": [{ "indexed": false, "internalType": "address", "name": "to", "type": "address" }, { "indexed": false, "internalType": "contract IERC20", "name": "token", "type": "address" }, { "indexed": false, "internalType": "uint256", "name": "amount", "type": "uint256" }], "name": "AddCommission", "type": "event" },
            { "anonymous": false, "inputs": [{ "indexed": true, "internalType": "address", "name": "from", "type": "address" }, { "indexed": false, "internalType": "contract IERC20", "name": "token", "type": "address" }, { "indexed": false, "internalType": "uint256", "name": "amount", "type": "uint256" }], "name": "Claim", "type": "event" },
            { "anonymous": false, "inputs": [{ "indexed": true, "internalType": "contract IERC20", "name": "token", "type": "address" }, { "indexed": true, "internalType": "address", "name": "to", "type": "address" }, { "indexed": false, "internalType": "uint256", "name": "amount", "type": "uint256" }], "name": "Skim", "type": "event" },
            { "anonymous": false, "inputs": [{ "indexed": true, "internalType": "address", "name": "target", "type": "address" }, { "indexed": true, "internalType": "contract IERC20", "name": "token", "type": "address" }, { "indexed": false, "internalType": "address", "name": "sender", "type": "address" }, { "indexed": false, "internalType": "uint256", "name": "amount", "type": "uint256" }], "name": "TransferBack", "type": "event" },
            { "anonymous": false, "inputs": [{ "indexed": true, "internalType": "address", "name": "target", "type": "address" }, { "indexed": true, "internalType": "contract IERC20", "name": "token", "type": "address" }, { "indexed": false, "internalType": "address", "name": "sender", "type": "address" }, { "indexed": false, "internalType": "uint256", "name": "amount", "type": "uint256" }, { "indexed": false, "internalType": "uint256", "name": "commissions", "type": "uint256" }], "name": "TransferForward", "type": "event" },
            { "inputs": [{ "internalType": "contract IERC20", "name": "token", "type": "address" }], "name": "claim", "outputs": [], "stateMutability": "nonpayable", "type": "function" },
            { "inputs": [{ "internalType": "contract IERC20[]", "name": "tokens", "type": "address[]" }], "name": "claimMultiple", "outputs": [], "stateMutability": "nonpayable", "type": "function" },
            { "inputs": [], "name": "claimantIdCount", "outputs": [{ "internalType": "uint256", "name": "", "type": "uint256" }], "stateMutability": "view", "type": "function" },
            { "inputs": [{ "internalType": "address", "name": "", "type": "address" }, { "internalType": "contract IERC20", "name": "", "type": "address" }], "name": "claimantIds", "outputs": [{ "internalType": "uint256", "name": "", "type": "uint256" }], "stateMutability": "view", "type": "function" },
            { "inputs": [{ "internalType": "uint256", "name": "", "type": "uint256" }], "name": "claimantsInfo", "outputs": [{ "internalType": "address", "name": "claimant", "type": "address" }, { "internalType": "contract IERC20", "name": "token", "type": "address" }, { "internalType": "uint256", "name": "balance", "type": "uint256" }], "stateMutability": "view", "type": "function" },
            { "inputs": [{ "internalType": "address", "name": "target", "type": "address" }, { "components": [{ "internalType": "address", "name": "to", "type": "address" }, { "internalType": "uint256", "name": "amount", "type": "uint256" }], "internalType": "struct Proxy.Commission[]", "name": "commissions", "type": "tuple[]" }, { "internalType": "bytes", "name": "data", "type": "bytes" }], "name": "ethIn", "outputs": [], "stateMutability": "payable", "type": "function" },
            { "inputs": [{ "internalType": "address", "name": "claimant", "type": "address" }, { "internalType": "contract IERC20", "name": "token", "type": "address" }], "name": "getClaimantBalance", "outputs": [{ "internalType": "uint256", "name": "", "type": "uint256" }], "stateMutability": "view", "type": "function" },
            { "inputs": [{ "internalType": "uint256", "name": "fromId", "type": "uint256" }, { "internalType": "uint256", "name": "count", "type": "uint256" }], "name": "getClaimantsInfo", "outputs": [{ "components": [{ "internalType": "address", "name": "claimant", "type": "address" }, { "internalType": "contract IERC20", "name": "token", "type": "address" }, { "internalType": "uint256", "name": "balance", "type": "uint256" }], "internalType": "struct Proxy.ClaimantInfo[]", "name": "claimantInfoList", "type": "tuple[]" }], "stateMutability": "view", "type": "function" },
            { "inputs": [{ "internalType": "contract IERC20", "name": "", "type": "address" }], "name": "lastBalance", "outputs": [{ "internalType": "uint256", "name": "", "type": "uint256" }], "stateMutability": "view", "type": "function" },
            { "inputs": [{ "internalType": "address", "name": "target", "type": "address" }, { "components": [{ "internalType": "contract IERC20", "name": "token", "type": "address" }, { "internalType": "uint256", "name": "amount", "type": "uint256" }, { "internalType": "bool", "name": "directTransfer", "type": "bool" }, { "components": [{ "internalType": "address", "name": "to", "type": "address" }, { "internalType": "uint256", "name": "amount", "type": "uint256" }], "internalType": "struct Proxy.Commission[]", "name": "commissions", "type": "tuple[]" }], "internalType": "struct Proxy.TokensIn[]", "name": "tokensIn", "type": "tuple[]" }, { "internalType": "address", "name": "to", "type": "address" }, { "internalType": "contract IERC20[]", "name": "tokensOut", "type": "address[]" }, { "internalType": "bytes", "name": "data", "type": "bytes" }], "name": "proxyCall", "outputs": [], "stateMutability": "payable", "type": "function" },
            { "inputs": [{ "internalType": "contract IERC20[]", "name": "tokens", "type": "address[]" }], "name": "skim", "outputs": [], "stateMutability": "nonpayable", "type": "function" },
            { "inputs": [{ "internalType": "address", "name": "target", "type": "address" }, { "components": [{ "internalType": "contract IERC20", "name": "token", "type": "address" }, { "internalType": "uint256", "name": "amount", "type": "uint256" }, { "internalType": "bool", "name": "directTransfer", "type": "bool" }, { "components": [{ "internalType": "address", "name": "to", "type": "address" }, { "internalType": "uint256", "name": "amount", "type": "uint256" }], "internalType": "struct Proxy.Commission[]", "name": "commissions", "type": "tuple[]" }], "internalType": "struct Proxy.TokensIn", "name": "tokensIn", "type": "tuple" }, { "internalType": "bytes", "name": "data", "type": "bytes" }], "name": "tokenIn", "outputs": [], "stateMutability": "nonpayable", "type": "function" },
            { "stateMutability": "payable", "type": "receive" }
        ],
        "bytecode": "608060405234801561001057600080fd5b50612571806100206000396000f3fe6080604052600436106100cb5760003560e01c8063b60c164c11610074578063d3b7d4c31161004e578063d3b7d4c31461027c578063ee42d3a31461029c578063f303ad6e146102c957600080fd5b8063b60c164c146101b1578063c0da918d146101d1578063d2ef8464146101f157600080fd5b806373d8690f116100a557806373d8690f1461014257806383e40a5114610155578063b316d7141461019b57600080fd5b806301417e7b146100d7578063188ff72b146100ec5780631e83409a1461012257600080fd5b366100d257005b600080fd5b6100ea6100e5366004611f7a565b6102e9565b005b3480156100f857600080fd5b5061010c610107366004612027565b610493565b6040516101199190612049565b60405180910390f35b34801561012e57600080fd5b506100ea61013d3660046120bb565b610677565b6100ea610150366004612124565b610683565b34801561016157600080fd5b5061018d6101703660046121df565b600360209081526000928352604080842090915290825290205481565b604051908152602001610119565b3480156101a757600080fd5b5061018d60005481565b3480156101bd57600080fd5b506100ea6101cc366004612218565b610e18565b3480156101dd57600080fd5b506100ea6101ec36600461225a565b611000565b3480156101fd57600080fd5b5061024961020c3660046122d8565b600260208190526000918252604090912080546001820154919092015473ffffffffffffffffffffffffffffffffffffffff928316929091169083565b6040805173ffffffffffffffffffffffffffffffffffffffff948516815293909216602084015290820152606001610119565b34801561028857600080fd5b5061018d6102973660046121df565b611361565b3480156102a857600080fd5b5061018d6102b73660046120bb565b60016020526000908152604090205481565b3480156102d557600080fd5b506100ea6102e4366004612218565b6113aa565b600082815b818110156103bb5736868683818110610309576103096122f1565b9050604002019050806020013584610321919061234f565b935061033f61033360208301836120bb565b600083602001356113f7565b7fe3576de866d95e30a6b102b256dc468ead824ef133838792dc1813c3786414ef61036d60208301836120bb565b6040805173ffffffffffffffffffffffffffffffffffffffff909216825260006020838101919091528401359082015260600160405180910390a150806103b381612362565b9150506102ee565b5060006103c8833461239a565b600080805260016020527fa6eef7e35abe7026729641147f7915573c7e97b47efa546f5f6e3230263bcb498054929350859290919061040890849061234f565b9091555050604080513381526020810183905290810184905260009073ffffffffffffffffffffffffffffffffffffffff8916907f0e25509c2c6fc37a8844100a9a4c5b2b038bd5daaf09d216161eb8574ad4878b9060600160405180910390a3600080855186602001848b5af180600003610488573d6000803e3d6000fd5b503d6000803e3d6000f35b60606000831180156104a757506000548311155b610512576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152600d60248201527f6f7574206f6620626f756e64730000000000000000000000000000000000000060448201526064015b60405180910390fd5b60006001610520848661234f565b61052a919061239a565b90506000548111156105525750600054610544848261239a565b61054f90600161234f565b92505b8267ffffffffffffffff81111561056b5761056b611ea0565b6040519080825280602002602001820160405280156105d457816020015b60408051606081018252600080825260208083018290529282015282527fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff9092019101816105895790505b5091508360005b8481101561066e576000828152600260208181526040928390208351606081018552815473ffffffffffffffffffffffffffffffffffffffff90811682526001830154169281019290925290910154918101919091528451859083908110610645576106456122f1565b60200260200101819052508161065a90612362565b91508061066681612362565b9150506105db565b50505092915050565b6106808161151c565b50565b846000805b82811015610b5b57368989838181106106a3576106a36122f1565b90506020028101906106b591906123ad565b90506000806106c760608401846123eb565b9050905060005b818110156107c057366106e460608601866123eb565b838181106106f4576106f46122f1565b905060400201905080602001358461070c919061234f565b935061073561071e60208301836120bb565b61072b60208801886120bb565b83602001356113f7565b7fe3576de866d95e30a6b102b256dc468ead824ef133838792dc1813c3786414ef61076360208301836120bb565b61077060208801886120bb565b6040805173ffffffffffffffffffffffffffffffffffffffff9384168152929091166020838101919091528401359082015260600160405180910390a150806107b881612362565b9150506106ce565b50600090506107d382602085013561239a565b905081600160006107e760208701876120bb565b73ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000206000828254610830919061234f565b909155506000905061084560208501856120bb565b73ffffffffffffffffffffffffffffffffffffffff160361093d5784156108c8576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601a60248201527f6d6f7265207468616e206f6e6520455448207472616e736665720000000000006044820152606401610509565b82602001353414610935576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601660248201527f45544820616d6f756e74206e6f74206d617463686564000000000000000000006044820152606401610509565b809450610adb565b61094d6060840160408501612461565b15610a0c57600061096a61096460208601866120bb565b8461164a565b90508281146109d5576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601d60248201527f636f6d6d697373696f6e20616d6f756e74206e6f74206d6174636865640000006044820152606401610509565b610a06338f846109e860208901896120bb565b73ffffffffffffffffffffffffffffffffffffffff169291906117a0565b50610adb565b6000610a28610a1e60208601866120bb565b856020013561164a565b905083602001358114610a97576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601260248201527f616d6f756e74206e6f74206d61746368656400000000000000000000000000006044820152606401610509565b610ac78e6000610aaa60208801886120bb565b73ffffffffffffffffffffffffffffffffffffffff16919061187c565b610ad98e83610aaa60208801886120bb565b505b610ae860208401846120bb565b604080513381526020810184905290810184905273ffffffffffffffffffffffffffffffffffffffff918216918f16907f0e25509c2c6fc37a8844100a9a4c5b2b038bd5daaf09d216161eb8574ad4878b9060600160405180910390a35050508080610b5390612362565b915050610688565b50600080845185602001848d5af180600003610b7b573d6000803e3d6000fd5b5083915060005b8281101561048857600080878784818110610b9f57610b9f6122f1565b9050602002016020810190610bb491906120bb565b73ffffffffffffffffffffffffffffffffffffffff1603610c15576000805260016020527fa6eef7e35abe7026729641147f7915573c7e97b47efa546f5f6e3230263bcb4954610c04904761239a565b9050610c108882611a03565b610d87565b60016000888885818110610c2b57610c2b6122f1565b9050602002016020810190610c4091906120bb565b73ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002054878784818110610c8d57610c8d6122f1565b9050602002016020810190610ca291906120bb565b6040517f70a0823100000000000000000000000000000000000000000000000000000000815230600482015273ffffffffffffffffffffffffffffffffffffffff91909116906370a0823190602401602060405180830381865afa158015610d0e573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610d32919061247e565b610d3c919061239a565b9050610d878882898986818110610d5557610d556122f1565b9050602002016020810190610d6a91906120bb565b73ffffffffffffffffffffffffffffffffffffffff169190611b0d565b868683818110610d9957610d996122f1565b9050602002016020810190610dae91906120bb565b6040805173ffffffffffffffffffffffffffffffffffffffff8b8116825260208201859052928316928e16917fc2534859c9972270c16d5b4255d200f9a0385f9a6ce3add96c0427ff9fc70f93910160405180910390a35080610e1081612362565b915050610b82565b8060005b81811015610ffa57600080858584818110610e3957610e396122f1565b9050602002016020810190610e4e91906120bb565b905073ffffffffffffffffffffffffffffffffffffffff8116610eb4576000805260016020527fa6eef7e35abe7026729641147f7915573c7e97b47efa546f5f6e3230263bcb4954479250610ea3908361239a565b9150610eaf3383611a03565b610f98565b6040517f70a0823100000000000000000000000000000000000000000000000000000000815230600482015273ffffffffffffffffffffffffffffffffffffffff8216906370a0823190602401602060405180830381865afa158015610f1e573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610f42919061247e565b73ffffffffffffffffffffffffffffffffffffffff8216600090815260016020526040902054909250610f75908361239a565b9150610f9873ffffffffffffffffffffffffffffffffffffffff82163384611b0d565b604051828152339073ffffffffffffffffffffffffffffffffffffffff8316907f2ae72b44f59d038340fca5739135a1d51fc5ab720bb02d983e4c5ff4119ca7b89060200160405180910390a350508080610ff290612362565b915050610e1c565b50505050565b8160008061101160608401846123eb565b9050905060005b81811015611100573661102e60608601866123eb565b8381811061103e5761103e6122f1565b9050604002019050806020013584611056919061234f565b935061107561106860208301836120bb565b61072b60208a018a6120bb565b7fe3576de866d95e30a6b102b256dc468ead824ef133838792dc1813c3786414ef6110a360208301836120bb565b6110b060208a018a6120bb565b6040805173ffffffffffffffffffffffffffffffffffffffff9384168152929091166020838101919091528401359082015260600160405180910390a150806110f881612362565b915050611018565b50600061111183602086013561239a565b9050826001600061112560208801886120bb565b73ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020600082825461116e919061234f565b9091555061118490506060850160408601612461565b156112255760006111a161119b60208701876120bb565b8561164a565b905083811461120c576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601d60248201527f636f6d6d697373696f6e20616d6f756e74206e6f74206d6174636865640000006044820152606401610509565b61121f3389846109e860208a018a6120bb565b506112d7565b600061124161123760208701876120bb565b866020013561164a565b9050846020013581146112b0576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601260248201527f616d6f756e74206e6f74206d61746368656400000000000000000000000000006044820152606401610509565b6112c3886000610aaa60208901896120bb565b6112d58883610aaa60208901896120bb565b505b6112e460208501856120bb565b604080513381526020810184905290810185905273ffffffffffffffffffffffffffffffffffffffff918216918916907f0e25509c2c6fc37a8844100a9a4c5b2b038bd5daaf09d216161eb8574ad4878b9060600160405180910390a360008086518760200160008b5af180600003610488573d6000803e3d6000fd5b73ffffffffffffffffffffffffffffffffffffffff8083166000908152600360209081526040808320938516835292815282822054825260029081905291902001545b92915050565b8060005b81811015610ffa576113e58484838181106113cb576113cb6122f1565b90506020020160208101906113e091906120bb565b61151c565b806113ef81612362565b9150506113ae565b73ffffffffffffffffffffffffffffffffffffffff8084166000908152600360209081526040808320938616835292905290812054908190036114f057600080815461144290612362565b909155506040805160608101825273ffffffffffffffffffffffffffffffffffffffff80871680835286821660208085018281528587018981526000805481526002808552898220985189549089167fffffffffffffffffffffffff0000000000000000000000000000000000000000918216178a55935160018a01805491909916941693909317909655519501949094558254918352600384528483209083529092529190912055610ffa565b6000818152600260208190526040822001805484929061151190849061234f565b909155505050505050565b33600090815260036020908152604080832073ffffffffffffffffffffffffffffffffffffffff858116808652918452828520548086526002808652848720855160608101875281548516815260018083015490951681890152910180548287018190529088905593875291909452918420805493949293919283926115a390849061239a565b909155505073ffffffffffffffffffffffffffffffffffffffff84166115d2576115cd3382611a03565b6115f3565b6115f373ffffffffffffffffffffffffffffffffffffffff85163383611b0d565b6040805173ffffffffffffffffffffffffffffffffffffffff861681526020810183905233917f70eb43c4a8ae8c40502dcf22436c509c28d6ff421cf07c491be56984bd987068910160405180910390a250505050565b6040517f70a0823100000000000000000000000000000000000000000000000000000000815230600482015260009073ffffffffffffffffffffffffffffffffffffffff8416906370a0823190602401602060405180830381865afa1580156116b7573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906116db919061247e565b90506116ff73ffffffffffffffffffffffffffffffffffffffff84163330856117a0565b6040517f70a08231000000000000000000000000000000000000000000000000000000008152306004820152819073ffffffffffffffffffffffffffffffffffffffff8516906370a0823190602401602060405180830381865afa15801561176b573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061178f919061247e565b611799919061239a565b9392505050565b60405173ffffffffffffffffffffffffffffffffffffffff80851660248301528316604482015260648101829052610ffa9085907f23b872dd00000000000000000000000000000000000000000000000000000000906084015b604080517fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe08184030181529190526020810180517bffffffffffffffffffffffffffffffffffffffffffffffffffffffff167fffffffff0000000000000000000000000000000000000000000000000000000090931692909217909152611b63565b80158061191c57506040517fdd62ed3e00000000000000000000000000000000000000000000000000000000815230600482015273ffffffffffffffffffffffffffffffffffffffff838116602483015284169063dd62ed3e90604401602060405180830381865afa1580156118f6573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061191a919061247e565b155b6119a8576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152603660248201527f5361666545524332303a20617070726f76652066726f6d206e6f6e2d7a65726f60448201527f20746f206e6f6e2d7a65726f20616c6c6f77616e6365000000000000000000006064820152608401610509565b60405173ffffffffffffffffffffffffffffffffffffffff83166024820152604481018290526119fe9084907f095ea7b300000000000000000000000000000000000000000000000000000000906064016117fa565b505050565b6040805160008082526020820190925273ffffffffffffffffffffffffffffffffffffffff8416908390604051611a3a91906124bb565b60006040518083038185875af1925050503d8060008114611a77576040519150601f19603f3d011682016040523d82523d6000602084013e611a7c565b606091505b50509050806119fe576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152602360248201527f5472616e7366657248656c7065723a204554485f5452414e534645525f46414960448201527f4c454400000000000000000000000000000000000000000000000000000000006064820152608401610509565b60405173ffffffffffffffffffffffffffffffffffffffff83166024820152604481018290526119fe9084907fa9059cbb00000000000000000000000000000000000000000000000000000000906064016117fa565b6000611bc5826040518060400160405280602081526020017f5361666545524332303a206c6f772d6c6576656c2063616c6c206661696c65648152508573ffffffffffffffffffffffffffffffffffffffff16611c6f9092919063ffffffff16565b8051909150156119fe5780806020019051810190611be391906124cd565b6119fe576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152602a60248201527f5361666545524332303a204552433230206f7065726174696f6e20646964206e60448201527f6f742073756363656564000000000000000000000000000000000000000000006064820152608401610509565b6060611c7e8484600085611c86565b949350505050565b606082471015611d18576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152602660248201527f416464726573733a20696e73756666696369656e742062616c616e636520666f60448201527f722063616c6c00000000000000000000000000000000000000000000000000006064820152608401610509565b6000808673ffffffffffffffffffffffffffffffffffffffff168587604051611d4191906124bb565b60006040518083038185875af1925050503d8060008114611d7e576040519150601f19603f3d011682016040523d82523d6000602084013e611d83565b606091505b5091509150611d9487838387611d9f565b979650505050505050565b60608315611e35578251600003611e2e5773ffffffffffffffffffffffffffffffffffffffff85163b611e2e576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601d60248201527f416464726573733a2063616c6c20746f206e6f6e2d636f6e74726163740000006044820152606401610509565b5081611c7e565b611c7e8383815115611e4a5781518083602001fd5b806040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161050991906124ea565b73ffffffffffffffffffffffffffffffffffffffff8116811461068057600080fd5b7f4e487b7100000000000000000000000000000000000000000000000000000000600052604160045260246000fd5b600082601f830112611ee057600080fd5b813567ffffffffffffffff80821115611efb57611efb611ea0565b604051601f83017fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe0908116603f01168101908282118183101715611f4157611f41611ea0565b81604052838152866020858801011115611f5a57600080fd5b836020870160208301376000602085830101528094505050505092915050565b60008060008060608587031215611f9057600080fd5b8435611f9b81611e7e565b9350602085013567ffffffffffffffff80821115611fb857600080fd5b818701915087601f830112611fcc57600080fd5b813581811115611fdb57600080fd5b8860208260061b8501011115611ff057600080fd5b60208301955080945050604087013591508082111561200e57600080fd5b5061201b87828801611ecf565b91505092959194509250565b6000806040838503121561203a57600080fd5b50508035926020909101359150565b602080825282518282018190526000919060409081850190868401855b828110156120ae578151805173ffffffffffffffffffffffffffffffffffffffff90811686528782015116878601528501518585015260609093019290850190600101612066565b5091979650505050505050565b6000602082840312156120cd57600080fd5b813561179981611e7e565b60008083601f8401126120ea57600080fd5b50813567ffffffffffffffff81111561210257600080fd5b6020830191508360208260051b850101111561211d57600080fd5b9250929050565b600080600080600080600060a0888a03121561213f57600080fd5b873561214a81611e7e565b9650602088013567ffffffffffffffff8082111561216757600080fd5b6121738b838c016120d8565b909850965060408a0135915061218882611e7e565b9094506060890135908082111561219e57600080fd5b6121aa8b838c016120d8565b909550935060808a01359150808211156121c357600080fd5b506121d08a828b01611ecf565b91505092959891949750929550565b600080604083850312156121f257600080fd5b82356121fd81611e7e565b9150602083013561220d81611e7e565b809150509250929050565b6000806020838503121561222b57600080fd5b823567ffffffffffffffff81111561224257600080fd5b61224e858286016120d8565b90969095509350505050565b60008060006060848603121561226f57600080fd5b833561227a81611e7e565b9250602084013567ffffffffffffffff8082111561229757600080fd5b90850190608082880312156122ab57600080fd5b909250604085013590808211156122c157600080fd5b506122ce86828701611ecf565b9150509250925092565b6000602082840312156122ea57600080fd5b5035919050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601160045260246000fd5b808201808211156113a4576113a4612320565b60007fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff820361239357612393612320565b5060010190565b818103818111156113a4576113a4612320565b600082357fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff818336030181126123e157600080fd5b9190910192915050565b60008083357fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe184360301811261242057600080fd5b83018035915067ffffffffffffffff82111561243b57600080fd5b6020019150600681901b360382131561211d57600080fd5b801515811461068057600080fd5b60006020828403121561247357600080fd5b813561179981612453565b60006020828403121561249057600080fd5b5051919050565b60005b838110156124b257818101518382015260200161249a565b50506000910152565b600082516123e1818460208701612497565b6000602082840312156124df57600080fd5b815161179981612453565b6020815260008251806020840152612509816040850160208701612497565b601f017fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe016919091016040019291505056fea2646970667358221220f508b1a2c41fe6f4d6b5ecc5632e0d04dc599d2fcd35dd9fb7e1454e8e5c0c5a64736f6c63430008110033"
    };
});
define("@scom/scom-swap/contracts/scom-commission-proxy-contract/contracts/Proxy.ts", ["require", "exports", "@ijstech/eth-contract", "@scom/scom-swap/contracts/scom-commission-proxy-contract/contracts/Proxy.json.ts"], function (require, exports, eth_contract_50, Proxy_json_1) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.Proxy = void 0;
    class Proxy extends eth_contract_50.Contract {
        constructor(wallet, address) {
            super(wallet, address, Proxy_json_1.default.abi, Proxy_json_1.default.bytecode);
            this.assign();
        }
        deploy(options) {
            return this.__deploy([], options);
        }
        parseAddCommissionEvent(receipt) {
            return this.parseEvents(receipt, "AddCommission").map(e => this.decodeAddCommissionEvent(e));
        }
        decodeAddCommissionEvent(event) {
            let result = event.data;
            return {
                to: result.to,
                token: result.token,
                amount: new eth_contract_50.BigNumber(result.amount),
                _event: event
            };
        }
        parseClaimEvent(receipt) {
            return this.parseEvents(receipt, "Claim").map(e => this.decodeClaimEvent(e));
        }
        decodeClaimEvent(event) {
            let result = event.data;
            return {
                from: result.from,
                token: result.token,
                amount: new eth_contract_50.BigNumber(result.amount),
                _event: event
            };
        }
        parseSkimEvent(receipt) {
            return this.parseEvents(receipt, "Skim").map(e => this.decodeSkimEvent(e));
        }
        decodeSkimEvent(event) {
            let result = event.data;
            return {
                token: result.token,
                to: result.to,
                amount: new eth_contract_50.BigNumber(result.amount),
                _event: event
            };
        }
        parseTransferBackEvent(receipt) {
            return this.parseEvents(receipt, "TransferBack").map(e => this.decodeTransferBackEvent(e));
        }
        decodeTransferBackEvent(event) {
            let result = event.data;
            return {
                target: result.target,
                token: result.token,
                sender: result.sender,
                amount: new eth_contract_50.BigNumber(result.amount),
                _event: event
            };
        }
        parseTransferForwardEvent(receipt) {
            return this.parseEvents(receipt, "TransferForward").map(e => this.decodeTransferForwardEvent(e));
        }
        decodeTransferForwardEvent(event) {
            let result = event.data;
            return {
                target: result.target,
                token: result.token,
                sender: result.sender,
                amount: new eth_contract_50.BigNumber(result.amount),
                commissions: new eth_contract_50.BigNumber(result.commissions),
                _event: event
            };
        }
        assign() {
            let claimantIdCount_call = async (options) => {
                let result = await this.call('claimantIdCount', [], options);
                return new eth_contract_50.BigNumber(result);
            };
            this.claimantIdCount = claimantIdCount_call;
            let claimantIdsParams = (params) => [params.param1, params.param2];
            let claimantIds_call = async (params, options) => {
                let result = await this.call('claimantIds', claimantIdsParams(params), options);
                return new eth_contract_50.BigNumber(result);
            };
            this.claimantIds = claimantIds_call;
            let claimantsInfo_call = async (param1, options) => {
                let result = await this.call('claimantsInfo', [this.wallet.utils.toString(param1)], options);
                return {
                    claimant: result.claimant,
                    token: result.token,
                    balance: new eth_contract_50.BigNumber(result.balance)
                };
            };
            this.claimantsInfo = claimantsInfo_call;
            let getClaimantBalanceParams = (params) => [params.claimant, params.token];
            let getClaimantBalance_call = async (params, options) => {
                let result = await this.call('getClaimantBalance', getClaimantBalanceParams(params), options);
                return new eth_contract_50.BigNumber(result);
            };
            this.getClaimantBalance = getClaimantBalance_call;
            let getClaimantsInfoParams = (params) => [this.wallet.utils.toString(params.fromId), this.wallet.utils.toString(params.count)];
            let getClaimantsInfo_call = async (params, options) => {
                let result = await this.call('getClaimantsInfo', getClaimantsInfoParams(params), options);
                return (result.map(e => ({
                    claimant: e.claimant,
                    token: e.token,
                    balance: new eth_contract_50.BigNumber(e.balance)
                })));
            };
            this.getClaimantsInfo = getClaimantsInfo_call;
            let lastBalance_call = async (param1, options) => {
                let result = await this.call('lastBalance', [param1], options);
                return new eth_contract_50.BigNumber(result);
            };
            this.lastBalance = lastBalance_call;
            let claim_send = async (token, options) => {
                let result = await this.send('claim', [token], options);
                return result;
            };
            let claim_call = async (token, options) => {
                let result = await this.call('claim', [token], options);
                return;
            };
            let claim_txData = async (token, options) => {
                let result = await this.txData('claim', [token], options);
                return result;
            };
            this.claim = Object.assign(claim_send, {
                call: claim_call,
                txData: claim_txData
            });
            let claimMultiple_send = async (tokens, options) => {
                let result = await this.send('claimMultiple', [tokens], options);
                return result;
            };
            let claimMultiple_call = async (tokens, options) => {
                let result = await this.call('claimMultiple', [tokens], options);
                return;
            };
            let claimMultiple_txData = async (tokens, options) => {
                let result = await this.txData('claimMultiple', [tokens], options);
                return result;
            };
            this.claimMultiple = Object.assign(claimMultiple_send, {
                call: claimMultiple_call,
                txData: claimMultiple_txData
            });
            let ethInParams = (params) => [params.target, params.commissions.map(e => ([e.to, this.wallet.utils.toString(e.amount)])), this.wallet.utils.stringToBytes(params.data)];
            let ethIn_send = async (params, options) => {
                let result = await this.send('ethIn', ethInParams(params), options);
                return result;
            };
            let ethIn_call = async (params, options) => {
                let result = await this.call('ethIn', ethInParams(params), options);
                return;
            };
            let ethIn_txData = async (params, options) => {
                let result = await this.txData('ethIn', ethInParams(params), options);
                return result;
            };
            this.ethIn = Object.assign(ethIn_send, {
                call: ethIn_call,
                txData: ethIn_txData
            });
            let proxyCallParams = (params) => [params.target, params.tokensIn.map(e => ([e.token, this.wallet.utils.toString(e.amount), e.directTransfer, e.commissions.map(e => ([e.to, this.wallet.utils.toString(e.amount)]))])), params.to, params.tokensOut, this.wallet.utils.stringToBytes(params.data)];
            let proxyCall_send = async (params, options) => {
                let result = await this.send('proxyCall', proxyCallParams(params), options);
                return result;
            };
            let proxyCall_call = async (params, options) => {
                let result = await this.call('proxyCall', proxyCallParams(params), options);
                return;
            };
            let proxyCall_txData = async (params, options) => {
                let result = await this.txData('proxyCall', proxyCallParams(params), options);
                return result;
            };
            this.proxyCall = Object.assign(proxyCall_send, {
                call: proxyCall_call,
                txData: proxyCall_txData
            });
            let skim_send = async (tokens, options) => {
                let result = await this.send('skim', [tokens], options);
                return result;
            };
            let skim_call = async (tokens, options) => {
                let result = await this.call('skim', [tokens], options);
                return;
            };
            let skim_txData = async (tokens, options) => {
                let result = await this.txData('skim', [tokens], options);
                return result;
            };
            this.skim = Object.assign(skim_send, {
                call: skim_call,
                txData: skim_txData
            });
            let tokenInParams = (params) => [params.target, [params.tokensIn.token, this.wallet.utils.toString(params.tokensIn.amount), params.tokensIn.directTransfer, params.tokensIn.commissions.map(e => ([e.to, this.wallet.utils.toString(e.amount)]))], this.wallet.utils.stringToBytes(params.data)];
            let tokenIn_send = async (params, options) => {
                let result = await this.send('tokenIn', tokenInParams(params), options);
                return result;
            };
            let tokenIn_call = async (params, options) => {
                let result = await this.call('tokenIn', tokenInParams(params), options);
                return;
            };
            let tokenIn_txData = async (params, options) => {
                let result = await this.txData('tokenIn', tokenInParams(params), options);
                return result;
            };
            this.tokenIn = Object.assign(tokenIn_send, {
                call: tokenIn_call,
                txData: tokenIn_txData
            });
        }
    }
    Proxy._abi = Proxy_json_1.default.abi;
    exports.Proxy = Proxy;
});
define("@scom/scom-swap/contracts/scom-commission-proxy-contract/contracts/ProxyV2.json.ts", ["require", "exports"], function (require, exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    ///<amd-module name='@scom/scom-swap/contracts/scom-commission-proxy-contract/contracts/ProxyV2.json.ts'/> 
    exports.default = {
        "abi": [
            { "anonymous": false, "inputs": [{ "indexed": false, "internalType": "address", "name": "to", "type": "address" }, { "indexed": false, "internalType": "contract IERC20", "name": "token", "type": "address" }, { "indexed": false, "internalType": "uint256", "name": "amount", "type": "uint256" }], "name": "AddCommission", "type": "event" },
            { "anonymous": false, "inputs": [{ "indexed": true, "internalType": "address", "name": "from", "type": "address" }, { "indexed": false, "internalType": "contract IERC20", "name": "token", "type": "address" }, { "indexed": false, "internalType": "uint256", "name": "amount", "type": "uint256" }], "name": "Claim", "type": "event" },
            { "anonymous": false, "inputs": [{ "indexed": true, "internalType": "contract IERC20", "name": "token", "type": "address" }, { "indexed": true, "internalType": "address", "name": "to", "type": "address" }, { "indexed": false, "internalType": "uint256", "name": "amount", "type": "uint256" }], "name": "Skim", "type": "event" },
            { "anonymous": false, "inputs": [{ "indexed": true, "internalType": "address", "name": "target", "type": "address" }, { "indexed": true, "internalType": "contract IERC20", "name": "token", "type": "address" }, { "indexed": false, "internalType": "address", "name": "sender", "type": "address" }, { "indexed": false, "internalType": "uint256", "name": "amount", "type": "uint256" }], "name": "TransferBack", "type": "event" },
            { "anonymous": false, "inputs": [{ "indexed": true, "internalType": "address", "name": "target", "type": "address" }, { "indexed": true, "internalType": "contract IERC20", "name": "token", "type": "address" }, { "indexed": false, "internalType": "address", "name": "sender", "type": "address" }, { "indexed": false, "internalType": "uint256", "name": "amount", "type": "uint256" }, { "indexed": false, "internalType": "uint256", "name": "commissions", "type": "uint256" }], "name": "TransferForward", "type": "event" },
            { "inputs": [{ "internalType": "contract IERC20", "name": "token", "type": "address" }], "name": "claim", "outputs": [], "stateMutability": "nonpayable", "type": "function" },
            { "inputs": [{ "internalType": "contract IERC20[]", "name": "tokens", "type": "address[]" }], "name": "claimMultiple", "outputs": [], "stateMutability": "nonpayable", "type": "function" },
            { "inputs": [], "name": "claimantIdCount", "outputs": [{ "internalType": "uint256", "name": "", "type": "uint256" }], "stateMutability": "view", "type": "function" },
            { "inputs": [{ "internalType": "address", "name": "", "type": "address" }, { "internalType": "contract IERC20", "name": "", "type": "address" }], "name": "claimantIds", "outputs": [{ "internalType": "uint256", "name": "", "type": "uint256" }], "stateMutability": "view", "type": "function" },
            { "inputs": [{ "internalType": "uint256", "name": "", "type": "uint256" }], "name": "claimantsInfo", "outputs": [{ "internalType": "address", "name": "claimant", "type": "address" }, { "internalType": "contract IERC20", "name": "token", "type": "address" }, { "internalType": "uint256", "name": "balance", "type": "uint256" }], "stateMutability": "view", "type": "function" },
            { "inputs": [{ "internalType": "address", "name": "target", "type": "address" }, { "components": [{ "internalType": "address", "name": "to", "type": "address" }, { "internalType": "uint256", "name": "amount", "type": "uint256" }], "internalType": "struct ProxyV2.Commission[]", "name": "commissions", "type": "tuple[]" }, { "internalType": "bytes", "name": "data", "type": "bytes" }], "name": "ethIn", "outputs": [], "stateMutability": "payable", "type": "function" },
            { "inputs": [{ "internalType": "address", "name": "claimant", "type": "address" }, { "internalType": "contract IERC20", "name": "token", "type": "address" }], "name": "getClaimantBalance", "outputs": [{ "internalType": "uint256", "name": "", "type": "uint256" }], "stateMutability": "view", "type": "function" },
            { "inputs": [{ "internalType": "uint256", "name": "fromId", "type": "uint256" }, { "internalType": "uint256", "name": "count", "type": "uint256" }], "name": "getClaimantsInfo", "outputs": [{ "components": [{ "internalType": "address", "name": "claimant", "type": "address" }, { "internalType": "contract IERC20", "name": "token", "type": "address" }, { "internalType": "uint256", "name": "balance", "type": "uint256" }], "internalType": "struct ProxyV2.ClaimantInfo[]", "name": "claimantInfoList", "type": "tuple[]" }], "stateMutability": "view", "type": "function" },
            { "inputs": [{ "internalType": "contract IERC20", "name": "", "type": "address" }], "name": "lastBalance", "outputs": [{ "internalType": "uint256", "name": "", "type": "uint256" }], "stateMutability": "view", "type": "function" },
            { "inputs": [{ "internalType": "address", "name": "target", "type": "address" }, { "components": [{ "internalType": "contract IERC20", "name": "token", "type": "address" }, { "internalType": "uint256", "name": "amount", "type": "uint256" }, { "internalType": "bool", "name": "directTransfer", "type": "bool" }, { "components": [{ "internalType": "address", "name": "to", "type": "address" }, { "internalType": "uint256", "name": "amount", "type": "uint256" }], "internalType": "struct ProxyV2.Commission[]", "name": "commissions", "type": "tuple[]" }, { "internalType": "uint256", "name": "totalCommissions", "type": "uint256" }], "internalType": "struct ProxyV2.TokensIn[]", "name": "tokensIn", "type": "tuple[]" }, { "internalType": "address", "name": "to", "type": "address" }, { "internalType": "contract IERC20[]", "name": "tokensOut", "type": "address[]" }, { "internalType": "bytes", "name": "data", "type": "bytes" }], "name": "proxyCall", "outputs": [], "stateMutability": "payable", "type": "function" },
            { "inputs": [{ "internalType": "contract IERC20[]", "name": "tokens", "type": "address[]" }], "name": "skim", "outputs": [], "stateMutability": "nonpayable", "type": "function" },
            { "inputs": [{ "internalType": "address", "name": "target", "type": "address" }, { "components": [{ "internalType": "contract IERC20", "name": "token", "type": "address" }, { "internalType": "uint256", "name": "amount", "type": "uint256" }, { "internalType": "bool", "name": "directTransfer", "type": "bool" }, { "components": [{ "internalType": "address", "name": "to", "type": "address" }, { "internalType": "uint256", "name": "amount", "type": "uint256" }], "internalType": "struct ProxyV2.Commission[]", "name": "commissions", "type": "tuple[]" }, { "internalType": "uint256", "name": "totalCommissions", "type": "uint256" }], "internalType": "struct ProxyV2.TokensIn", "name": "tokensIn", "type": "tuple" }, { "internalType": "bytes", "name": "data", "type": "bytes" }], "name": "tokenIn", "outputs": [], "stateMutability": "nonpayable", "type": "function" },
            { "stateMutability": "payable", "type": "receive" }
        ],
        "bytecode": "608060405234801561001057600080fd5b506125ab806100206000396000f3fe6080604052600436106100cb5760003560e01c8063b60c164c11610074578063ee42d3a31161004e578063ee42d3a31461027c578063f303ad6e146102a9578063fddaea46146102c957600080fd5b8063b60c164c146101b1578063d2ef8464146101d1578063d3b7d4c31461025c57600080fd5b80637c93df2b116100a55780637c93df2b1461014257806383e40a5114610155578063b316d7141461019b57600080fd5b806301417e7b146100d7578063188ff72b146100ec5780631e83409a1461012257600080fd5b366100d257005b600080fd5b6100ea6100e5366004611fb4565b6102e9565b005b3480156100f857600080fd5b5061010c610107366004612061565b610493565b6040516101199190612083565b60405180910390f35b34801561012e57600080fd5b506100ea61013d3660046120f5565b610677565b6100ea61015036600461215e565b610683565b34801561016157600080fd5b5061018d610170366004612219565b600360209081526000928352604080842090915290825290205481565b604051908152602001610119565b3480156101a757600080fd5b5061018d60005481565b3480156101bd57600080fd5b506100ea6101cc366004612252565b610e3d565b3480156101dd57600080fd5b506102296101ec366004612294565b600260208190526000918252604090912080546001820154919092015473ffffffffffffffffffffffffffffffffffffffff928316929091169083565b6040805173ffffffffffffffffffffffffffffffffffffffff948516815293909216602084015290820152606001610119565b34801561026857600080fd5b5061018d610277366004612219565b611025565b34801561028857600080fd5b5061018d6102973660046120f5565b60016020526000908152604090205481565b3480156102b557600080fd5b506100ea6102c4366004612252565b61106e565b3480156102d557600080fd5b506100ea6102e43660046122ad565b6110bb565b600082815b818110156103bb57368686838181106103095761030961232b565b90506040020190508060200135846103219190612389565b935061033f61033360208301836120f5565b60008360200135611431565b7fe3576de866d95e30a6b102b256dc468ead824ef133838792dc1813c3786414ef61036d60208301836120f5565b6040805173ffffffffffffffffffffffffffffffffffffffff909216825260006020838101919091528401359082015260600160405180910390a150806103b38161239c565b9150506102ee565b5060006103c883346123d4565b600080805260016020527fa6eef7e35abe7026729641147f7915573c7e97b47efa546f5f6e3230263bcb4980549293508592909190610408908490612389565b9091555050604080513381526020810183905290810184905260009073ffffffffffffffffffffffffffffffffffffffff8916907f0e25509c2c6fc37a8844100a9a4c5b2b038bd5daaf09d216161eb8574ad4878b9060600160405180910390a3600080855186602001848b5af180600003610488573d6000803e3d6000fd5b503d6000803e3d6000f35b60606000831180156104a757506000548311155b610512576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152600d60248201527f6f7574206f6620626f756e64730000000000000000000000000000000000000060448201526064015b60405180910390fd5b600060016105208486612389565b61052a91906123d4565b9050600054811115610552575060005461054484826123d4565b61054f906001612389565b92505b8267ffffffffffffffff81111561056b5761056b611eda565b6040519080825280602002602001820160405280156105d457816020015b60408051606081018252600080825260208083018290529282015282527fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff9092019101816105895790505b5091508360005b8481101561066e576000828152600260208181526040928390208351606081018552815473ffffffffffffffffffffffffffffffffffffffff908116825260018301541692810192909252909101549181019190915284518590839081106106455761064561232b565b60200260200101819052508161065a9061239c565b9150806106668161239c565b9150506105db565b50505092915050565b61068081611556565b50565b846000805b82811015610b8057368989838181106106a3576106a361232b565b90506020028101906106b591906123e7565b90506000806106c76060840184612425565b9050905060005b818110156107c057366106e46060860186612425565b838181106106f4576106f461232b565b905060400201905080602001358461070c9190612389565b935061073561071e60208301836120f5565b61072b60208801886120f5565b8360200135611431565b7fe3576de866d95e30a6b102b256dc468ead824ef133838792dc1813c3786414ef61076360208301836120f5565b61077060208801886120f5565b6040805173ffffffffffffffffffffffffffffffffffffffff9384168152929091166020838101919091528401359082015260600160405180910390a150806107b88161239c565b9150506106ce565b5060009050816001826107d660208701876120f5565b73ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020600082825461081f9190612389565b909155506000905061083460208501856120f5565b73ffffffffffffffffffffffffffffffffffffffff160361093c5784156108b7576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601a60248201527f6d6f7265207468616e206f6e6520455448207472616e736665720000000000006044820152606401610509565b82602001353414610924576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601660248201527f45544820616d6f756e74206e6f74206d617463686564000000000000000000006044820152606401610509565b6109328260208501356123d4565b9050809450610b00565b61094c606084016040850161249b565b15610a2457600061096d61096360208601866120f5565b8560800135611684565b9050828110156109d9576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601d60248201527f636f6d6d697373696f6e20616d6f756e74206e6f74206d6174636865640000006044820152606401610509565b6109eb608085013560208601356123d4565b9150610a1e338f84610a0060208901896120f5565b73ffffffffffffffffffffffffffffffffffffffff169291906117da565b50610b00565b6000610a40610a3660208601866120f5565b8560200135611684565b90508360200135811015610ab0576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601260248201527f616d6f756e74206e6f74206d61746368656400000000000000000000000000006044820152606401610509565b610aba83826123d4565b9150610aec8e6000610acf60208801886120f5565b73ffffffffffffffffffffffffffffffffffffffff1691906118b6565b610afe8e83610acf60208801886120f5565b505b610b0d60208401846120f5565b604080513381526020810184905290810184905273ffffffffffffffffffffffffffffffffffffffff918216918f16907f0e25509c2c6fc37a8844100a9a4c5b2b038bd5daaf09d216161eb8574ad4878b9060600160405180910390a35050508080610b789061239c565b915050610688565b50600080845185602001848d5af180600003610ba0573d6000803e3d6000fd5b5083915060005b8281101561048857600080878784818110610bc457610bc461232b565b9050602002016020810190610bd991906120f5565b73ffffffffffffffffffffffffffffffffffffffff1603610c3a576000805260016020527fa6eef7e35abe7026729641147f7915573c7e97b47efa546f5f6e3230263bcb4954610c2990476123d4565b9050610c358882611a3d565b610dac565b60016000888885818110610c5057610c5061232b565b9050602002016020810190610c6591906120f5565b73ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002054878784818110610cb257610cb261232b565b9050602002016020810190610cc791906120f5565b6040517f70a0823100000000000000000000000000000000000000000000000000000000815230600482015273ffffffffffffffffffffffffffffffffffffffff91909116906370a0823190602401602060405180830381865afa158015610d33573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610d5791906124b8565b610d6191906123d4565b9050610dac8882898986818110610d7a57610d7a61232b565b9050602002016020810190610d8f91906120f5565b73ffffffffffffffffffffffffffffffffffffffff169190611b47565b868683818110610dbe57610dbe61232b565b9050602002016020810190610dd391906120f5565b6040805173ffffffffffffffffffffffffffffffffffffffff8b8116825260208201859052928316928e16917fc2534859c9972270c16d5b4255d200f9a0385f9a6ce3add96c0427ff9fc70f93910160405180910390a35080610e358161239c565b915050610ba7565b8060005b8181101561101f57600080858584818110610e5e57610e5e61232b565b9050602002016020810190610e7391906120f5565b905073ffffffffffffffffffffffffffffffffffffffff8116610ed9576000805260016020527fa6eef7e35abe7026729641147f7915573c7e97b47efa546f5f6e3230263bcb4954479250610ec890836123d4565b9150610ed43383611a3d565b610fbd565b6040517f70a0823100000000000000000000000000000000000000000000000000000000815230600482015273ffffffffffffffffffffffffffffffffffffffff8216906370a0823190602401602060405180830381865afa158015610f43573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610f6791906124b8565b73ffffffffffffffffffffffffffffffffffffffff8216600090815260016020526040902054909250610f9a90836123d4565b9150610fbd73ffffffffffffffffffffffffffffffffffffffff82163384611b47565b604051828152339073ffffffffffffffffffffffffffffffffffffffff8316907f2ae72b44f59d038340fca5739135a1d51fc5ab720bb02d983e4c5ff4119ca7b89060200160405180910390a3505080806110179061239c565b915050610e41565b50505050565b73ffffffffffffffffffffffffffffffffffffffff8083166000908152600360209081526040808320938516835292815282822054825260029081905291902001545b92915050565b8060005b8181101561101f576110a984848381811061108f5761108f61232b565b90506020020160208101906110a491906120f5565b611556565b806110b38161239c565b915050611072565b816000806110cc6060840184612425565b9050905060005b818110156111bb57366110e96060860186612425565b838181106110f9576110f961232b565b90506040020190508060200135846111119190612389565b935061113061112360208301836120f5565b61072b60208a018a6120f5565b7fe3576de866d95e30a6b102b256dc468ead824ef133838792dc1813c3786414ef61115e60208301836120f5565b61116b60208a018a6120f5565b6040805173ffffffffffffffffffffffffffffffffffffffff9384168152929091166020838101919091528401359082015260600160405180910390a150806111b38161239c565b9150506110d3565b506000826001826111cf60208801886120f5565b73ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008282546112189190612389565b9091555061122e9050606085016040860161249b565b156112e857600061124f61124560208701876120f5565b8660800135611684565b9050838110156112bb576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601d60248201527f636f6d6d697373696f6e20616d6f756e74206e6f74206d6174636865640000006044820152606401610509565b6112cd608086013560208701356123d4565b91506112e2338984610a0060208a018a6120f5565b506113a7565b60006113046112fa60208701876120f5565b8660200135611684565b90508460200135811015611374576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601260248201527f616d6f756e74206e6f74206d61746368656400000000000000000000000000006044820152606401610509565b61137e84826123d4565b9150611393886000610acf60208901896120f5565b6113a58883610acf60208901896120f5565b505b6113b460208501856120f5565b604080513381526020810184905290810185905273ffffffffffffffffffffffffffffffffffffffff918216918916907f0e25509c2c6fc37a8844100a9a4c5b2b038bd5daaf09d216161eb8574ad4878b9060600160405180910390a360008086518760200160008b5af180600003610488573d6000803e3d6000fd5b73ffffffffffffffffffffffffffffffffffffffff80841660009081526003602090815260408083209386168352929052908120549081900361152a57600080815461147c9061239c565b909155506040805160608101825273ffffffffffffffffffffffffffffffffffffffff80871680835286821660208085018281528587018981526000805481526002808552898220985189549089167fffffffffffffffffffffffff0000000000000000000000000000000000000000918216178a55935160018a0180549190991694169390931790965551950194909455825491835260038452848320908352909252919091205561101f565b6000818152600260208190526040822001805484929061154b908490612389565b909155505050505050565b33600090815260036020908152604080832073ffffffffffffffffffffffffffffffffffffffff858116808652918452828520548086526002808652848720855160608101875281548516815260018083015490951681890152910180548287018190529088905593875291909452918420805493949293919283926115dd9084906123d4565b909155505073ffffffffffffffffffffffffffffffffffffffff841661160c576116073382611a3d565b61162d565b61162d73ffffffffffffffffffffffffffffffffffffffff85163383611b47565b6040805173ffffffffffffffffffffffffffffffffffffffff861681526020810183905233917f70eb43c4a8ae8c40502dcf22436c509c28d6ff421cf07c491be56984bd987068910160405180910390a250505050565b6040517f70a0823100000000000000000000000000000000000000000000000000000000815230600482015260009073ffffffffffffffffffffffffffffffffffffffff8416906370a0823190602401602060405180830381865afa1580156116f1573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061171591906124b8565b905061173973ffffffffffffffffffffffffffffffffffffffff84163330856117da565b6040517f70a08231000000000000000000000000000000000000000000000000000000008152306004820152819073ffffffffffffffffffffffffffffffffffffffff8516906370a0823190602401602060405180830381865afa1580156117a5573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906117c991906124b8565b6117d391906123d4565b9392505050565b60405173ffffffffffffffffffffffffffffffffffffffff8085166024830152831660448201526064810182905261101f9085907f23b872dd00000000000000000000000000000000000000000000000000000000906084015b604080517fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe08184030181529190526020810180517bffffffffffffffffffffffffffffffffffffffffffffffffffffffff167fffffffff0000000000000000000000000000000000000000000000000000000090931692909217909152611b9d565b80158061195657506040517fdd62ed3e00000000000000000000000000000000000000000000000000000000815230600482015273ffffffffffffffffffffffffffffffffffffffff838116602483015284169063dd62ed3e90604401602060405180830381865afa158015611930573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061195491906124b8565b155b6119e2576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152603660248201527f5361666545524332303a20617070726f76652066726f6d206e6f6e2d7a65726f60448201527f20746f206e6f6e2d7a65726f20616c6c6f77616e6365000000000000000000006064820152608401610509565b60405173ffffffffffffffffffffffffffffffffffffffff8316602482015260448101829052611a389084907f095ea7b30000000000000000000000000000000000000000000000000000000090606401611834565b505050565b6040805160008082526020820190925273ffffffffffffffffffffffffffffffffffffffff8416908390604051611a7491906124f5565b60006040518083038185875af1925050503d8060008114611ab1576040519150601f19603f3d011682016040523d82523d6000602084013e611ab6565b606091505b5050905080611a38576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152602360248201527f5472616e7366657248656c7065723a204554485f5452414e534645525f46414960448201527f4c454400000000000000000000000000000000000000000000000000000000006064820152608401610509565b60405173ffffffffffffffffffffffffffffffffffffffff8316602482015260448101829052611a389084907fa9059cbb0000000000000000000000000000000000000000000000000000000090606401611834565b6000611bff826040518060400160405280602081526020017f5361666545524332303a206c6f772d6c6576656c2063616c6c206661696c65648152508573ffffffffffffffffffffffffffffffffffffffff16611ca99092919063ffffffff16565b805190915015611a385780806020019051810190611c1d9190612507565b611a38576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152602a60248201527f5361666545524332303a204552433230206f7065726174696f6e20646964206e60448201527f6f742073756363656564000000000000000000000000000000000000000000006064820152608401610509565b6060611cb88484600085611cc0565b949350505050565b606082471015611d52576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152602660248201527f416464726573733a20696e73756666696369656e742062616c616e636520666f60448201527f722063616c6c00000000000000000000000000000000000000000000000000006064820152608401610509565b6000808673ffffffffffffffffffffffffffffffffffffffff168587604051611d7b91906124f5565b60006040518083038185875af1925050503d8060008114611db8576040519150601f19603f3d011682016040523d82523d6000602084013e611dbd565b606091505b5091509150611dce87838387611dd9565b979650505050505050565b60608315611e6f578251600003611e685773ffffffffffffffffffffffffffffffffffffffff85163b611e68576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601d60248201527f416464726573733a2063616c6c20746f206e6f6e2d636f6e74726163740000006044820152606401610509565b5081611cb8565b611cb88383815115611e845781518083602001fd5b806040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016105099190612524565b73ffffffffffffffffffffffffffffffffffffffff8116811461068057600080fd5b7f4e487b7100000000000000000000000000000000000000000000000000000000600052604160045260246000fd5b600082601f830112611f1a57600080fd5b813567ffffffffffffffff80821115611f3557611f35611eda565b604051601f83017fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe0908116603f01168101908282118183101715611f7b57611f7b611eda565b81604052838152866020858801011115611f9457600080fd5b836020870160208301376000602085830101528094505050505092915050565b60008060008060608587031215611fca57600080fd5b8435611fd581611eb8565b9350602085013567ffffffffffffffff80821115611ff257600080fd5b818701915087601f83011261200657600080fd5b81358181111561201557600080fd5b8860208260061b850101111561202a57600080fd5b60208301955080945050604087013591508082111561204857600080fd5b5061205587828801611f09565b91505092959194509250565b6000806040838503121561207457600080fd5b50508035926020909101359150565b602080825282518282018190526000919060409081850190868401855b828110156120e8578151805173ffffffffffffffffffffffffffffffffffffffff908116865287820151168786015285015185850152606090930192908501906001016120a0565b5091979650505050505050565b60006020828403121561210757600080fd5b81356117d381611eb8565b60008083601f84011261212457600080fd5b50813567ffffffffffffffff81111561213c57600080fd5b6020830191508360208260051b850101111561215757600080fd5b9250929050565b600080600080600080600060a0888a03121561217957600080fd5b873561218481611eb8565b9650602088013567ffffffffffffffff808211156121a157600080fd5b6121ad8b838c01612112565b909850965060408a013591506121c282611eb8565b909450606089013590808211156121d857600080fd5b6121e48b838c01612112565b909550935060808a01359150808211156121fd57600080fd5b5061220a8a828b01611f09565b91505092959891949750929550565b6000806040838503121561222c57600080fd5b823561223781611eb8565b9150602083013561224781611eb8565b809150509250929050565b6000806020838503121561226557600080fd5b823567ffffffffffffffff81111561227c57600080fd5b61228885828601612112565b90969095509350505050565b6000602082840312156122a657600080fd5b5035919050565b6000806000606084860312156122c257600080fd5b83356122cd81611eb8565b9250602084013567ffffffffffffffff808211156122ea57600080fd5b9085019060a082880312156122fe57600080fd5b9092506040850135908082111561231457600080fd5b5061232186828701611f09565b9150509250925092565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601160045260246000fd5b808201808211156110685761106861235a565b60007fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff82036123cd576123cd61235a565b5060010190565b818103818111156110685761106861235a565b600082357fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff6183360301811261241b57600080fd5b9190910192915050565b60008083357fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe184360301811261245a57600080fd5b83018035915067ffffffffffffffff82111561247557600080fd5b6020019150600681901b360382131561215757600080fd5b801515811461068057600080fd5b6000602082840312156124ad57600080fd5b81356117d38161248d565b6000602082840312156124ca57600080fd5b5051919050565b60005b838110156124ec5781810151838201526020016124d4565b50506000910152565b6000825161241b8184602087016124d1565b60006020828403121561251957600080fd5b81516117d38161248d565b60208152600082518060208401526125438160408501602087016124d1565b601f017fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe016919091016040019291505056fea26469706673582212209cca70a9576e9493198c65a6086f463ebf4f83feb8872306feb8c98fcff97b4b64736f6c63430008110033"
    };
});
define("@scom/scom-swap/contracts/scom-commission-proxy-contract/contracts/ProxyV2.ts", ["require", "exports", "@ijstech/eth-contract", "@scom/scom-swap/contracts/scom-commission-proxy-contract/contracts/ProxyV2.json.ts"], function (require, exports, eth_contract_51, ProxyV2_json_1) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.ProxyV2 = void 0;
    class ProxyV2 extends eth_contract_51.Contract {
        constructor(wallet, address) {
            super(wallet, address, ProxyV2_json_1.default.abi, ProxyV2_json_1.default.bytecode);
            this.assign();
        }
        deploy(options) {
            return this.__deploy([], options);
        }
        parseAddCommissionEvent(receipt) {
            return this.parseEvents(receipt, "AddCommission").map(e => this.decodeAddCommissionEvent(e));
        }
        decodeAddCommissionEvent(event) {
            let result = event.data;
            return {
                to: result.to,
                token: result.token,
                amount: new eth_contract_51.BigNumber(result.amount),
                _event: event
            };
        }
        parseClaimEvent(receipt) {
            return this.parseEvents(receipt, "Claim").map(e => this.decodeClaimEvent(e));
        }
        decodeClaimEvent(event) {
            let result = event.data;
            return {
                from: result.from,
                token: result.token,
                amount: new eth_contract_51.BigNumber(result.amount),
                _event: event
            };
        }
        parseSkimEvent(receipt) {
            return this.parseEvents(receipt, "Skim").map(e => this.decodeSkimEvent(e));
        }
        decodeSkimEvent(event) {
            let result = event.data;
            return {
                token: result.token,
                to: result.to,
                amount: new eth_contract_51.BigNumber(result.amount),
                _event: event
            };
        }
        parseTransferBackEvent(receipt) {
            return this.parseEvents(receipt, "TransferBack").map(e => this.decodeTransferBackEvent(e));
        }
        decodeTransferBackEvent(event) {
            let result = event.data;
            return {
                target: result.target,
                token: result.token,
                sender: result.sender,
                amount: new eth_contract_51.BigNumber(result.amount),
                _event: event
            };
        }
        parseTransferForwardEvent(receipt) {
            return this.parseEvents(receipt, "TransferForward").map(e => this.decodeTransferForwardEvent(e));
        }
        decodeTransferForwardEvent(event) {
            let result = event.data;
            return {
                target: result.target,
                token: result.token,
                sender: result.sender,
                amount: new eth_contract_51.BigNumber(result.amount),
                commissions: new eth_contract_51.BigNumber(result.commissions),
                _event: event
            };
        }
        assign() {
            let claimantIdCount_call = async (options) => {
                let result = await this.call('claimantIdCount', [], options);
                return new eth_contract_51.BigNumber(result);
            };
            this.claimantIdCount = claimantIdCount_call;
            let claimantIdsParams = (params) => [params.param1, params.param2];
            let claimantIds_call = async (params, options) => {
                let result = await this.call('claimantIds', claimantIdsParams(params), options);
                return new eth_contract_51.BigNumber(result);
            };
            this.claimantIds = claimantIds_call;
            let claimantsInfo_call = async (param1, options) => {
                let result = await this.call('claimantsInfo', [this.wallet.utils.toString(param1)], options);
                return {
                    claimant: result.claimant,
                    token: result.token,
                    balance: new eth_contract_51.BigNumber(result.balance)
                };
            };
            this.claimantsInfo = claimantsInfo_call;
            let getClaimantBalanceParams = (params) => [params.claimant, params.token];
            let getClaimantBalance_call = async (params, options) => {
                let result = await this.call('getClaimantBalance', getClaimantBalanceParams(params), options);
                return new eth_contract_51.BigNumber(result);
            };
            this.getClaimantBalance = getClaimantBalance_call;
            let getClaimantsInfoParams = (params) => [this.wallet.utils.toString(params.fromId), this.wallet.utils.toString(params.count)];
            let getClaimantsInfo_call = async (params, options) => {
                let result = await this.call('getClaimantsInfo', getClaimantsInfoParams(params), options);
                return (result.map(e => ({
                    claimant: e.claimant,
                    token: e.token,
                    balance: new eth_contract_51.BigNumber(e.balance)
                })));
            };
            this.getClaimantsInfo = getClaimantsInfo_call;
            let lastBalance_call = async (param1, options) => {
                let result = await this.call('lastBalance', [param1], options);
                return new eth_contract_51.BigNumber(result);
            };
            this.lastBalance = lastBalance_call;
            let claim_send = async (token, options) => {
                let result = await this.send('claim', [token], options);
                return result;
            };
            let claim_call = async (token, options) => {
                let result = await this.call('claim', [token], options);
                return;
            };
            let claim_txData = async (token, options) => {
                let result = await this.txData('claim', [token], options);
                return result;
            };
            this.claim = Object.assign(claim_send, {
                call: claim_call,
                txData: claim_txData
            });
            let claimMultiple_send = async (tokens, options) => {
                let result = await this.send('claimMultiple', [tokens], options);
                return result;
            };
            let claimMultiple_call = async (tokens, options) => {
                let result = await this.call('claimMultiple', [tokens], options);
                return;
            };
            let claimMultiple_txData = async (tokens, options) => {
                let result = await this.txData('claimMultiple', [tokens], options);
                return result;
            };
            this.claimMultiple = Object.assign(claimMultiple_send, {
                call: claimMultiple_call,
                txData: claimMultiple_txData
            });
            let ethInParams = (params) => [params.target, params.commissions.map(e => ([e.to, this.wallet.utils.toString(e.amount)])), this.wallet.utils.stringToBytes(params.data)];
            let ethIn_send = async (params, options) => {
                let result = await this.send('ethIn', ethInParams(params), options);
                return result;
            };
            let ethIn_call = async (params, options) => {
                let result = await this.call('ethIn', ethInParams(params), options);
                return;
            };
            let ethIn_txData = async (params, options) => {
                let result = await this.txData('ethIn', ethInParams(params), options);
                return result;
            };
            this.ethIn = Object.assign(ethIn_send, {
                call: ethIn_call,
                txData: ethIn_txData
            });
            let proxyCallParams = (params) => [params.target, params.tokensIn.map(e => ([e.token, this.wallet.utils.toString(e.amount), e.directTransfer, e.commissions.map(e => ([e.to, this.wallet.utils.toString(e.amount)])), this.wallet.utils.toString(e.totalCommissions)])), params.to, params.tokensOut, this.wallet.utils.stringToBytes(params.data)];
            let proxyCall_send = async (params, options) => {
                let result = await this.send('proxyCall', proxyCallParams(params), options);
                return result;
            };
            let proxyCall_call = async (params, options) => {
                let result = await this.call('proxyCall', proxyCallParams(params), options);
                return;
            };
            let proxyCall_txData = async (params, options) => {
                let result = await this.txData('proxyCall', proxyCallParams(params), options);
                return result;
            };
            this.proxyCall = Object.assign(proxyCall_send, {
                call: proxyCall_call,
                txData: proxyCall_txData
            });
            let skim_send = async (tokens, options) => {
                let result = await this.send('skim', [tokens], options);
                return result;
            };
            let skim_call = async (tokens, options) => {
                let result = await this.call('skim', [tokens], options);
                return;
            };
            let skim_txData = async (tokens, options) => {
                let result = await this.txData('skim', [tokens], options);
                return result;
            };
            this.skim = Object.assign(skim_send, {
                call: skim_call,
                txData: skim_txData
            });
            let tokenInParams = (params) => [params.target, [params.tokensIn.token, this.wallet.utils.toString(params.tokensIn.amount), params.tokensIn.directTransfer, params.tokensIn.commissions.map(e => ([e.to, this.wallet.utils.toString(e.amount)])), this.wallet.utils.toString(params.tokensIn.totalCommissions)], this.wallet.utils.stringToBytes(params.data)];
            let tokenIn_send = async (params, options) => {
                let result = await this.send('tokenIn', tokenInParams(params), options);
                return result;
            };
            let tokenIn_call = async (params, options) => {
                let result = await this.call('tokenIn', tokenInParams(params), options);
                return;
            };
            let tokenIn_txData = async (params, options) => {
                let result = await this.txData('tokenIn', tokenInParams(params), options);
                return result;
            };
            this.tokenIn = Object.assign(tokenIn_send, {
                call: tokenIn_call,
                txData: tokenIn_txData
            });
        }
    }
    ProxyV2._abi = ProxyV2_json_1.default.abi;
    exports.ProxyV2 = ProxyV2;
});
define("@scom/scom-swap/contracts/scom-commission-proxy-contract/contracts/index.ts", ["require", "exports", "@scom/scom-swap/contracts/scom-commission-proxy-contract/contracts/Proxy.ts", "@scom/scom-swap/contracts/scom-commission-proxy-contract/contracts/ProxyV2.ts"], function (require, exports, Proxy_1, ProxyV2_1) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.ProxyV2 = exports.Proxy = void 0;
    Object.defineProperty(exports, "Proxy", { enumerable: true, get: function () { return Proxy_1.Proxy; } });
    Object.defineProperty(exports, "ProxyV2", { enumerable: true, get: function () { return ProxyV2_1.ProxyV2; } });
});
define("@scom/scom-swap/contracts/scom-commission-proxy-contract/index.ts", ["require", "exports", "@scom/scom-swap/contracts/scom-commission-proxy-contract/contracts/index.ts"], function (require, exports, Contracts) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.onProgress = exports.deploy = exports.DefaultDeployOptions = exports.Contracts = void 0;
    exports.Contracts = Contracts;
    ;
    ;
    var progressHandler;
    exports.DefaultDeployOptions = {
        version: 'V1'
    };
    function progress(msg) {
        if (typeof (progressHandler) == 'function') {
            progressHandler(msg);
        }
        ;
    }
    async function deploy(wallet, options) {
        progress('Contracts deployment start');
        let proxy;
        if (options.version == 'V2') {
            proxy = new Contracts.ProxyV2(wallet);
        }
        else {
            proxy = new Contracts.Proxy(wallet);
        }
        progress('Deploy Proxy');
        await proxy.deploy();
        progress('Proxy deployed ' + proxy.address);
        progress('Contracts deployment finished');
        return {
            proxy: proxy.address
        };
    }
    exports.deploy = deploy;
    ;
    function onProgress(handler) {
        progressHandler = handler;
    }
    exports.onProgress = onProgress;
    ;
    exports.default = {
        Contracts,
        deploy,
        DefaultDeployOptions: exports.DefaultDeployOptions,
        onProgress
    };
});
define("@scom/scom-swap/swap-utils/helper.ts", ["require", "exports"], function (require, exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.debounce = void 0;
    function debounce(func, timeout = 500, target) {
        let timer; // NodeJS.Timeout;
        return (...args) => {
            clearTimeout(timer);
            timer = setTimeout(() => { func.apply(target, args); }, timeout);
        };
    }
    exports.debounce = debounce;
    ;
});
define("@scom/scom-swap/swap-utils/index.ts", ["require", "exports", "@ijstech/eth-wallet", "@scom/scom-swap/contracts/oswap-openswap-contract/index.ts", "@scom/scom-swap/contracts/scom-commission-proxy-contract/index.ts", "@scom/scom-dex-list", "@scom/scom-swap/global/index.ts", "@scom/scom-swap/store/index.ts", "@scom/scom-token-list", "@scom/scom-swap/swap-utils/helper.ts"], function (require, exports, eth_wallet_5, index_5, index_6, scom_dex_list_1, index_7, index_8, scom_token_list_3, helper_2) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.setApprovalModalSpenderAddress = exports.getApprovalModelAction = exports.setERC20AllowanceToZero = exports.getRouterAddress = exports.getChainNativeToken = exports.executeSwap = exports.getAllRoutesData = exports.getTradeFeeMap = exports.getExtendedRouteObjData = exports.getCommissionAmount = exports.getCurrentCommissions = void 0;
    const routeAPI = 'https://route.openswap.xyz/trading/v1/route';
    const newRouteAPI = 'https://indexer.ijs.dev/trading/v1/route';
    const getChainNativeToken = () => {
        return scom_token_list_3.ChainNativeTokenByChainId[(0, index_8.getChainId)()];
    };
    exports.getChainNativeToken = getChainNativeToken;
    const getWETH = () => {
        return scom_token_list_3.WETHByChainId[(0, index_8.getChainId)()];
    };
    const getWrappedTokenAddress = () => {
        return getWETH().address;
    };
    const getFactoryAddress = (key) => {
        var _a;
        const dexInfoList = (0, index_8.getDexInfoList)();
        const factoryAddress = ((_a = dexInfoList.find(v => v.chainId == (0, index_8.getChainId)() && v.dexCode == key)) === null || _a === void 0 ? void 0 : _a.factoryAddress) || '';
        return factoryAddress;
    };
    function getRouterAddress(key) {
        var _a;
        const dexInfoList = (0, index_8.getDexInfoList)();
        const routerAddress = ((_a = dexInfoList.find(v => v.chainId == (0, index_8.getChainId)() && v.dexCode == key)) === null || _a === void 0 ? void 0 : _a.routerAddress) || '';
        return routerAddress;
    }
    exports.getRouterAddress = getRouterAddress;
    async function allowanceRouter(wallet, market, token, owner, contractAddress, callback) {
        let erc20 = new index_5.Contracts.ERC20(wallet, token.address);
        let spender = contractAddress ? contractAddress : getRouterAddress(market);
        let allowance = await erc20.allowance({
            owner,
            spender
        });
        allowance = eth_wallet_5.Utils.fromDecimals(allowance, token.decimals);
        if (callback)
            callback(null, allowance);
        return allowance;
    }
    async function checkIsApproveButtonShown(wallet, firstTokenObject, fromInput, market, contractAddress) {
        if (!(0, index_8.isWalletConnected)())
            return false;
        let isApproveButtonShown = false;
        const owner = wallet.account.address;
        const nativeTokenObject = getChainNativeToken();
        if (!nativeTokenObject)
            return false;
        const firstTokenAddress = firstTokenObject.address;
        if (!firstTokenAddress || firstTokenAddress === nativeTokenObject.symbol) {
            isApproveButtonShown = false;
        }
        else {
            isApproveButtonShown = false;
            const allowance = await allowanceRouter(wallet, market, firstTokenObject, owner, contractAddress);
            isApproveButtonShown = fromInput.gt(allowance);
        }
        return isApproveButtonShown;
    }
    async function composeRouteObj(wallet, routeObj, market, firstTokenObject, firstInput, secondInput, isFromEstimated, commissions) {
        const slippageTolerance = (0, index_8.getSlippageTolerance)();
        if (!slippageTolerance)
            return null;
        let fromAmount = new eth_wallet_5.BigNumber(0);
        let toAmount = new eth_wallet_5.BigNumber(0);
        let minReceivedMaxSold = 0;
        let priceImpact = 0;
        let price = 0;
        let priceSwap = 0;
        let tradeFee = 0;
        let gasFee = 0;
        let isApproveButtonShown = false;
        try {
            if (isFromEstimated) {
                let poolAmount = new eth_wallet_5.BigNumber(routeObj.amountIn);
                if (poolAmount.isZero())
                    return null;
                minReceivedMaxSold = poolAmount.times(1 + slippageTolerance / 100).toNumber();
                fromAmount = poolAmount;
                toAmount = secondInput;
                gasFee = routeObj.gasFee;
            }
            else {
                let poolAmount = new eth_wallet_5.BigNumber(routeObj.amountOut);
                if (poolAmount.isZero())
                    return null;
                minReceivedMaxSold = poolAmount.times(1 - slippageTolerance / 100).toNumber();
                fromAmount = firstInput;
                toAmount = poolAmount;
                gasFee = routeObj.gasFee;
            }
            price = parseFloat(routeObj.price);
            priceSwap = new eth_wallet_5.BigNumber(1).div(routeObj.price).toNumber();
            priceImpact = Number(routeObj.priceImpact) * 100;
            tradeFee = parseFloat(routeObj.tradeFee);
            const commissionAmount = (0, exports.getCommissionAmount)(commissions, fromAmount);
            const contractAddress = commissionAmount.gt(0) ? (0, index_8.getProxyAddress)() : '';
            isApproveButtonShown = await checkIsApproveButtonShown(wallet, firstTokenObject, fromAmount.plus(commissionAmount), market, contractAddress);
        }
        catch (err) {
            console.log('err', err);
            return null;
        }
        return Object.assign(Object.assign({}, routeObj), { price,
            priceSwap,
            fromAmount,
            toAmount,
            priceImpact,
            tradeFee,
            gasFee,
            minReceivedMaxSold,
            isApproveButtonShown });
    }
    function getTradeFeeMap() {
        let tradeFeeMap = {};
        const dexInfoList = (0, index_8.getDexInfoList)().filter(v => v.chainId == (0, index_8.getChainId)());
        for (let dexInfo of dexInfoList) {
            tradeFeeMap[dexInfo.dexCode] = dexInfo.tradeFee;
        }
        return tradeFeeMap;
    }
    exports.getTradeFeeMap = getTradeFeeMap;
    async function getBestAmountInRouteFromAPI(wallet, tokenIn, tokenOut, amountOut, chainId) {
        chainId = (0, index_8.getChainId)();
        let wrappedTokenAddress = getWETH();
        let tradeFeeMap = getTradeFeeMap();
        let network = chainId ? (0, index_8.getNetworkInfo)(chainId) : null;
        let api = (network === null || network === void 0 ? void 0 : network.isTestnet) || (network === null || network === void 0 ? void 0 : network.isDisabled) ? newRouteAPI : routeAPI;
        let routeObjArr = await (0, index_7.getAPI)(api, {
            chainId,
            tokenIn: tokenIn.address ? tokenIn.address : wrappedTokenAddress,
            tokenOut: tokenOut.address ? tokenOut.address : wrappedTokenAddress,
            amountOut: new eth_wallet_5.BigNumber(amountOut).shiftedBy(tokenOut.decimals).toFixed(),
            ignoreHybrid: 1
        });
        if (!routeObjArr)
            return [];
        let bestRouteObjArr = [];
        // let providerConfigByDexId: any = {};
        // getProviderList().filter(v => {!!v.contractInfo && Object.keys(v.contractInfo).includes((chainId!).toString())}).forEach((v, i) => {
        //   if (v.dexId == undefined) return;
        //   providerConfigByDexId[v.dexId] = v;
        // });
        // for (let i = 0; i < routeObjArr.length; i++) {
        //   let routeObj = routeObjArr[i];
        //   routeObj.tokens[0] = tokenIn;
        //   routeObj.tokens[routeObj.tokens.length - 1] = tokenOut;
        //   let dexId = [5, 6].includes(routeObj.dexId) ? 5 : routeObj.dexId;
        //   if (!providerConfigByDexId[dexId]) continue;
        //   let bestRouteObj = {
        //     pairs: routeObj.route.map((v: any) => v.address),
        //     isRegistered: routeObj.route.map((v: any) => v.isRegistered),
        //     market: routeObj.route.map((v: any) => {
        //       let dexId = [5, 6].includes(v.dexId) ? 5 : v.dexId;
        //       return providerConfigByDexId[dexId].key
        //     }),
        //     route: routeObj.tokens,
        //     customDataList: routeObj.route.map((v: any) => {
        //       return {
        //         queueType: v.queueType,
        //         orderIds: v.orderIds,
        //         reserveA: v.reserves.reserve0,
        //         reserveB: v.reserves.reserve1
        //       }
        //     })
        //   };
        //   let amountIn = new BigNumber(routeObj.amountIn).shiftedBy(-tokenIn.decimals);
        //   let swapPrice = new BigNumber(amountIn).div(amountOut);
        //   // TODO: check later
        //   // let isHybridOrQueue = providerConfigByDexId[dexId].key == Market.HYBRID || routeObj.queueType;
        //   let extendedData = await getExtendedRouteObjData(wallet, bestRouteObj, tradeFeeMap, swapPrice, routeObj.queueType);
        //   let provider = providerConfigByDexId[dexId].key
        //   let key = provider + '|' + (routeObj.isDirectRoute ? '0' : '1');
        //   bestRouteObjArr.push({
        //     ...extendedData,
        //     provider,
        //     key,
        //     amountIn,
        //     queueType: routeObj.queueType
        //   });
        // }
        return bestRouteObjArr;
    }
    async function getBestAmountOutRouteFromAPI(wallet, tokenIn, tokenOut, amountIn, chainId) {
        chainId = (0, index_8.getChainId)();
        let wrappedTokenAddress = getWETH();
        let tradeFeeMap = getTradeFeeMap();
        let network = chainId ? (0, index_8.getNetworkInfo)(chainId) : null;
        let api = (network === null || network === void 0 ? void 0 : network.isTestnet) || (network === null || network === void 0 ? void 0 : network.isDisabled) ? newRouteAPI : routeAPI;
        let routeObjArr = await (0, index_7.getAPI)(api, {
            chainId,
            tokenIn: tokenIn.address ? tokenIn.address : wrappedTokenAddress,
            tokenOut: tokenOut.address ? tokenOut.address : wrappedTokenAddress,
            amountIn: new eth_wallet_5.BigNumber(amountIn).shiftedBy(tokenIn.decimals).toFixed(),
            ignoreHybrid: 1
        });
        if (!routeObjArr)
            return [];
        let bestRouteObjArr = [];
        // let providerConfigByDexId: any = {};
        // getProviderList().filter(v => {!!v.contractInfo && Object.keys(v.contractInfo).includes((chainId!).toString())}).forEach((v, i) => {
        //   if (v.dexId == undefined) return;
        //   providerConfigByDexId[v.dexId] = v;
        // });
        // for (let i = 0; i < routeObjArr.length; i++) {
        //   let routeObj = routeObjArr[i];
        //   routeObj.tokens[0] = tokenIn;
        //   routeObj.tokens[routeObj.tokens.length - 1] = tokenOut;
        //   let dexId = [5, 6].includes(routeObj.dexId) ? 5 : routeObj.dexId;
        //   if (!providerConfigByDexId[dexId]) continue;
        //   let bestRouteObj = {
        //     pairs: routeObj.route.map((v: any) => v.address),
        //     isRegistered: routeObj.route.map((v: any) => v.isRegistered),
        //     market: routeObj.route.map((v: any) => {
        //       let dexId = [5, 6].includes(v.dexId) ? 5 : v.dexId;
        //       return providerConfigByDexId[dexId].key;
        //     }),
        //     route: routeObj.tokens,
        //     customDataList: routeObj.route.map((v: any) => {
        //       return {
        //         queueType: v.queueType,
        //         orderIds: v.orderIds,
        //         reserveA: v.reserves.reserve0,
        //         reserveB: v.reserves.reserve1
        //       }
        //     })
        //   };
        //   let amountOut = new BigNumber(routeObj.amountOut).shiftedBy(-tokenOut.decimals);
        //   let swapPrice = new BigNumber(amountIn).div(amountOut);
        //   // let isHybridOrQueue = providerConfigByDexId[dexId].key == Market.HYBRID || routeObj.queueType;
        //   let extendedData = await getExtendedRouteObjData(wallet, bestRouteObj, tradeFeeMap, swapPrice, routeObj.queueType);
        //   let provider = providerConfigByDexId[dexId].key;
        //   let key = provider + '|' + (routeObj.isDirectRoute ? '0' : '1');
        //   bestRouteObjArr.push({
        //     ...extendedData,
        //     provider,
        //     key,
        //     amountOut,
        //     queueType: routeObj.queueType
        //   });
        // }
        return bestRouteObjArr;
    }
    const getAllAvailableRoutes = async (markets, tokenList, tokenIn, tokenOut) => {
        const wallet = eth_wallet_5.Wallet.getClientInstance();
        let getPairPromises = [];
        let availableRoutes = [];
        const getReservesByPair = async (pairAddress, tokenIn, tokenOut) => {
            let reserveObj;
            if (!tokenIn.address)
                tokenIn = getWETH();
            if (!tokenOut.address)
                tokenOut = getWETH();
            let pair = new index_5.Contracts.OSWAP_Pair(wallet, pairAddress);
            let reserves = await pair.getReserves();
            if (new eth_wallet_5.BigNumber(tokenIn.address.toLowerCase()).lt(tokenOut.address.toLowerCase())) {
                reserveObj = {
                    reserveA: reserves._reserve0,
                    reserveB: reserves._reserve1
                };
            }
            else {
                reserveObj = {
                    reserveA: reserves._reserve1,
                    reserveB: reserves._reserve0
                };
            }
            return reserveObj;
        };
        const getPair = async (market, tokenA, tokenB) => {
            if (!tokenA.address)
                tokenA = getWETH();
            if (!tokenB.address)
                tokenB = getWETH();
            let factory = new index_5.Contracts.OSWAP_Factory(wallet, getFactoryAddress(market));
            let pair = await factory.getPair({
                param1: tokenA.address,
                param2: tokenB.address
            });
            return pair;
        };
        let composeAvailableRoutePromise = async (market, tokenIn, tokenOut) => {
            try {
                let pair = await getPair(market, tokenIn, tokenOut);
                if (pair == eth_wallet_5.Utils.nullAddress)
                    return;
                let reserveObj = await getReservesByPair(pair, tokenIn, tokenOut);
                availableRoutes.push(Object.assign({ pair,
                    market,
                    tokenIn,
                    tokenOut }, reserveObj));
            }
            catch (err) {
                console.log('err', err);
            }
        };
        getPairPromises.push(...markets.map(market => composeAvailableRoutePromise(market, tokenIn, tokenOut)));
        for (let i = 0; i < tokenList.length; i++) {
            let hop1 = tokenList[i];
            if (tokenIn.address != hop1.address) {
                getPairPromises.push(...markets.map(market => composeAvailableRoutePromise(market, tokenIn, hop1)));
            }
            if (hop1.address != tokenOut.address) {
                getPairPromises.push(...markets.map(market => composeAvailableRoutePromise(market, hop1, tokenOut)));
            }
            for (let j = 0; j < tokenList.length; j++) {
                let hop2 = tokenList[j];
                if (hop1.address == hop2.address || hop1.address == tokenIn.address ||
                    hop2.address == tokenIn.address || hop1.address == tokenOut.address ||
                    hop2.address == tokenOut.address) {
                    continue;
                }
                getPairPromises.push(...markets.map(market => composeAvailableRoutePromise(market, hop1, hop2)));
            }
        }
        await Promise.all(getPairPromises);
        return availableRoutes;
    };
    const calculateAmountOutByTradeFee = (tradeFeeMap, pairInfo, amountIn) => {
        let tradeFeeObj = tradeFeeMap[pairInfo.market];
        let amountInWithFee = new eth_wallet_5.BigNumber(tradeFeeObj.base).minus(tradeFeeObj.fee).times(amountIn);
        let amtOut = (new eth_wallet_5.BigNumber(pairInfo.reserveB).times(amountInWithFee)).idiv(new eth_wallet_5.BigNumber(pairInfo.reserveA).times(tradeFeeObj.base).plus(amountInWithFee)).toFixed();
        return amtOut;
    };
    const calculateAmountInByTradeFee = (tradeFeeMap, pairInfo, amountOut) => {
        let tradeFeeObj = tradeFeeMap[pairInfo.market];
        let feeMultiplier = new eth_wallet_5.BigNumber(tradeFeeObj.base).minus(tradeFeeObj.fee);
        if (pairInfo.reserveB.lte(amountOut)) {
            return null;
        }
        let amtIn = new eth_wallet_5.BigNumber(pairInfo.reserveA).times(amountOut).times(tradeFeeObj.base).idiv(new eth_wallet_5.BigNumber(pairInfo.reserveB.minus(amountOut)).times(feeMultiplier)).plus(1).toFixed();
        return amtIn;
    };
    const getPathsByTokenIn = (tradeFeeMap, pairInfoList, routeObj, tokenIn) => {
        let routeObjList = [];
        let listItems = pairInfoList.filter(v => v.tokenOut.address == routeObj.route[routeObj.route.length - 1].address && routeObj.route.every((n) => n.address != v.tokenIn.address));
        let getNewAmmRouteObj = (pairInfo, routeObj, amountOut) => {
            let amtIn = calculateAmountInByTradeFee(tradeFeeMap, pairInfo, amountOut);
            if (!amtIn)
                return null;
            let newRouteObj = {
                pairs: [...routeObj.pairs, pairInfo.pair],
                market: [...routeObj.market, pairInfo.market],
                customDataList: [...routeObj.customDataList, {
                        reserveA: pairInfo.reserveA,
                        reserveB: pairInfo.reserveB
                    }],
                route: [...routeObj.route, pairInfo.tokenIn],
                amounts: [...routeObj.amounts, amtIn]
            };
            return newRouteObj;
        };
        for (let i = 0; i < listItems.length; i++) {
            let listItem = listItems[i];
            let lastAmtIn = routeObj.amounts[routeObj.amounts.length - 1];
            let newRouteObj = getNewAmmRouteObj(listItem, routeObj, lastAmtIn); // listItem.market == Market.MIXED_QUEUE ? getNewQueueRouteObj(listItem, routeObj, lastAmtIn) : getNewAmmRouteObj(listItem, routeObj, lastAmtIn);
            if (!newRouteObj)
                continue;
            if (listItem.tokenIn.address == tokenIn.address) {
                routeObjList.push(newRouteObj);
                break;
            }
            else {
                if (newRouteObj.route.length >= 4)
                    continue;
                let childPaths = getPathsByTokenIn(tradeFeeMap, pairInfoList, Object.assign({}, newRouteObj), tokenIn);
                routeObjList.push(...childPaths);
            }
        }
        return routeObjList;
    };
    const getPathsByTokenOut = (tradeFeeMap, pairInfoList, routeObj, tokenOut) => {
        let routeObjList = [];
        let listItems = pairInfoList.filter(v => v.tokenIn.address == routeObj.route[routeObj.route.length - 1].address && routeObj.route.every((n) => n.address != v.tokenOut.address));
        let getNewAmmRouteObj = (pairInfo, routeObj, amountIn) => {
            let amtOut = calculateAmountOutByTradeFee(tradeFeeMap, pairInfo, amountIn);
            let newRouteObj = {
                pairs: [...routeObj.pairs, pairInfo.pair],
                market: [...routeObj.market, pairInfo.market],
                route: [...routeObj.route, pairInfo.tokenOut],
                customDataList: [...routeObj.customDataList, {
                        reserveA: pairInfo.reserveA,
                        reserveB: pairInfo.reserveB
                    }],
                amounts: [...routeObj.amounts, amtOut]
            };
            return newRouteObj;
        };
        for (let i = 0; i < listItems.length; i++) {
            let listItem = listItems[i];
            let lastAmtOut = routeObj.amounts[routeObj.amounts.length - 1];
            let newRouteObj = getNewAmmRouteObj(listItem, routeObj, lastAmtOut); // listItem.market == Market.MIXED_QUEUE ? getNewQueueRouteObj(listItem, routeObj, lastAmtOut) : getNewAmmRouteObj(listItem, routeObj, lastAmtOut);
            if (!newRouteObj)
                continue;
            if (listItem.tokenOut.address == tokenOut.address) {
                routeObjList.push(newRouteObj);
                break;
            }
            else {
                if (newRouteObj.route.length >= 4)
                    continue;
                let childPaths = getPathsByTokenOut(tradeFeeMap, pairInfoList, Object.assign({}, newRouteObj), tokenOut);
                routeObjList.push(...childPaths);
            }
        }
        return routeObjList;
    };
    const getAllExactAmountOutPaths = async (tradeFeeMap, availableRoutes, tokenIn, tokenOut, amountOut) => {
        let allPaths = [];
        amountOut = eth_wallet_5.Utils.toDecimals(amountOut, tokenOut.decimals).toFixed();
        let getAmmRouteObj = (pairInfo) => {
            let amtIn = calculateAmountInByTradeFee(tradeFeeMap, pairInfo, amountOut);
            if (!amtIn)
                return null;
            let routeObj = {
                pairs: [pairInfo.pair],
                market: [pairInfo.market],
                customDataList: [{
                        reserveA: pairInfo.reserveA,
                        reserveB: pairInfo.reserveB
                    }],
                route: [pairInfo.tokenOut, pairInfo.tokenIn],
                amounts: [amtIn]
            };
            return routeObj;
        };
        if (availableRoutes.length == 1) {
            let pairInfo = availableRoutes[0];
            if (pairInfo.tokenIn.address == tokenIn.address && pairInfo.tokenOut.address == tokenOut.address) {
                let routeObj = getAmmRouteObj(pairInfo); // pairInfo.market == Market.MIXED_QUEUE ? getQueueRouteObj(pairInfo) : getAmmRouteObj(pairInfo);
                if (!routeObj)
                    return allPaths;
                allPaths = [routeObj];
            }
        }
        else if (availableRoutes.length > 1) {
            let entryList = availableRoutes.filter((v) => v.tokenOut.address == tokenOut.address);
            for (let i = 0; i < entryList.length; i++) {
                let pairInfo = entryList[i];
                let routeObj = getAmmRouteObj(pairInfo); // pairInfo.market == Market.MIXED_QUEUE ? getQueueRouteObj(pairInfo) : getAmmRouteObj(pairInfo);
                if (!routeObj)
                    continue;
                if ((!pairInfo.tokenIn.address && !tokenIn.address) ||
                    (pairInfo.tokenIn.address && tokenIn.address && pairInfo.tokenIn.address.toLowerCase() == tokenIn.address.toLowerCase())) {
                    allPaths.push(routeObj);
                }
                else {
                    //For the lack of a better way
                    for (let j = 0; j < Object.keys(tradeFeeMap).length; j++) {
                        let market = Object.keys(tradeFeeMap)[j];
                        let routes = availableRoutes.filter(v => v.tokenIn.address != tokenIn.address || v.market == market);
                        allPaths.push(...getPathsByTokenIn(tradeFeeMap, routes, routeObj, tokenIn));
                    }
                }
            }
        }
        let sortedAllPaths = allPaths.sort((a, b) => {
            let amtInA = a.amounts[a.amounts.length - 1];
            let amtInB = b.amounts[b.amounts.length - 1];
            let compare = new eth_wallet_5.BigNumber(amtInA).comparedTo(amtInB);
            return compare || 0;
        });
        return sortedAllPaths;
    };
    const getAllExactAmountInPaths = async (tradeFeeMap, availableRoutes, tokenIn, tokenOut, amountIn) => {
        let allPaths = [];
        amountIn = eth_wallet_5.Utils.toDecimals(amountIn, tokenIn.decimals).toFixed();
        let getAmmRouteObj = (pairInfo) => {
            let amtOut = calculateAmountOutByTradeFee(tradeFeeMap, pairInfo, amountIn);
            let routeObj = {
                pairs: [pairInfo.pair],
                market: [pairInfo.market],
                customDataList: [{
                        reserveA: pairInfo.reserveA,
                        reserveB: pairInfo.reserveB
                    }],
                route: [pairInfo.tokenIn, pairInfo.tokenOut],
                amounts: [amtOut]
            };
            return routeObj;
        };
        if (availableRoutes.length == 1) {
            let pairInfo = availableRoutes[0];
            if (pairInfo.tokenIn.address == tokenIn.address && pairInfo.tokenOut.address == tokenOut.address) {
                let routeObj = getAmmRouteObj(pairInfo); // pairInfo.market == Market.MIXED_QUEUE ? getQueueRouteObj(pairInfo) : getAmmRouteObj(pairInfo);
                if (!routeObj)
                    return allPaths;
                allPaths = [routeObj];
            }
        }
        else if (availableRoutes.length > 1) {
            let entryList = availableRoutes.filter((v) => v.tokenIn.address == tokenIn.address);
            for (let i = 0; i < entryList.length; i++) {
                let pairInfo = entryList[i];
                let routeObj = getAmmRouteObj(pairInfo); // pairInfo.market == Market.MIXED_QUEUE ? getQueueRouteObj(pairInfo) : getAmmRouteObj(pairInfo);
                if (!routeObj)
                    continue;
                if ((!pairInfo.tokenOut.address && !tokenOut.address) ||
                    (pairInfo.tokenOut.address && tokenOut.address && pairInfo.tokenOut.address.toLowerCase() == tokenOut.address.toLowerCase())) {
                    allPaths.push(routeObj);
                }
                else {
                    //For the lack of a better way
                    for (let j = 0; j < Object.keys(tradeFeeMap).length; j++) {
                        let market = Object.keys(tradeFeeMap)[j];
                        let routes = availableRoutes.filter(v => v.tokenOut.address != tokenOut.address || v.market == market);
                        allPaths.push(...getPathsByTokenOut(tradeFeeMap, routes, routeObj, tokenOut));
                    }
                }
            }
        }
        let sortedAllPaths = allPaths.sort((a, b) => {
            let lastAmtOutA = a.amounts[a.amounts.length - 1];
            let lastAmtOutB = b.amounts[b.amounts.length - 1];
            if (new eth_wallet_5.BigNumber(lastAmtOutA).gt(lastAmtOutB)) {
                return -1;
            }
            else if (new eth_wallet_5.BigNumber(lastAmtOutA).lt(lastAmtOutB)) {
                return 1;
            }
            return 0;
        });
        return sortedAllPaths;
    };
    const getBestAmountInRoute = async (markets, tokenIn, tokenOut, amountOut, tokenList) => {
        let allAvailableRoutes = await getAllAvailableRoutes(markets, tokenList, tokenIn, tokenOut);
        if (allAvailableRoutes.length == 0)
            return null;
        let wallet = eth_wallet_5.Wallet.getClientInstance();
        let tradeFeeMap = getTradeFeeMap();
        let allPaths = await getAllExactAmountOutPaths(tradeFeeMap, allAvailableRoutes, tokenIn, tokenOut, amountOut);
        if (allPaths.length == 0) {
            return null;
        }
        let bestRouteObj = {
            pairs: allPaths[0].pairs.reverse(),
            market: allPaths[0].market.reverse(),
            amounts: allPaths[0].amounts.reverse(),
            route: allPaths[0].route.reverse(),
            customDataList: allPaths[0].customDataList.reverse()
        };
        let tokenLowestIn = bestRouteObj.amounts[0];
        let lowestIn = eth_wallet_5.Utils.fromDecimals(tokenLowestIn, tokenIn.decimals).toFixed();
        let swapPrice = new eth_wallet_5.BigNumber(lowestIn).div(amountOut);
        let extendedData = await getExtendedRouteObjData(wallet, bestRouteObj, tradeFeeMap, swapPrice, true);
        return Object.assign(Object.assign({}, extendedData), { amountIn: lowestIn });
    };
    const getBestAmountOutRoute = async (markets, tokenIn, tokenOut, amountIn, tokenList, isHybrid) => {
        let allAvailableRoutes = await getAllAvailableRoutes(markets, tokenList, tokenIn, tokenOut);
        if (allAvailableRoutes.length == 0) {
            return null;
        }
        let wallet = eth_wallet_5.Wallet.getClientInstance();
        let tradeFeeMap = getTradeFeeMap();
        let allPaths = await getAllExactAmountInPaths(tradeFeeMap, allAvailableRoutes, tokenIn, tokenOut, amountIn);
        if (allPaths.length == 0) {
            return null;
        }
        let bestRouteObj = allPaths[0];
        let tokenHighestOut = bestRouteObj.amounts[bestRouteObj.amounts.length - 1];
        let highestOut = eth_wallet_5.Utils.fromDecimals(tokenHighestOut, tokenOut.decimals).toFixed();
        let swapPrice = new eth_wallet_5.BigNumber(amountIn).div(highestOut);
        let extendedData = await getExtendedRouteObjData(wallet, bestRouteObj, tradeFeeMap, swapPrice, isHybrid);
        return Object.assign(Object.assign({}, extendedData), { amountOut: highestOut });
    };
    async function getExtendedRouteObjData(wallet, bestRouteObj, tradeFeeMap, swapPrice, isHybridOrQueue) {
        let currPrice = new eth_wallet_5.BigNumber(0);
        if (bestRouteObj.customDataList.length > 0) {
            currPrice = bestRouteObj.market.map((v, i) => {
                let customDataObj = bestRouteObj.customDataList[i];
                let reserveA = new eth_wallet_5.BigNumber(customDataObj.reserveA).shiftedBy(-bestRouteObj.route[i].decimals);
                let reserveB = new eth_wallet_5.BigNumber(customDataObj.reserveB).shiftedBy(-bestRouteObj.route[i + 1].decimals);
                return reserveA.div(reserveB);
            })
                .reduce((prev, curr) => prev.times(curr));
        }
        let fee = new eth_wallet_5.BigNumber(1).minus(bestRouteObj.market.map((market) => {
            let tradeFeeObj = tradeFeeMap[market];
            let tradeFee = new eth_wallet_5.BigNumber(tradeFeeObj.fee).div(tradeFeeObj.base);
            return new eth_wallet_5.BigNumber(1).minus(tradeFee);
        }).reduce((a, b) => a.times(b)));
        let priceImpact = swapPrice.minus(currPrice).div(swapPrice).minus(fee).toFixed();
        let extendedRouteObj = {
            pairs: bestRouteObj.pairs,
            market: bestRouteObj.market,
            bestRoute: bestRouteObj.route,
            priceImpact: priceImpact,
            price: swapPrice.toFixed(),
            tradeFee: fee.toFixed(),
        };
        return extendedRouteObj;
    }
    exports.getExtendedRouteObjData = getExtendedRouteObjData;
    async function getAllRoutesData(firstTokenObject, secondTokenObject, firstInput, secondInput, isFromEstimated, useAPI, commissions) {
        var _a, _b, _c;
        let wallet = eth_wallet_5.Wallet.getClientInstance();
        let resultArr = [];
        if (firstTokenObject && secondTokenObject && (firstInput.gt(0) || secondInput.gt(0))) {
            let routeDataArr = [];
            if (useAPI) {
                if (isFromEstimated) {
                    routeDataArr = await getBestAmountInRouteFromAPI(wallet, firstTokenObject, secondTokenObject, secondInput.toString());
                }
                else {
                    routeDataArr = await getBestAmountOutRouteFromAPI(wallet, firstTokenObject, secondTokenObject, firstInput.toString());
                }
            }
            if (isFromEstimated) {
                if (routeDataArr.length == 0) {
                    const providerKey = (_a = (0, index_8.getProviderList)()[0]) === null || _a === void 0 ? void 0 : _a.key;
                    let routeObj = await getBestAmountInRoute(providerKey ? [providerKey] : [], firstTokenObject, secondTokenObject, secondInput.toString(), []);
                    if (routeObj && routeObj.market.length == 1) {
                        let price = parseFloat(routeObj.price);
                        let priceSwap = new eth_wallet_5.BigNumber(1).div(routeObj.price).toNumber();
                        let priceImpact = Number(routeObj.priceImpact) * 100;
                        let tradeFee = parseFloat(routeObj.tradeFee);
                        const provider = routeObj.market[0];
                        let key = provider + '|0';
                        routeDataArr.push(Object.assign(Object.assign({}, routeObj), { price,
                            priceSwap,
                            priceImpact,
                            tradeFee,
                            key,
                            provider }));
                    }
                }
            }
            else {
                if (routeDataArr.length == 0) {
                    const providerKey = (_b = (0, index_8.getProviderList)()[0]) === null || _b === void 0 ? void 0 : _b.key;
                    let routeObj = await getBestAmountOutRoute(providerKey ? [providerKey] : [], firstTokenObject, secondTokenObject, firstInput.toString(), [], false);
                    if (routeObj && routeObj.market.length == 1) {
                        let price = parseFloat(routeObj.price);
                        let priceSwap = new eth_wallet_5.BigNumber(1).div(routeObj.price).toNumber();
                        let priceImpact = Number(routeObj.priceImpact) * 100;
                        let tradeFee = parseFloat(routeObj.tradeFee);
                        const provider = routeObj.market[0];
                        let key = provider + '|0';
                        routeDataArr.push(Object.assign(Object.assign({}, routeObj), { price,
                            priceSwap,
                            priceImpact,
                            tradeFee,
                            key,
                            provider }));
                    }
                }
            }
            if (routeDataArr && routeDataArr.length > 0) {
                for (let i = 0; i < routeDataArr.length; i++) {
                    let optionObj = routeDataArr[i];
                    const provider = ((_c = (0, index_8.getProviderList)().find(item => item.key === optionObj.provider)) === null || _c === void 0 ? void 0 : _c.key) || '';
                    let routeObj = await composeRouteObj(wallet, optionObj, provider, firstTokenObject, firstInput, secondInput, isFromEstimated, commissions);
                    if (!routeObj)
                        continue;
                    resultArr.push(routeObj);
                }
            }
        }
        return resultArr;
    }
    exports.getAllRoutesData = getAllRoutesData;
    const getCurrentCommissions = (commissions) => {
        return (commissions || []).filter(v => v.chainId == (0, index_8.getChainId)());
    };
    exports.getCurrentCommissions = getCurrentCommissions;
    const getCommissionAmount = (commissions, amount) => {
        const _commissions = (commissions || []).filter(v => v.chainId == (0, index_8.getChainId)()).map(v => {
            return {
                to: v.walletAddress,
                amount: amount.times(v.share)
            };
        });
        const commissionsAmount = _commissions.length ? _commissions.map(v => v.amount).reduce((a, b) => a.plus(b)) : new eth_wallet_5.BigNumber(0);
        return commissionsAmount;
    };
    exports.getCommissionAmount = getCommissionAmount;
    const AmmTradeExactIn = async function (wallet, market, routeTokens, amountIn, amountOutMin, toAddress, deadline, feeOnTransfer, commissions) {
        if (routeTokens.length < 2) {
            return null;
        }
        let tokenIn = routeTokens[0];
        let tokenOut = routeTokens[routeTokens.length - 1];
        let routerAddress = getRouterAddress(market);
        let addresses = [];
        let wrappedTokenAddress = getWrappedTokenAddress();
        for (let i = 0; i < routeTokens.length; i++) {
            addresses.push(routeTokens[i].address || wrappedTokenAddress);
        }
        let receipt;
        const proxyAddress = (0, index_8.getProxyAddress)();
        const proxy = new index_6.Contracts.Proxy(wallet, proxyAddress);
        const amount = tokenIn.address ? eth_wallet_5.Utils.toDecimals(amountIn, tokenIn.decimals).dp(0) : eth_wallet_5.Utils.toDecimals(amountIn).dp(0);
        const _amountOutMin = eth_wallet_5.Utils.toDecimals(amountOutMin, tokenOut.decimals).dp(0);
        const _commissions = (commissions || []).filter(v => v.chainId == (0, index_8.getChainId)()).map(v => {
            return {
                to: v.walletAddress,
                amount: amount.times(v.share).dp(0)
            };
        });
        const commissionsAmount = _commissions.length ? _commissions.map(v => v.amount).reduce((a, b) => a.plus(b)).dp(0) : new eth_wallet_5.BigNumber(0);
        if (!tokenIn.address) {
            const params = {
                amountOutMin: _amountOutMin,
                path: addresses,
                to: toAddress,
                deadline
            };
            let executeSwapOptions = {
                params,
                exactType: 'exactIn',
                feeOnTransfer,
                tokenInType: 'ETH',
                tokenOutType: 'ERC20',
                txOptions: {
                    value: amount
                }
            };
            if (_commissions.length) {
                let txData = await (0, scom_dex_list_1.getRouterSwapTxData)(wallet.chainId, market, executeSwapOptions);
                receipt = await proxy.proxyCall({
                    target: routerAddress,
                    tokensIn: [
                        {
                            token: eth_wallet_5.Utils.nullAddress,
                            amount: amount.plus(commissionsAmount),
                            directTransfer: false,
                            commissions: _commissions
                        }
                    ],
                    data: txData,
                    to: wallet.address,
                    tokensOut: []
                });
            }
            else {
                receipt = await (0, scom_dex_list_1.executeRouterSwap)(wallet.chainId, market, executeSwapOptions);
            }
        }
        else {
            const tokensIn = {
                token: tokenIn.address,
                amount: amount.plus(commissionsAmount),
                directTransfer: false,
                commissions: _commissions
            };
            const params = {
                amountIn: amount,
                amountOutMin: _amountOutMin,
                path: addresses,
                to: toAddress,
                deadline
            };
            let executeSwapOptions = {
                params,
                exactType: 'exactIn',
                feeOnTransfer,
                tokenInType: 'ERC20',
                tokenOutType: !tokenOut.address ? 'ETH' : 'ERC20'
            };
            if (_commissions.length) {
                let txData = await (0, scom_dex_list_1.getRouterSwapTxData)(wallet.chainId, market, executeSwapOptions);
                receipt = await proxy.proxyCall({
                    target: routerAddress,
                    tokensIn: [
                        tokensIn
                    ],
                    data: txData,
                    to: wallet.address,
                    tokensOut: []
                });
            }
            else {
                receipt = await (0, scom_dex_list_1.executeRouterSwap)(wallet.chainId, market, executeSwapOptions);
            }
        }
        return receipt;
    };
    const AmmTradeExactOut = async function (wallet, market, routeTokens, amountOut, amountInMax, toAddress, deadline, commissions) {
        if (routeTokens.length < 2) {
            return null;
        }
        let tokenIn = routeTokens[0];
        let tokenOut = routeTokens[routeTokens.length - 1];
        let routerAddress = getRouterAddress(market);
        let addresses = [];
        let wrappedTokenAddress = getWrappedTokenAddress();
        for (let i = 0; i < routeTokens.length; i++) {
            addresses.push(routeTokens[i].address || wrappedTokenAddress);
        }
        let receipt;
        const proxyAddress = (0, index_8.getProxyAddress)();
        const proxy = new index_6.Contracts.Proxy(wallet, proxyAddress);
        const _amountInMax = eth_wallet_5.Utils.toDecimals(amountInMax, tokenIn.decimals).dp(0);
        const _amountOut = eth_wallet_5.Utils.toDecimals(amountOut, tokenOut.decimals).dp(0);
        const _commissions = (commissions || []).filter(v => v.chainId == (0, index_8.getChainId)()).map(v => {
            return {
                to: v.walletAddress,
                amount: _amountInMax.times(v.share).dp(0)
            };
        });
        const commissionsAmount = _commissions.length ? _commissions.map(v => v.amount).reduce((a, b) => a.plus(b)).dp(0) : new eth_wallet_5.BigNumber(0);
        if (!tokenIn.address) {
            const params = {
                amountOut: _amountOut,
                path: addresses,
                to: toAddress,
                deadline
            };
            let executeSwapOptions = {
                params,
                exactType: 'exactOut',
                feeOnTransfer: false,
                tokenInType: 'ETH',
                tokenOutType: 'ERC20',
                txOptions: {
                    value: _amountInMax
                }
            };
            if (_commissions.length) {
                let txData = await (0, scom_dex_list_1.getRouterSwapTxData)(wallet.chainId, market, executeSwapOptions);
                receipt = await proxy.proxyCall({
                    target: routerAddress,
                    tokensIn: [
                        {
                            token: eth_wallet_5.Utils.nullAddress,
                            amount: _amountInMax.plus(commissionsAmount),
                            directTransfer: false,
                            commissions: _commissions
                        }
                    ],
                    data: txData,
                    to: wallet.address,
                    tokensOut: []
                });
            }
            else {
                receipt = await (0, scom_dex_list_1.executeRouterSwap)(wallet.chainId, market, executeSwapOptions);
            }
        }
        else {
            const tokensIn = {
                token: tokenIn.address,
                amount: _amountInMax.plus(commissionsAmount),
                directTransfer: false,
                commissions: _commissions
            };
            const params = {
                amountOut: _amountOut,
                amountInMax: _amountInMax,
                path: addresses,
                to: toAddress,
                deadline
            };
            let executeSwapOptions = {
                params,
                exactType: 'exactOut',
                feeOnTransfer: false,
                tokenInType: 'ERC20',
                tokenOutType: !tokenOut.address ? 'ETH' : 'ERC20'
            };
            if (_commissions.length) {
                let txData = await (0, scom_dex_list_1.getRouterSwapTxData)(wallet.chainId, market, executeSwapOptions);
                receipt = await proxy.proxyCall({
                    target: routerAddress,
                    tokensIn: [
                        tokensIn
                    ],
                    data: txData,
                    to: wallet.address,
                    tokensOut: [
                        tokenOut.address
                    ]
                });
            }
            else {
                receipt = await (0, scom_dex_list_1.executeRouterSwap)(wallet.chainId, market, executeSwapOptions);
            }
        }
        return receipt;
    };
    const executeSwap = async (swapData) => {
        var _a;
        let receipt = null;
        const wallet = eth_wallet_5.Wallet.getClientInstance();
        try {
            const toAddress = wallet.account.address;
            const slippageTolerance = (0, index_8.getSlippageTolerance)();
            const transactionDeadlineInMinutes = (0, index_8.getTransactionDeadline)();
            const transactionDeadline = Math.floor(Date.now() / 1000 + transactionDeadlineInMinutes * 60);
            const market = ((_a = (0, index_8.getProviderList)().find(item => item.key === swapData.provider)) === null || _a === void 0 ? void 0 : _a.key) || '';
            if (swapData.isFromEstimated) {
                const amountInMax = swapData.fromAmount.times(1 + slippageTolerance / 100);
                receipt = await AmmTradeExactOut(wallet, market, swapData.routeTokens, swapData.toAmount.toString(), amountInMax.toString(), toAddress, transactionDeadline, swapData.commissions);
            }
            else {
                const amountOutMin = swapData.toAmount.times(1 - slippageTolerance / 100);
                receipt = await AmmTradeExactIn(wallet, market, swapData.routeTokens, swapData.fromAmount.toString(), amountOutMin.toString(), toAddress, transactionDeadline, false, swapData.commissions);
            }
        }
        catch (error) {
            return { receipt: null, error: error };
        }
        return { receipt, error: null };
    };
    exports.executeSwap = executeSwap;
    //For testing only
    const setERC20AllowanceToZero = async (token, spenderAddress) => {
        let wallet = eth_wallet_5.Wallet.getClientInstance();
        let erc20 = new index_5.Contracts.ERC20(wallet, token.address);
        let receipt = await erc20.approve({
            spender: spenderAddress,
            amount: 0
        });
        return receipt;
    };
    exports.setERC20AllowanceToZero = setERC20AllowanceToZero;
    var approvalModel;
    const getApprovalModelAction = async (options) => {
        const approvalOptions = Object.assign(Object.assign({}, options), { spenderAddress: '' });
        approvalModel = new index_7.ERC20ApprovalModel(approvalOptions);
        let approvalModelAction = approvalModel.getAction();
        return approvalModelAction;
    };
    exports.getApprovalModelAction = getApprovalModelAction;
    const setApprovalModalSpenderAddress = (market, contractAddress) => {
        approvalModel.spenderAddress = contractAddress || getRouterAddress(market);
    };
    exports.setApprovalModalSpenderAddress = setApprovalModalSpenderAddress;
    __exportStar(helper_2, exports);
});
define("@scom/scom-swap/price-info/priceInfo.css.ts", ["require", "exports", "@ijstech/components"], function (require, exports, components_5) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    const Theme = components_5.Styles.Theme.ThemeVars;
    components_5.Styles.cssRule('.price-info', {
        display: 'flex',
        flexDirection: 'column',
        $nest: {
            'i-hstack': {
                $nest: {
                    '&> i-label:first-child': {
                        marginRight: '0.5rem',
                        opacity: 0.75
                    },
                    'i-icon.icon-tooltip': {
                        opacity: 0.75,
                        fill: Theme.text.primary,
                        $nest: {
                            'svg': {
                                fill: `${Theme.text.primary} !important`
                            }
                        }
                    }
                }
            },
            '.rounded-icon': {
                display: 'inline-flex',
                padding: 0
            }
        }
    });
});
define("@scom/scom-swap/price-info/index.tsx", ["require", "exports", "@ijstech/components", "@scom/scom-swap/price-info/priceInfo.css.ts"], function (require, exports, components_6) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.PriceInfo = void 0;
    ;
    let PriceInfo = class PriceInfo extends components_6.Module {
        constructor(parent, options) {
            super(parent, options);
            this.renderItems = async () => {
                if (this.priceContent.children.length === this.Items.length) {
                    this.updateItems();
                    return;
                }
                this.priceContent.innerHTML = '';
                for (let i = 0; i < this.Items.length; i++) {
                    const item = this.Items[i];
                    const row = new components_6.HStack();
                    row.horizontalAlignment = "space-between";
                    row.verticalAlignment = "center";
                    row.padding = { top: '0.25rem', bottom: '0.25rem', left: 0, right: 0 };
                    if (item.isHidden) {
                        row.classList.add('hidden');
                    }
                    const titleLabel = new components_6.Label(row, { caption: item.title });
                    row.appendChild(titleLabel);
                    if (item.tooltip) {
                        const iconTooltip = this.renderIconTooltip(row, item);
                        row.appendChild(await iconTooltip);
                    }
                    const valueLabel = new components_6.Label(row, { caption: item.value });
                    valueLabel.classList.add("ml-auto");
                    row.appendChild(valueLabel);
                    if (item.isToggleShown) {
                        const image = this.onRenderToggleBtn(row);
                        row.appendChild(image);
                    }
                    this.priceContent.appendChild(row);
                }
            };
            this.onRenderToggleBtn = (parent) => {
                const image = new components_6.Icon(parent, {
                    width: 18,
                    height: 18,
                    name: 'arrows-alt-v'
                });
                image.classList.add("rounded-icon");
                image.style.marginLeft = "5px";
                image.style.transform = "rotate(90deg)";
                image.onClick = (source, event) => {
                    event.stopPropagation();
                    if (this.onTogglePrice)
                        this.onTogglePrice(this);
                };
                return image;
            };
            this.renderIconTooltip = async (parent, item) => {
                const iconTooltip = await components_6.Icon.create();
                iconTooltip.classList.add('icon-tooltip');
                iconTooltip.name = 'question-circle';
                iconTooltip.width = 15;
                iconTooltip.height = 15;
                if (item.onClick) {
                    iconTooltip.classList.add('pointer');
                    iconTooltip.tooltip.content = 'Click to view details';
                    iconTooltip.tooltip.placement = 'right';
                    iconTooltip.tooltip.maxWidth = '270px';
                    iconTooltip.onClick = item.onClick;
                }
                else {
                    iconTooltip.tooltip.content = item.tooltip;
                    iconTooltip.tooltip.placement = 'right';
                    iconTooltip.tooltip.maxWidth = '270px';
                }
                return iconTooltip;
            };
            this.updateItems = async () => {
                for (let i = 0; i < this.Items.length; i++) {
                    const item = this.Items[i];
                    const row = this.priceContent.children[i];
                    const iconTooltip = row.querySelector('.icon-tooltip');
                    const titleLabel = row.firstChild;
                    const valueLabel = row.children[iconTooltip ? 2 : 1];
                    if ((titleLabel === null || titleLabel === void 0 ? void 0 : titleLabel.caption) && item.title != titleLabel.caption) {
                        titleLabel.caption = item.title;
                    }
                    if ((valueLabel === null || valueLabel === void 0 ? void 0 : valueLabel.caption) && item.value != valueLabel.caption) {
                        valueLabel.caption = item.value;
                    }
                    if (iconTooltip) {
                        row.removeChild(iconTooltip);
                    }
                    if (item.tooltip) {
                        const _iconTooltip = this.renderIconTooltip(row, item);
                        row.insertBefore(await _iconTooltip, row.children[1]);
                    }
                    if (item.isToggleShown && row.children.length <= 2) {
                        const image = this.onRenderToggleBtn(row);
                        row.appendChild(image);
                    }
                    else if (!item.isToggleShown && row.children.length > 2 && !item.tooltip) {
                        row.removeChild(row.children[2]);
                    }
                    setTimeout(function () {
                        const iconTooltips = row.querySelectorAll(".icon-tooltip");
                        if (iconTooltips && iconTooltips.length > 1) {
                            row.removeChild(iconTooltips[1]);
                        }
                    }, 2000);
                }
            };
        }
        get Items() {
            return this._items;
        }
        set Items(value) {
            this._items = value;
            this.renderItems();
        }
        init() {
            super.init();
        }
        render() {
            return (this.$render("i-panel", { class: "price-info", width: "auto" },
                this.$render("i-panel", { id: "priceContent" })));
        }
    };
    PriceInfo = __decorate([
        (0, components_6.customElements)('i-scom-swap-price-info')
    ], PriceInfo);
    exports.PriceInfo = PriceInfo;
});
define("@scom/scom-swap/token-selection/tokenSelection.css.ts", ["require", "exports", "@ijstech/components"], function (require, exports, components_7) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    const Theme = components_7.Styles.Theme.ThemeVars;
    components_7.Styles.cssRule('.token-selection', {
        $nest: {
            '#tokenSearch': {
                width: '100% !important',
            },
            '.token-agree-input': {
                $nest: {
                    '.i-checkbox_label': {
                        fontSize: '1.5rem',
                        color: '#f6c958',
                        width: '150px !important'
                    },
                    '.checkmark': {
                        height: '30px',
                        width: '30px',
                        background: 'none',
                        border: `3px solid #6573c3`,
                    },
                    '.checkmark:after': {
                        border: `3px solid #6573c3`,
                        height: '16px',
                        left: '7.5px',
                        top: '0px',
                        width: '7px',
                        borderLeft: 0,
                        borderTop: 0,
                    }
                }
            },
            '.btn-source-panel': {
                padding: '5px',
                display: 'inline-block',
                background: 'linear-gradient(90deg, #a8327f 0%, #d4626a 100%)',
                borderRadius: '5px',
            },
            '.token-import-input': {
                width: '100%',
                $nest: {
                    'input': {
                        width: '100%',
                        background: 'none',
                        color: 'blue',
                        border: 'none',
                        fontSize: '1rem',
                        margin: '5px 0',
                    }
                }
            },
            '.pnl-token-import': {
                border: `2px solid #6573c3`,
                borderRadius: '0.75rem',
                margin: '1rem 0',
                padding: '1.25rem 1rem 1rem'
            },
            '.i-modal_header > i-icon': {
                fill: `#F15E61 !important`
            },
            'i-icon': {
                display: 'inline-block'
            },
            '.btn-import': {
                background: 'linear-gradient(90deg, #a8327f 0%, #d4626a 100%)',
                borderRadius: '5px',
                color: Theme.text.primary,
                fontSize: '1rem',
                padding: '0.25rem 1.25rem'
            },
            '::-webkit-scrollbar': {
                width: '3px',
            },
            '::-webkit-scrollbar-thumb': {
                background: Theme.colors.primary.main,
                borderRadius: '5px',
            },
            '.ml-auto': {
                marginLeft: 'auto',
            },
            '.custom-btn': {
                display: 'flex',
                alignItems: 'center',
                width: 'max-content',
                padding: '0.25rem 0.5rem',
                boxShadow: 'none',
                background: 'linear-gradient(90deg, #a8327f 0%, #d4626a 100%)',
                $nest: {
                    '&:hover': {
                        background: 'linear-gradient(90deg, #a8327f 0%, #d4626a 100%)',
                        opacity: .9
                    },
                    '&.disabled': {
                        background: 'transparent linear-gradient(270deg,#351f52,#552a42) 0% 0% no-repeat padding-box',
                        opacity: 1
                    },
                    '> i-icon': {
                        marginRight: '0',
                        height: '18px !important',
                    },
                    '> i-image': {
                        lineHeight: 'initial',
                        marginRight: '0.5rem',
                    },
                    '&.has-token': {
                        background: 'transparent',
                        fontWeight: 'bold',
                        color: '#f6c958',
                        paddingRight: '0',
                        $nest: {
                            '> i-icon': {
                                marginRight: '-7px',
                                fill: Theme.colors.primary.main,
                            }
                        }
                    },
                },
            },
            '#btnMax': {
                marginRight: '0.25rem',
            },
            '#btnToken': {
                background: Theme.background.main,
                color: Theme.text.primary,
                height: '40px',
                width: '100%',
                padding: '0.5rem 0.75rem',
                maxWidth: '300px',
                borderRadius: '12px',
                $nest: {
                    'i-icon': {
                        marginLeft: '0.25rem',
                    },
                }
            },
            '.bg-modal': {
                $nest: {
                    '.modal': {
                        background: Theme.background.modal,
                        width: 500,
                        maxWidth: '100%',
                        padding: '0.75rem 1rem',
                        borderRadius: '1rem',
                        color: '#f15e61',
                        marginTop: 40
                    },
                }
            },
            '#tokenImportModal.bg-modal .modal': {
                width: 400,
            },
            '#tokenSelectionModal': {
                $nest: {
                    '.i-modal_header': {
                        marginBottom: '1.5rem',
                        paddingBottom: '0.5rem',
                        borderBottom: `2px solid #F15E61`,
                        color: Theme.colors.primary.main,
                        fontSize: '1.25rem',
                        fontWeight: 700,
                    },
                    '.i-modal_header > span': {
                        color: Theme.colors.primary.main,
                    },
                    // '.i-modal_header > i-icon': {
                    //   fill: `#F15E61 !important`
                    // },
                    '.search': {
                        position: 'relative',
                        marginBottom: '1.5rem',
                        $nest: {
                            'i-icon': {
                                position: 'absolute',
                                top: 'calc(50% - 8px)',
                                left: '1rem',
                                transform: 'rotate(90deg)',
                                opacity: 0.7
                            },
                            'i-input': {
                                width: '100%'
                            },
                            'i-input > input': {
                                width: '100%',
                                height: 'auto !important',
                                padding: '1rem 1.5rem 1rem 2.25rem',
                                borderRadius: '0.5rem',
                                border: '2px solid #2a3675',
                                background: 'transparent',
                                color: Theme.text.primary,
                                fontSize: 'inherit',
                            }
                        }
                    },
                    '.token-header': {
                        display: 'flex',
                        justifyContent: 'space-between',
                        alignItems: 'center',
                        marginBlock: '0.5rem',
                        $nest: {
                            'i-label *': {
                                color: Theme.colors.primary.main,
                                fontSize: '1rem',
                            },
                            '.token-section': {
                                position: 'relative',
                                cursor: 'pointer',
                            },
                            'i-icon': {
                                width: '10px',
                                height: '14px',
                                display: 'flex',
                                fill: '#FFFFFF',
                                position: 'absolute',
                                right: '0',
                            },
                            '.icon-sort-up': {
                                top: '2px',
                            },
                            '.icon-sort-down': {
                                bottom: '2px',
                            },
                            '.icon-sorted': {
                                fill: Theme.colors.primary.main,
                            }
                        }
                    },
                    '.common-token': {
                        $nest: {
                            'i-grid-layout': {
                                margin: '0.5rem 0 0',
                                alignItems: 'center',
                                justifyContent: 'unset'
                            },
                            '.grid-item': {
                                padding: '0.35rem 0.5rem',
                                borderRadius: '1rem',
                                border: '2px solid transparent',
                                cursor: 'pointer',
                                $nest: {
                                    '&:hover': {
                                        borderColor: Theme.colors.primary.main
                                    },
                                    'i-image': {
                                        marginRight: '0.5rem'
                                    },
                                    'i-label': {
                                        overflow: 'hidden'
                                    },
                                }
                            },
                        }
                    },
                    '.token-list': {
                        margin: '0.5rem -0.5rem',
                        maxHeight: '45vh',
                        overflowY: 'auto',
                        $nest: {
                            '.token-info': {
                                display: 'flex',
                                flexDirection: 'column',
                                fontSize: '1rem',
                                marginRight: '0.5rem',
                                textAlign: 'left'
                            },
                            '.token-item': {
                                padding: '0.5rem',
                                overflow: 'unset',
                                $nest: {
                                    '&:hover': {
                                        background: 'linear-gradient(254.8deg,rgba(231,91,102,.1) -8.08%,rgba(181,32,130,.1) 84.35%) !important'
                                    },
                                    'i-image': {
                                        marginRight: '0.5rem'
                                    },
                                    '&:not(:first-child)': {
                                        marginTop: 0
                                    },
                                    'i-label': {
                                        color: Theme.text.primary
                                    }
                                }
                            },
                            '.token-name i-label > *': {
                                fontSize: '0.75rem',
                                marginRight: '0.5rem',
                                color: '#f50057'
                            }
                        }
                    }
                }
            },
            '@media screen and (max-width: 425px)': {
                $nest: {
                    '.common-list': {
                        gridTemplateColumns: 'repeat(3, 1fr) !important',
                    }
                }
            }
        }
    });
});
define("@scom/scom-swap/token-selection/importToken.tsx", ["require", "exports", "@ijstech/components", "@ijstech/eth-wallet", "@scom/scom-swap/store/index.ts", "@scom/scom-token-list"], function (require, exports, components_8, eth_wallet_6, index_9, scom_token_list_4) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.ImportToken = void 0;
    ;
    let ImportToken = class ImportToken extends components_8.Module {
        constructor(parent, options) {
            super(parent, options);
            this._state = {
                address: '',
                name: ''
            };
            this.$eventBus = components_8.application.EventBus;
        }
        ;
        set token(value) {
            this._token = value;
            this.updateState();
        }
        get token() {
            return this._token;
        }
        updateState() {
            this._state.address = this.token.address || '';
            this._state.name = this.token.name || '';
        }
        closeModal() {
            this.importModal.visible = false;
        }
        showModal() {
            this.importModal.visible = true;
        }
        async onImportToken(source, event) {
            event.stopPropagation();
            const tokenObj = this.token;
            (0, index_9.addUserTokens)(tokenObj);
            scom_token_list_4.tokenStore.updateTokenMapData();
            await scom_token_list_4.tokenStore.updateAllTokenBalances();
            this.$eventBus.dispatch("emitNewToken" /* EventId.EmitNewToken */, tokenObj);
            if (typeof this.onUpdate === 'function') {
                this.onUpdate(tokenObj);
            }
            this.closeModal();
        }
        onHandleCheck(source, event) {
            this.importBtn.enabled = source.checked;
        }
        viewContract() {
            const chainId = eth_wallet_6.Wallet.getClientInstance().chainId;
            (0, index_9.viewOnExplorerByAddress)(chainId, this._state.address);
        }
        async init() {
            super.init();
            this.importModal.onClose = () => {
                this.tokenAgreeCheckBox.checked = false;
                this.importBtn.enabled = false;
            };
        }
        render() {
            return (this.$render("i-modal", { id: "importModal", class: "bg-modal", title: "Select Token", closeIcon: { name: 'times' } },
                this.$render("i-panel", { class: "pnl-token-import" },
                    this.$render("i-panel", null,
                        this.$render("i-icon", { name: "question", class: "cicrle", fill: "#e83e8c", width: 15, height: 15, margin: { right: 3 } }),
                        this.$render("i-label", { caption: this._state.name })),
                    this.$render("i-hstack", { margin: { top: 5, bottom: 5 } },
                        this.$render("i-label", { caption: this._state.address, font: { color: '#1890ff' }, class: "pointer", onClick: () => this.viewContract() })),
                    this.$render("i-panel", { class: "btn-source-panel" },
                        this.$render("i-icon", { name: "exclamation-triangle", margin: { right: 3 }, fill: "#fff", width: 15, height: 15 }),
                        this.$render("i-label", { caption: "Unknow Source" }))),
                this.$render("i-panel", { class: "pnl-token-import" },
                    this.$render("i-hstack", { horizontalAlignment: "center", margin: { bottom: 5 } },
                        this.$render("i-icon", { name: "exclamation-triangle", margin: { right: 3 }, fill: "#e83e8c", width: 30, height: 30 })),
                    this.$render("i-hstack", { horizontalAlignment: "center", class: "text-center", margin: { bottom: 5 } },
                        this.$render("i-label", { font: { bold: true }, caption: "Trade at your own risk!" })),
                    this.$render("i-hstack", { horizontalAlignment: "center", class: "text-center", margin: { bottom: 5 } },
                        this.$render("i-label", { caption: "Anyone can create a token, including creating fake versions of existing token that claims tp represent projects" })),
                    this.$render("i-hstack", { horizontalAlignment: "center", class: "text-center", margin: { bottom: 5 } },
                        this.$render("i-label", { width: 300, font: { bold: true }, caption: "If you purchased this token, you may not be to able sell it back" })),
                    this.$render("i-hstack", { horizontalAlignment: "center", class: "text-center" },
                        this.$render("i-checkbox", { id: "tokenAgreeCheckBox", width: "200", margin: { top: 30 }, height: 30, class: "token-agree-input", background: { color: 'transparent' }, caption: "I understand", onChanged: this.onHandleCheck.bind(this) }))),
                this.$render("i-button", { id: "importBtn", class: "btn-import", width: "100%", caption: "Import", height: 40, enabled: false, onClick: this.onImportToken.bind(this) })));
        }
    };
    __decorate([
        (0, components_8.observable)()
    ], ImportToken.prototype, "_state", void 0);
    ImportToken = __decorate([
        (0, components_8.customElements)('i-scom-swap-import-token')
    ], ImportToken);
    exports.ImportToken = ImportToken;
});
define("@scom/scom-swap/token-selection/tokenSelection.tsx", ["require", "exports", "@ijstech/components", "@scom/scom-token-list", "@scom/scom-swap/store/index.ts", "@scom/scom-token-list", "@scom/scom-swap/global/index.ts", "@scom/scom-swap/contracts/oswap-openswap-contract/index.ts", "@scom/scom-swap/assets.ts", "@ijstech/eth-wallet", "@scom/scom-swap/token-selection/tokenSelection.css.ts"], function (require, exports, components_9, scom_token_list_5, index_10, scom_token_list_6, index_11, index_12, assets_2, eth_wallet_7) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.TokenSelection = void 0;
    const Theme = components_9.Styles.Theme.ThemeVars;
    ;
    let TokenSelection = class TokenSelection extends components_9.Module {
        get token() {
            return this._token;
        }
        set token(value) {
            this._token = value;
            this.updateButton(value);
        }
        get targetChainId() {
            return this._targetChainId;
        }
        set targetChainId(value) {
            this._targetChainId = value;
            this.updateDataByChain();
        }
        get tokenDataListProp() {
            return this._tokenDataListProp;
        }
        set tokenDataListProp(value) {
            this._tokenDataListProp = value;
            this.renderTokenItems();
            this.updateButton();
        }
        get onSelectToken() {
            return this._onSelectToken;
        }
        set onSelectToken(callback) {
            this._onSelectToken = callback;
        }
        get isCommonShown() {
            return this._isCommonShown;
        }
        set isCommonShown(value) {
            this._isCommonShown = value;
            this.renderCommonItems();
        }
        get isSortBalanceShown() {
            return this._isSortBalanceShown;
        }
        set isSortBalanceShown(value) {
            this._isSortBalanceShown = value;
            if (value) {
                this.sortBalancePanel.classList.remove('hidden');
            }
            else {
                this.sortBalancePanel.classList.add('hidden');
            }
        }
        get isBtnMaxShown() {
            return this._isBtnMaxShown;
        }
        set isBtnMaxShown(value) {
            this._isBtnMaxShown = value;
            if (!this.btnMax)
                return;
            if (value) {
                this.btnMax.classList.remove('hidden');
            }
            else {
                this.btnMax.classList.add('hidden');
            }
        }
        get onSetMaxBalance() {
            return this._onSetMaxBalance;
        }
        set onSetMaxBalance(callback) {
            this._onSetMaxBalance = callback;
        }
        get chainId() {
            if (this.targetChainId) {
                return this.targetChainId;
            }
            return (0, scom_token_list_5.isWalletConnected)() ? this.currentChainId : (0, scom_token_list_5.getChainId)();
        }
        get disableSelect() {
            return this._disableSelect;
        }
        set disableSelect(value) {
            this._disableSelect = value;
            this.btnToken.enabled = !value;
            // this.btnToken.rightIcon.name = value ? '' : 'caret-down';
            this.btnToken.rightIcon.visible = !value;
        }
        get disabledMaxBtn() {
            return this._disabledMaxBtn;
        }
        set disabledMaxBtn(value) {
            this._disabledMaxBtn = value;
            this.btnMax.enabled = !value;
        }
        async initData() {
            if (!this.chainId) {
                this.currentChainId = (0, scom_token_list_5.getChainId)();
            }
            if ((0, scom_token_list_5.isWalletConnected)()) {
                this.tokenBalancesMap = scom_token_list_5.tokenStore.tokenBalances || {};
            }
            this.renderTokenItems();
        }
        async updateDataByChain(onPaid) {
            this.tokenBalancesMap = onPaid ? scom_token_list_5.tokenStore.tokenBalances : await scom_token_list_5.tokenStore.updateAllTokenBalances();
            this.renderTokenItems();
            this.updateButton();
        }
        async updateDataByNewToken() {
            this.tokenBalancesMap = scom_token_list_5.tokenStore.tokenBalances || {};
            this.renderTokenItems();
        }
        async onChainChange() {
            if (!this.targetChainId) {
                this.currentChainId = (0, scom_token_list_5.getChainId)();
                this.updateDataByChain();
            }
        }
        async onWalletConnect() {
            this.checkHasMetaMask = (0, scom_token_list_5.hasMetaMask)();
            await this.initData();
            this.updateStatusButton();
        }
        async onWalletDisconnect() {
            await this.initData();
        }
        async onPaid(data) {
            await this.updateDataByChain(data === 'onPaid');
            await this.initData();
        }
        registerEvent() {
            this.$eventBus.register(this, "isWalletConnected" /* EventId.IsWalletConnected */, this.onWalletConnect);
            this.$eventBus.register(this, "IsWalletDisconnected" /* EventId.IsWalletDisconnected */, this.onWalletDisconnect);
            this.$eventBus.register(this, "chainChanged" /* EventId.chainChanged */, this.onChainChange);
            this.$eventBus.register(this, "Paid" /* EventId.Paid */, this.onPaid);
            this.$eventBus.register(this, "emitNewToken" /* EventId.EmitNewToken */, this.updateDataByNewToken);
        }
        get tokenDataList() {
            let tokenList = [];
            if (this.tokenDataListProp && this.tokenDataListProp.length) {
                tokenList = this.tokenDataListProp;
            }
            else {
                tokenList = scom_token_list_5.tokenStore.getTokenList(this.chainId);
            }
            if (!this.tokenBalancesMap || !Object.keys(this.tokenBalancesMap).length) {
                this.tokenBalancesMap = scom_token_list_5.tokenStore.tokenBalances || {};
            }
            return tokenList.map((token) => {
                var _a;
                const tokenObject = Object.assign({}, token);
                const nativeToken = scom_token_list_6.ChainNativeTokenByChainId[this.chainId];
                if ((nativeToken === null || nativeToken === void 0 ? void 0 : nativeToken.symbol) && token.symbol === nativeToken.symbol) {
                    Object.assign(tokenObject, { isNative: true });
                }
                if (!(0, scom_token_list_5.isWalletConnected)()) {
                    Object.assign(tokenObject, {
                        balance: 0,
                    });
                }
                else if (this.tokenBalancesMap) {
                    Object.assign(tokenObject, {
                        balance: this.tokenBalancesMap[((_a = token.address) === null || _a === void 0 ? void 0 : _a.toLowerCase()) || token.symbol] || 0,
                    });
                }
                return tokenObject;
            }).sort(this.sortToken);
        }
        get commonTokenDataList() {
            const tokenList = this.tokenDataList;
            if (!tokenList)
                return [];
            return tokenList.filter((token) => token.isCommon || token.isNative);
        }
        get tokenDataListFiltered() {
            let tokenList = this.tokenDataList || [];
            if (tokenList.length) {
                if (this.filterValue) {
                    tokenList = tokenList.filter((token) => {
                        var _a;
                        return token.symbol.toUpperCase().includes(this.filterValue) ||
                            token.name.toUpperCase().includes(this.filterValue) ||
                            ((_a = token.address) === null || _a === void 0 ? void 0 : _a.toUpperCase()) === this.filterValue;
                    });
                }
                if (this.sortValue !== undefined) {
                    tokenList = tokenList.sort((a, b) => {
                        return this.sortToken(a, b, this.sortValue);
                    });
                    const allBalanceZero = !tokenList.some((token) => token.balance && token.balance !== '0');
                    if (allBalanceZero && !this.sortValue) {
                        tokenList = tokenList.reverse();
                    }
                }
            }
            return tokenList;
        }
        sortBalance() {
            this.sortValue = !this.sortValue;
            if (this.sortValue) {
                this.iconSortUp.classList.add('icon-sorted');
                this.iconSortDown.classList.remove('icon-sorted');
            }
            else {
                this.iconSortUp.classList.remove('icon-sorted');
                this.iconSortDown.classList.add('icon-sorted');
            }
            this.renderTokenItems();
        }
        filterSearch(source) {
            this.filterValue = source.value.toUpperCase();
            this.renderTokenItems();
        }
        async renderCommonItems() {
            if (!this.commonTokenList)
                return;
            this.commonTokenList.innerHTML = '';
            if (this.isCommonShown && this.commonTokenDataList) {
                this.commonTokenPanel.classList.remove('hidden');
                this.commonTokenDataList.forEach((token) => {
                    const logoAddress = token.address && !this.targetChainId ? (0, index_10.getTokenIcon)(token.address) : scom_token_list_6.assets.tokenPath(token, this.chainId);
                    this.commonTokenList.appendChild(this.$render("i-hstack", { background: { color: Theme.background.main }, onClick: () => this.onSelect(token), tooltip: { content: token.name }, verticalAlignment: "center", class: "grid-item" },
                        this.$render("i-image", { width: 24, height: 24, url: logoAddress, fallbackUrl: scom_token_list_6.assets.fallbackUrl }),
                        this.$render("i-label", { caption: token.symbol, onClick: () => this.onSelect(token) })));
                });
            }
            else {
                this.commonTokenPanel.classList.add('hidden');
            }
        }
        renderToken(token) {
            const logoAddress = token.address && !this.targetChainId ? (0, index_10.getTokenIcon)(token.address) : scom_token_list_6.assets.tokenPath(token, this.chainId);
            return (this.$render("i-hstack", { width: "100%", verticalAlignment: "center", class: "token-item", padding: { top: '0.5rem', bottom: '0.5rem', left: '0.5rem', right: '0.5rem' }, onClick: () => this.onSelect(token) },
                this.$render("i-vstack", { width: "100%" },
                    this.$render("i-hstack", null,
                        this.$render("i-hstack", null,
                            this.$render("i-image", { width: 36, height: 36, url: logoAddress, fallbackUrl: scom_token_list_6.assets.fallbackUrl }),
                            this.$render("i-panel", { class: "token-info" },
                                this.$render("i-label", { caption: token.symbol, onClick: () => this.onSelect(token) }),
                                this.$render("i-hstack", { class: "token-name", verticalAlignment: "center" },
                                    this.$render("i-label", { caption: token.name, onClick: () => this.onSelect(token) }),
                                    token.address && !token.isNative ?
                                        this.$render("i-icon", { name: "copy", width: "14px", height: "14px", fill: Theme.text.primary, margin: { right: 8 }, tooltip: { content: `${token.symbol} has been copied`, trigger: 'click' }, onClick: () => components_9.application.copyToClipboard(token.address || ''), class: "inline-flex pointer" })
                                        : [],
                                    token.address && this.checkHasMetaMask ?
                                        this.$render("i-image", { width: 16, height: 16, url: assets_2.default.fullPath('img/swap/metamask.png'), tooltip: { content: 'Add to MetaMask' }, onClick: (target, event) => this.addToMetamask(event, token) })
                                        : []))),
                        this.$render("i-label", { class: "ml-auto", caption: (0, index_11.formatNumber)(token.balance, 4), onClick: () => this.onSelect(token) })),
                    token.isNew ? (this.$render("i-hstack", { horizontalAlignment: "center" },
                        this.$render("i-button", { caption: 'Import', class: "btn-import", margin: { top: 10 }, height: 34, onClick: (source, event) => this.showImportTokenModal(event, token) }))) : (this.$render("i-hstack", null)))));
        }
        async renderTokenItems() {
            if (!this.tokenList)
                return;
            this.renderCommonItems();
            this.tokenList.innerHTML = '';
            if (this.tokenDataListFiltered.length) {
                const tokenItems = this.tokenDataListFiltered.map((token) => this.renderToken(token));
                this.tokenList.append(...tokenItems);
            }
            else if (this.targetChainId && this.targetChainId !== (0, scom_token_list_5.getChainId)()) {
                this.tokenList.innerHTML = '';
                this.tokenList.append(this.$render("i-label", { class: "text-center mt-1 mb-1", caption: "No tokens found" }));
            }
            else {
                try {
                    const tokenObj = await this.getTokenObject(this.filterValue, true);
                    if (!tokenObj)
                        throw new Error('Token is invalid');
                    this.tokenList.innerHTML = '';
                    this.tokenList.appendChild(this.renderToken(Object.assign(Object.assign({}, tokenObj), { isNew: true })));
                }
                catch (err) {
                    this.tokenList.innerHTML = '';
                    this.tokenList.append(this.$render("i-label", { class: "text-center mt-1 mb-1", font: { color: Theme.text.primary }, caption: "No tokens found" }));
                }
            }
        }
        addToMetamask(event, token) {
            event.stopPropagation();
            const img = `${window.location.origin}${scom_token_list_6.assets.getTokenIconPath(token, this.chainId).substring(1)}`;
            window.ethereum.request({
                method: 'wallet_watchAsset',
                params: {
                    type: 'ERC20',
                    options: {
                        address: token.address,
                        symbol: token.symbol,
                        decimals: token.decimals,
                        image: img
                    },
                },
            });
        }
        async showModal() {
            if (!this.enabled)
                return;
            this.tokenSearch.value = '';
            this.filterValue = '';
            this.sortValue = undefined;
            this.iconSortUp.classList.remove('icon-sorted');
            this.iconSortDown.classList.remove('icon-sorted');
            // if (!this.tokenList.innerHTML) {
            //   await this.initData();
            // }
            this.tokenSelectionModal.visible = true;
        }
        updateStatusButton() {
            const status = (0, scom_token_list_5.isWalletConnected)();
            if (this.btnToken) {
                this.btnToken.enabled = !this.disableSelect && status;
            }
            if (this.btnMax) {
                this.btnMax.enabled = !this.disabledMaxBtn && status;
            }
        }
        updateButton(token) {
            var _a;
            const btnToken = this.btnToken;
            if (!btnToken)
                return;
            try {
                let image = btnToken.querySelector('i-image');
                if (!token) {
                    token = (_a = this.tokenDataList) === null || _a === void 0 ? void 0 : _a.find((v) => { var _a, _b; return (v.address && v.address == ((_a = this.token) === null || _a === void 0 ? void 0 : _a.address)) || (v.symbol == ((_b = this.token) === null || _b === void 0 ? void 0 : _b.symbol)); });
                }
                if (!token) {
                    btnToken.caption = 'Select Token';
                    btnToken.classList.remove('has-token');
                    this.btnMax.classList.add('hidden');
                    if (image) {
                        btnToken.removeChild(image);
                    }
                }
                else {
                    btnToken.caption = token.symbol;
                    btnToken.classList.add('has-token');
                    if (this.isBtnMaxShown) {
                        this.btnMax.classList.remove('hidden');
                    }
                    const logoAddress = token.address && !this.targetChainId ? (0, index_10.getTokenIcon)(token.address) : scom_token_list_6.assets.tokenPath(token, this.chainId);
                    if (!image) {
                        image = new components_9.Image(btnToken, {
                            width: 20,
                            height: 20,
                            fallbackUrl: scom_token_list_6.assets.fallbackUrl
                        });
                        btnToken.prepend(image);
                    }
                    image.url = logoAddress;
                }
            }
            catch (_b) { }
        }
        async onSelect(token, isNew = false) {
            this.token = token;
            // The token has been not imported
            if (!isNew && token.isNew && !(0, scom_token_list_5.hasUserToken)(token.address || '', this.chainId)) {
                (0, scom_token_list_5.setUserTokens)(token, this.chainId);
                scom_token_list_5.tokenStore.updateTokenMapData();
                await scom_token_list_5.tokenStore.updateAllTokenBalances();
                this.$eventBus.dispatch("emitNewToken" /* EventId.EmitNewToken */, token);
                isNew = true;
            }
            this.onSelectToken(Object.assign(Object.assign({}, token), { isNew }));
            this.tokenSelectionModal.visible = false;
        }
        constructor(parent, options) {
            super(parent, options);
            this._isSortBalanceShown = true;
            this._isBtnMaxShown = true;
            this.sortToken = (a, b, asc) => {
                var _a, _b, _c, _d;
                if (a.balance != b.balance) {
                    return asc ? (a.balance - b.balance) : (b.balance - a.balance);
                }
                if (((_a = a.symbol) === null || _a === void 0 ? void 0 : _a.toLowerCase()) < ((_b = b.symbol) === null || _b === void 0 ? void 0 : _b.toLowerCase())) {
                    return -1;
                }
                if (((_c = a.symbol) === null || _c === void 0 ? void 0 : _c.toLowerCase()) > ((_d = b.symbol) === null || _d === void 0 ? void 0 : _d.toLowerCase())) {
                    return 1;
                }
                return 0;
            };
            this.getTokenObject = async (address, showBalance) => {
                const ERC20Contract = new index_12.Contracts.ERC20(eth_wallet_7.Wallet.getClientInstance(), address);
                const symbol = await ERC20Contract.symbol();
                const name = await ERC20Contract.name();
                const decimals = (await ERC20Contract.decimals()).toFixed();
                let balance;
                if (showBalance && (0, scom_token_list_5.isWalletConnected)()) {
                    balance = (await (ERC20Contract.balanceOf(eth_wallet_7.Wallet.getClientInstance().account.address))).shiftedBy(-decimals).toFixed();
                }
                return {
                    address: address.toLowerCase(),
                    decimals: +decimals,
                    name,
                    symbol,
                    balance
                };
            };
            this.$eventBus = components_9.application.EventBus;
            this.registerEvent();
        }
        ;
        async init() {
            await this.onWalletConnect();
            super.init();
            this.disableSelect = !!this.getAttribute("disableSelect", true);
            this.disabledMaxBtn = this.getAttribute("disabledMaxBtn", true);
            this.updateStatusButton();
            this.updateButton(this._token);
        }
        showImportTokenModal(event, token) {
            event.stopPropagation();
            this.importTokenModal.token = token;
            this.importTokenModal.showModal();
            this.importTokenModal.onUpdate = this.onImportToken.bind(this);
        }
        onImportToken(token) {
            this.onSelect(token, true);
        }
        onCloseModal() {
            // reset list
            this.filterValue = '';
            this.renderTokenItems();
        }
        render() {
            return (this.$render("i-panel", { class: 'token-selection' },
                this.$render("i-panel", { class: "flex" },
                    this.$render("i-button", { id: "btnMax", enabled: false, class: "custom-btn hidden", caption: "Max", onClick: () => this.onSetMaxBalance() }),
                    this.$render("i-button", { id: "btnToken", enabled: false, class: "custom-btn", rightIcon: { name: "caret-down", fill: Theme.text.primary }, caption: "Select Token", onClick: () => this.showModal() })),
                this.$render("i-modal", { id: "tokenSelectionModal", class: "bg-modal", title: "Select Token", closeIcon: { name: 'times' }, onClose: () => this.onCloseModal() },
                    this.$render("i-panel", { class: "search" },
                        this.$render("i-icon", { width: 16, height: 16, name: "search", fill: Theme.text.primary }),
                        this.$render("i-input", { id: "tokenSearch", height: "auto", placeholder: "Search name or paste address", width: "100%", onKeyUp: this.filterSearch.bind(this) })),
                    this.$render("i-panel", { id: "commonTokenPanel", class: "common-token" },
                        this.$render("i-label", { caption: "Common Token" }),
                        this.$render("i-grid-layout", { id: "commonTokenList", columnsPerRow: 4, gap: { row: '1rem', column: '1rem' }, class: "common-list", verticalAlignment: "center" })),
                    this.$render("i-panel", { id: "sortBalancePanel", class: "token-header" },
                        this.$render("i-label", { caption: "Token" }),
                        this.$render("i-panel", { class: "token-section ml-auto", onClick: () => this.sortBalance() },
                            this.$render("i-label", { class: "mr-1", caption: "Balance" }),
                            this.$render("i-icon", { id: "iconSortUp", class: "icon-sort-up", name: "sort-up" }),
                            this.$render("i-icon", { id: "iconSortDown", class: "icon-sort-down", name: "sort-down" }))),
                    this.$render("i-grid-layout", { id: "tokenList", class: "token-list", columnsPerRow: 1 })),
                this.$render("i-scom-swap-import-token", { id: "importTokenModal" })));
        }
    };
    __decorate([
        (0, components_9.observable)()
    ], TokenSelection.prototype, "sortValue", void 0);
    __decorate([
        (0, components_9.observable)()
    ], TokenSelection.prototype, "filterValue", void 0);
    TokenSelection = __decorate([
        (0, components_9.customElements)('i-scom-swap-token-selection')
    ], TokenSelection);
    exports.TokenSelection = TokenSelection;
    ;
});
define("@scom/scom-swap/token-selection/index.tsx", ["require", "exports", "@scom/scom-swap/token-selection/tokenSelection.tsx", "@scom/scom-swap/token-selection/importToken.tsx"], function (require, exports, tokenSelection_1, importToken_1) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.ImportToken = exports.TokenSelection = void 0;
    Object.defineProperty(exports, "TokenSelection", { enumerable: true, get: function () { return tokenSelection_1.TokenSelection; } });
    Object.defineProperty(exports, "ImportToken", { enumerable: true, get: function () { return importToken_1.ImportToken; } });
});
define("@scom/scom-swap/result/result.css.ts", ["require", "exports", "@ijstech/components"], function (require, exports, components_10) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    const Theme = components_10.Styles.Theme.ThemeVars;
    exports.default = components_10.Styles.style({
        textAlign: 'center',
        $nest: {
            'i-label > *': {
                // color: Theme.text.primary,
                fontSize: '.875rem',
                wordBreak: 'normal'
            },
            '.modal': {
                minWidth: '25%',
                maxWidth: '100%',
                width: 455,
                background: Theme.background.modal,
                borderRadius: 12
            },
            '.i-modal-close svg': {
                fill: '#F05E61'
            },
            '.i-modal_content': {
                padding: '0 2.563rem 1.5rem'
            },
            '.i-modal_header': {
                borderBottom: 'none !important'
            },
            '.waiting-txt > *': {
                color: '#F6C958',
                fontSize: '1.125rem'
            },
            '.confirm-txt > *': {
                color: '#C2C3CB'
            },
            '.red-link *': {
                color: '#FD4A4C',
                textDecoration: 'none'
            },
            '.mb': {
                marginBottom: '1rem'
            },
            'i-button': {
                padding: '1rem 2rem',
                textAlign: 'center'
            },
            '.address-txt > *': {
                lineHeight: '1.5rem'
            },
            '.btn-submit': {
                padding: '.35rem 2.438rem',
                borderRadius: 5
            },
            '.btn-cancel': {
                padding: '.35rem 2.438rem',
                borderRadius: 5,
                background: '#2B304A 0% 0% no-repeat padding-box'
            },
            '.btn-os': {
                background: 'transparent linear-gradient(90deg, #AC1D78 0%, #E04862 100%) 0% 0% no-repeat padding-box',
                fontFamily: 'Raleway Bold',
                fontSize: '1rem',
                fontWeight: 'bold',
                color: Theme.colors.secondary.main
            }
        }
    });
});
define("@scom/scom-swap/result/result.tsx", ["require", "exports", "@ijstech/components", "@ijstech/eth-wallet", "@scom/scom-swap/global/index.ts", "@scom/scom-swap/store/index.ts", "@scom/scom-swap/result/result.css.ts", "@scom/scom-swap/assets.ts"], function (require, exports, components_11, eth_wallet_8, index_13, index_14, result_css_1, assets_3) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.Result = void 0;
    const Theme = components_11.Styles.Theme.ThemeVars;
    ;
    let Result = class Result extends components_11.Module {
        get message() {
            return this._message;
        }
        set message(value) {
            this._message = value;
            this.renderUI();
        }
        constructor(parent, options) {
            super(parent, options);
        }
        ;
        async init() {
            this.classList.add(result_css_1.default);
            super.init();
            this.confirmModal.onClose = () => {
                if (this.onCustomClose) {
                    this.onCustomClose();
                }
                this.onCloseRedirect();
            };
        }
        closeModal() {
            this.confirmModal.visible = false;
        }
        showModal() {
            this.confirmModal.visible = true;
        }
        onCloseRedirect() {
            var _a;
            const customRedirect = (_a = this.message) === null || _a === void 0 ? void 0 : _a.customRedirect;
            if (customRedirect && customRedirect.name) {
                this._message.customRedirect = null;
                if (customRedirect.params) {
                    const queries = new URLSearchParams(customRedirect.params).toString();
                    window.location.assign(`/#/${customRedirect.name}?${queries}`);
                }
                else {
                    window.location.assign(`/#/${customRedirect.name}`);
                }
            }
        }
        async buildLink() {
            if (this.message.txtHash) {
                const chainId = await eth_wallet_8.Wallet.getClientInstance().getChainId();
                (0, index_14.viewOnExplorerByTxHash)(chainId, this.message.txtHash);
            }
        }
        async renderUI() {
            this.mainContent.innerHTML = '';
            const mainSection = await components_11.VStack.create({
                horizontalAlignment: 'center'
            });
            if (this.message.status === 'warning') {
                mainSection.id = "warningSection";
                const loading = (this.$render("i-panel", { height: 100 },
                    this.$render("i-vstack", { id: "loadingElm", class: "i-loading-overlay", height: "100%", background: { color: "transparent" } },
                        this.$render("i-vstack", { class: "i-loading-spinner", horizontalAlignment: "center", verticalAlignment: "center" },
                            this.$render("i-icon", { class: "i-loading-spinner_icon", image: { url: assets_3.default.fullPath('img/loading.svg'), width: 24, height: 24 } }),
                            this.$render("i-label", { caption: "Loading...", font: { color: '#FD4A4C' }, class: "i-loading-spinner_text" })))));
                mainSection.appendChild(loading);
                const section = new components_11.VStack();
                section.margin = { bottom: 20 };
                const captionList = ['Waiting For Confirmation', this.message.content || '', 'Confirm this transaction in your wallet'];
                const classList = ['waiting-txt mb-1', 'mb-1', 'confirm-txt'];
                for (let i = 0; i < captionList.length; i++) {
                    const caption = captionList[i];
                    const label = await components_11.Label.create();
                    label.caption = caption;
                    if (classList[i]) {
                        const classes = classList[i].split(' ');
                        classes.forEach(className => label.classList.add(className));
                    }
                    section.appendChild(label);
                }
                ;
                mainSection.appendChild(section);
            }
            else if (this.message.status === 'success') {
                const chainId = await eth_wallet_8.Wallet.getClientInstance().getChainId();
                const explorerName = (0, index_14.getNetworkExplorerName)(chainId);
                const image = await components_11.Image.create({
                    width: '50px',
                    url: assets_3.default.fullPath('img/success-icon.svg')
                });
                image.classList.add("inline-block", "mb");
                mainSection.appendChild(image);
                const label = await components_11.Label.create();
                label.caption = 'Transaction Submitted';
                label.classList.add("waiting-txt");
                mainSection.appendChild(label);
                const contentSection = await components_11.Panel.create();
                contentSection.id = "contentSection";
                mainSection.appendChild(contentSection);
                const contentLabel = await components_11.Label.create();
                contentLabel.caption = this.message.content || '';
                contentSection.appendChild(contentLabel);
                if (this.message.txtHash) {
                    const section = new components_11.VStack();
                    const label1 = await components_11.Label.create({
                        caption: this.message.txtHash.substr(0, 33),
                        margin: { bottom: 4 }
                    });
                    section.appendChild(label1);
                    const label2 = await components_11.Label.create({
                        caption: this.message.txtHash.substr(33, this.message.txtHash.length)
                    });
                    label2.classList.add("mb-1");
                    section.appendChild(label2);
                    const link = await components_11.Label.create({
                        caption: `View on ${explorerName}`,
                    });
                    link.onClick = this.buildLink.bind(this);
                    link.classList.add("red-link", "block", "pointer");
                    section.appendChild(link);
                    contentSection.appendChild(section);
                }
                const button = new components_11.Button(mainSection, {
                    width: '100%',
                    caption: 'Close',
                    font: { color: Theme.colors.primary.contrastText }
                });
                button.classList.add('btn-os');
                button.classList.add('mt-1');
                button.onClick = () => this.closeModal();
                mainSection.appendChild(button);
            }
            else {
                const image = await components_11.Image.create({
                    width: '50px',
                    url: assets_3.default.fullPath('img/oswap_error.png')
                });
                image.classList.add("inline-block", "mb");
                mainSection.appendChild(image);
                const label = await components_11.Label.create({
                    caption: 'Transaction Rejected.'
                });
                label.classList.add("waiting-txt", "mb");
                mainSection.appendChild(label);
                const section = await components_11.VStack.create();
                section.id = "contentSection";
                const contentLabel = await components_11.Label.create({
                    caption: await this.onErrMsgChanged()
                });
                contentLabel.classList.add("mb-1");
                section.appendChild(contentLabel);
                mainSection.appendChild(section);
                const button = new components_11.Button(mainSection, {
                    width: '100%',
                    caption: 'Cancel',
                    font: { color: Theme.colors.primary.contrastText }
                });
                button.classList.add('btn-os');
                button.classList.add('mt-1');
                button.onClick = () => this.closeModal();
                mainSection.appendChild(button);
            }
            this.mainContent.clearInnerHTML();
            this.mainContent.appendChild(mainSection);
        }
        async onErrMsgChanged() {
            if (this.message.status !== 'error')
                return this.message.content;
            if (this.message.content.message && this.message.content.message.includes('Internal JSON-RPC error.')) {
                this.message.content.message = JSON.parse(this.message.content.message.replace('Internal JSON-RPC error.\n', '')).message;
            }
            return await (0, index_13.parseContractError)(this.message.content.message, this.message.obj);
        }
        render() {
            return (this.$render("i-modal", { id: "confirmModal", closeIcon: { name: 'times' }, class: "confirm-modal", minHeight: "280px" },
                this.$render("i-panel", { id: "mainContent", class: "i-modal_content" })));
        }
    };
    Result = __decorate([
        (0, components_11.customElements)('i-scom-swap-result')
    ], Result);
    exports.Result = Result;
    ;
});
define("@scom/scom-swap/result/index.tsx", ["require", "exports", "@scom/scom-swap/result/result.tsx"], function (require, exports, result_1) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.Result = void 0;
    Object.defineProperty(exports, "Result", { enumerable: true, get: function () { return result_1.Result; } });
});
define("@scom/scom-swap/expert-mode-settings/index.css.ts", ["require", "exports", "@ijstech/components"], function (require, exports, components_12) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    const Theme = components_12.Styles.Theme.ThemeVars;
    exports.default = components_12.Styles.style({
        textAlign: 'center',
        $nest: {
            // 'i-label': {
            //   color: Theme.text.primary
            // },
            // 'i-button': {
            //   color: Theme.text.primary
            // },
            '.modal': {
                borderRadius: '1rem',
                padding: '1rem',
                width: 327
            },
            '.i-modal_header': {
                marginBottom: '1.25rem',
                paddingBottom: '0.75rem',
                borderBottom: `2px soid ${Theme.background.main}`,
                $nest: {
                    '&> span': {
                        margin: 'auto',
                        padding: '0 2rem',
                        color: Theme.colors.primary.main,
                        fontWeight: 700,
                    }
                }
            },
            '.i-modal-close': {
                fill: `${Theme.colors.primary.main} !important`,
            },
            '.expert-content': {
                fontWeight: 'bold',
                $nest: {
                    '.warning-box': {
                        padding: '0.75rem 1rem',
                        marginBottom: '1.25rem',
                        background: 'linear-gradient(90deg,#df5869 -19.25%,#bc4c7b 116.5%)',
                        border: '1px solid #f15e61',
                        borderRadius: '0.5rem',
                    },
                    '.warning-box i-label *': {
                        color: Theme.colors.primary.contrastText,
                        fontSize: '1rem',
                    },
                    'i-label.warning-text *': {
                        color: Theme.colors.warning.light,
                        fontSize: '1.05rem',
                    },
                    'i-button': {
                        padding: '0.75rem',
                        margin: '1.25rem 0 0.5rem',
                        color: Theme.colors.primary.contrastText,
                        background: 'transparent linear-gradient(255deg,#e75b66,#b52082) 0% 0% no-repeat padding-box',
                    }
                }
            }
        }
    });
});
define("@scom/scom-swap/expert-mode-settings/index.tsx", ["require", "exports", "@ijstech/components", "@scom/scom-swap/store/index.ts", "@scom/scom-swap/expert-mode-settings/index.css.ts"], function (require, exports, components_13, index_15, index_css_1) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.ExpertModeSettings = void 0;
    ;
    let ExpertModeSettings = class ExpertModeSettings extends components_13.Module {
        constructor(parent, options) {
            super(parent, options);
            this.$eventBus = components_13.application.EventBus;
        }
        ;
        async init() {
            this.classList.add(index_css_1.default);
            super.init();
        }
        closeModal() {
            this.expertModal.visible = false;
        }
        showModal() {
            this.expertModal.visible = true;
        }
        onToggle() {
            (0, index_15.toggleExpertMode)();
            this.closeModal();
            this.$eventBus.dispatch("ExpertModeChanged" /* EventId.ExpertModeChanged */);
        }
        render() {
            return (this.$render("i-modal", { id: "expertModal", class: 'dark-modal', title: "Expert Mode", closeIcon: { name: 'times' } },
                this.$render("i-panel", { class: "expert-content" },
                    this.$render("i-panel", { class: "warning-box" },
                        this.$render("i-label", { caption: "Expert mode allows high slippage trades that often result in bad rates and lost funds." })),
                    this.$render("i-label", { class: "warning-text", caption: "Only use this mode if you know what you are doing." }),
                    this.$render("i-button", { width: "100%", height: "auto", caption: "Turn On Expert Mode", onClick: this.onToggle.bind(this) }))));
        }
    };
    ExpertModeSettings = __decorate([
        components_13.customModule,
        (0, components_13.customElements)('i-scom-swap-expert-mode-settings')
    ], ExpertModeSettings);
    exports.ExpertModeSettings = ExpertModeSettings;
    ;
});
define("@scom/scom-swap/config/index.css.ts", ["require", "exports", "@ijstech/components"], function (require, exports, components_14) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.tableStyle = exports.customStyle = void 0;
    const Theme = components_14.Styles.Theme.ThemeVars;
    exports.customStyle = components_14.Styles.style({
        $nest: {
            'input': {
                paddingLeft: '10px'
            },
            '.nft-network-select': {
                $nest: {
                    '.os-modal .modal': {
                        background: Theme.combobox.background
                    },
                    '.modal > i-panel': {
                        borderRadius: 8
                    },
                    'i-label': {
                        fontSize: '1rem !important'
                    },
                    '.list-item': {
                        padding: '0.5rem 1rem !important'
                    }
                }
            }
        }
    });
    exports.tableStyle = components_14.Styles.style({
        $nest: {
            '.i-table-header>tr>th': {
                fontSize: '0.875rem !important',
                opacity: 0.6
            }
        }
    });
});
define("@scom/scom-swap/config/index.tsx", ["require", "exports", "@ijstech/components", "@ijstech/eth-wallet", "@scom/scom-swap/store/index.ts", "@scom/scom-swap/global/index.ts", "@scom/scom-swap/config/index.css.ts"], function (require, exports, components_15, eth_wallet_9, index_16, index_17, index_css_2) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    const Theme = components_15.Styles.Theme.ThemeVars;
    const CommissionFeeTooltipText = "For each transaction, you'll receive a 1% commission fee based on the total amount. This fee will be transferred to a designated commission contract within the corresponding blockchain network.";
    let Config = class Config extends components_15.Module {
        constructor() {
            super(...arguments);
            this.commissionsTableColumns = [
                {
                    title: 'Network',
                    fieldName: 'chainId',
                    key: 'chainId',
                    textAlign: 'left',
                    onRenderCell: function (source, columnData, rowData) {
                        const supportedNetworks = (0, index_16.getSupportedNetworks)();
                        const network = supportedNetworks.find(net => net.chainId === columnData);
                        if (!network)
                            return this.$render("i-panel", null);
                        const networkInfo = (0, index_16.getNetworkInfo)(network.chainId);
                        const imgUrl = networkInfo.image || '';
                        const hstack = new components_15.HStack(undefined, {
                            verticalAlignment: 'center',
                            gap: 5
                        });
                        const imgEl = new components_15.Icon(hstack, {
                            image: { url: imgUrl, width: 16, height: 16 }
                        });
                        const lbName = new components_15.Label(hstack, {
                            caption: networkInfo.chainName || '',
                            font: { size: '0.875rem' }
                        });
                        hstack.append(imgEl, lbName);
                        return hstack;
                    }
                },
                {
                    title: 'Wallet',
                    fieldName: 'walletAddress',
                    key: 'walletAddress',
                    onRenderCell: function (source, columnData, rowData) {
                        const replaced = columnData.slice(6, columnData.length - 9);
                        const caption = ((columnData === null || columnData === void 0 ? void 0 : columnData.length) < 15) ? columnData : columnData.replace(replaced, '...');
                        return new components_15.Label(undefined, {
                            caption: caption || '',
                            font: { size: '0.875rem' },
                            tooltip: {
                                content: columnData
                            }
                        });
                    }
                },
                {
                    title: '',
                    fieldName: '',
                    key: '',
                    textAlign: 'center',
                    onRenderCell: async (source, data, rowData) => {
                        const icon = new components_15.Icon(undefined, {
                            name: "edit",
                            fill: Theme.text.primary,
                            height: 14,
                            width: 14
                        });
                        icon.onClick = async (source) => {
                            this.networkPicker.setNetworkByChainId(rowData.chainId);
                            this.inputWalletAddress.value = rowData.walletAddress;
                            this.modalAddCommission.visible = true;
                        };
                        icon.classList.add('pointer');
                        return icon;
                    }
                },
                {
                    title: '',
                    fieldName: '',
                    key: '',
                    textAlign: 'center',
                    onRenderCell: async (source, data, rowData) => {
                        const icon = new components_15.Icon(undefined, {
                            name: "times",
                            fill: Theme.colors.primary.main,
                            height: 14,
                            width: 14
                        });
                        icon.onClick = async (source) => {
                            const index = this.commissionInfoList.findIndex(v => v.walletAddress == rowData.walletAddress && v.chainId == rowData.chainId);
                            if (index >= 0) {
                                this.commissionInfoList.splice(index, 1);
                                this.tableCommissions.data = this.commissionInfoList;
                                this.toggleVisible();
                                if (this._onCustomCommissionsChanged) {
                                    await this._onCustomCommissionsChanged({
                                        commissions: this.commissionInfoList
                                    });
                                }
                            }
                        };
                        icon.classList.add('pointer');
                        return icon;
                    }
                }
            ];
        }
        async init() {
            super.init();
            const embedderFee = (0, index_16.getEmbedderCommissionFee)();
            this.lbCommissionShare.caption = `${(0, index_17.formatNumber)(new eth_wallet_9.BigNumber(embedderFee).times(100).toFixed(), 4)} %`;
            const commissions = this.getAttribute('commissions', true, []);
            this.commissionInfoList = commissions;
            this.tableCommissions.data = commissions;
            this.toggleVisible();
        }
        get data() {
            const config = {};
            config.commissions = this.tableCommissions.data || [];
            return config;
        }
        set data(config) {
            this.tableCommissions.data = config.commissions || [];
            this.toggleVisible();
        }
        get onCustomCommissionsChanged() {
            return this._onCustomCommissionsChanged;
        }
        set onCustomCommissionsChanged(value) {
            this._onCustomCommissionsChanged = value;
        }
        getSupportedChainIds() {
            return (0, index_16.getSupportedNetworks)().map(v => ({ chainId: v.chainId }));
        }
        onModalAddCommissionClosed() {
            this.networkPicker.clearNetwork();
            this.inputWalletAddress.value = '';
            this.lbErrMsg.caption = '';
        }
        onAddCommissionClicked() {
            this.modalAddCommission.visible = true;
        }
        async onConfirmCommissionClicked() {
            var _a;
            const embedderFee = (0, index_16.getEmbedderCommissionFee)();
            this.commissionInfoList.push({
                chainId: (_a = this.networkPicker.selectedNetwork) === null || _a === void 0 ? void 0 : _a.chainId,
                walletAddress: this.inputWalletAddress.value,
                share: embedderFee
            });
            this.tableCommissions.data = this.commissionInfoList;
            this.toggleVisible();
            this.modalAddCommission.visible = false;
            if (this._onCustomCommissionsChanged) {
                await this._onCustomCommissionsChanged({
                    commissions: this.commissionInfoList
                });
            }
        }
        validateModalFields() {
            if (!this.networkPicker.selectedNetwork) {
                this.lbErrMsg.caption = 'Please select network';
            }
            else if (this.commissionInfoList.find(v => v.chainId == this.networkPicker.selectedNetwork.chainId)) {
                this.lbErrMsg.caption = 'This network already exists';
            }
            else if (!this.inputWalletAddress.value) {
                this.lbErrMsg.caption = 'Please enter wallet address';
            }
            else if (!(0, index_17.isWalletAddress)(this.inputWalletAddress.value)) {
                this.lbErrMsg.caption = 'Please enter valid wallet address';
            }
            else {
                this.lbErrMsg.caption = '';
            }
            if (this.lbErrMsg.caption) {
                this.btnConfirm.enabled = false;
                return false;
            }
            else {
                this.btnConfirm.enabled = true;
                return true;
            }
        }
        onNetworkSelected(network) {
            this.validateModalFields();
        }
        onInputWalletAddressChanged() {
            this.validateModalFields();
        }
        toggleVisible() {
            var _a, _b;
            const hasData = !!((_b = (_a = this.tableCommissions) === null || _a === void 0 ? void 0 : _a.data) === null || _b === void 0 ? void 0 : _b.length);
            this.tableCommissions.visible = hasData;
            this.pnlEmptyWallet.visible = !hasData;
            this.btnAddWallet.visible = hasData;
        }
        render() {
            return (this.$render("i-vstack", { gap: '0.5rem', padding: { top: '1rem', bottom: '1rem' }, class: index_css_2.customStyle },
                this.$render("i-vstack", { gap: "5px" },
                    this.$render("i-hstack", { horizontalAlignment: "space-between", verticalAlignment: "center", gap: "4px" },
                        this.$render("i-hstack", { gap: "4px" },
                            this.$render("i-label", { caption: "Commission Fee: ", opacity: 0.6, font: { size: '1rem' } }),
                            this.$render("i-label", { id: "lbCommissionShare", font: { size: '1rem' } }),
                            this.$render("i-icon", { name: "question-circle", fill: Theme.background.modal, width: 20, height: 20, tooltip: { content: CommissionFeeTooltipText } })),
                        this.$render("i-button", { id: "btnAddWallet", caption: "Add Wallet", border: { radius: '58px' }, padding: { top: '0.3rem', bottom: '0.3rem', left: '1rem', right: '1rem' }, background: { color: Theme.colors.primary.main }, font: { color: Theme.colors.primary.contrastText, size: '0.75rem', weight: 400 }, visible: false, onClick: this.onAddCommissionClicked.bind(this) })),
                    this.$render("i-vstack", { id: "pnlEmptyWallet", border: { radius: '8px' }, background: { color: Theme.background.modal }, padding: { top: '1.875rem', bottom: '1.875rem', left: '1.563rem', right: '1.563rem' }, gap: "1.25rem", width: "100%", class: "text-center" },
                        this.$render("i-label", { caption: "To receive commission fee please add your wallet address", font: { size: '1rem' } }),
                        this.$render("i-panel", null,
                            this.$render("i-button", { caption: "Add Wallet", border: { radius: '58px' }, padding: { top: '0.75rem', bottom: '0.75rem', left: '2.5rem', right: '2.5rem' }, background: { color: Theme.colors.primary.main }, font: { color: Theme.colors.primary.contrastText, size: '0.875rem', weight: 400 }, onClick: this.onAddCommissionClicked.bind(this) })))),
                this.$render("i-table", { id: 'tableCommissions', visible: false, data: this.commissionInfoList, columns: this.commissionsTableColumns, class: index_css_2.tableStyle }),
                this.$render("i-modal", { id: 'modalAddCommission', maxWidth: '600px', closeIcon: { name: 'times-circle' }, onClose: this.onModalAddCommissionClosed },
                    this.$render("i-grid-layout", { width: '100%', verticalAlignment: 'center', gap: { row: '1rem' }, padding: { top: '1rem', bottom: '1rem', left: '2rem', right: '2rem' }, templateColumns: ['1fr', '3fr'], templateRows: ['auto', 'auto', 'auto', 'auto'], templateAreas: [
                            ['title', 'title'],
                            ['lbNetwork', 'network'],
                            ["lbWalletAddress", "walletAddress"],
                            ["lbErrMsg", "errMsg"],
                            ['btnConfirm', 'btnConfirm']
                        ] },
                        this.$render("i-hstack", { width: '100%', horizontalAlignment: 'center', grid: { area: 'title' }, margin: { bottom: '1.5rem' } },
                            this.$render("i-label", { caption: "Add Wallet", font: { size: '1.5rem' } })),
                        this.$render("i-label", { caption: "Network", grid: { area: 'lbNetwork' }, font: { size: '1rem' } }),
                        this.$render("i-scom-network-picker", { id: 'networkPicker', grid: { area: 'network' }, display: "block", type: 'combobox', networks: this.getSupportedChainIds(), background: { color: Theme.combobox.background }, border: { radius: 8, width: '1px', style: 'solid', color: Theme.input.background }, onCustomNetworkSelected: this.onNetworkSelected, class: "nft-network-select" }),
                        this.$render("i-label", { caption: "Wallet Address", grid: { area: 'lbWalletAddress' }, font: { size: '1rem' } }),
                        this.$render("i-input", { id: 'inputWalletAddress', grid: { area: 'walletAddress' }, width: '100%', height: 45, border: { radius: 8, width: '1px', style: 'solid', color: Theme.divider }, onChanged: this.onInputWalletAddressChanged }),
                        this.$render("i-label", { id: 'lbErrMsg', font: { color: '#ed5748' }, grid: { area: 'errMsg' } }),
                        this.$render("i-hstack", { width: '100%', horizontalAlignment: 'center', grid: { area: 'btnConfirm' }, margin: { top: '1.25rem' } },
                            this.$render("i-button", { id: "btnConfirm", enabled: false, caption: "Add Wallet", border: { radius: '58px' }, padding: { top: '0.75rem', bottom: '0.75rem', left: '2.5rem', right: '2.5rem' }, background: { color: Theme.colors.primary.main }, font: { color: Theme.colors.primary.contrastText, size: '0.875rem', weight: 400 }, onClick: this.onConfirmCommissionClicked.bind(this) }))))));
        }
    };
    Config = __decorate([
        components_15.customModule,
        (0, components_15.customElements)("i-scom-swap-config")
    ], Config);
    exports.default = Config;
});
define("@scom/scom-swap/data.json.ts", ["require", "exports"], function (require, exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    ///<amd-module name='@scom/scom-swap/data.json.ts'/> 
    const InfuraId = "adc596bf88b648e2a8902bc9093930c5";
    exports.default = {
        "infuraId": InfuraId,
        "networks": [
            {
                "chainId": 97,
                "isMainChain": true,
                "isCrossChainSupported": true,
                "explorerName": "BSCScan",
                "explorerTxUrl": "https://testnet.bscscan.com/tx/",
                "explorerAddressUrl": "https://testnet.bscscan.com/address/",
                "isTestnet": true
            },
            {
                "chainId": 43113,
                "shortName": "AVAX Testnet",
                "isCrossChainSupported": true,
                "explorerName": "SnowTrace",
                "explorerTxUrl": "https://testnet.snowtrace.io/tx/",
                "explorerAddressUrl": "https://testnet.snowtrace.io/address/",
                "isTestnet": true
            }
        ],
        "proxyAddresses": {
            "97": "0x9602cB9A782babc72b1b6C96E050273F631a6870",
            "43113": "0x7f1EAB0db83c02263539E3bFf99b638E61916B96"
        },
        "ipfsGatewayUrl": "https://ipfs.scom.dev/ipfs/",
        "embedderCommissionFee": "0.01",
        "defaultBuilderData": {
            "providers": [
                {
                    "caption": "OpenSwap",
                    "image": "ipfs://bafkreidoi5pywhyo4hqdltlosvrvefgqj4nuclmjl325exzmjgnyl2cc4y",
                    "key": "OpenSwap",
                    "dexId": 1,
                    "chainId": 97
                },
                {
                    "caption": "OpenSwap",
                    "image": "ipfs://bafkreidoi5pywhyo4hqdltlosvrvefgqj4nuclmjl325exzmjgnyl2cc4y",
                    "key": "OpenSwap",
                    "dexId": 1,
                    "chainId": 43113
                }
            ],
            "category": "fixed-pair",
            "tokens": [
                {
                    "name": "USDT",
                    "address": "0x29386B60e0A9A1a30e1488ADA47256577ca2C385",
                    "symbol": "USDT",
                    "decimals": 6,
                    "chainId": 97
                },
                {
                    "name": "OpenSwap",
                    "address": "0x45eee762aaeA4e5ce317471BDa8782724972Ee19",
                    "symbol": "OSWAP",
                    "decimals": 18,
                    "chainId": 97
                },
                {
                    "name": "Tether USD",
                    "address": "0xb9C31Ea1D475c25E58a1bE1a46221db55E5A7C6e",
                    "symbol": "USDT.e",
                    "decimals": 6,
                    "chainId": 43113
                },
                {
                    "name": "OpenSwap",
                    "address": "0x78d9D80E67bC80A11efbf84B7c8A65Da51a8EF3C",
                    "symbol": "OSWAP",
                    "decimals": 18,
                    "chainId": 43113
                }
            ],
            "defaultChainId": 43113,
            "networks": [
                {
                    "chainId": 43113
                },
                {
                    "chainId": 97
                }
            ],
            "wallets": [
                {
                    "name": "metamask"
                }
            ],
            "showHeader": true,
            "showFooter": true
        }
    };
});
define("@scom/scom-swap", ["require", "exports", "@ijstech/components", "@ijstech/eth-wallet", "@scom/scom-swap/store/index.ts", "@scom/scom-token-list", "@scom/scom-swap/swap-utils/index.ts", "@scom/scom-swap/global/index.ts", "@scom/scom-swap/price-info/index.tsx", "@scom/scom-swap/result/index.tsx", "@scom/scom-swap/expert-mode-settings/index.tsx", "@scom/scom-swap/config/index.tsx", "@scom/scom-swap/data.json.ts", "@scom/scom-dex-list", "@scom/scom-swap/index.css.ts"], function (require, exports, components_16, eth_wallet_10, index_18, scom_token_list_7, index_19, index_20, index_21, index_22, index_23, index_24, data_json_1, scom_dex_list_2) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    const Theme = components_16.Styles.Theme.ThemeVars;
    const currentTheme = components_16.Styles.Theme.currentTheme;
    const priceImpactTooHighMsg = 'Price Impact Too High. If you want to bypass this check, please turn on Expert Mode';
    const defaultInput = '1';
    let ScomSwap = class ScomSwap extends components_16.Module {
        static async create(options, parent) {
            let self = new this(parent, options);
            await self.ready();
            return self;
        }
        get category() {
            return this._data.category;
        }
        set category(value) {
            this._data.category = value;
        }
        get providers() {
            return this._data.providers;
        }
        set providers(value) {
            this._data.providers = value;
        }
        get commissions() {
            var _a;
            return (_a = this._data.commissions) !== null && _a !== void 0 ? _a : [];
        }
        set commissions(value) {
            this._data.commissions = value;
        }
        get defaultChainId() {
            return this._data.defaultChainId;
        }
        set defaultChainId(value) {
            this._data.defaultChainId = value;
        }
        get wallets() {
            var _a;
            return (_a = this._data.wallets) !== null && _a !== void 0 ? _a : [];
        }
        set wallets(value) {
            this._data.wallets = value;
        }
        get networks() {
            var _a;
            return (_a = this._data.networks) !== null && _a !== void 0 ? _a : [];
        }
        set networks(value) {
            this._data.networks = value;
        }
        get showHeader() {
            var _a;
            return (_a = this._data.showHeader) !== null && _a !== void 0 ? _a : true;
        }
        set showHeader(value) {
            this._data.showHeader = value;
        }
        set width(value) {
            this.resizeLayout();
        }
        get hasData() {
            const { providers, defaultChainId, networks, wallets } = this._data;
            return !!((providers === null || providers === void 0 ? void 0 : providers.length) || (networks === null || networks === void 0 ? void 0 : networks.length) || (wallets === null || wallets === void 0 ? void 0 : wallets.length) || !isNaN(Number(defaultChainId)));
        }
        getActions() {
            const propertiesSchema = {
                type: "object",
                properties: {
                    category: {
                        type: "string",
                        required: true,
                        enum: [
                            "fixed-pair",
                            "aggregator"
                        ]
                    },
                    tokens: {
                        type: "array",
                        required: true,
                        items: {
                            type: "object",
                            properties: {
                                chainId: {
                                    type: "number",
                                    enum: [1, 56, 137, 250, 97, 80001, 43113, 43114],
                                    required: true
                                },
                                address: {
                                    type: "string",
                                    required: true
                                }
                            }
                        }
                    },
                    providers: {
                        type: "array",
                        required: true,
                        items: {
                            type: "object",
                            properties: {
                                caption: {
                                    type: "string",
                                    required: true
                                },
                                image: {
                                    type: "string",
                                    required: true
                                },
                                key: {
                                    type: "string",
                                    required: true
                                },
                                dexId: {
                                    type: "number"
                                },
                                chainId: {
                                    type: "number",
                                    enum: [1, 56, 137, 250, 97, 80001, 43113, 43114],
                                    required: true
                                }
                            }
                        }
                    }
                }
            };
            const themeSchema = {
                type: 'object',
                properties: {
                    "dark": {
                        type: 'object',
                        properties: {
                            backgroundColor: {
                                type: 'string',
                                format: 'color'
                            },
                            fontColor: {
                                type: 'string',
                                format: 'color'
                            },
                            inputBackgroundColor: {
                                type: 'string',
                                format: 'color'
                            },
                            inputFontColor: {
                                type: 'string',
                                format: 'color'
                            }
                        }
                    },
                    "light": {
                        type: 'object',
                        properties: {
                            backgroundColor: {
                                type: 'string',
                                format: 'color'
                            },
                            fontColor: {
                                type: 'string',
                                format: 'color'
                            },
                            inputBackgroundColor: {
                                type: 'string',
                                format: 'color'
                            },
                            inputFontColor: {
                                type: 'string',
                                format: 'color'
                            }
                        }
                    }
                }
            };
            return this._getActions(propertiesSchema, themeSchema);
        }
        _getActions(propertiesSchema, themeSchema) {
            let self = this;
            const actions = [
                {
                    name: 'Commissions',
                    icon: 'dollar-sign',
                    command: (builder, userInputData) => {
                        let _oldData = {
                            category: 'fixed-pair',
                            providers: [],
                            defaultChainId: 0,
                            wallets: [],
                            networks: []
                        };
                        return {
                            execute: async () => {
                                _oldData = Object.assign({}, this._data);
                                if (userInputData.commissions)
                                    this._data.commissions = userInputData.commissions;
                                this.configDApp.data = this._data;
                                this.refreshUI();
                                if (builder === null || builder === void 0 ? void 0 : builder.setData)
                                    builder.setData(this._data);
                            },
                            undo: () => {
                                this._data = Object.assign({}, _oldData);
                                this.configDApp.data = this._data;
                                this.refreshUI();
                                if (builder === null || builder === void 0 ? void 0 : builder.setData)
                                    builder.setData(this._data);
                            },
                            redo: () => { }
                        };
                    },
                    customUI: {
                        render: (data, onConfirm) => {
                            const vstack = new components_16.VStack();
                            const config = new index_24.default(null, {
                                commissions: self._data.commissions
                            });
                            const button = new components_16.Button(null, {
                                caption: 'Confirm',
                            });
                            vstack.append(config);
                            vstack.append(button);
                            button.onClick = async () => {
                                const commissions = config.data.commissions;
                                if (onConfirm)
                                    onConfirm(true, { commissions });
                            };
                            return vstack;
                        }
                    }
                },
                {
                    name: 'Settings',
                    icon: 'cog',
                    command: (builder, userInputData) => {
                        let _oldData = {
                            category: 'fixed-pair',
                            providers: [],
                            defaultChainId: 0,
                            wallets: [],
                            networks: []
                        };
                        return {
                            execute: async () => {
                                _oldData = Object.assign({}, this._data);
                                this._data.category = userInputData.category;
                                this._data.providers = userInputData.providers;
                                this._data.tokens = [];
                                if (userInputData.tokens) {
                                    for (let inputToken of userInputData.tokens) {
                                        if (!inputToken.address) {
                                            const nativeToken = scom_token_list_7.ChainNativeTokenByChainId[inputToken.chainId];
                                            if (nativeToken)
                                                this._data.tokens.push(Object.assign(Object.assign({}, nativeToken), { chainId: inputToken.chainId }));
                                        }
                                        else {
                                            const tokens = scom_token_list_7.DefaultERC20Tokens[inputToken.chainId];
                                            const token = tokens.find(v => v.address === inputToken.address);
                                            if (token)
                                                this._data.tokens.push(Object.assign(Object.assign({}, token), { chainId: inputToken.chainId }));
                                        }
                                    }
                                }
                                this.configDApp.data = this._data;
                                this.refreshUI();
                                if (builder === null || builder === void 0 ? void 0 : builder.setData)
                                    builder.setData(this._data);
                            },
                            undo: () => {
                                this._data = Object.assign({}, _oldData);
                                this.configDApp.data = this._data;
                                this.refreshUI();
                                if (builder === null || builder === void 0 ? void 0 : builder.setData)
                                    builder.setData(this._data);
                            },
                            redo: () => { }
                        };
                    },
                    userInputDataSchema: propertiesSchema,
                    userInputUISchema: {
                        "type": "VerticalLayout",
                        "elements": [
                            {
                                "type": "HorizontalLayout",
                                "elements": [
                                    {
                                        "type": "Control",
                                        "scope": "#/properties/category"
                                    }
                                ]
                            },
                            {
                                "type": "HorizontalLayout",
                                "elements": [
                                    {
                                        "type": "Categorization",
                                        "elements": [
                                            {
                                                "type": "Category",
                                                "label": "Providers",
                                                "elements": [
                                                    {
                                                        "type": "Control",
                                                        "scope": "#/properties/providers",
                                                        "options": {
                                                            "detail": {
                                                                "type": "VerticalLayout"
                                                            }
                                                        }
                                                    }
                                                ]
                                            },
                                            {
                                                "type": "Category",
                                                "label": "Tokens",
                                                "elements": [
                                                    {
                                                        "type": "Control",
                                                        "scope": "#/properties/tokens",
                                                        "options": {
                                                            "detail": {
                                                                "type": "VerticalLayout"
                                                            }
                                                        }
                                                    }
                                                ]
                                            }
                                        ]
                                    }
                                ]
                            }
                        ]
                    }
                },
                {
                    name: 'Theme Settings',
                    icon: 'palette',
                    command: (builder, userInputData) => {
                        let oldTag = {};
                        return {
                            execute: async () => {
                                if (!userInputData)
                                    return;
                                oldTag = JSON.parse(JSON.stringify(this.tag));
                                if (builder)
                                    builder.setTag(userInputData);
                                else
                                    this.setTag(userInputData);
                                if (this.dappContainer)
                                    this.dappContainer.setTag(userInputData);
                            },
                            undo: () => {
                                if (!userInputData)
                                    return;
                                this.tag = JSON.parse(JSON.stringify(oldTag));
                                if (builder)
                                    builder.setTag(this.tag);
                                else
                                    this.setTag(this.tag);
                                if (this.dappContainer)
                                    this.dappContainer.setTag(this.tag);
                            },
                            redo: () => { }
                        };
                    },
                    userInputDataSchema: themeSchema
                }
            ];
            return actions;
        }
        getConfigurators() {
            let self = this;
            return [
                {
                    name: 'Builder Configurator',
                    target: 'Builders',
                    getActions: this.getActions.bind(this),
                    getData: this.getData.bind(this),
                    setData: async (value) => {
                        const defaultData = data_json_1.default.defaultBuilderData;
                        this._data = Object.assign(Object.assign({}, defaultData), value);
                        this.configDApp.data = this._data;
                        this.updateContractAddress();
                        await this.refreshUI();
                        if (this.mdWallet) {
                            this.mdWallet.networks = this._data.networks;
                            this.mdWallet.wallets = this._data.wallets;
                        }
                    },
                    getTag: this.getTag.bind(this),
                    setTag: this.setTag.bind(this)
                },
                {
                    name: 'Embedder Configurator',
                    target: 'Embedders',
                    elementName: 'i-scom-swap-config',
                    getLinkParams: () => {
                        const commissions = this._data.commissions || [];
                        return {
                            data: window.btoa(JSON.stringify(commissions))
                        };
                    },
                    setLinkParams: async (params) => {
                        if (params.data) {
                            const decodedString = window.atob(params.data);
                            const commissions = JSON.parse(decodedString);
                            let resultingData = Object.assign(Object.assign({}, self._data), { commissions });
                            await this.setData(resultingData);
                        }
                    },
                    bindOnChanged: (element, callback) => {
                        element.onCustomCommissionsChanged = async (data) => {
                            const commissions = data.commissions;
                            if (commissions) {
                                this.supportedChainIds = commissions.map(v => v.chainId).filter((v, i, a) => a.indexOf(v) === i);
                            }
                            let resultingData = Object.assign(Object.assign({}, self._data), data);
                            await this.setData(resultingData);
                            await callback(data);
                        };
                    },
                    getData: this.getData.bind(this),
                    setData: this.setData.bind(this),
                    getTag: this.getTag.bind(this),
                    setTag: this.setTag.bind(this)
                }
            ];
        }
        async getData() {
            return this._data;
        }
        async setData(value) {
            this._data = value;
            this.configDApp.data = value;
            this.updateContractAddress();
            await this.refreshUI();
            if (this.mdWallet) {
                this.mdWallet.networks = value.networks;
                this.mdWallet.wallets = value.wallets;
            }
        }
        async getTag() {
            return this.tag;
        }
        updateTag(type, value) {
            var _a;
            this.tag[type] = (_a = this.tag[type]) !== null && _a !== void 0 ? _a : {};
            for (let prop in value) {
                if (value.hasOwnProperty(prop))
                    this.tag[type][prop] = value[prop];
            }
        }
        async setTag(value) {
            const newValue = value || {};
            for (let prop in newValue) {
                if (newValue.hasOwnProperty(prop)) {
                    if (prop === 'light' || prop === 'dark')
                        this.updateTag(prop, newValue[prop]);
                    else
                        this.tag[prop] = newValue[prop];
                }
            }
            if (this.dappContainer)
                this.dappContainer.setTag(this.tag);
            this.updateTheme();
            this.resizeLayout();
        }
        updateStyle(name, value) {
            value ?
                this.style.setProperty(name, value) :
                this.style.removeProperty(name);
        }
        updateTheme() {
            var _a, _b, _c, _d, _e;
            const themeVar = ((_a = this.dappContainer) === null || _a === void 0 ? void 0 : _a.theme) || 'light';
            this.updateStyle('--text-primary', (_b = this.tag[themeVar]) === null || _b === void 0 ? void 0 : _b.fontColor);
            this.updateStyle('--background-main', (_c = this.tag[themeVar]) === null || _c === void 0 ? void 0 : _c.backgroundColor);
            this.updateStyle('--input-font_color', (_d = this.tag[themeVar]) === null || _d === void 0 ? void 0 : _d.inputFontColor);
            this.updateStyle('--input-background', (_e = this.tag[themeVar]) === null || _e === void 0 ? void 0 : _e.inputBackgroundColor);
        }
        setProviders() {
            var _a;
            const providers = ((_a = this.originalData) === null || _a === void 0 ? void 0 : _a.providers) || [];
            if (this.isFixedPair) {
                (0, index_18.setProviderList)([providers[0]]);
            }
            else {
                (0, index_18.setProviderList)(providers);
            }
        }
        updateContractAddress() {
            if (this.approvalModelAction) {
                if ((0, index_19.getCurrentCommissions)(this.commissions).length) {
                    this.contractAddress = (0, index_18.getProxyAddress)();
                }
                else {
                    this.contractAddress = '';
                }
                this.setApprovalSpenderAddress();
            }
        }
        get isFixedPair() {
            var _a;
            return ((_a = this._data) === null || _a === void 0 ? void 0 : _a.category) === 'fixed-pair';
        }
        get originalData() {
            if (!this._data)
                return undefined;
            const { category, providers } = this._data;
            if (!providers.length)
                return undefined;
            let _providers = [];
            if (this.isFixedPair) {
                const { key, caption, image, dexId } = providers[0];
                let defaultProvider = {
                    caption,
                    image,
                    key,
                    dexId
                };
                _providers.push(defaultProvider);
            }
            else {
                let providersByKeys = {};
                providers.forEach(v => {
                    if (!providersByKeys[v.key]) {
                        providersByKeys[v.key] = [];
                    }
                    providersByKeys[v.key].push(v);
                });
                Object.keys(providersByKeys).forEach(k => {
                    const arr = providersByKeys[k];
                    const { key, caption, image, dexId } = arr[0];
                    let defaultProvider = {
                        caption,
                        image,
                        key,
                        dexId
                    };
                    _providers.push(defaultProvider);
                });
            }
            return { category, providers: _providers };
        }
        async refreshUI() {
            const dexList = (0, scom_dex_list_2.default)();
            (0, index_18.setDexInfoList)(dexList);
            this.setProviders();
            await this.initData();
            await this.onSetupPage((0, index_18.isWalletConnected)());
        }
        constructor(parent, options) {
            super(parent, options);
            this._data = {
                category: 'fixed-pair',
                providers: [],
                tokens: [],
                defaultChainId: 0,
                wallets: [],
                networks: []
            };
            this.tag = {};
            this.defaultEdit = true;
            this.isInited = false;
            this.oldSupportedChainList = [];
            this.supportedChainList = [];
            this.onWalletConnect = async (connected) => {
                var _a, _b;
                if (connected && (this.currentChainId == null || this.currentChainId == undefined)) {
                    this.onChainChange();
                }
                else {
                    if ((_b = (_a = this.originalData) === null || _a === void 0 ? void 0 : _a.providers) === null || _b === void 0 ? void 0 : _b.length)
                        await this.onSetupPage(connected);
                }
            };
            this.onWalletDisconnect = async (connected) => {
                if (!connected) {
                    //await this.handleAddRoute();
                    //await this.updateBalance();
                    await this.onSetupPage(connected);
                }
            };
            this.onChainChange = async () => {
                var _a, _b;
                this.currentChainId = (0, index_18.getChainId)();
                if (this.currentChainId != null && this.currentChainId != undefined)
                    this.swapBtn.visible = true;
                // this.availableMarkets = getAvailableMarkets() || [];
                this.updateContractAddress();
                if ((_b = (_a = this.originalData) === null || _a === void 0 ? void 0 : _a.providers) === null || _b === void 0 ? void 0 : _b.length)
                    await this.onSetupPage(true);
                this.setSwapButtonText();
            };
            this.redirectToken = () => {
                var _a, _b;
                let queryRouter = {
                    chainId: this.currentChainId,
                    fromToken: ((_a = this.fromToken) === null || _a === void 0 ? void 0 : _a.symbol) || this.fromTokenSymbol,
                    toToken: ((_b = this.toToken) === null || _b === void 0 ? void 0 : _b.symbol) || this.toTokenSymbol,
                };
                if (this.isFrom) {
                    queryRouter = Object.assign(Object.assign({}, queryRouter), { toAmount: this.toInputValue.toFixed() });
                }
                else {
                    queryRouter = Object.assign(Object.assign({}, queryRouter), { fromAmount: this.fromInputValue.toFixed() });
                }
                this.fromTokenSymbol = queryRouter.fromToken;
                this.toTokenSymbol = queryRouter.toToken;
                this.targetChainId = queryRouter.toChainId;
            };
            this.fixedNumber = (value) => {
                const val = typeof value === 'object' ? value : new eth_wallet_10.BigNumber(value);
                if (val.isNaN())
                    return '0';
                let formatted = '';
                if (val.gte(1)) {
                    formatted = val.toNumber().toLocaleString('en-US', { maximumFractionDigits: 4 });
                }
                else {
                    formatted = val.toNumber().toLocaleString('en-US', { maximumSignificantDigits: 4 });
                }
                return formatted.replace(/,/g, '');
            };
            this.onSetupPage = async (connected, _chainId) => {
                var _a;
                const data = {
                    defaultChainId: this.defaultChainId,
                    wallets: this.wallets,
                    networks: this.networks,
                    showHeader: this.showHeader
                };
                if ((_a = this.dappContainer) === null || _a === void 0 ? void 0 : _a.setData)
                    this.dappContainer.setData(data);
                this.currentChainId = _chainId ? _chainId : (0, index_18.getChainId)();
                scom_token_list_7.tokenStore.updateTokenMapData();
                this.closeNetworkErrModal();
                if (this.isFixedPair) {
                    this.setFixedPairData();
                }
                this.toggleReverseImage.enabled = !this.isFixedPair;
                this.firstTokenSelection.disableSelect = this.isFixedPair;
                this.secondTokenSelection.disableSelect = this.isFixedPair;
                this.setSwapButtonText();
                await this.updateBalance();
                const input = this.receiveCol.children[0];
                if (input) {
                    input.readOnly = false;
                }
                if (!this.isFixedPair) {
                    this.toggleReverseImage.classList.remove('cursor-default');
                }
                if (this.fromInputValue.isGreaterThanOrEqualTo(0)) {
                    this.onUpdateEstimatedPosition(false, true);
                    const input = this.payCol.children[0];
                    if (input) {
                        input.value = this.fixedNumber(this.fromInputValue);
                    }
                }
                else if (this.toInputValue.isGreaterThanOrEqualTo(0)) {
                    this.onUpdateEstimatedPosition(true, true);
                    const input = this.receiveCol.children[0];
                    if (input) {
                        input.value = this.fixedNumber(this.toInputValue);
                    }
                }
                this.firstTokenSelection.tokenDataListProp = (0, index_18.getSupportedTokens)(this._data.tokens || [], this.currentChainId);
                this.setTargetTokenList();
                if (!this.record)
                    this.swapBtn.enabled = false;
                this.onRenderPriceInfo();
                this.redirectToken();
                await this.handleAddRoute();
            };
            this.totalAmount = () => {
                const commissionAmount = (0, index_19.getCommissionAmount)(this.commissions, this.fromInputValue);
                return this.fromInputValue.plus(commissionAmount);
            };
            this.getMinReceivedMaxSold = () => {
                var _a, _b;
                const slippageTolerance = (0, index_18.getSlippageTolerance)();
                if (!slippageTolerance)
                    return null;
                if (this.isFrom) {
                    const poolAmount = new eth_wallet_10.BigNumber((_a = this.record) === null || _a === void 0 ? void 0 : _a.amountIn);
                    if (poolAmount.isZero())
                        return null;
                    const commissionAmount = (0, index_19.getCommissionAmount)(this.commissions, poolAmount);
                    const minReceivedMaxSold = poolAmount.plus(commissionAmount).times(1 + slippageTolerance / 100).toNumber();
                    return minReceivedMaxSold;
                }
                else {
                    const poolAmount = new eth_wallet_10.BigNumber((_b = this.record) === null || _b === void 0 ? void 0 : _b.amountOut);
                    if (poolAmount.isZero())
                        return null;
                    const minReceivedMaxSold = poolAmount.times(1 - slippageTolerance / 100).toNumber();
                    return minReceivedMaxSold;
                }
            };
            this.onUpdateEstimatedPosition = (isFrom, reverseRouting = false) => {
                if (this.isFrom != isFrom) {
                    this.isFrom = isFrom;
                }
            };
            this.isEstimated = (tokenPosition, strict = false) => {
                if (tokenPosition === 'from') {
                    return strict ? this.isFrom && !this.fromInputValue.isZero() : this.isFrom;
                }
                else if (tokenPosition === 'to') {
                    return strict ? !this.isFrom && !this.toInputValue.isZero() : !this.isFrom;
                }
                else {
                    return false;
                }
            };
            this.onSwapConfirming = (key) => {
                this.setMapStatus('swap', key, index_20.ApprovalStatus.APPROVING);
                if (!this.swapBtn.rightIcon.visible)
                    this.swapBtn.rightIcon.visible = true;
            };
            this.onSwapConfirmed = async (data) => {
                const { key } = data;
                this.setMapStatus('swap', key, index_20.ApprovalStatus.TO_BE_APPROVED);
                if (this.swapBtn.rightIcon.visible)
                    this.swapBtn.rightIcon.visible = false;
                await this.handleAddRoute();
            };
            this.onSubmit = async () => {
                var _a, _b, _c;
                try {
                    this.swapModal.visible = false;
                    this.showResultMessage(this.openswapResult, 'warning', `Swapping ${(0, index_20.formatNumber)(this.totalAmount(), 4)} ${(_a = this.fromToken) === null || _a === void 0 ? void 0 : _a.symbol} to ${(0, index_20.formatNumber)(this.toInputValue, 4)} ${(_b = this.toToken) === null || _b === void 0 ? void 0 : _b.symbol}`);
                    const route = this.record.bestRoute ? this.record.bestRoute : [this.fromToken, this.toToken];
                    const swapData = {
                        provider: this.record.provider,
                        queueType: this.record.queueType,
                        routeTokens: this.record.bestRoute,
                        bestSmartRoute: route,
                        pairs: this.record.pairs,
                        fromAmount: this.record.fromAmount,
                        toAmount: this.record.toAmount,
                        isFromEstimated: this.isFrom,
                        providerList: ((_c = this.originalData) === null || _c === void 0 ? void 0 : _c.providers) || [],
                        commissions: this.commissions
                    };
                    const { error } = await (0, index_19.executeSwap)(swapData);
                    if (error) {
                        this.showResultMessage(this.openswapResult, 'error', error);
                    }
                }
                catch (error) {
                    console.error(error);
                }
            };
            this.onApproveRouterMax = () => {
                this.showResultMessage(this.openswapResult, 'warning', 'Approving');
                this.setApprovalSpenderAddress();
                this.approvalModelAction.doApproveAction(this.fromToken, this.totalAmount().toString(), this.record);
            };
            this.onSetMaxBalance = async (value) => {
                var _a, _b, _c, _d;
                if (!((_a = this.fromToken) === null || _a === void 0 ? void 0 : _a.symbol))
                    return;
                this.isFrom = false;
                const address = ((_b = this.fromToken) === null || _b === void 0 ? void 0 : _b.address) || ((_c = this.fromToken) === null || _c === void 0 ? void 0 : _c.symbol);
                let balance = this.getBalance(this.fromToken);
                let inputVal = new eth_wallet_10.BigNumber(balance);
                if (!address) {
                    inputVal = new eth_wallet_10.BigNumber(0);
                }
                else {
                    const commissionAmount = (0, index_19.getCommissionAmount)(this.commissions, new eth_wallet_10.BigNumber(balance));
                    if (commissionAmount.gt(0)) {
                        const totalFee = new eth_wallet_10.BigNumber(balance).plus(commissionAmount).dividedBy(balance);
                        inputVal = inputVal.dividedBy(totalFee);
                    }
                }
                if (value == 0 || value) {
                    inputVal = inputVal.multipliedBy(value).dividedBy(100);
                }
                if (inputVal.eq(this.fromInputValue))
                    return;
                this.fromInputValue = inputVal;
                const input = this.payCol.children[0];
                input.value = (0, index_20.limitDecimals)(this.fromInputValue.toFixed(), ((_d = this.fromToken) === null || _d === void 0 ? void 0 : _d.decimals) || 18);
                this.redirectToken();
                await this.handleAddRoute();
            };
            this.isMaxDisabled = () => {
                var _a, _b;
                const address = ((_a = this.fromToken) === null || _a === void 0 ? void 0 : _a.address) || ((_b = this.fromToken) === null || _b === void 0 ? void 0 : _b.symbol);
                let balance = this.getBalance(this.fromToken);
                return !address || balance <= 0;
            };
            this.setTargetTokenList = (isDisabled) => {
                var _a;
                const srcChainId = ((_a = this.srcChain) === null || _a === void 0 ? void 0 : _a.chainId) || this.currentChainId;
                // if (this.secondTokenSelection.targetChainId != srcChainId) { //Cross chain
                //   this.secondTokenSelection.targetChainId = srcChainId;
                // }
                this.secondTokenSelection.tokenDataListProp = (0, index_18.getSupportedTokens)(this._data.tokens || [], srcChainId);
            };
            this.showModalFees = () => {
                const fees = this.getFeeDetails();
                this.feesInfo.clearInnerHTML();
                fees.forEach((fee) => {
                    var _a;
                    this.feesInfo.appendChild(this.$render("i-hstack", { horizontalAlignment: "space-between", verticalAlignment: "center", margin: { top: 10 }, border: { bottom: { color: Theme.background.main, width: '2px', style: 'solid' } }, padding: { bottom: 16 } },
                        this.$render("i-hstack", { verticalAlignment: "center" },
                            this.$render("i-label", { caption: fee.title, margin: { right: 4 } }),
                            this.$render("i-icon", { name: "question-circle", width: 15, height: 15, fill: Theme.text.primary, tooltip: { content: fee.description }, "data-placement": "right" })),
                        this.$render("i-label", { class: "ml-auto", caption: `${(0, index_20.formatNumber)(fee.value)} ${(_a = this.fromToken) === null || _a === void 0 ? void 0 : _a.symbol}` })));
                });
                this.feesInfo.appendChild(this.$render("i-hstack", { horizontalAlignment: "space-between", verticalAlignment: "center", margin: { top: 16 } },
                    this.$render("i-hstack", { verticalAlignment: "center" },
                        this.$render("i-label", { caption: "Total Transaction Fee" })),
                    this.$render("i-label", { class: "ml-auto", caption: this.getTradeFeeExactAmount() })));
                this.modalFees.visible = true;
            };
            this.closeModalFees = () => {
                this.modalFees.visible = false;
            };
            this.showResultMessage = (result, status, content) => {
                if (!result)
                    return;
                let params = { status };
                if (status === 'success') {
                    params.txtHash = content;
                }
                else {
                    params.content = content;
                }
                result.message = Object.assign({}, params);
                result.showModal();
            };
            (0, index_18.setDataFromConfig)(data_json_1.default);
            this.fromInputValue = new eth_wallet_10.BigNumber(0);
            this.toInputValue = new eth_wallet_10.BigNumber(0);
            this.swapButtonStatusMap = {};
            this.approveButtonStatusMap = {};
            this.$eventBus = components_16.application.EventBus;
            this.registerEvent();
        }
        registerEvent() {
            this.$eventBus.register(this, "isWalletConnected" /* EventId.IsWalletConnected */, this.onWalletConnect);
            this.$eventBus.register(this, "IsWalletDisconnected" /* EventId.IsWalletDisconnected */, this.onWalletDisconnect);
            this.$eventBus.register(this, "chainChanged" /* EventId.chainChanged */, this.onChainChange);
            this.$eventBus.register(this, "SlippageToleranceChanged" /* EventId.SlippageToleranceChanged */, () => { this.priceInfo.Items = this.getPriceInfo(); });
            this.$eventBus.register(this, "ExpertModeChanged" /* EventId.ExpertModeChanged */, () => {
                this.setSwapButtonText();
            });
        }
        // get supportedNetworks() {
        //   let providers: IProvider[] = [];
        //   if (this.originalData?.providers) {
        //     providers = this.isFixedPair ? [this.originalData.providers[0]] : this.originalData.providers;
        //   }
        //   let supportedNetworks = [];
        //   for (const provider of providers) {
        //     supportedNetworks.push(...Object.keys(provider.contractInfo));
        //   }
        //   return uniqWith(supportedNetworks, (cur: any, oth: any) => { return cur == oth });
        // }
        get isApproveButtonShown() {
            const warningMessageText = this.getWarningMessageText();
            return warningMessageText === '' && this.approveButtonStatus !== index_20.ApprovalStatus.NONE;
        }
        get isPriceImpactTooHigh() {
            var _a;
            const warningMessageText = this.getWarningMessageText();
            return ((_a = this.record) === null || _a === void 0 ? void 0 : _a.priceImpact) > 15 && !(0, index_18.isExpertMode)() && warningMessageText === priceImpactTooHighMsg;
        }
        get isInsufficientBalance() {
            if (!this.fromToken || !this.record)
                return false;
            const balance = this.getBalance(this.fromToken);
            return this.maxSold.gt(balance);
        }
        get maxSold() {
            if (!this.fromToken || !this.record)
                return new eth_wallet_10.BigNumber(0);
            const commissionAmount = (0, index_19.getCommissionAmount)(this.commissions, new eth_wallet_10.BigNumber(this.record.fromAmount));
            const amountWithCommission = this.record.fromAmount.plus(commissionAmount);
            if (!this.isFrom)
                return new eth_wallet_10.BigNumber(amountWithCommission);
            return new eth_wallet_10.BigNumber(this.getMinReceivedMaxSold() || amountWithCommission);
        }
        get isSwapping() {
            var _a;
            const key = (_a = this.record) === null || _a === void 0 ? void 0 : _a.key;
            return key && this.swapButtonStatusMap[key] === index_20.ApprovalStatus.APPROVING;
        }
        get approveButtonStatus() {
            var _a;
            const key = (_a = this.record) === null || _a === void 0 ? void 0 : _a.key;
            return this.approveButtonStatusMap[key];
        }
        get isApprovingRouter() {
            return this.approveButtonStatus === index_20.ApprovalStatus.APPROVING;
        }
        get isValidToken() {
            var _a, _b;
            if (((_a = this.fromToken) === null || _a === void 0 ? void 0 : _a.symbol) && ((_b = this.toToken) === null || _b === void 0 ? void 0 : _b.symbol)) {
                return true;
            }
            return false;
        }
        setFixedPairData() {
            var _a, _b, _c;
            let currentChainTokens = this._data.tokens.filter((token) => token.chainId === this.currentChainId);
            if (currentChainTokens.length < 2)
                return;
            const providers = (_a = this.originalData) === null || _a === void 0 ? void 0 : _a.providers;
            if (providers && providers.length) {
                const fromTokenAddress = currentChainTokens[0].address;
                const toTokenAddress = currentChainTokens[1].address;
                const fromToken = fromTokenAddress.toLowerCase().startsWith('0x') ? fromTokenAddress.toLowerCase() : fromTokenAddress;
                const toToken = toTokenAddress.toLowerCase().startsWith('0x') ? toTokenAddress.toLowerCase() : toTokenAddress;
                this.fromToken = scom_token_list_7.tokenStore.tokenMap[fromToken];
                this.toToken = scom_token_list_7.tokenStore.tokenMap[toToken];
                this.fromTokenSymbol = (_b = this.fromToken) === null || _b === void 0 ? void 0 : _b.symbol;
                this.toTokenSymbol = (_c = this.toToken) === null || _c === void 0 ? void 0 : _c.symbol;
                this.fromInputValue = new eth_wallet_10.BigNumber(defaultInput);
                this.onUpdateToken(this.fromToken, true);
                this.onUpdateToken(this.toToken, false);
                this.firstTokenSelection.token = this.fromToken;
                this.secondTokenSelection.token = this.toToken;
                this.toggleReverseImage.classList.add('cursor-default');
            }
        }
        async initTokenSelection() {
            await this.firstTokenSelection.ready();
            await this.secondTokenSelection.ready();
            this.firstTokenSelection.disableSelect = false;
            this.firstTokenSelection.onSelectToken = (token) => this.onSelectToken(token, true);
            this.firstTokenSelection.isBtnMaxShown = false;
            this.firstTokenSelection.isCommonShown = true;
            this.secondTokenSelection.disableSelect = false;
            this.secondTokenSelection.onSelectToken = (token) => this.onSelectToken(token, false);
            this.secondTokenSelection.isBtnMaxShown = false;
            this.secondTokenSelection.isCommonShown = true;
        }
        async initApprovalModelAction() {
            this.approvalModelAction = await (0, index_19.getApprovalModelAction)({
                sender: this,
                payAction: this.onSubmit,
                onToBeApproved: async (token) => {
                    this.swapBtn.enabled = true;
                },
                onToBePaid: async (token) => {
                },
                onApproving: async (token, receipt, data) => {
                    this.setMapStatus('approve', data.key, index_20.ApprovalStatus.APPROVING);
                    this.showResultMessage(this.openswapResult, 'success', receipt);
                    if (this.isApprovingRouter && !this.swapBtn.rightIcon.visible)
                        this.swapBtn.rightIcon.visible = true;
                },
                onApproved: async (token, data) => {
                    this.setMapStatus('approve', data.key, index_20.ApprovalStatus.NONE);
                    if (this.swapBtn.rightIcon.visible)
                        this.swapBtn.rightIcon.visible = false;
                    await this.handleAddRoute();
                },
                onApprovingError: async (token, err) => {
                    this.showResultMessage(this.openswapResult, 'error', err);
                    if (this.swapBtn.rightIcon.visible)
                        this.swapBtn.rightIcon.visible = false;
                },
                onPaying: async (receipt, data) => {
                    this.showResultMessage(this.openswapResult, 'success', receipt);
                    this.onSwapConfirming(data.key);
                },
                onPaid: async (data) => {
                    this.onSwapConfirmed({ key: data.key });
                    await this.updateBalance();
                    components_16.application.EventBus.dispatch("Paid" /* EventId.Paid */, 'onPaid');
                },
                onPayingError: async (err) => {
                    this.showResultMessage(this.openswapResult, 'error', err);
                }
            });
        }
        async onRevertSwap() {
            this.onUpdateEstimatedPosition(!this.isEstimated('from'), true);
            [this.fromToken, this.toToken] = [this.toToken, this.fromToken];
            [this.fromInputValue, this.toInputValue] = [this.toInputValue, this.fromInputValue];
            [this.payBalance.caption, this.receiveBalance.caption] = [this.receiveBalance.caption, this.payBalance.caption];
            [this.fromTokenSymbol, this.toTokenSymbol] = [this.toTokenSymbol, this.fromTokenSymbol];
            this.firstTokenSelection.token = this.fromToken;
            this.secondTokenSelection.token = this.toToken;
            this.payCol.clearInnerHTML();
            this.receiveCol.clearInnerHTML();
            this.payCol.appendChild(this.$render("i-input", { class: "token-input", width: "100%", placeholder: "0.0", inputType: "number", value: this.getInputValue(true), onKeyUp: this.onTokenInputChange.bind(this) }));
            this.receiveCol.appendChild(this.$render("i-input", { class: "token-input", width: "100%", placeholder: "0.0", inputType: "number", value: this.getInputValue(false), onKeyUp: this.onTokenInputChange.bind(this) }));
            this.redirectToken();
            await this.handleAddRoute();
        }
        setupCrossChainPopup() {
            var _a;
            const arrows = this.swapModal.querySelectorAll('i-icon.arrow-down');
            arrows.forEach((arrow) => {
                arrow.classList.remove('arrow-down--chain');
            });
            (_a = this.lbReminderRejected) === null || _a === void 0 ? void 0 : _a.classList.add('hidden');
            this.srcChainFirstPanel.classList.add('hidden');
            this.targetChainFirstPanel.classList.add('hidden');
        }
        handleSwapPopup() {
            var _a, _b, _c, _d;
            if (!this.record)
                return;
            this.setupCrossChainPopup();
            const slippageTolerance = (0, index_18.getSlippageTolerance)();
            this.fromTokenImage.url = scom_token_list_7.assets.tokenPath(this.fromToken, this.currentChainId);
            this.fromTokenLabel.caption = (_b = (_a = this.fromToken) === null || _a === void 0 ? void 0 : _a.symbol) !== null && _b !== void 0 ? _b : '';
            this.fromTokenValue.caption = (0, index_20.formatNumber)(this.totalAmount(), 4);
            this.toTokenImage.url = scom_token_list_7.assets.tokenPath(this.toToken, this.currentChainId);
            this.toTokenLabel.caption = (_d = (_c = this.toToken) === null || _c === void 0 ? void 0 : _c.symbol) !== null && _d !== void 0 ? _d : '';
            this.toTokenValue.caption = (0, index_20.formatNumber)(this.toInputValue, 4);
            const minimumReceived = this.getMinReceivedMaxSold();
            if (minimumReceived || minimumReceived == 0) {
                this.payOrReceiveValue.caption = (0, index_20.formatNumber)(minimumReceived, 4);
            }
            else {
                this.payOrReceiveValue.caption = ' - ';
            }
            this.payOrReceiveToken.caption = this.isFrom ? this.fromTokenLabel.caption : this.toTokenLabel.caption;
            this.lbEstimate.caption = `${this.isFrom ? 'Input' : 'Output'} is estimated. If the price change by more than ${slippageTolerance}%, your transaction will revert`;
            this.lbPayOrReceive.caption = this.isFrom ? 'You will pay at most' : 'You will receive at least';
            this.priceInfo2.Items = this.getPriceInfo();
            this.swapModal.visible = true;
        }
        doSwap() {
            this.approvalModelAction.doPayAction(this.record);
        }
        onUpdateToken(token, isFrom) {
            var _a, _b;
            if (!token)
                return;
            const balance = this.getBalance(token);
            if (isFrom) {
                this.fromToken = token;
                const enabled = !this.isMaxDisabled();
                this.maxButton.enabled = enabled;
                if (this.fromInputValue.gt(0)) {
                    const fromInput = (_a = this.payCol.getElementsByTagName('I-INPUT')) === null || _a === void 0 ? void 0 : _a[0];
                    // const toInput = this.receiveCol.getElementsByTagName('I-INPUT')?.[0] as Input;
                    const limit = (0, index_20.limitDecimals)(this.fromInputValue.toFixed(), token.decimals || 18);
                    if (!this.fromInputValue.eq(limit)) {
                        if (fromInput) {
                            fromInput.value = limit;
                        }
                        this.fromInputValue = new eth_wallet_10.BigNumber(limit);
                    }
                }
                else if (this.fromInputValue.isZero()) {
                    this.onUpdateEstimatedPosition(true);
                }
                this.payBalance.caption = `Balance: ${(0, index_20.formatNumber)(balance, 4)} ${token.symbol}`;
                this.updateTokenInput(true);
            }
            else {
                this.toToken = token;
                if (this.toInputValue.gt(0)) {
                    const toInput = (_b = this.receiveCol.getElementsByTagName('I-INPUT')) === null || _b === void 0 ? void 0 : _b[0];
                    const limit = (0, index_20.limitDecimals)(this.toInputValue.toFixed(), token.decimals || 18);
                    if (!this.toInputValue.eq(limit)) {
                        if (toInput) {
                            toInput.value = limit;
                        }
                        this.toInputValue = new eth_wallet_10.BigNumber(limit);
                    }
                }
                else if (this.toInputValue.isZero()) {
                    this.onUpdateEstimatedPosition(false);
                }
                this.receiveBalance.caption = `Balance: ${(0, index_20.formatNumber)(balance, 4)} ${token.symbol}`;
                this.updateTokenInput(false);
            }
        }
        async onSelectToken(token, isFrom) {
            this.firstTokenSelection.enabled = false;
            this.secondTokenSelection.enabled = false;
            if (token.isNew && (0, index_18.isWalletConnected)()) {
                await scom_token_list_7.tokenStore.updateAllTokenBalances();
                this.allTokenBalancesMap = scom_token_list_7.tokenStore.tokenBalances;
            }
            this.onUpdateToken(token, isFrom);
            this.redirectToken();
            await this.handleAddRoute();
            this.firstTokenSelection.enabled = true;
            this.secondTokenSelection.enabled = true;
        }
        setApprovalSpenderAddress() {
            var _a;
            const item = this.record;
            if (!item)
                return;
            const market = ((_a = (0, index_18.getProviderByKey)(item.provider)) === null || _a === void 0 ? void 0 : _a.key) || '';
            if (this.approvalModelAction) {
                if ((0, index_19.getCurrentCommissions)(this.commissions).length) {
                    this.contractAddress = (0, index_18.getProxyAddress)();
                    (0, index_19.setApprovalModalSpenderAddress)(market, this.contractAddress);
                }
                else {
                    (0, index_19.setApprovalModalSpenderAddress)(market);
                }
            }
        }
        getInputValue(isFrom) {
            const token = isFrom ? this.fromToken : this.toToken;
            const value = isFrom ? this.fromInputValue : this.toInputValue;
            if (!value || value.isNaN())
                return '';
            return (0, index_20.limitDecimals)(value.toFixed(), (token === null || token === void 0 ? void 0 : token.decimals) || 18);
        }
        async updateTokenInput(isFrom, init) {
            const _col = isFrom ? this.payCol : this.receiveCol;
            const label = _col.querySelector('i-label');
            if (init && !label) {
                _col.innerHTML = '';
                const label = await components_16.Label.create();
                label.caption = " - ";
                label.classList.add("text-value");
                label.classList.add("text-right");
                _col.appendChild(label);
            }
            else if (!init && label) {
                _col.removeChild(label);
                const input = await components_16.Input.create();
                input.width = '100%';
                input.placeholder = '0.0';
                input.inputType = 'number';
                input.value = this.getInputValue(isFrom);
                input.onKeyUp = this.onTokenInputChange.bind(this);
                input.classList.add("token-input");
                _col.appendChild(input);
            }
        }
        addToMetamask(event, token) {
            event.stopPropagation();
            return window.ethereum.request({
                method: 'wallet_watchAsset',
                params: {
                    type: 'ERC20',
                    options: {
                        address: token.address,
                        symbol: token.symbol,
                        decimals: token.decimals,
                        image: token.logoURI
                    },
                },
            });
        }
        async onSelectRouteItem(item) {
            if (this.isFrom) {
                if (this.payCol.children) {
                    let balanceValue = item.amountIn;
                    const input = this.payCol.children[0];
                    input.value = this.fixedNumber(balanceValue);
                    this.fromInputValue = typeof balanceValue !== 'object' ? new eth_wallet_10.BigNumber(balanceValue) : balanceValue;
                }
            }
            else {
                if (this.receiveCol.children) {
                    let balanceValue = item.amountOut;
                    const input = this.receiveCol.children[0];
                    input.value = this.fixedNumber(balanceValue);
                    this.toInputValue = typeof balanceValue !== 'object' ? new eth_wallet_10.BigNumber(balanceValue) : balanceValue;
                }
            }
            this.swapBtn.visible = true;
            this.record = item;
            this.setSwapButtonText();
            const enabled = !this.isSwapButtonDisabled();
            this.swapBtn.enabled = enabled;
            const isButtonLoading = this.isButtonLoading();
            if (this.swapBtn.rightIcon.visible != isButtonLoading) {
                this.swapBtn.rightIcon.visible = isButtonLoading;
            }
            this.priceInfo.Items = this.getPriceInfo();
        }
        onTokenInputChange(source) {
            clearTimeout(this.timeout);
            this.timeout = setTimeout(async () => {
                var _a, _b, _c, _d;
                const fromInput = (_a = this.payCol.getElementsByTagName('I-INPUT')) === null || _a === void 0 ? void 0 : _a[0];
                const toInput = (_b = this.receiveCol.getElementsByTagName('I-INPUT')) === null || _b === void 0 ? void 0 : _b[0];
                const isFrom = source.isSameNode(fromInput);
                const amount = source.value;
                if ((0, index_20.isInvalidInput)(amount)) {
                    this.resetValuesByInput();
                    if (fromInput)
                        fromInput.value = '0';
                    if (toInput)
                        toInput.value = '0';
                    return;
                }
                const limit = isFrom ? (_c = this.fromToken) === null || _c === void 0 ? void 0 : _c.decimals : (_d = this.toToken) === null || _d === void 0 ? void 0 : _d.decimals;
                const value = new eth_wallet_10.BigNumber((0, index_20.limitDecimals)(amount, limit || 18));
                if (!value.gt(0)) {
                    this.resetValuesByInput();
                    if (isFrom && toInput) {
                        toInput.value = '0';
                    }
                    else if (!isFrom && fromInput) {
                        fromInput.value = '0';
                    }
                }
                else {
                    let valueChanged = false;
                    const isLastDot = amount.indexOf('.') === amount.length - 1;
                    if (isFrom) {
                        if (!this.fromInputValue.eq(value)) {
                            this.fromInputValue = value;
                            this.onUpdateEstimatedPosition(false, true);
                            valueChanged = true;
                        }
                        if (!isLastDot)
                            fromInput.value = value.toFixed();
                    }
                    else {
                        if (!this.toInputValue.eq(value)) {
                            this.toInputValue = value;
                            this.onUpdateEstimatedPosition(true, true);
                            valueChanged = true;
                        }
                        if (!isLastDot)
                            toInput.value = value.toFixed();
                    }
                    this.redirectToken();
                    if (valueChanged)
                        await this.handleAddRoute();
                }
            }, 1000);
        }
        resetValuesByInput() {
            this.initRoutes();
            this.priceInfo.Items = this.getPriceInfo();
            this.fromInputValue = new eth_wallet_10.BigNumber(0);
            this.toInputValue = new eth_wallet_10.BigNumber(0);
            this.redirectToken();
        }
        initRoutes() {
            this.record = null;
            this.isPriceToggled = false;
            this.swapBtn.visible = false;
        }
        async handleAddRoute() {
            var _a, _b;
            if (!this.fromToken || !this.toToken || !(this.fromInputValue.gt(0) || this.toInputValue.gt(0)))
                return;
            this.initRoutes();
            let listRouting = [];
            const useAPI = this._data.category === 'aggregator';
            this.updateContractAddress();
            listRouting = await (0, index_19.getAllRoutesData)(this.fromToken, this.toToken, this.fromInputValue, this.toInputValue, this.isFrom, useAPI, this.commissions);
            listRouting = listRouting.map((v) => {
                // const config = ProviderConfigMap[v.provider];
                return Object.assign(Object.assign({}, v), { isHybrid: false // config.marketCode == Market.HYBRID,
                 });
            });
            this.swapModalConfirmBtn.caption = 'Confirm Swap';
            this.swapModalConfirmBtn.enabled = true;
            this.record = listRouting[0] || null;
            this.swapButtonStatusMap = {};
            this.approveButtonStatusMap = {};
            this.initRoutes();
            const pricePercent = this.getPricePercent(listRouting, false);
            if (listRouting.length) {
                this.lbBestPrice.visible = true;
                this.pnlReceive.classList.add('bg-box--active');
                this.lbRouting.classList.add('visibility-hidden');
                const option = listRouting[0];
                const approveButtonStatus = option.isApproveButtonShown ? index_20.ApprovalStatus.TO_BE_APPROVED : index_20.ApprovalStatus.NONE;
                this.approveButtonStatusMap[option.key] = approveButtonStatus;
                this.swapButtonStatusMap[option.key] = index_20.ApprovalStatus.TO_BE_APPROVED;
                await this.onSelectRouteItem(option);
            }
            else {
                this.lbBestPrice.visible = false;
                this.pnlReceive.classList.remove('bg-box--active');
                this.lbRouting.classList.remove('visibility-hidden');
                this.priceInfo.Items = this.getPriceInfo();
                if (this.isEstimated('to')) {
                    const input = this.receiveCol.children[0];
                    this.toInputValue = new eth_wallet_10.BigNumber(0);
                    input.value = '-';
                }
                else {
                    const input = this.payCol.children[0];
                    this.fromInputValue = new eth_wallet_10.BigNumber(0);
                    input.value = '-';
                }
            }
            if (this.record) {
                this.setApprovalSpenderAddress();
                const commissionFee = (0, index_18.getEmbedderCommissionFee)();
                const commissionAmount = (0, index_19.getCommissionAmount)(this.commissions, this.record.fromAmount);
                const total = ((_a = this.record) === null || _a === void 0 ? void 0 : _a.fromAmount) ? new eth_wallet_10.BigNumber(this.record.fromAmount).plus(commissionAmount) : new eth_wallet_10.BigNumber(0);
                this.lbYouPayTitle.caption = commissionAmount.gt(0) ? `You Pay (incl. ${new eth_wallet_10.BigNumber(commissionFee).times(100)}% fee)` : `You Pay`;
                this.lbYouPayValue.caption = `${(0, index_20.formatNumber)(total)} ${(_b = this.fromToken) === null || _b === void 0 ? void 0 : _b.symbol}`;
            }
        }
        getPricePercent(routes, isFrom) {
            if (routes && routes.length > 1) {
                const amountStr = isFrom ? 'amountIn' : 'amountOut';
                const firstAmount = new eth_wallet_10.BigNumber(routes[0][amountStr] || 0);
                const secondAmount = new eth_wallet_10.BigNumber(routes[1][amountStr] || 0);
                if (firstAmount.eq(0) || secondAmount.eq(0)) {
                    return 0;
                }
                let percent = new eth_wallet_10.BigNumber(0);
                if (isFrom) {
                    percent = secondAmount.minus(firstAmount).dividedBy(firstAmount);
                }
                else {
                    percent = firstAmount.minus(secondAmount).dividedBy(secondAmount);
                }
                percent = percent.multipliedBy(100);
                if (percent.gte(0.01)) {
                    return `Save ${(0, index_20.formatNumber)(percent.toNumber(), 2)}%`;
                }
            }
            return 0;
        }
        // Price Info
        onTogglePrice(priceInfo) {
            this.isPriceToggled = !this.isPriceToggled;
            priceInfo.Items = this.getPriceInfo();
        }
        getRate() {
            var _a, _b, _c, _d;
            const value = this.isPriceToggled ? (_a = this.record) === null || _a === void 0 ? void 0 : _a.priceSwap : (_b = this.record) === null || _b === void 0 ? void 0 : _b.price;
            let fromSymbol = (_c = this.fromToken) === null || _c === void 0 ? void 0 : _c.symbol;
            let toSymbol = (_d = this.toToken) === null || _d === void 0 ? void 0 : _d.symbol;
            if (value || value == 0) {
                if (this.isPriceToggled) {
                    return `1 ${fromSymbol} ≈ ${(0, index_20.formatNumber)(value)} ${toSymbol}`;
                }
                return `1 ${toSymbol} ≈ ${(0, index_20.formatNumber)(value)} ${fromSymbol}`;
            }
            return '-';
        }
        getPriceImpact() {
            var _a;
            const value = (_a = this.record) === null || _a === void 0 ? void 0 : _a.priceImpact;
            if (value || value == 0) {
                return `${(0, index_20.formatNumber)(value)}%`;
            }
            return '-';
        }
        getMinimumReceived() {
            var _a, _b;
            const value = this.getMinReceivedMaxSold();
            if (value || value == 0) {
                if (this.isFrom) {
                    return `${(0, index_20.formatNumber)(value)} ${(_a = this.fromToken) === null || _a === void 0 ? void 0 : _a.symbol}`;
                }
                return `${(0, index_20.formatNumber)(value)} ${(_b = this.toToken) === null || _b === void 0 ? void 0 : _b.symbol}`;
            }
            return '-';
        }
        getTradeFeeExactAmount() {
            var _a, _b, _c;
            const tradeFee = (_a = this.record) === null || _a === void 0 ? void 0 : _a.fromAmount.times((_b = this.record) === null || _b === void 0 ? void 0 : _b.tradeFee).toNumber();
            if (tradeFee || tradeFee == 0) {
                return `${(0, index_20.formatNumber)(tradeFee)} ${(_c = this.fromToken) === null || _c === void 0 ? void 0 : _c.symbol}`;
            }
            return '-';
        }
        getFeeDetails() {
            if (this.record) {
                return [{
                        title: "Liquidity Provider Fee",
                        description: "This fee is paid to the AMM Liquidity Provider.",
                        value: this.record.tradeFee
                    }];
            }
            else {
                return [];
            }
        }
        getPriceInfo() {
            var _a;
            const rate = this.getRate();
            const priceImpact = this.getPriceImpact();
            const minimumReceived = this.getMinimumReceived();
            const tradeFeeExactAmount = this.getTradeFeeExactAmount();
            const commissionFee = (0, index_18.getEmbedderCommissionFee)();
            const commissionAmount = this.record ? (0, index_19.getCommissionAmount)(this.commissions, new eth_wallet_10.BigNumber(this.record.fromAmount || 0)) : new eth_wallet_10.BigNumber(0);
            const fees = this.getFeeDetails();
            const countFees = fees.length;
            let feeTooltip;
            if (countFees === 1) {
                const fee = fees[0];
                feeTooltip = `${fee.description}`;
            }
            else if (countFees > 1) {
                feeTooltip = fees;
            }
            let info = [
                {
                    title: "Rate",
                    value: this.isValidToken ? rate : '-',
                    isToggleShown: this.record && this.isValidToken,
                },
                {
                    title: "Price Impact",
                    value: this.isValidToken ? priceImpact : '-',
                    isHidden: false,
                },
                {
                    title: this.isFrom ? "Maximum Sold" : "Minimum Received",
                    value: this.isValidToken ? minimumReceived : '-',
                },
                {
                    title: "Transaction Fee",
                    value: this.isValidToken ? tradeFeeExactAmount : '-',
                    tooltip: feeTooltip,
                    onClick: countFees > 1 ? () => this.showModalFees() : null
                },
                {
                    title: "Estimated Time",
                    value: this.isValidToken && this.record ? '30 seconds' : '-',
                    isHidden: true,
                },
                {
                    title: "Commission Fee",
                    value: this.isValidToken ? `${new eth_wallet_10.BigNumber(commissionFee).times(100)}% (${(0, index_20.formatNumber)(commissionAmount)} ${(_a = this.fromToken) === null || _a === void 0 ? void 0 : _a.symbol})` : '-',
                    isHidden: !(0, index_19.getCurrentCommissions)(this.commissions).length
                }
            ];
            return info.filter((f) => !f.isHidden);
        }
        getBalance(token) {
            var _a;
            if (token && this.allTokenBalancesMap) {
                const address = token.address || '';
                let balance = address ? (_a = this.allTokenBalancesMap[address.toLowerCase()]) !== null && _a !== void 0 ? _a : 0 : this.allTokenBalancesMap[token.symbol] || 0;
                return balance;
            }
            return 0;
        }
        async updateBalance() {
            if ((0, index_18.isWalletConnected)() && this.hasData)
                await scom_token_list_7.tokenStore.updateAllTokenBalances();
            this.allTokenBalancesMap = (0, index_18.isWalletConnected)() ? scom_token_list_7.tokenStore.tokenBalances : [];
            if (this.fromToken) {
                const balance = this.getBalance(this.fromToken);
                this.payBalance.caption = `Balance: ${(0, index_20.formatNumber)(balance, 4)} ${this.fromToken.symbol}`;
            }
            if (this.toToken) {
                const balance = this.getBalance(this.toToken);
                this.receiveBalance.caption = `Balance: ${(0, index_20.formatNumber)(balance, 4)} ${this.toToken.symbol}`;
            }
            const enabled = !this.isMaxDisabled();
            this.maxButton.enabled = enabled;
        }
        setSwapButtonText() {
            if (this.swapBtn && this.swapBtn.hasChildNodes()) {
                this.swapBtn.caption = this.getSwapButtonText();
            }
        }
        getSwapButtonText() {
            var _a;
            const isApproveButtonShown = this.isApproveButtonShown;
            if (!(0, index_18.isWalletConnected)()) {
                return "Connect Wallet";
            }
            if (isApproveButtonShown) {
                const status = this.approveButtonStatus;
                switch (status) {
                    case index_20.ApprovalStatus.APPROVING:
                        return "Approving";
                    case index_20.ApprovalStatus.TO_BE_APPROVED:
                        return "Approve";
                }
                return '';
            }
            else {
                if (this.isSwapping) {
                    return "Swapping";
                }
                if (this.isInsufficientBalance) {
                    return `Insufficient ${(_a = this.fromToken) === null || _a === void 0 ? void 0 : _a.symbol} balance`;
                }
                if (this.isPriceImpactTooHigh) {
                    return "Turn on Expert Mode";
                }
                return "Swap";
            }
        }
        getWarningMessageText() {
            var _a, _b, _c;
            const tokens = [(_a = this.fromToken) === null || _a === void 0 ? void 0 : _a.symbol, (_b = this.toToken) === null || _b === void 0 ? void 0 : _b.symbol];
            if (tokens.every(v => v === 'ETH' || v === 'WETH')) {
                return 'Invalid pair';
            }
            if (!this.record) {
                return '';
            }
            if (this.record.key === 'Oracle' && (this.record.fromAmount.isZero() || this.record.toAmount.isZero())) {
                return 'Circuit breaker triggered';
            }
            const balance = this.getBalance(this.fromToken);
            if (this.maxSold.gt(balance)) {
                return `Insufficient ${(_c = this.fromToken) === null || _c === void 0 ? void 0 : _c.symbol} balance`;
            }
            if (this.record.priceImpact > 15 && !(0, index_18.isExpertMode)()) {
                return priceImpactTooHighMsg;
            }
            return '';
        }
        setMapStatus(type, key, status) {
            let mapStatus = {};
            if (type === 'approve') {
                mapStatus = this.approveButtonStatusMap;
                mapStatus[key] = status;
                this.approveButtonStatusMap = Object.assign({}, mapStatus);
            }
            else {
                mapStatus = this.swapButtonStatusMap;
                mapStatus[key] = status;
                this.swapButtonStatusMap = Object.assign({}, mapStatus);
            }
            this.setSwapButtonText();
        }
        isButtonLoading() {
            if (this.isApproveButtonShown) {
                return this.isApprovingRouter;
            }
            return this.isSwapping;
        }
        isSwapButtonDisabled() {
            const warningMessageText = this.getWarningMessageText();
            return ((0, index_18.isWalletConnected)() && (warningMessageText != '' && !this.isPriceImpactTooHigh));
        }
        onClickSwapButton() {
            if (!(0, index_18.isWalletConnected)()) {
                // this.$eventBus.dispatch(EventId.ConnectWallet);
                this.mdWallet.showModal();
                return;
            }
            if (!this.record || this.isSwapButtonDisabled())
                return;
            const isApproveButtonShown = this.isApproveButtonShown;
            if (isApproveButtonShown) {
                this.onApproveRouterMax();
                return;
            }
            if (this.isPriceImpactTooHigh) {
                this.$eventBus.dispatch("ShowExpertModal" /* EventId.ShowExpertModal */);
                return;
            }
            this.handleSwapPopup();
        }
        onRenderPriceInfo() {
            if (!this.priceInfo) {
                this.priceInfo = new index_21.PriceInfo();
                this.priceInfo.width = 'auto';
                this.priceInfo.height = 'auto';
                this.pnlPriceInfo.appendChild(this.priceInfo);
                this.priceInfo.onTogglePrice = this.onTogglePrice.bind(this);
            }
            this.priceInfo.Items = this.getPriceInfo();
            if (!this.priceInfo2) {
                this.priceInfo2 = new index_21.PriceInfo();
                this.priceInfo2.width = 'auto';
                this.priceInfo2.height = 'auto';
                this.priceInfo2.onTogglePrice = this.onTogglePrice.bind(this);
            }
            this.priceInfoContainer.appendChild(this.priceInfo2);
        }
        get isMetaMask() {
            return (0, index_18.getWalletProvider)() === index_18.WalletPlugin.MetaMask;
        }
        initExpertModal() {
            this.expertModal = new index_23.ExpertModeSettings();
            this.swapComponent.appendChild(this.expertModal);
            this.$eventBus.register(this, "ShowExpertModal" /* EventId.ShowExpertModal */, () => {
                this.expertModal.showModal();
            });
        }
        // private showNetworkErrModal() {
        //   this.supportedNetworksElm.clearInnerHTML();
        //   if (!this.supportedNetworks.length) {
        //     this.supportedNetworksElm.appendChild(<i-label caption={`No networks are supported. Please configure the swap!`} font={{ size: '16px' }} />)
        //   } else if (this.supportedChainList.some(v => v.chainId == this.currentChainId)) {
        //     const network = getNetworkInfo(this.currentChainId);
        //     this.supportedNetworksElm.appendChild(<i-label caption={`The ${network.chainName} (${network.chainId}) network has not been configured for the swap!`} font={{ size: '16px' }} />)
        //   } else {
        //     this.supportedNetworksElm.appendChild(<i-label caption={`We only support the following ${this.supportedNetworks.length > 1 ? 'networks' : 'network'}:`} font={{ size: '16px' }} />)
        //     for (const chainId of this.supportedNetworks) {
        //       const network = getNetworkInfo(chainId);
        //       if (network) {
        //         this.supportedNetworksElm.appendChild(
        //           <i-label font={{ bold: true, size: '16px' }} caption={`${network.chainName} (${network.chainId})`} />
        //         )
        //       }
        //     }
        //   }
        //   this.networkErrModal.visible = true;
        // }
        closeNetworkErrModal() {
            this.networkErrModal.visible = false;
        }
        resizeLayout() {
            var _a, _b, _c;
            const tagWidth = Number((_a = this.tag) === null || _a === void 0 ? void 0 : _a.width);
            if ((this.offsetWidth !== 0 && this.offsetWidth < 550) || window.innerWidth < 550 || (!isNaN(tagWidth) && tagWidth !== 0 && tagWidth < 550)) {
                (_b = this.wrapperSwap) === null || _b === void 0 ? void 0 : _b.classList.add('swap-flex--col');
            }
            else {
                (_c = this.wrapperSwap) === null || _c === void 0 ? void 0 : _c.classList.remove('swap-flex--col');
            }
        }
        async initData() {
            if (!this.isInited) {
                await this.initTokenSelection();
                await this.initApprovalModelAction();
                this.isInited = true;
            }
        }
        async init() {
            this.isReadyCallbackQueued = true;
            super.init();
            this.setSwapButtonText();
            this.openswapResult = new index_22.Result();
            this.swapComponent.appendChild(this.openswapResult);
            this.initExpertModal();
            const lazyLoad = this.getAttribute('lazyLoad', true, false);
            if (!lazyLoad) {
                this.currentChainId = (0, index_18.getChainId)();
                const defaultColors = {
                    fontColor: currentTheme.text.primary,
                    backgroundColor: currentTheme.background.main,
                    inputFontColor: currentTheme.input.fontColor,
                    inputBackgroundColor: currentTheme.input.background
                };
                this.setTag({
                    light: Object.assign({}, defaultColors),
                    dark: Object.assign({}, defaultColors)
                });
                const category = this.getAttribute('category', true, "fixed-pair");
                const providers = this.getAttribute('providers', true, []);
                const commissions = this.getAttribute('commissions', true, []);
                const tokens = this.getAttribute('tokens', true, []);
                const defaultChainId = this.getAttribute('defaultChainId', true);
                const networks = this.getAttribute('networks', true);
                const wallets = this.getAttribute('wallets', true);
                const showHeader = this.getAttribute('showHeader', true);
                await this.setData({ category, providers, commissions, tokens, defaultChainId, networks, wallets, showHeader });
            }
            this.isReadyCallbackQueued = false;
            this.executeReadyCallback();
            window.addEventListener('resize', () => {
                setTimeout(() => {
                    this.resizeLayout();
                }, 300);
            });
        }
        render() {
            return (this.$render("i-scom-dapp-container", { id: "dappContainer" },
                this.$render("i-panel", { id: "swapComponent", background: { color: Theme.background.main } },
                    this.$render("i-panel", { class: "pageblock-swap" },
                        this.$render("i-panel", { id: "swapContainer" },
                            this.$render("i-panel", { class: "content-swap" },
                                this.$render("i-hstack", { id: "wrapperSwap", gap: 10 },
                                    this.$render("i-vstack", { gap: 5, minWidth: 230, width: "calc(100% - 25px)" },
                                        this.$render("i-panel", { class: "token-box" },
                                            this.$render("i-vstack", { class: "input--token-container", gap: 8 },
                                                this.$render("i-vstack", { class: "balance-info", width: "100%", gap: 8 },
                                                    this.$render("i-vstack", { width: "100%" },
                                                        this.$render("i-label", { caption: "You Swap", font: { size: '1.125rem' } })),
                                                    this.$render("i-hstack", { gap: 5, horizontalAlignment: "space-between", verticalAlignment: "center", width: "100%" },
                                                        this.$render("i-label", { id: "payBalance", class: "text--grey ml-auto", caption: "Balance: 0" }),
                                                        this.$render("i-button", { id: "maxButton", class: "btn-max", caption: "Max", enabled: false, onClick: () => this.onSetMaxBalance() }))),
                                                this.$render("i-panel", { class: "bg-box", background: { color: Theme.input.background }, width: "100%", margin: { top: 'auto' } },
                                                    this.$render("i-hstack", { class: "input--token-box", verticalAlignment: "center", horizontalAlignment: "space-between", width: "100%" },
                                                        this.$render("i-vstack", null,
                                                            this.$render("i-scom-swap-token-selection", { disableSelect: true, id: "firstTokenSelection" })),
                                                        this.$render("i-vstack", { id: "payCol" },
                                                            this.$render("i-label", { class: "text-value text-right", caption: " - " })))))),
                                        this.$render("i-hstack", { horizontalAlignment: "space-between" },
                                            this.$render("i-label", { id: "lbYouPayTitle", caption: "You Pay", font: { size: '1rem' } }),
                                            this.$render("i-label", { id: "lbYouPayValue", caption: "0", font: { size: '1rem' } }))),
                                    this.$render("i-panel", { class: "toggle-reverse" },
                                        this.$render("i-icon", { id: "toggleReverseImage", position: "relative", width: 32, height: 32, class: "icon-swap rounded-icon custom-ic--swap", name: "arrows-alt-v", onClick: this.onRevertSwap.bind(this) })),
                                    this.$render("i-vstack", { gap: 5, minWidth: 230, width: "calc(100% - 25px)" },
                                        this.$render("i-panel", { class: "token-box", height: "100%" },
                                            this.$render("i-vstack", { class: "input--token-container", height: "100%", gap: 8 },
                                                this.$render("i-vstack", { class: "balance-info", width: "100%", gap: 8 },
                                                    this.$render("i-vstack", { width: "100%" },
                                                        this.$render("i-label", { caption: "You Receive", font: { size: '1.125rem' } })),
                                                    this.$render("i-vstack", { class: "text-right", width: "100%" },
                                                        this.$render("i-label", { id: "receiveBalance", class: "text--grey ml-auto", caption: "Balance: 0" }))),
                                                this.$render("i-panel", { id: "pnlReceive", class: "bg-box", background: { color: Theme.input.background }, width: "100%", margin: { top: 'auto' } },
                                                    this.$render("i-hstack", { class: "input--token-box", verticalAlignment: "center", horizontalAlignment: "space-between", width: "100%" },
                                                        this.$render("i-label", { id: "lbBestPrice", visible: false, caption: "Best Price", class: "best-price" }),
                                                        this.$render("i-vstack", null,
                                                            this.$render("i-scom-swap-token-selection", { disableSelect: true, id: "secondTokenSelection" })),
                                                        this.$render("i-vstack", { id: "receiveCol" },
                                                            this.$render("i-label", { class: "text-value text-right", caption: " - " })))))),
                                        this.$render("i-hstack", { horizontalAlignment: "end" },
                                            this.$render("i-label", { id: "lbRouting", caption: "No routing", opacity: 0.75, font: { size: '1rem' }, class: "visibility-hidden" }))))),
                            this.$render("i-panel", { id: "pnlPriceInfo" }),
                            this.$render("i-vstack", { class: "swap-btn-container", horizontalAlignment: "center", width: "100%" },
                                this.$render("i-button", { id: "swapBtn", class: "btn-swap btn-os", maxWidth: 360, height: 60, visible: false, rightIcon: { spin: true, visible: false, fill: Theme.colors.primary.contrastText }, onClick: this.onClickSwapButton.bind(this) }))),
                        this.$render("i-modal", { id: "swapModal", class: "custom-modal", title: "Confirm Swap", closeIcon: { name: 'times' } },
                            this.$render("i-hstack", { verticalAlignment: 'center', horizontalAlignment: 'start' },
                                this.$render("i-panel", { id: "srcChainFirstPanel", class: "row-chain" },
                                    this.$render("i-image", { id: "srcChainTokenImage", width: "30px", height: "30px", url: "#" }),
                                    this.$render("i-label", { id: "srcChainTokenLabel", class: "token-name", caption: "" }),
                                    this.$render("i-icon", { name: "minus", class: "custom-icon--fill", width: 28, height: 10 })),
                                this.$render("i-panel", { class: "row-chain" },
                                    this.$render("i-image", { id: "fromTokenImage", width: "30px", height: "30px", url: "#" }),
                                    this.$render("i-label", { id: "fromTokenLabel", class: "token-name", caption: "" })),
                                this.$render("i-label", { id: "fromTokenValue", class: "token-value", caption: " - " })),
                            this.$render("i-icon", { name: "arrow-down", class: "arrow-down custom-icon--fill", width: 28, height: 28 }),
                            this.$render("i-hstack", { class: "mb-1", verticalAlignment: 'center', horizontalAlignment: 'start' },
                                this.$render("i-panel", { id: "targetChainFirstPanel", class: "row-chain" },
                                    this.$render("i-image", { id: "targetChainTokenImage", width: "30px", height: "30px", url: "#" }),
                                    this.$render("i-label", { id: "targetChainTokenLabel", class: "token-name", caption: "" }),
                                    this.$render("i-icon", { name: "minus", class: "custom-icon--fill", width: 28, height: 10 })),
                                this.$render("i-panel", { class: "row-chain" },
                                    this.$render("i-image", { id: "toTokenImage", width: "30px", height: "30px", url: "#" }),
                                    this.$render("i-label", { id: "toTokenLabel", class: "token-name", caption: "" })),
                                this.$render("i-label", { id: "toTokenValue", class: "token-value text-primary bold", caption: " - " })),
                            this.$render("i-panel", { class: "mb-1" },
                                this.$render("i-label", { id: "lbEstimate" })),
                            this.$render("i-panel", { class: "mb-1" },
                                this.$render("i-label", { id: "lbPayOrReceive" }),
                                this.$render("i-label", { id: "payOrReceiveValue", class: "text-primary bold", caption: "" }),
                                this.$render("i-label", { id: "payOrReceiveToken", caption: "" })),
                            this.$render("i-panel", { id: "priceInfoContainer", class: "bg-box mt-1 mb-1", background: { color: Theme.background.main }, width: "100%" }),
                            this.$render("i-label", { id: "lbReminderRejected", class: "flex", margin: { top: 8, bottom: 16 } }),
                            this.$render("i-panel", { class: "swap-btn-container", width: "100%" },
                                this.$render("i-button", { id: "swapModalConfirmBtn", class: "btn-swap btn-os", height: "auto", caption: "Confirm Swap", onClick: this.doSwap }))),
                        this.$render("i-modal", { id: "modalFees", class: "bg-modal custom-modal", title: "Transaction Fee Details", closeIcon: { name: 'times' } },
                            this.$render("i-panel", { class: "i-modal_content" },
                                this.$render("i-panel", null,
                                    this.$render("i-vstack", { id: "feesInfo" }),
                                    this.$render("i-hstack", { verticalAlignment: "center", horizontalAlignment: "center", margin: { top: 16, bottom: 8 } },
                                        this.$render("i-button", { caption: "Close", class: "btn-os btn-submit", onClick: () => this.closeModalFees() }))))),
                        this.$render("i-modal", { id: "networkErrModal", class: "bg-modal custom-modal", title: "Supported Networks", closeIcon: { name: 'times' } },
                            this.$render("i-panel", { class: "i-modal_content" },
                                this.$render("i-vstack", { id: "supportedNetworksElm", gap: 10, verticalAlignment: "center" }),
                                this.$render("i-hstack", { verticalAlignment: "center", horizontalAlignment: "center", margin: { top: 16, bottom: 8 } },
                                    this.$render("i-button", { caption: "Close", width: 150, padding: { top: 4, bottom: 4 }, class: "btn-os btn-submit text-center", onClick: () => this.closeNetworkErrModal() }))))),
                    this.$render("i-scom-swap-config", { id: "configDApp", visible: false }),
                    this.$render("i-scom-wallet-modal", { id: "mdWallet", wallets: [] }))));
        }
    };
    ScomSwap = __decorate([
        components_16.customModule,
        (0, components_16.customElements)('i-scom-swap')
    ], ScomSwap);
    exports.default = ScomSwap;
});
